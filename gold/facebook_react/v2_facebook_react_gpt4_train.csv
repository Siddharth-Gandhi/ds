commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
76e569992b259b9e636ee68dcc7719539f4b9bb8,1557817141,"Cleanup profile export/import data types, add export/import test

Strengthened the I/O-boundary type conversion logic.

Fixed type inconsistencies uncovered by removing `any` and
by making explicit type annotations and transformations.

In particular, these were likely malformed when restored from a file:
- `commitDetails`
- `interactions`
- `initialTreeBaseDurations`

The mismatches were Map vs interleaved Array.

","['src/__tests__/profiling-test.js', 'src/__tests__/profilingCharts-test.js', 'src/__tests__/setupTests.js', 'src/__tests__/utils.js', 'src/backend/agent.js', 'src/backend/index.js', 'src/backend/renderer.js', 'src/backend/types.js', 'src/devtools/ProfilingCache.js', 'src/devtools/store.js', 'src/devtools/views/Profiler/Interactions.js', 'src/devtools/views/Profiler/ProfilingImportExportButtons.js', 'src/devtools/views/Profiler/SidebarInteractions.js', 'src/devtools/views/Profiler/types.js', 'src/devtools/views/Profiler/utils.js']","Malformed data types (`commitDetails`, `interactions`, `initialTreeBaseDurations`) upon restoration from a file due to Map vs interleaved Array type inconsistencies."
d919e2c41c71fc7bc4ae037b3a3c60a4600d0a54,1612900575,"Add tests for non-React discrete events flushing in a microtask (#20772)

* Convert some old discrete tests to Hooks

I'm planning to copy paste so why not update them anyway.

* Copy paste discrete tests into another file

These are still using React events. I'll change that next.

* Convert the test to use native events
","['packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js', 'packages/react-dom/src/__tests__/ReactDOMNativeEventHeuristic-test.js']",Discrete events tests are outdated and use React events instead of native events. Conversion and update for these tests is required.
353c30252f67145fa8241b6979d570cb152c2b22,1669996435,"Hold host functions in var (#25741)

Calling any function on `nativeFabricUIManager`, for example
`nativeFabricUIManager.measure`, results in a round trip to the host
platform through jsi layer. It is the same for repeated calls to same
host function. This is unnecessary overload which can be avoided by
retaining host function in a variable.
","['packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactFabricGlobalResponderHandler.js', 'packages/react-native-renderer/src/ReactNativeFiberInspector.js', 'packages/react-native-renderer/src/ReactNativeRenderer.js', 'packages/react-native-renderer/src/__tests__/ReactNativeError-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactNativeEvents-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactNativeMount-test.internal.js', 'packages/react-native-renderer/src/__tests__/createReactNativeComponentClass-test.internal.js']",Repeated calls to the same host function on `nativeFabricUIManager` are causing unnecessary back-and-forth trips through the JSI layer.
77ba1618a528787baaa8e007fadaff93a86fb675,1679364473,"Bugfix: Remove extra render pass when reverting to client render (#26445)

(This was reviewed and approved as part of #26380; I'm extracting it
into its own PR so that it can bisected later if it causes an issue.)

I noticed while working on a PR that when an error happens during
hydration, and we revert to client rendering, React actually does _two_
additional render passes instead of just one. We didn't notice it
earlier because none of our tests happened to assert on how many renders
it took to recover, only on the final output.

It's possible this extra render pass had other consequences that I'm not
aware of, like messing with some assumption in the recoverable errors
logic.

This adds a test to demonstrate the issue. (One problem is that we don't
have much test coverage of this scenario in the first place, which
likely would have caught this earlier.)
","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js']","During hydration, if an error occurs and there is a switch to client rendering, React performs two additional render passes rather than one, potentially impacting the recoverable errors logic and the final output."
f118b7cebf9c15d11c5973bfd40860b5f457df08,1680107275,"[Flight] Gated test for dropped transport of undefined object values (#26478)

## Summary

With https://github.com/facebook/react/pull/26349 we now serialize
`undefined`. However, deserializing it on the client is currently
indistinguishable from the value missing entirely due to how
`JSON.parse` treats `undefined` return value of reviver functions.

This leads to inconsistent behavior of the `Object.hasOwn` or `in`
operator (used for narrowing in TypeScript). In TypeScript-speak, `{
prop: T | undefined}` will arrive as `{ prop?: T }`.

## How did you test this change?

- Added test that is expected to fail. Though ideally the implementation
of the component would not care whether it's used on the client or
server.
",['packages/react-client/src/__tests__/ReactFlight-test.js'],"Deserializing undefined object values on the client is indistinguishable from the value missing entirely due to the way `JSON.parse` interprets `undefined` return values in revivers, leading to inconsistencies in `Object.hasOwn` or `in` operators and TypeScript narrowing."
bd846459d6c96e6caa64c44e0fb42696db839447,1562113785,"[fail] Only warn on unacted effects for strict / non sync modes (#16041)

* only warn on unacted effects for strict / non sync modes

(basically, when `fiber.mode !== 0b0000`)

Warnings on unacted effects may be too noisy, especially for legacy apps. This PR fires the warning only when in a non sync mode (concurrent/batched), or when in strict mode. This should make updating easier.

I also added batched mode tests to the act() suite.

* explicitly check for modes before warning, explicit tests for all modes

","['packages/react-dom/src/__tests__/ReactDOMHooks-test.js', 'packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']","Warnings for unacted effects are non-discriminative, resulting in unnecessary noise, particularly for legacy apps. This especially occurs when the application is in non-sync mode (concurrent/batched), or in strict mode."
9c77ffb444598c32c8f92c8d79e406959a10445b,1524585271,"Dedup conditional in ReactScheduler (#12680)

**what is the change?:**
We had a condition to set either 'performance.now' or 'Date.now' as the
'now' function.

Then later we had another conditional checking again if
'performance.now' was supported, and using it if so, otherwise falling
back to 'Date.now'.

More efficient to just use the 'now' shortcut defined above.

**why make this change?:**
Fewer lines, clearer code.

**test plan:**
Now that we have tests we can run them :)
",['packages/react-scheduler/src/ReactScheduler.js'],"The 'performance.now' or 'Date.now' selection is being checked twice, redundantly, leading to less efficient code."
708fa77a783bbe729cfcebdd513d23eafc455b8b,1599241329,"Decrease expiration time of input updates (#19772)

Changes the expiration time of input updates from 1000ms to 250ms, to
match the corresponding constant in Scheduler.js.

When we made it larger, a product metric in www regressed, suggesting
there's a user interaction that's being starved by a series of
synchronous updates. If that theory is correct, the proper solution is
to fix the starvation. However, this scenario supports the idea that
expiration times are an important safeguard when starvation does happen.

Also note that, in the case of user input specifically, this will soon
no longer be an issue because we plan to make user input synchronous by
default (until you enter `startTransition`, of course.)

If weren't planning to make these updates synchronous soon anyway, I
would probably make this number a configurable parameter.
",['packages/react-reconciler/src/ReactFiberLane.js'],"User interaction appears to be blocked due to the large expiration time of input updates, indicating possible starvation by synchronous updates."
17204056d5ec0a53a74979321c519137d215cf64,1666839209,"[Float] fix coordination of resource identity and hydration (#25569)

there are a few bugs where dom representations from SSR aren't
identified as Resources when they should be.

There are 3 semantics

Resource -> hoist to head, deduping, etc...
hydratable Component -> SSR'd and hydrated in place
non-hydratable Component -> never SSR'd, never hydrated, always inserted
on the client

this last category is small
(non stylesheet) links with onLoad and/or onError
async scripts with onLoad and/or onError

The reason we have this distinction for now is we need every SSR'd async
script to be assumable to be a Resource. we don't currently encode
onLoad on the server and so we couldn't otherwise tell if an async
script is a Resource or is an async script with an onLoad which would
not be a resource. To avoid this ambiguity we never emit the scripts in
SSR and assume they need to be inserted on the client.

We can explore changes to these semantics in the future or possibly
encode some identifier when we want to opt out of resource semantics but
still SSR the link or script.
","['packages/react-dom-bindings/src/client/ReactDOMFloatClient.js', 'packages/react-dom-bindings/src/client/ReactDOMHostConfig.js', 'packages/react-dom-bindings/src/server/ReactDOMFloatServer.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js']","DOM representations from server-side rendering (SSR) are not correctly identified as Resources when appropriate, causing ambiguities between async scripts and Resources."
1c44437355e21f2992344fdef9ab1c1c5a7f8c2b,1647475560,"Fix createRoot container signature (#24110)

The internal Container type represents the types of containers that React
can support in its internals that deal with containers.

This didn't include DocumentFragment which we support specifically for
rendering into shadow roots.

However, not all types makes sense to pass into the createRoot API.

One of those is comment nodes that is deprecated and we don't really fully
support. It really only exists for FB legacy.

For createRoot it doesn't make sense to pass a Document since that will try
to empty the document which removes the HTML tag which doesn't work.
Documents can only be passed to hydrateRoot.

Conversely I'm not sure we actually support hydrating a shadow root properly
so I excluded DocumentFragment from hydrateRoot.
","['packages/react-dom/client.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/client/ReactDOMComponent.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-dom/src/client/ReactDOMRoot.js']","Issues in createRoot API where not all container types are properly supported, including problems with DocumentFragment for rendering into shadow roots, and deprecated comment nodes. Document passing in createRoot leads to critical HTML tag removal."
56a3c18e565959f04e3ef3bc93f70259b5b674c2,1678806893,"[Flight fixture] Remove redundant `use` (#26373)

Now that promises are renderable nodes, we can remove the `use` call
from the root of the Flight fixture.

Uncached promises will likely be accompanied by a warning when they are
rendered outside a transition. But this promise is the result of a
Flight response, so it's cached. And it's also a rendered as part of a
transition. So it's fine. Indeed, this is the canonical way to use this
feature.
",['fixtures/flight/src/index.js'],Redundant `use` call exists at the root of the Flight fixture causing potential warnings when uncached promises are rendered outside a transition.
ce6842d8f528977119b80d969306c8475099f66e,1686430785,"Delete processStringChunk (#26896)

Follow up to #26827.

These can't include binary data and we don't really have any use cases
that really require these to already be strings.

When the stream is encoded inside another protocol - such as HTML we
need a different format that encode binary offsets and binary data.
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-client/src/ReactFlightClientConfigBrowser.js', 'packages/react-client/src/ReactFlightClientConfigNode.js', 'packages/react-client/src/forks/ReactFlightClientConfig.custom.js', 'packages/react-noop-renderer/src/ReactNoopFlightClient.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-server-dom-esm/src/ReactFlightDOMClientNode.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMClientNode.js']","The current implementation does not support inclusion of binary data in processStringChunk and there aren't use-cases requiring these to be strings. Nested protocol scenarios such as embedding within HTML, demand a different format to encode binary offsets and data."
2d4705e7532d32147da8ee61e5760124d068a8a6,1536067611,"Make IE 11 not complain about non-crucial style attribute hydration mismatch (#13534)

IE 11 parses & normalizes the style attribute as opposed to other
browsers. It adds spaces and sorts the properties in some
non-alphabetical order. Handling that would require sorting CSS
properties in the client & server versions or applying
`expectedStyle` to a temporary DOM node to read its `style` attribute
normalized. Since it only affects IE, we're skipping style warnings
in that browser completely in favor of doing all that work.

Fixes #11807
","['packages/react-dom/src/__tests__/ReactServerRenderingHydration.js', 'packages/react-dom/src/client/ReactDOMComponent.js']","IE 11 is throwing warnings due to differences in style attribute hydration, which is affected by its unique parsing and normalization of the style attribute."
d93c8faadac0a1cea4ba2a3c1333e78314a6e61a,1595608290,"Move Persistent Mode Optimization away from firstEffect (#19381)

Persistent mode needs to clone a parent and add its children if a child has
changed.

We have an optimization in persistent mode where we don't do that if no
child could've changed. If there are no effects scheduled for any child
then there couldn't have been changes.

Instead of checking for this on firstEffect, we now check this on the
children's effectTag and subtreeTags.

This is quite unfortunate because if we could just do this check a little
bit later we would've already gotten it transferred to the completed work's
subtreeTag. Now we have to loop over all the children and if any of them
changed, we have to loop over them again. Doing at least two loops per
parent.
",['packages/react-reconciler/src/ReactFiberCompleteWork.new.js'],Persistent mode optimization is inefficient as it requires multiple loops over children when checking their effectTag even if no changes have occurred.
cf0081263ced42ddebe0a0d868701890448bfd4b,1579970582,"Upgrade to jest 25 (#17896)

The changes to the test code relate to changes in JSDOM that come with Jest 25:

* Several JSDOM workarounds are no longer needed.
* Several tests made assertions to match incorrect JSDOM behavior (e.g. setAttribute calls) that JSDOM has now patched to match browsers.
  * https://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh
* JSDOM no longer triggers default actions when dispatching click events.
  * https://codesandbox.io/s/beautiful-cdn-ugn8f
* JSDOM fixed (jsdom/jsdom#2700) a bug so that calling focus() on an already focused element does not dispatch a FocusEvent.
* JSDOM now supports passive events.
* JSDOM has improved support for custom CSS properties.
  * But requires jsdom/cssstyle#112 to land to support webkit prefixed properties.
","['packages/react-dom/src/__tests__/CSSPropertyOperations-test.js', 'packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js', 'packages/react-dom/src/__tests__/ReactDOMSelect-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationUserInteraction-test.js', 'packages/react-dom/src/events/__tests__/ChangeEventPlugin-test.internal.js', 'packages/react-dom/src/events/__tests__/DeprecatedDOMEventResponderSystem-test.internal.js', 'packages/react-dom/src/events/__tests__/SelectEventPlugin-test.js', 'packages/react-interactions/events/src/dom/__tests__/Input-test.internal.js', 'scripts/jest/config.base.js']","Jest 25's JSDOM changes have caused outdated test assertions designed for its past limitations to fail, incorrect behavior in setAttribute calls and dispatching click events, and unsupported focused elements dispatching FocusEvents, among other inconsistencies."
5660c52b89ec19eec36a974e4ff16908b1dbba3c,1628276272,"Scheduling Profiler: Improve warnings and add unit tests (#22038)

* Scheduling Profiler: Updated instructions to mentioned v18+ requirement

* Moved long-event warning to post processing

This lets us rule out non-React work or React work that started before the event and finished quickly during the event.

Also added unit tests for this warning and the various cases.

* Moved long-event warning to post processing

This lets us rule out non-React work or React work that started before the event and finished quickly during the event.

Also added unit tests for this warning and the various cases.

* Updated nested update warning text

* Udpate warning about suspending outside of a transition

Handle edge case where component suspends before the first commit (and label metadata) has been logged.

Add unit tests.

* Fixed logic error in getBatchRange() with minStartTime

* PR feedback: Combined a conditional statement
","['packages/react-devtools-scheduling-profiler/src/SchedulingProfiler.js', 'packages/react-devtools-scheduling-profiler/src/import-worker/__tests__/preprocessData-test.internal.js', 'packages/react-devtools-scheduling-profiler/src/import-worker/preprocessData.js', 'packages/react-devtools-scheduling-profiler/src/utils/getBatchRange.js']","Scheduling Profiler is throwing inaccurate warnings due to long events, nested updates and components suspending before the first commit. It also lacks sufficient unit tests for these scenarios."
8ec962d825fc948ffda5ab863e639cd4158935ba,1687535153,"fix[devtools/ci]: fixed incorrect condition calculation for @reactVersion annotation (#26997)

Suppose that you have this setup for devtools test:
```
// @reactVersion <= 18.1
// @reactVersion >= 17.1
```

With previous implementation, the accumulated condition will be `""<=
18.1"" && "">= 17.1""`, which is just `"">= 17.1""`, when evaluated. That's
why we executed some tests for old versions of react on main (and
failed).

With these changes the resulting condition will be `""<= 18.1 >= 17.1""`,
not using `&&`, because semver does not support this operator. All
currently failing tests will be skipped now as expected.

Also increased timeout value for shell server to start
","['packages/react-devtools-extensions/src/__tests__/xGoogleIgnoreList-test.js', 'scripts/babel/transform-react-version-pragma.js', 'scripts/circleci/run_devtools_e2e_tests.js']","The @reactVersion annotation calculates incorrect conditions causing devtools tests for older React versions to run and fail on the main. Additionally, shell server startup is timing out."
4f02c93c7cb213355b3c7d2011e531431d1c6dd8,1572991681,"Fix devtools displaying Anonymous for memo of ref-forwarding components (#17274)

* [react-is] return correct typeOf value of forwardRef

* [react-devtools-shared] use correct displayName of memo(forwardRef(Component))

* [react-devtools-shared] add resolveFiberType and resolve fiber type of memo recursively

Resolving the fiber type of memo recursively before passing it to getDisplayName
will prevent it from displaying ""Anonymous"" as displayName for components
wrapped with both memo and forwardRef: memo(forwardRef(Component))

* rework resolveFiberType

",['packages/react-devtools-shared/src/backend/renderer.js'],"DevTools displays ""Anonymous"" for the displayName of components wrapped with both memo and forwardRef, rendering its identification in the component tree confusing."
bcca5a6ca78b33504e0a328c411b043261e7e303,1597690866,"Always skip unmounted/unmounting error boundaries (#19627)

The behavior of error boundaries for passive effects that throw during cleanup was recently changed so that React ignores boundaries which are also unmounting in favor of still-mounted boundaries. This commit implements that same behavior for layout effects (useLayoutEffect, componentWillUnmount, and ref-detachment).

The new, skip-unmounting-boundaries behavior is behind a feature flag (`skipUnmountedBoundaries`).
","['packages/react-dom/src/__tests__/ReactErrorBoundaries-test.internal.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.native.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www-dynamic.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","Error boundaries for passive effects that throw during cleanup ignore unmounting boundaries, causing discrepancies between layout effects and passive effects."
47ebc90b08be7a2e6955dd3cfd468318e0b8fdfd,1588817954,"Put render phase update change behind a flag (#18850)

In the new reconciler, I made a change to how render phase updates
work. (By render phase updates, I mean when a component updates
another component during its render phase. Or when a class component
updates itself during the render phase. It does not include when
a hook updates its own component during the render phase. Those have
their own semantics. So really I mean anything triggers the ""`setState`
in render"" warning.)

The old behavior is to give the update the same ""thread"" (expiration
time) as whatever is currently rendering. So if you call `setState` on a
component that happens later in the same render, it will flush during
that render. Ideally, we want to remove the special case and treat them
as if they came from an interleaved event.

Regardless, this pattern is not officially supported. This behavior is
only a fallback. The flag only exists until we can roll out the
`setState` warnning, since existing code might accidentally rely on the
current behavior.
","['packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www-dynamic.js', 'packages/shared/forks/ReactFeatureFlags.www.js']",Issues in the new reconciler lead to improper updating during render phase. SetState calls on components during render sometimes flush during the same render instead of being treated as interleaved events.
7268d97d2b2b595db24cb6210e535dd2bd421df2,1540005122,"Centralize props memoization (#13900)

* Move memoizedProps to after beginWork remove memoizeProps helper

We always call this at the end. This is now enforced to line up since
we do the equality check in the beginning of beginWork. So we can't
have special cases.

* Inline the one caller of memoizeState

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberScheduler.js']","Locations of memoization calls in beginWork are inconsistent, causing issues with the equality checks executed at the beginning of beginWork."
46db4e996d686ffbc8ec4cc7d559d6897288b780,1649455299,"Combine deletion phase into single recursive function

Similar to the previous step, this converts the deletion phase into
a single recursive function. Although there's less code, this one is
a bit trickier because it's already contains some stack-like logic
for tracking the nearest host parent. But instead of using the actual
stack, it repeatedly searches up the fiber return path to find the
nearest host parent.

Instead, I've changed it to track the nearest host parent on the
JS stack.

(We still search up the return path once, to set the initial host parent
right before entering a deleted tree. As a follow up, we can instead
push this to the stack as we traverse during the main mutation phase.)

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']",The deletion phase of the process involves redundant searches up the fiber return path to track the nearest host parent increasing complexity and code inefficiency.
d6604ac0318f2ee139492d8dce64d6427e921658,1621392269,"Account for another DevTools + Fast Refresh edge case (#21523)

DevTools now 'untrack' Fibers (cleans up the ID-to-Fiber mapping) after a slight delay in order to support a Fast Refresh edge case:
1. Component type is updated and Fast Refresh schedules an update+remount.
2. flushPendingErrorsAndWarningsAfterDelay() runs, sees the old Fiber is no longer mounted (it's been disconnected by Fast Refresh), and calls untrackFiberID() to clear it from the Map.
3. React flushes pending passive effects before it runs the next render, which logs an error or warning, which causes a new ID to be generated for this Fiber.
4. DevTools now tries to unmount the old Component with the new ID.

The underlying problem here is the premature clearing of the Fiber ID, but DevTools has no way to detect that a given Fiber has been scheduled for Fast Refresh. (The '_debugNeedsRemount' flag won't necessarily be set.)

The best we can do is to delay untracking by a small amount, and give React time to process the Fast Refresh delay.
","['packages/react-devtools-shared/src/__tests__/FastRefreshDevToolsIntegration-test.js', 'packages/react-devtools-shared/src/backend/renderer.js']","Fast Refresh disconnects a Fiber causing it to be prematurely untracked, which in turn causes DevTools to attempt to unmount the old Component with a new ID, resulting in an edge case error."
eba248c390a5e32488536a100e2f7c0e55d43da6,1632790076,"[Fizz/Flight] Remove reentrancy hack (#22446)

* Remove reentrant check from Fizz/Flight

* Make startFlowing explicit in Flight

This is already an explicit call in Fizz. This moves flowing to be explicit.

That way we can avoid calling it in start() for web streams and therefore
avoid the reentrant call.

* Add regression test

This test doesn't actually error due to the streams polyfill not behaving
like Chrome but rather according to spec.

* Update the Web Streams polyfill

Not that we need this but just in case there are differences that are fixed.
","['packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayServer.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react-server-native-relay/src/ReactFlightNativeRelayServer.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/ReactFlightServer.js']","The Fizz/Flight implementation has a reentrancy issue due to the implicit handling of ""startFlowing"", leading to unexpected calls in the web streams 'start()' function."
3a50d95573b7ebdf723e08f6f78c99faf811da0b,1632420458,"Never attach ping listeners in legacy Suspense (#22407)

I noticed a weird branch where we attach a ping listener even in legacy
mode. It's weird because this shouldn't be necessary. Fallbacks always
synchronously commit in legacy mode, so pings never happen. (A ""ping"" is
when a suspended promise resolves before the fallback has committed.)

It took me a moment to remember why this case exists, but it's related
to React.lazy.

There's a special case where we suspend while reconciling the children
of a Suspense boundary's inner Offscreen wrapper fiber. This happens
when a React.lazy component is a direct child of a Suspense boundary.

Suspense boundaries are implemented as multiple fibers, but they are a
single conceptual unit. The legacy mode behavior where we pretend the
suspended fiber committed as `null` won't work, because in this case the
""suspended"" fiber is the inner Offscreen wrapper.

Because the contents of the boundary haven't started rendering yet (i.e.
nothing in the tree has partially rendered) we can switch to the
regular, concurrent mode behavior: mark the boundary with ShouldCapture
and enter the unwind phase.

However, even though we're switching to the concurrent mode behavior, we
don't need to attach a ping listener. So I refactored the logic so that
it doesn't escape back into the regular path.

It's not really a big deal that we attach an unncessary ping listener,
since this case is so unusual. The motivation is not performance related
— it's to make the logic clearer, because I'm about to add another case
where we trigger a Suspense boundary without attaching a ping listener.
","['packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberThrow.old.js']",Unnecessary ping listeners are being attached in legacy mode when a React.lazy component is a direct child of a Suspense boundary.
d04d03e4701192abf95c58ff50683b37db6c6eae,1534256208,"Fix passing symbols and functions to textarea (#13362)

* refactor: move getSafeValue to separate file

* fix(?): ReactDOMFiberTextarea sanitization for symbols and functions

* tests: add TODOs for warnings

* fix: restore accidentally removed test

* fix: remove redundant logic for initialValue

* refactor: integrate SafeValue typings into textarea

* fix: restore stringified newValue for equality check

* fix: remove getSafeValue from hostProps

* refactor: SafeValue -> ToStringValue

* refactor: update TODO comment in test file

* refactor: no need to convert children to ToStringValue

","['packages/react-dom/src/__tests__/ReactDOMTextarea-test.js', 'packages/react-dom/src/client/ReactDOMFiberTextarea.js']","Symbols and functions passed to textarea are not being sanitized correctly, creating potential issues in ReactDOMFiberTextarea. Additionally, redundant logic exists for initialValue handling, and equality checks may not correctly handle stringified newValues."
a97b5ac078499e33bbcf937935ab7139a317bac4,1626284230,"[Bugfix] Don't hide/unhide unless visibility changes (#21875)

* Use Visibility flag to schedule a hide/show effect

Instead of the Update flag, which is also used for other side-effects,
like refs.

I originally added the Visibility flag for this purpose in #20043 but
it got reverted last winter when we were bisecting the effects refactor.

* Added failing test case

Co-authored-by: Brian Vaughn <bvaughn@fb.com>
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberFlags.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemanticsDOM-test.js']","The system hides/unhides components even when their visibility has not changed, causing redundant side-effects and unnecessary updates."
f260b14a8f1f95a75f5595c9da392cc640e4ad88,1536602740,"Fix host bailout for the persistent mode (#13611)

* Add regression test for persistent bailout bug

* Fork more logic into updateHostComponent

This is mostly copy paste. But I added a bailout only to mutation mode. Persistent mode doesn't have that props equality bailout anymore, so the Fabric test now passes.

* Add failing test for persistence host minimalism

* Add bailouts to the persistent host updates

","['packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/__tests__/ReactPersistentUpdatesMinimalism-test.js']","Persistent mode lacks bailout for props equality, causing failure in fabric tests and host updates."
0c04acaf8955d3f754ec894abfc7586cbf3220dc,1579565161,"Remove FB specific build (#17875)

I moved unstable_SuspenseList internally. We don't need the FB build.
I plan on also removing the ReactDOM fb specific entry. We shouldn't add
any more FB specific internals nor APIs. If they're experimental they
should go onto the experimental builds to avoid too many permutations.
","['packages/react/index.fb.js', 'packages/react/src/ReactFB.js']","The current build has unnecessary Facebook specific components, causing redundant code permutations."
0a0f503d57d54c028639a5c052c658275d25e706,1541468934,"Enable hooks in www build (#14116)

The `enableHooks` feature flag used to only control whether the API
was exposed on the React package. But now it also determines if the
dispatcher and implementation are included in the bundle.

We're using hooks in www, so I've switched the feature flag to `true`
in the www build.

(Alternatively, we could have two feature flags: one for the
implementation and dispatcher, and one for exposing the API on the
React package.)
",['packages/shared/forks/ReactFeatureFlags.www.js'],"The `enableHooks` feature flag currently does not include the dispatcher and implementation in the www bundle, even though hooks are being used in www."
2a4d2ca7fc2857bf3ca5d3628211747d7885ed6b,1526317651,"Set owner correctly inside forwardRef and context consumer (#12777)

Previously, _owner would be null if you create an element inside forwardRef or inside a context consumer. This is used by ReactNativeFiberInspector when traversing the hierarchy and also to give more info in some warning texts. This also means you'll now correctly get a warning if you call setState inside one of these.

Test Plan: Tim tried it in the RN inspector.
",['packages/react-reconciler/src/ReactFiberBeginWork.js'],"Creating an element inside forwardRef or a context consumer results in null '_owner', affecting hierarchy traversal in ReactNativeFiberInspector and warning information. setState calls inside these also lack warnings."
b8d079b41372290aa1846e3a780d85d05ab8ffc1,1568637802,"Add trusted types to react on client side (#16157)

* Add trusted types to react on client side

* Implement changes according to review

* Remove support for trusted URLs, change TrustedTypes to trustedTypes

* Add support for deprecated trusted URLs

* Apply PR suggesstions

* Warn only once, remove forgotten check, put it behind a flag

* Move comment

* Fix PR comments

* Fix html toString concatenation

* Fix forgotten else branch

* Fix PR comments

","['.eslintrc.js', 'packages/react-dom/src/client/DOMPropertyOperations.js', 'packages/react-dom/src/client/ReactDOMComponent.js', 'packages/react-dom/src/client/ToStringValue.js', 'packages/react-dom/src/client/__tests__/trustedTypes-test.internal.js', 'packages/react-dom/src/client/setAttribute.js', 'packages/react-dom/src/client/setInnerHTML.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js', 'scripts/rollup/validate/eslintrc.cjs.js', 'scripts/rollup/validate/eslintrc.fb.js', 'scripts/rollup/validate/eslintrc.rn.js', 'scripts/rollup/validate/eslintrc.umd.js']","React on the client side has a potential security vulnerability as it currently lacks support for trusted types, which can leave it susceptible to XSS attacks."
197703ecc776dd5c1a4d956896603bcc67fb9920,1551962355,"[ESLint] Add more hints to lint messages (#15046)

* A clearer message for props destructuring where applicable

* Add line number to the ""move function"" message

* Add a hint for how to fix callbacks from props

* Simplify code and harden tests

* Collect all dependency references for better warnings

* Suggest updater or reducer where appropriate

","['packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js', 'packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js']","Lint messages lack sufficient information, such as line numbers and hints for fixing issues, resulting in ambiguity in prop destructuring, callbacks from props, and dependency references."
4cd7065665ea2cf33c306265c8d817904bb401ca,1683926283,"Fix uSES hydration in strict mode (#26791)

Previously, we'd call and use getSnapshot on the second render resulting
in `Warning: Text content did not match. Server: ""Nay!"" Client: ""Yay!""`
and then `Error: Text content does not match server-rendered HTML.`.

Fixes #26095. Closes #26113. Closes #25650.

---------

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-reconciler/src/ReactFiberHooks.js']","Strict mode hydration calls getSnapshot on second render, causing text content mismatch between server and client, resulting in errors and warnings."
95bd7aad7daa80c381faa3215c80b0906ab5ead5,1579294835,"Remove renderPhaseUpdates Map (#17625)

* Remove renderPhaseUpdates Map

Follow up to #17484, which was reverted due to a bug found in www.

* Failing test: Dropped updates

When resetting render phase updates after a throw, we should only clear
the pending queue of hooks that were already processed.

* Fix non-render-phase updates being dropped

Detects if a queue has been processed by whether the hook was cloned.
If we change the implementation to an array instead of a list, we'll
need some other mechanism to determine whether the hook was processed.

* Regression test: startTransition in render phase

useTransition uses the state hook as part of its implementation, so we
need to fork it in the dispatcher used for re-renders, too.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js']","Clearing pending updates after a throw leads to undesired removal of non-render-phase updates. Moreover, the 'useTransition' function needs a fork in the dispatcher for re-renderings."
81aaee56afba2bb3558f2aaa484b594f23b59d4c,1600798826,"Don't call onCommit et al if there are no effects (#19863)

* Don't call onCommit et al if there are no effects

Checks `subtreeFlags` before scheduling an effect on the Profiler.

* Fix failing Profiler tests

The change to conditionally call Profiler commit hooks only if updates were scheduled broke a few of the Profiler tests. I've fixed the tests by either:
* Adding a no-op passive effect into the subtree or
* Converting onPostCommit to onCommit

When possible, I opted to add the no-op passive effect to the tests since that that hook is called later (during passive phase) so the test is a little broader. In a few cases, this required adding awkward act() wrappers so I opted to go with onCommit instead.

Co-authored-by: Brian Vaughn <bvaughn@fb.com>
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']","Profiler commit hooks are being called even when there are no scheduled updates in the subtree, leading to inefficiencies and test failures."
7bd330e0b0d740e4ffda25a179a4d06081f1b8e7,1684543904,"Updated Copyright comment from Facebook to Meta (#26833)

## Summary
Changed the comment in react/packages/react
/react.shared-subset.js saying 
```
Copyright (c) Facebook, Inc. and affiliates ..
```
To 
```
Copyright (c) Meta Platforms, Inc. and affiliates ..
```
as raised in the following issues:
https://github.com/facebook/react/issues/26829

Files Changed: 
react/packages/react/react.shared-subset.js

## How did you test this change?

Tests Required: No
",['packages/react/react.shared-subset.js'],"The copyright comment in react.shared-subset.js incorrectly references Facebook, Inc. instead of the current owner, Meta Platforms, Inc."
18d2e0c03e4496a824fdb7f89ea2a3d60c30d49a,1569329138,"Warning system refactoring (part 1) (#16799)

* Rename lowPriorityWarning to lowPriorityWarningWithoutStack

This maintains parity with the other warning-like functions.

* Duplicate the toWarnDev tests to test toLowPriorityWarnDev

* Make a lowPriorityWarning version of warning.js

* Extract both variants in print-warning

Avoids parsing lowPriorityWarning.js itself as the way it forwards the
call to lowPriorityWarningWithoutStack is not analyzable.

","['packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-is/src/ReactIs.js', 'packages/react-reconciler/src/ReactStrictModeWarnings.js', 'packages/react/src/ReactBaseClasses.js', 'packages/react/src/ReactElementValidator.js', 'packages/shared/forks/lowPriorityWarningWithoutStack.www.js', 'packages/shared/lowPriorityWarning.js', 'packages/shared/lowPriorityWarningWithoutStack.js', 'scripts/jest/matchers/__tests__/toWarnDev-test.js', 'scripts/print-warnings/print-warnings.js', 'scripts/rollup/forks.js']","Low priority warning function name causing confusion with other warning functions, and inefficient warning version extraction in print-warning due to unanalyzable call forwarding in lowPriorityWarning.js."
d0eaf782930b6e6c575f50bf688e667b9f6795b7,1616533048,"Move priorities to separate import to break cycle (#21060)

The event priority constants exports by the reconciler package are
meant to be used by the reconciler (host config) itself. So it doesn't
make sense to export them from a module that requires them.

To break the cycle, we can move them to a separate module and import
that. This looks like a ""deep import"" of an internal module, which we
try to avoid, but conceptually these are part of the public interface
of the reconciler module. So, no different than importing from the main
`react-reconciler`.

We do need to be careful about not mixing these types of imports with
implementation details. Those are the ones to really avoid.

An unintended benefit of the reconciler fork infra is that it makes
deep imports harder. Any module that we treat as ""public"", like this
one, needs to account for the `enableNewReconciler` flag and forward
to the correct implementation.
","['packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactEventPriorities.js', 'packages/react-reconciler/src/ReactEventPriorities.new.js', 'packages/react-reconciler/src/ReactEventPriorities.old.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js', 'scripts/rollup/forks.js']","Reconciler package exports event priority constants which cause a cycle as it is required by the module from which it is exported, affecting the implementation and possibly leading to deep imports."
2153a29661e5998604225f81d93c8a20a1934adf,1687993954,"[Flight] createServerReference should export $$FORM_ACTION on the Server (#26987)

Currently, only the browser build exposes the `$$FORM_ACTION` helper.
It's used for creating progressive enhancement fro Server Actions
imported from Client Components. This helper is only useful in SSR
builds so it should be included in the Edge/Node builds of the client.

I also removed it from the browser build. We assume that only the Edge
or Node builds of the client are used
together with SSR. On the client this feature is not needed so we can
exclude the code. This might be a bit unnecessary because it's not that
much code and in theory you might use SSR in a Service Worker or
something where the Browser build would be used but currently we assume
that build is only for the client. That's why it also don't take an
option for reverse
look up of file names.
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-client/src/ReactFlightReplyClient.js', 'packages/react-client/src/forks/ReactFlightClientConfig.custom.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-browser.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-bun.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-edge-webpack.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-legacy.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-node-esm.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-node-webpack.js', 'packages/react-client/src/forks/ReactFlightClientConfig.dom-node.js', 'packages/react-server-dom-esm/src/ReactFlightDOMClientNode.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMClientEdge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMClientNode.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js']","The $$FORM_ACTION helper for creating Server Actions in Client Components is only available in the browser build and not included in the Edge/Node builds, causing issues for SSR builds."
bd7f4a013be3ef272a01874532bee71ad861e617,1618935295,"Fix sloppy factoring in `performSyncWorkOnRoot` (#21246)

* Warn if `finishedLanes` is empty in commit phase

See #21233 for context.

* Fix sloppy factoring when assigning finishedLanes

`finishedLanes` is assigned in `performSyncWorkOnRoot` and
`performSyncWorkOnRoot`. It's meant to represent whichever lanes we
used to render, but because of some sloppy factoring, it can sometimes
equal `NoLanes`.

The fixes are:
- Always check if the lanes are not `NoLanes` before entering the work
loop. There was a branch where this wasn't always true.
- In `performSyncWorkOnRoot`, don't assume the next lanes are sync; the
priority may have changed, or they may have been flushed by a
previous task.
- Don't re-assign the `lanes` variable (the one that gets assigned to
`finishedLanes` until right before we enter the work loop, so that it
is always corresponds to the newest complete root.
","['packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","`performSyncWorkOnRoot` incorrectly assigns `finishedLanes` due to improper factoring, causing it to sometimes equal `NoLanes` and resulting in inconsistencies with rendering."
97af3e1f3a6130dc38269b8389da057152868be2,1529429816," Do not add additional work to a batch that is already rendering (#13072)

* Do not add additional work to a batch that is already rendering.

Otherwise, the part of the tree that hasn't rendered yet will receive
the latest state, but the already rendered part will show the state
as it was before the intervening update.

* Reduce non-helpfulness of comments

","['packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.internal.js']",Intervening updates during a batch render results in inconsistencies with state between rendered and non-rendered tree parts.
58afba06636300fd652924e3033916fc96142e13,1585777002,"Fix: Don't read primaryChild.childExpirationTime (#18457)

This is a variant of the fix in 5a0f1d. We can't rely on the primary
fiber's `childExpirationTime` field to be correct.

In this case, we can read from the Suspense boundary fiber instead.
This will include updates that exist in the fallback fiber, but that's
not a big deal; the important thing is that we don't drop updates.
","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js']","Reliance on primary fiber's `childExpirationTime` leads to incorrect value capture, risking drop of updates."
cf58f296e9024fa76a32a53d7b3572c74b608ed3,1519324056,"Add test exercising public API to test BeforeInputEventPlugin + FallbackCompositionState (#11849)

* Add test exercising public API to test BeforeInputEventPlugin + FallbackCompositionState

 - I've adopted a similar approach to the existing test for BeforeInputEventPlugin
 - I've simulated events and then assert the event handler for onBeforeInput is fired or not fired based on the test conditions
 - The scenarios are tested against IE11, Webkite and Presto environment simulations
 - I've encorporated what I understand to be the functionality in the FallbackCompositionState test

* Prettier

* Linting fixes

* Remove test for contenteditable in Presto - the contenteditable type is not supported in Presto powered browsers (Opera).

* Remove mention of Presto as this explicit condition is no longer handled in BeforeInputEventPlugin.

We still need to exercise usage of FallbackCompositionState though so let's keep a test where the env does not support Composition and Text events.

* Add tests for envs with only CompositionEvent support

* Remove internal tests no longer needed

* Shorten test case names to satisfy lint rules

* Add tests for onCompositionStart and onCompositionUpdte events

The BeforeInputEventPlugin is responsible for emitting these events so we need to add tests for this. This also ensure we exercise the code path that, L207, that was not previously exercised with the public tests.

","['packages/react-dom/src/events/__tests__/BeforeInputEventPlugin-test.internal.js', 'packages/react-dom/src/events/__tests__/BeforeInputEventPlugin-test.js', 'packages/react-dom/src/events/__tests__/FallbackCompositionState-test.js']","The public API for BeforeInputEventPlugin and FallbackCompositionState are not sufficiently tested, particularly in Internet Explorer 11, Webkit browsers, and Opera. Additionally, BeforeInputEventPlugin's event handling for onBeforeInput needs to be asserted under test conditions."
24f824250fde6418569222f6e33b35ba9c1f1f46,1578185439,"DevTools Profiler: Improve how empty commits are filtered (#17771)

Previously, DevTools filtered empty commits on the backend, while profiling, through the use of a bailout heuristic that React currently happens to use. This approach was brittle and may have exacerbated the long-standing Profiler bug #16446.

This PR removes that heuristic and adds as a post-processing filtering pass instead. This removes the coupling between DevTools and a React internal implementation detail that may change.

I believe DevTools has two choices of criteria for this filtering:
* Filter commits that have no actual duration metadata.
* Filter commits that have no recorded operations (no mutations to the tree, no changed tree base durations).

I chose the first option, filtering by commits that have no reported metadata. It will miss an edge case, e.g. , but we would have nothing meaningful to show in the Profiler for those cases anyway. (This particular edge case is why one of the snapshots changed with this commit.)

The second option, filtering by recorded operations, could potentially miss a more important edge case: where a component *did* render, but its  didn't change. (In that event, there would be no operations to send.)
","['packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/utils.js']","The DevTools Profiler was previously filtering out empty commits using a fragile heuristic that is intricately linked to a React internal detail, resulting in potential inconsistencies and a long-standing bug (#16446)."
33e3d2878e9ec82c65468316ffcc473e5288bb87,1668714522,"Reuse hooks when replaying a suspended component

When a component suspends, under some conditions, we can wait for the
data to resolve and replay the component without unwinding the stack or
showing a fallback in the interim. When we do this, we reuse the
promises that were unwrapped during the previous attempts, so that if
they aren't memoized, the result can still be used.

We should do the same for all hooks. That way, if you _do_ memoize an
async function call with useMemo, it won't be called again during the
replay. This effectively gives you a local version of the functionality
provided by `cache`, using the normal memoization patterns that have
long existed in React.

","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactThenable-test.js']","When a component suspends and is replayed without unwinding the stack or showing a fallback, async function calls memoized with useMemo are executed again, despite them potentially holding usable results from previous attempts."
83b941a519f0528f3c7938f2bc6094a8de60c21e,1647049468,"Add isRootDehydrated function

Currently this does nothing except read a boolean field, but I'm about
to change this logic.

Since this is accessed by React DOM, too, I put the function in a
separate module that can be deep imported. Previously, it was accessing
the FiberRoot directly. The reason it's a separate module is to break a
circular dependency between React DOM and the reconciler.

","['packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-dom/src/events/ReactDOMEventReplaying.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js', 'packages/react-reconciler/src/ReactFiberShellHydration.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']",Accessing the FiberRoot directly in React DOM creates a circular dependency between the Reconciler and React DOM.
c27a99812e75e73d9fad88c97ac8b8db452012c1,1523468762,"[Danger] Minor fixes (#12606)

* Don't download bundle stats from master on CI

This was temporarily necessary in the past because we didn't have the logic that downloads actual *merge base* stats.

We do have that now as part of the Danger script. So we can remove this.

* Use absolute threshold for whether to show a change

* Download master stats, but only for other master builds

* Rewrite sizes

","['dangerfile.js', 'scripts/circleci/build.sh', 'scripts/rollup/stats.js']","The CI is unnecessary downloading bundle stats from master. Incorrect thresholds are being used for changes display, and there are issues with downloading master stats and size rewriting."
47cf4e578c2d8eef9c6cc27105ce560307999244,1678876240,"Restore some guards in ReactFabricGlobalResponderHandler after refactor (#26394)

## Summary

I refactored this code in #26290 but forgot to add guards when the fiber
or the state node where null, and this is typed as `any` so Flow didn't
catch it.

This restores the same logic to guard against null.

## How did you test this change?

Existing tests.
",['packages/react-native-renderer/src/ReactFabricGlobalResponderHandler.js'],"Refactor in ReactFabricGlobalResponderHandler removes guards against null for the fiber or state node, potentially causing crashes when encountering null entries."
bff6be8eb1d77980c13f3e01be63cb813a377058,1695682945,"[Fizz] Track postpones in fallbacks (#27421)

This fixes so that you can postpone in a fallback. This postpones the
parent boundary. I track the fallbacks in a separate replay node so that
when we resume, we can replay the fallback itself and finish the
fallback and then possibly later the content. By doing this we also
ensure we don't complete the parent too early since now it has a render
task on it.

There is one case that this surfaces that isn't limited to
prerender/resume but also render/hydrateRoot. I left todos in the tests
for this.

If you postpone in a fallback, and suspend in the content but eventually
don't postpone in the content then we should be able to just skip
postponing since the content rendered and we no longer need the
fallback. This is a bit of a weird edge case though since fallbacks are
supposed to be very minimal.

This happens because in both cases the fallback starts rendering early
as soon as the content suspends. This also ensures that the parent
doesn't complete early by increasing the blocking tasks. Unfortunately,
the fallback will irreversibly postpone its parent boundary as soon as
it hits a postpone.

When you suspend, the same thing happens but we typically deal with this
by doing a ""soft"" abort on the fallback since we don't need it anymore
which unblocks the parent boundary. We can't do that with postpone right
now though since it's considered a terminal state.

I think I'll just leave this as is for now since it's an edge case but
it's an annoying exception in the model. Makes me feel I haven't quite
nailed it just yet.
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-server/src/ReactFizzServer.js']","When postponing in a fallback and then suspending in content without another postpone, unnecessary postponing of parent boundary occurs. This leads to difficulty in properly completing the parent rendering task."
a1dbb852c29d23d5d0b76a0171eb59df4bebf684,1565035265,"warn if you try to use act() in prod (#16282)

We have behaviour divergence for act() between prod and dev (specifically, act() + concurrent mode does not flush fallbacks in prod. This doesn't affect anyone in OSS yet)

We also don't have a good story for writing tests in prod (and what from what I gather, nobody really writes tests in prod mode).

We could have wiped out act() in prod builds, except that _we_ ourselves use act() for our tests when we run them in prod mode.

This PR is a compromise to all of this. We will log a warning if you try to use act() in prod mode, and we silence it in our test suites.
","['packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js', 'packages/react-dom/src/test-utils/ReactTestUtilsAct.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-test-renderer/src/ReactTestRendererAct.js', 'scripts/jest/shouldIgnoreConsoleError.js']","Using act() in production mode does not flush fallbacks in concurrent mode, causing behavior divergence between production and development environments."
d12bdcda69afd219f4d91cbd60d6fae2a375d35b,1679772240,"Fix Flow types of useEffectEvent (#26468)

## Summary

Just copied the types over from the internal types. Type error was
hidden by overly broad FlowFixMe. With `$FlowFixMe[not-a-function]` we
would've seen the actual issue:
```
Cannot return `dispatcher.useEffectEvent(...)` because  `T` [1] is incompatible with  undefined [2].Flow(incompatible-return)
```

## How did you test this change?

- [x] yarn flow dom-node
- [x] CI
","['packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react/src/ReactHooks.js']","`useEffectEvent` returns undefined, leading to a type error with function return. This type error is currently hidden by an overly broad FlowFixMe."
42c3c967d1e4ca4731b47866f2090bc34caa086c,1552942683,"Compile invariant directly to throw expressions (#15071)

* Transform invariant to custom error type

This transforms calls to the invariant module:

```js
invariant(condition, 'A %s message that contains %s', adj, noun);
```

Into throw statements:

```js
if (!condition) {
  if (__DEV__) {
    throw ReactError(`A ${adj} message that contains ${noun}`);
  } else {
    throw ReactErrorProd(ERR_CODE, adj, noun);
  }
}
```

The only thing ReactError does is return an error whose name is set
to ""Invariant Violation"" to match the existing behavior.

ReactErrorProd is a special version used in production that throws
a minified error code, with a link to see to expanded form. This
replaces the reactProdInvariant module.

As a next step, I would like to replace our use of the invariant module
for user facing errors by transforming normal Error constructors to
ReactError and ReactErrorProd. (We can continue using invariant for
internal React errors that are meant to be unreachable, which was the
original purpose of invariant.)

* Use numbers instead of strings for error codes

* Use arguments instead of an array

I wasn't sure about this part so I asked Sebastian, and his rationale
was that using arguments will make ReactErrorProd slightly slower, but
using an array will likely make all the functions that throw slightly
slower to compile, so it's hard to say which way is better. But since
ReactErrorProd is in an error path, and fewer bytes is generally better,
no array is good.

* Casing nit

","['packages/shared/ReactError.js', 'packages/shared/ReactErrorProd.js', 'packages/shared/__tests__/ReactError-test.internal.js', 'packages/shared/__tests__/ReactErrorProd-test.internal.js', 'packages/shared/forks/invariant.www.js', 'packages/shared/invariant.js', 'packages/shared/reactProdInvariant.js', 'scripts/error-codes/__tests__/minify-error-messages.js', 'scripts/error-codes/__tests__/replace-invariant-error-codes-test.js', 'scripts/error-codes/extract-errors.js', 'scripts/error-codes/minify-error-messages.js', 'scripts/error-codes/replace-invariant-error-codes.js', 'scripts/jest/preprocessor.js', 'scripts/rollup/build.js', 'scripts/rollup/forks.js']","Invariant module transformation results in inconsistent error handling in development and production environments, affecting performance negatively."
0a360642dcc08cab469da0a0e4f1050e56b0ef7e,1689100553,"integrate scheduler.yield in SchedulerPostTask (#27069)

## Summary

`scheduler.yield` is entering [Origin Trial soon in Chrome
115](https://chromestatus.com/feature/6266249336586240). This diff adds
it to `SchedulerPostTask` when scheduling continuations to allow Origin
Trial participation for early feedback on the new API.

It seems the difference here versus the current use of `postTask` will
be minor – the intent behind `scheduler.yield` seems to mostly be better
ergonomics for scheduling continuations, but it may be interesting to
see if the follow aspect of it results in any tangible difference in
scheduling (from
[here](https://github.com/WICG/scheduling-apis/blob/main/explainers/yield-and-continuation.md#introduction)):

> To mitigate yielding performance penalty concerns, UAs prioritize
scheduler.yield() continuations over tasks of the same priority or
similar task sources.

## How did you test this change?

```
yarn test SchedulerPostTask                
```
","['packages/scheduler/src/__tests__/SchedulerPostTask-test.js', 'packages/scheduler/src/forks/SchedulerPostTask.js']",Lack of integration of `scheduler.yield` in `SchedulerPostTask` might be hindering the participation in Chrome 115's Origin Trial for early feedback on the new API.
3ff1540e9bbe30aae52e2c9ab61c843bd0c94237,1675940075,"Prefer JSX in ReactNoop assertions (to combat out-of-memory test runs) (#26127)

## Summary

Prefer `getChildrenAsJSX` or `toMatchRenderedOutput` over `getChildren`.
Use `dangerouslyGetChildren` if you really need to (e.g. for `toBe`
assertions).

Prefer `getPendingChildrenAsJSX` over `getPendingChildren`. Use
`dangerouslyGetPendingChildren` if you really need to (e.g. for `toBe`
assertions).

`ReactNoop.getChildren` contains the fibers as non-enumerable
properties. If you pass the children to `toEqual` and have a mismatch,
Jest performance is very poor (to the point of causing out-of-memory
crashes e.g.
https://app.circleci.com/pipelines/github/facebook/react/38084/workflows/02ca0cbb-bab4-4c19-8d7d-ada814eeebb9/jobs/624297/parallel-runs/5?filterBy=ALL&invite=true#step-106-27).
Mismatches can sometimes be intended e.g. on gated tests.

Instead, I converted almost all of the `toEqual` assertions to
`toMatchRenderedOutput` assertions or compare the JSX instead. For
ReactNoopPersistent we still use `getChildren` since we have assertions
on referential equality. `toMatchRenderedOutput` is more accurate in
some instances anyway. I highlighted some of those more accurate
assertions in review-comments.

## How did you test this change?

- [x] `CIRCLE_NODE_TOTAL=20 CIRCLE_NODE_INDEX=5 yarn test
-r=experimental --env=development --ci`: Can take up to 350s (and use up
to 7GB of memory) on `main` but 11s on this branch
- [x] No more slow `yarn test` parallel runs of `yarn_test` jobs (the
steps in these runs should take <1min but sometimes they take 3min and
end with OOM like
https://app.circleci.com/pipelines/github/facebook/react/38084/workflows/02ca0cbb-bab4-4c19-8d7d-ada814eeebb9/jobs/624258/parallel-runs/5?filterBy=ALL:
Looks good with a sample size of 1
https://app.circleci.com/pipelines/github/facebook/react/38110/workflows/745109a2-b86b-429f-8c01-9b23a245417a/jobs/624651
","['packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-noop-renderer/src/ReactNoopPersistent.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js', 'packages/react-reconciler/src/__tests__/ReactFragment-test.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalSideEffects-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalTriangle-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.js', 'packages/react-reconciler/src/__tests__/ReactMemo-test.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.js', 'packages/react-reconciler/src/__tests__/ReactNoopRendererAct-test.js', 'packages/react-reconciler/src/__tests__/ReactPersistent-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseFallback-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/useEffectEvent-test.js']",Poor Jest performance and out-of-memory crashes while testing ReactNoop due to inappropriate method usage for assertions and mismatches.
f47a958ea8d328190c88bac1ad6f85eaaaefc310,1539073626,"Don’t add onclick listener to React root (#13778)

Fixes #13777

As part of #11927 we introduced a regression by adding onclick handler
to the React root. This causes the whole React tree to flash when tapped
on iOS devices (for reasons I outlined in
https://github.com/facebook/react/issues/12989#issuecomment-414266839).

To fix this, we should only apply onclick listeners to portal roots. I
verified that my proposed fix indeed works by checking out our DOM
fixtures and adding regression tests.

Strangely, I had to make changes to the DOM fixtures to see the behavior
in the first place. This seems to be caused by our normal sites (and 
thus their React root) being bigger than the viewport:

![](http://cl.ly/3f18f8b85e91/Screen%20Recording%202018-10-05%20at%2001.32%20AM.gif)

An alternative approach to finding out if we're appending to a React
root would be to add a third parameter to `appendChildToContainer` based
on the tag of the parent fiber.
","['packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js']",Adding onclick handler to the React root is causing the entire React tree to flash when tapped on iOS devices.
0fb747f368635933f27d296be96c8edcf99cbdbc,1589480891,"Add LegacyHidden to server renderer (#18919)

* Add LegacyHidden to server renderer

When the tree is hidden, the server renderer renders nothing. The
contents will be completely client rendered.

When the tree is visible it acts like a fragment.

The future streaming server renderer may want to pre-render these trees
and send them down in chunks, as with Suspense boundaries.

* Force client render, even at Offscreen pri
","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js']","Server renderer doesn't render anything when the tree is hidden, leading to complete client rendering which could potentially hinder performance."
4a924a206783df5d2e06755caa0fbd2dd580b14e,1510880342,"Updates at the same priority should not interrupt current render (#11578)

When we're rendering work at a specific level, and a higher priority
update comes in, we interrupt the current work and restart at the
higher priority. The rationale is that the high priority update is
likely cheaper to render that the lower one, so it's usually worth
throwing out the current work to get the high pri update on the screen
as soon as possible.

Currently, we also interrupt the current work if an update of *equal*
priority is scheduled. The rationale here is less clear: the only reason
to do this is if both updates are expected to flush at the same time,
to prevent tearing. But this usually isn't the case. Separate setStates
are usually distinct updates that can be flushed separately, especially
if the components that are being updated are in separate subtrees.

An exception is in Flux-like systems where multiple setStates are the
result of a single conceptual update/event/dispatch. We can add an
explicit API for batching in the future; in fact, we'd likely need one
anyway to account for expiration accidentally causing consecutive
updates to fall into separate buckets.
","['packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactIncremental-test.js']","Current rendering work is interrupted for both higher priority and equal priority updates, this might cause unnecessary interruptions and might not be beneficial for distinct and separately flushable setStates."
b779dd51e87b92e13001b5deac4887bb4984ecf2,1584829360,"Stop syncing ReactTypes to RN (#18366)

This is a really old one and all callers have since been codemodded away
anyway because of problems.

This file is not really as rigorously maintained as the official Flow types
but has a few more specifics. However, the inconsistency causes problems
when you try to pass files typed using the built-in Flow typing for React
and mix it with these.

We just happen to get away with it because we compile out the types. If we
didn't we would hit those problems by even using these in our renderers.
",['scripts/rollup/packaging.js'],Inconsistencies between ReactTypes and official Flow types in RN causing issues when files typed using built-in Flow typing for React are mixed with ReactTypes.
990098f88aef825762f72e76ae84cfe1520222c2,1645660156,"Re-arrange main ReactFeatureFlags module (#23350)

@sebmarkbage and I audited the feature flags file to review the status
of each feature or experiment. Based on that, I've added some more
comments to the main ReactFeatureFlags module and rearranged them
into groups.

I haven't changed the value of any flags, yet. There are a few we're
going to land but I'll do them as separate PRs.
",['packages/shared/ReactFeatureFlags.js'],"ReactFeatureFlags module lacks proper comments and grouping, making it difficult to understand the status of each feature or experiment."
fdb641629e82df6588c16e158978ac57d9aff9ba,1589405297,"Fix useMutableSource tearing bug (#18912)

* Failing useMutableSource test

If a source is mutated after initial read but before subscription is set
up, it should still entangle all pending mutations even if snapshot of
new subscription happens to match.

Test case illustrates how not doing this can lead to tearing.

* Fix useMutableSource tearing bug

Fix is to move the entanglement call outside of the block that checks
if the snapshot has changed.
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/__tests__/useMutableSource-test.internal.js']","Source mutation occurring after initial read but before setting up subscription in useMutableSource may not entangle all pending mutations, resulting in data tearing if new subscription's snapshot matches the source."
856dc5e43352454b1d06c13e233d565ceda77e61,1692745800,"Fix escaping in action error URL (#27273)

This URL is generated on the client (there's an equivalent but shorter
SSR version too) when a function is used as an action. It should never
happen but it'll be invoked if a form is manually submitted or event is
stopped early.

The `'` wasn't escaped so this yielded invalid syntax. Which is an error
too but much less helpful. `missing ) after argument list`. Added a test
that evals to make sure it's correct syntax.
","['packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom/src/__tests__/ReactDOMForm-test.js']","Unescaped character in action error URL results in invalid syntax error - `missing ) after argument list`, particularly when a function is used as an action for a manually submitted form or early-stopped event."
c2865dbab9053ac82867ad40b5c831ec21383d3f,1555571812,"Select tab when the mouse is pressed

Selecting the tab when the mouse is pressed rather than only when it is
released makes tab switching feel faster and also matches how the Chrome dev
tools behave.

The previous tab selection handler which listens for the radio button's
selection has been kept for the benefit of interaction methods which
don't trigger the mousedown handler.

",['src/devtools/views/TabBar.js'],"Tab selection only occurs on mouse release, not on mouse press, causing slower user interaction and inconsistency with Chrome dev tools behavior."
a457e02ae3a2d3903fcf8748380b1cc293a2445e,1562102417,"allow nested `act()`s from different renderers (#16039)

* allow nested `act()`s from different renderers

There are usecases where multiple renderers need to oprate inside an act() scope
- ReactDOM.render being used inside another component tree. The parent component will be rendered using ReactTestRenderer.create for a snapshot test or something.
- a ReactDOM instance interacting with a ReactTestRenderer instance (like for the new devtools)

This PR changes the way the acting sigils operate to allow for this. It keeps 2 booleans, one attached to React, one attached to the renderer. act() changes these values, and the workloop reads them to decide what warning to trigger.

I also renamed shouldWarnUnactedUpdates to warnsIfNotActing

* s/ReactIsActing/IsSomeRendererActing and s/ReactRendererIsActing/IsThisRendererActing

","['fixtures/dom/src/index.test.js', 'packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-dom/src/fire/ReactFire.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-dom/src/test-utils/ReactTestUtilsAct.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js', 'packages/react-test-renderer/src/ReactTestRendererAct.js', 'packages/react/src/IsSomeRendererActing.js', 'packages/react/src/ReactCurrentActingRendererSigil.js', 'packages/react/src/ReactSharedInternals.js']","Nested `act()` calls from different renderers currently aren't allowed, causing issues when ReactDOM.render needs to operate inside another component tree or when ReactDOM instance needs to interact with a ReactTestRenderer instance."
a412d787e997da9e47e47886cf7a8fed2ccb6bee,1652886799,"Remove dependency on build artifacts mirror (#24575)

This reverts #24106.

There was a regression in CircleCI's artifacts API recently where you
could no longer access artifacts without an authorization token. This
broke our size reporting CI job because we can't use an authorization
token on external PRs without potentially leaking it. As a temporary
workaround, I changed the size reporting job to use a public mirror of
our build artifacts.

The CircleCI API has since been fixed to no longer require
authorization, so we can revert the workaround.
",['scripts/release/shared-commands/download-build-artifacts.js'],"Regression in CircleCI's artifacts API requires authorization token, breaking size reporting job on external PRs due to potential token leakage."
a22bd995c5bee6f191bb3261ee721c2094344492,1678480985,"[DevTools] prevent StyleX plugin from throwing when inspecting CSS (#26364)

## Summary

An error might happen when we try to read the CSS rules, but the
stylesheet does not allow so (often happens on production).

Before:
<img width=""713"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/224376546-024f7a32-d314-4dd1-9333-7e47d96a2b7c.png"">

After:

<img width=""504"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/224376426-964a33c4-0677-4a51-91c2-74074e4dde63.png"">


## How did you test this change?

Built a fb version and tested locally (see above screenshot)

---------

Co-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>
",['packages/react-devtools-shared/src/backend/StyleX/utils.js'],"Attempting to read CSS rules from Stylesheet in production sometimes throwing an error, potentially from disallowed action."
b8bbb6a13d0d0fc93bd1bf51bd66d626aad84672,1621524248,"Fix edge-case Fast Refresh bug that caused Fibers with warnings/errors to be untracked prematurely (#21536)

Refactor error/warning count tracking to avoid pre-allocating an ID for Fibers that aren't yet mounted. Instead, we store a temporary reference to the Fiber itself and later check to see if it successfully mounted before merging pending error/warning counts.

This avoids a problematic edge case where a force-remounted Fiber (from Fast Refresh) caused us to untrack a Fiber that was still mounted, resulting in a DevTools error if that Fiber was inspected in the Components tab.
","['packages/react-devtools-shared/src/__tests__/inspectedElement-test.js', 'packages/react-devtools-shared/src/backend/renderer.js']","An edge-case Fast Refresh bug is causing fibers with warnings/errors to be prematurely untracked, leading to DevTools errors if such fibers are inspected in the Components tab."
de7d1c90718ea8f4844a2219991f7115ef2bd2c5,1671823887,"Add `fetchPriority` to `<img>` and `<link>` (#25927)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

- Fixes https://github.com/facebook/react/issues/25682

## How did you test this change?

I tried this but it didn't work
```
yarn build --type=UMD_DEV react/index,react-dom && cd fixtures/attribute-behavior && yarn install && yarn start
```

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>
","['fixtures/attribute-behavior/src/attributes.js', 'packages/react-dom-bindings/src/shared/possibleStandardNames.js']","Missing 'fetchPriority' attribute in '<img>' and '<link>' elements, causing issues in loading priority of resources."
12a738f1a87889bb5f7c4159641573fd04140664,1655498626,"[Transition Tracing] Add Support for Multiple Transitions on Root (#24732)

We can think of transitions on the root as a bunch of tracing markers. Therefore, we can map each transition to a map of pending suspense boundaries. When a transition's pending suspense boundary map is empty, we know that it's complete. This PR:
* Combines the `pendingSuspenseBoundaries` and `transitions` into one `incompleteTransitions` object. This object is a map from a `transition` to a map of `pendingSuspenseBoundaries`
* Refactored code to make it so that every transition has its own `pendingSuspenseBoundaries` map rather than sharing just one.
* Moves the transition complete callback to the root. Alternatively, we can also keep a map of pendingSuspenseBoundaries to transitions on the Offscreen marker, but it's simpler to just call the transition complete callback on the root instead. We also only do this if there are transitions pending, so it shouldn't make too big of a difference
","['packages/react-reconciler/src/ReactFiber.new.js', 'packages/react-reconciler/src/ReactFiber.old.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberOffscreenComponent.js', 'packages/react-reconciler/src/ReactFiberRoot.new.js', 'packages/react-reconciler/src/ReactFiberRoot.old.js', 'packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js']","Multiple transitions on root are not properly supported, leading to incorrect tracing, sharing suspense boundaries among transitions, and misplaced transition complete callbacks."
dc49ea108c3a33fcc717ef346847dd1ad4d14f66,1586278356,"Filter certain DOM attributes (e.g. src) if value is empty string (#18513)

* Filter certain DOM attributes (e.g. src, href) if their values are empty strings

This prevents e.g. <img src=""""> from making an unnecessar HTTP request for certain browsers.

* Expanded warning recommendation

* Improved error message

* Further refined error message
","['packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/shared/DOMProperty.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www-dynamic.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","Empty string values for certain DOM attributes (like src, href) are causing unnecessary HTTP requests in some browsers."
c635807875630e7057777e898372eed43e3b0a24,1666318103,"Support `use` in `act` testing API (#25523)

`use` can avoid suspending on already resolved data by yielding to
microtasks. In a real, browser environment, we do this by scheduling a
platform task (i.e. postTask).

In a test environment, tasks are scheduled on a special internal queue
so that they can be flushed by the `act` testing API. So we need to add
support for this in `act`.

This behavior only works if you `await` the thenable returned by the
`act` call. We currently do not require that users do this. So I added a
warning, but it only fires if `use` was called. The old Suspense pattern
will not trigger a warning. This is to avoid breaking existing tests
that use Suspense.

The implementation of `act` has gotten extremely complicated because of
the subtle changes in behavior over the years, and our commitment to
maintaining backwards compatibility. We really should consider being
more restrictive in a future major release.

The changes are a bit confusing so I did my best to add inline comments
explaining how it works.

## Test plan

I ran this against Facebook's internal Jest test suite to confirm
nothing broke
","['packages/react-reconciler/src/ReactFiberWakeable.new.js', 'packages/react-reconciler/src/ReactFiberWakeable.old.js', 'packages/react-reconciler/src/__tests__/ReactIsomorphicAct-test.js', 'packages/react/src/ReactAct.js', 'packages/react/src/ReactCurrentActQueue.js']","The `act` testing API currently lacks support for `use`, leading to potential issues with suspending on already resolved data in test environments."
d1294c9d404de748b49dd6543144367f90a5e6b0,1617071776,"[Flight] Add global onError handler (#21129)

* Add onError option to Flight Server

The callback is called any time an error is generated in a server component.

This allows it to be logged on a server if needed. It'll still be rethrown
on the client so it can be logged there too but in case it never reaches
the client, here's a way to make sure it doesn't get lost.

* Add fatal error handling
","['packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayServer.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayServerHostConfig.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-server-native-relay/src/ReactFlightNativeRelayServerHostConfig.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactFlightServerConfigStream.js']","Server components in Flight may generate errors that don't reach the client, risking loss of error details without an option for server-side logging."
12d7a9ad7082106102b7dd9fec4c75abafe1c2a8,1649455154,"Combine commitWork into single switch statement

commitWork is forked into a separate implementation for mutation mode
(DOM) and persistent mode (React Native). But unlike when it was first
introduced, there's more overlap than differences between the forks,
mainly because we've added new types of fibers. So this joins the two
forks and adds more local branches where the behavior actually
diverges: host nodes, host containers, and portals.

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']",'commitWork having separate implementations for mutation mode and persistent mode is causing unneeded duplications due to recent addition of new types of fibers.'
965d08cfff50609eed5d3f2317145f7be762423d,1594267762,"Add dedicated LanePriority for Suspense retries (#19287)

A ""retry"" is a special type of update that attempts to flip a Suspense
boundary from its placeholder state back to its primary/resolved state.

Currently, retries are given default priority, using the same algorithm
as normal updates and occupying range of lanes.

This adds a new range of lanes dedicated specifically to retries, and
gives them lower priority than normal updates.

A couple of existing tests were affected because retries are no longer
batched with normal updates; they commit in separate batches.

Not totally satisfied with this design, but I think things will snap more
into place once the rest of the Lanes changes (like how we handle
parallel Suspense transitions) have settled.
","['packages/react-reconciler/src/ReactFiberLane.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']","Suspense ""retry"" updates do not have a dedicated priority, causing them to be batched with normal updates and leading to potential issues due to differences in expected behavior."
e7d7d4cb4b61624c5762521370a58d941c1c46e3,1677345039,"Move Flight Fixture to use Middleware instead of WebDevServer (#26246)

This lets us put it in the same server that would be serving this
content in a more real world scenario.

I also de-CRA:ified this a bit by simplifying pieces we don't need.

I have more refactors coming for the SSR pieces but since many are
eyeing these fixtures right now I figured I'd push earlier.

The design here is that there are two servers:

- Global - representing a ""CDN"" which will also include the SSR server.
- Regional - representing something close to the data with low waterfall
costs which include the RSC server.

This is just an example.

These are using the ""unbundled"" strategy for the RSC server just to show
a simple case, but an implementation can use a bundled SSR server.

A smart SSR bundler could also put RSC and SSR in the same server and
even the same JS environment. It just need to ensure that the module
graphs are kept separately - so that the `react-server` condition is
respected. This include `react` itself. React will start breaking if
this isn't respected because the runtime will get the wrong copy of
`react`. Technically, you don't need the *entire* module graph to be
separated. It just needs to be any part of the graph that depends on a
fork. Like if ""Client A"" -> ""foo"" and ""Server B"" -> ""foo"", then it's ok
for the module ""foo"" to be shared. However if ""foo"" -> ""bar"", and ""bar""
is forked by the ""react-server"" condition, then ""foo"" also needs to be
duplicated in the module graph so that it can get two copies of ""bar"".
","['fixtures/flight/config/getHttpsConfig.js', 'fixtures/flight/config/modules.js', 'fixtures/flight/config/paths.js', 'fixtures/flight/config/webpack.config.js', 'fixtures/flight/config/webpack/persistentCache/createEnvironmentHash.js', 'fixtures/flight/config/webpackDevServer.config.js', 'fixtures/flight/scripts/build.js', 'fixtures/flight/scripts/start.js', 'fixtures/flight/server/cli.js', 'fixtures/flight/server/global.js', 'fixtures/flight/server/handler.js', 'fixtures/flight/server/region.js']","The Flight fixture is currently using WebDevServer instead of middleware, which doesn't simulate real world server structure accurately and may cause the `react-server` condition to not be respected, leading to runtime issues with React."
696e736be11b22e8d4fa40438d235b63db7fddde,1613082046,"Warn if static flag is accidentally cleared (#20807)

* Warn if static flag is accidentally cleared

""Static"" fiber flags are flags that are meant to exist for the lifetime
of a component. It's really important not to accidentally reset these,
because we use them to decide whether or not to perform some operation
on a tree (which we can do because they get bubbled via `subtreeFlags)`.

We've had several bugs that were caused by this mistake, so we actually
don't rely on static flags anywhere, yet. But we'd like to.

So let's roll out this warning and see if it fires anywhere. Once we
can confirm that there are no warnings, we can assume that it's safe
to start using static flags.

I did not wrap it behind a feature flag, because it's dev-only, and we
can use our internal warning filter to hide this from the console.

* Intentionally clear static flag to test warning

* ...and fix it again
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js']","Accidental resetting of static fiber flags can cause unwanted operations on a tree, leading to bugs, as these flags are intended to persist for a component's lifetime."
d20c3af9d11ea4a35bfc76cb44c15af9d42059c4,1651865763,"[DevTools][Bug] Fix Race Condition When Unmounting Fibers (#24510)

When we delete fibers, we will call onCommitFiberUnmount on every deleted fiber to also remove them from the element tree. However, there are some cases where fibers aren't deleted but we still want to remove them from the element tree (ex. offscreen). In the second case, we recursively remove these children during handleCommitFiberRoot.

When we remove an element, we will untrack its corresponding fiber ID. However, because of fast refresh, we don't do this immediately, opting to instead add the value to a set to process later. However, before the set has been processed, we unmount that fiber again, we will get duplicate unmounts.

To fix this, handleCommitFiberRoot explicitly flushes all the fibers in the set before starting the deletion process. We also need to do this in handleCommitFiberUnmount in case handleCommitFiberRoot gets called first.
",['packages/react-devtools-shared/src/backend/renderer.js'],"During the unmount process of fibers, duplicate unmounts are encountered due to a race condition between the unmount process and handling of a set used for processing fiber IDs in fast refresh."
3517bd9f77dc63189f3bafedf83ba1bf8ae359df,1664484327,"Refactor useEvent (#25336)

* Refactor useEvent

Previously, the useEvent implementation made use of effect infra under
the hood. This was a lot of extra overhead for functionality we didn't
use (events have no deps, and no clean up functions). This PR refactors
the implementation to instead use a queue to ensure that the callback is
stable across renders.

Additionally, the function signature was updated to infer the callback's argument types and return value. While this doesn't affect anything internal it more accurately describes what's being passed.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactHookEffectTags.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-reconciler/src/__tests__/useEvent-test.js', 'packages/react-server/src/ReactFizzHooks.js']","The previous useEvent implementation causes unnecessary overhead as it uses effect infrastructure, making the callback unstable across renders. In addition, the function signature lacks accurate description of passed argument types and return value."
deab1263a8b8a2cea96bcbff27358570cccc7284,1657114666,"[Transition Tracing] Change Transition Type Passed Pending Transitions (#24856)

This PR changes the type of the object we store in the pending transitions callbacks map. Previously, we were recreating the transition object that we initially created during `startTransition`. However, we can actually reuse the object instead (and it also gives us a stable way to identify a transition). This PR changes the implementation to reuse the transition object instead of creating a new one 
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.new.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']",Recreating the transition object for storing in the pending transitions callbacks map can lead to instability in identifying transitions.
7572e4931f820ad7c8aa59452ab7a40eb68843fc,1666565010,"Track thenable state in work loop

This is a refactor to track the array of thenables that is preserved
across replays in the work loop instead of the Thenable module.

The reason is that I'm about to add additional state to the Thenable
module that is specific to a particular attempt — like the current
index — and is reset between replays. So it's helpful to keep the two
kinds of state separate so it's clearer which state gets reset when.

The array of thenables is not reset until the work-in-progress either
completes or unwinds.

This also makes the structure more similar to Fizz and Flight.

","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactFiberThenable.new.js', 'packages/react-reconciler/src/ReactFiberThenable.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactThenable-test.js']","The state of array of thenables gets muddled in the work loop and the Thenable module due to additional state resulting from replays, causing confusion about the state reset point."
b9e4c10e99940ceaff77e1f6f4cb0c747e91acff,1617237578,"[Fizz] Implement all the DOM attributes and special cases (#21153)

* Implement DOM format config structure

* Styles

* Input warnings

* Textarea special cases

* Select special cases

* Option special cases

We read the currently selected value from the FormatContext.

* Warning for non-lower case HTML

We don't change to lower case at runtime anymore but keep the warning.

* Pre tags innerHTML needs to be prefixed

This is because if you do the equivalent on the client using innerHTML,
this is the effect you'd get.

* Extract errors
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server/src/ReactFizzServer.js']","There are issues with implementing DOM attributes, with multiple special cases unresolved in textarea, select, option, etc. Furthermore, non-lowercase HTML usage warning isn't functioning correctly, and prefixing is needed for 'pre' tags innerHTML."
9fc04eaf3fb701cdc14f57d5aed48f3126af6c94,1630519807,"DevTools: Improve named hooks network caching (#22198)

While testing the recently-launched named hooks feature, I noticed that one of the two big performance bottlenecks is fetching the source file. This was unexpected since the source file has already been loaded by the page. (After all, DevTools is inspecting a component defined in that same file.)

To address this, I made the following changes:
- [x] Keep CPU bound work (parsing source map and AST) in a worker so it doesn't block the main thread but move I/O bound code (fetching files) to the main thread.
- [x] Inject a function into the page (as part of the content script) to fetch cached files for the extension. Communicate with this function using `eval()` (to send it messages) and `chrome.runtime.sendMessage()` to return its responses to the extension).

With the above changes in place, the extension gets cached responses from a lot of sites- but not Facebook. This seems to be due to the following:
* Facebook's response headers include [`vary: 'Origin'`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary).
* The `fetch` made from the content script does not include an `Origin` request header.

To reduce the impact of cases where we can't re-use the Network cache, this PR also makes additional changes:
- [x] Use `devtools.network.onRequestFinished` to (pre)cache resources as the page loads them. This allows us to avoid requesting a resource that's already been loaded in most cases.
- [x] In case DevTools was opened _after_ some requests were made, we also now pre-fetch (and cache in memory) source files when a component is selected (if it has hooks). If the component's hooks are later evaluated, the source map will be faster to access. (Note that in many cases, this prefetch is very fast since it is returned from the disk cache.)

With the above changes, we've reduced the time spent in `loadSourceFiles` to nearly nothing.
","['packages/react-devtools-extensions/src/__tests__/parseHookNames-test.js', 'packages/react-devtools-extensions/src/background.js', 'packages/react-devtools-extensions/src/injectGlobalHook.js', 'packages/react-devtools-extensions/src/main.js', 'packages/react-devtools-extensions/src/parseHookNames/index.js', 'packages/react-devtools-extensions/src/parseHookNames/loadSourceAndMetadata.js', 'packages/react-devtools-extensions/src/parseHookNames/parseHookNames.js', 'packages/react-devtools-extensions/src/parseHookNames/parseHookNames.worker.js', 'packages/react-devtools-extensions/src/parseHookNames/parseSourceAndMetadata.js', 'packages/react-devtools-extensions/src/parseHookNames/parseSourceAndMetadata.worker.js', 'packages/react-devtools-shared/src/PerformanceMarks.js', 'packages/react-devtools-shared/src/devtools/views/Components/HookNamesContext.js', 'packages/react-devtools-shared/src/devtools/views/Components/InspectedElementContext.js', 'packages/react-devtools-shared/src/devtools/views/DevTools.js', 'packages/react-devtools-shared/src/hookNamesCache.js']",Named hooks feature displays significant performance bottlenecks while fetching source files that have already been loaded by the page. Main thread blocking issues are present while processing CPU bound tasks such as parsing source map and AST. Inability to reutilize network caching affects performance.
1102224bbbfd587ec6088620c66f048d10856c59,1616975430,"Fix: flushSync changes priority inside effect (#21122)

When called from inside an effect, flushSync cannot synchronously flush
its updates because React is already working. So we fire a warning.

However, we should still change the priority of the updates to sync so
that they flush at the end of the current task.

This only affects useEffect because updates inside useLayoutEffect (and
the rest of the commit phase, like ref callbacks) are already sync.
","['packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactFlushSync-test.js']","When called from inside an effect, flushSync fails to synchronously flush updates because React is already occupied, leading to updates not being given desired priorities."
75955bf1d7ff6c2c1f4052f4a84dd2ce6944c62e,1570810240,"Pass prod error messages directly to constructor (#17063)

* Remove ""Invariant Violation"" from dev errors

When I made the change to compile `invariant` to throw expressions, I
left a small runtime to set the error's `name` property to ""Invariant
Violation"" to maintain the existing behavior.

I think we can remove it. The argument for keeping it is to preserve
continuity in error logs, but this only affects development errors,
anyway: production error messages are replaced with error codes.

* Pass prod error messages directly to constructor

Updates the `invariant` transform to pass an error message string
directly to the Error constructor, instead of mutating the
message property.

Turns this code:

```js
invariant(condition, 'A %s message that contains %s', adj, noun);
```

into this:

```js
if (!condition) {
  throw Error(
    __DEV__
      ? `A ${adj} message that contains ${noun}`
      : formatProdErrorMessage(ERR_CODE, adj, noun)
  );
}
```

","['packages/react-native-renderer/src/__tests__/ReactNativeError-test.internal.js', 'packages/shared/ReactError.js', 'packages/shared/__tests__/ReactError-test.internal.js', 'packages/shared/__tests__/ReactErrorProd-test.internal.js', 'packages/shared/formatProdErrorMessage.js', 'scripts/error-codes/transform-error-messages.js']","In the development mode, ""Invariant Violation"" prefixed error messages and mutation of the error's message property hampers readability and continuity in logs."
05a55a4b09b7b7c8f63778fb8252a001ca66f8d7,1642620847,"Fix change events for custom elements (#22938)

* Bypass react event system for custom elements

* Going to try fixing react event system instead

* finally got it to call onChange, but perhaps too many times

* update test

* Removed ReactDOMComponent changes, now works but still doubles for bubbles

* Maybe i should only support bubbling events

* removed some old stuff

* cleaned up changeeventplugin stuff

* prettier, lint

* removed changeeventplugin stuff

* remove unneeded gate for onInput test

* Go back to using ChangeEventPlugin

* Add input+change test

* lint

* Move logic to shouldUseChangeEvent

* use memoizedProps instead of pendingProps

* Run form control behavior before custom element behavior

* add bubbling test

* forgot to append container to body

* add child event target test

* expand <input is=...> test expectations

* Make tests more realistic

* Add extra test

* Add missing gating

* Actually fix gating

Co-authored-by: Dan Abramov <dan.abramov@me.com>
","['packages/react-dom/src/__tests__/DOMPropertyOperations-test.js', 'packages/react-dom/src/events/plugins/ChangeEventPlugin.js']","Existing React event system does not appropriately handle change events for custom elements, potentially resulting in excessive calls to onChange."
aa8266c4f7da62788156bf0bdd95fd729c04388a,1530670961,"Prepare placeholders before timing out (#13092)

* Prepare placeholders before timing out

While a tree is suspended, prepare for the timeout by pre-rendering the
placeholder state.

This simplifies the implementation a bit because every render now
results in a completed tree.

* Suspend inside an already timed out Placeholder

A component should be able to suspend inside an already timed out
placeholder. The time at which the placeholder committed is used as 
the start time for a subsequent suspend.

So, if a placeholder times out after 3 seconds, and an inner
placeholder has a threshold of 2 seconds, the inner placeholder will
not time out until 5 seconds total have elapsed.

","['packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberExpirationTime.js', 'packages/react-reconciler/src/ReactFiberPendingPriority.js', 'packages/react-reconciler/src/ReactFiberRoot.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js']","Inner placeholders within a timed out placeholder do not account for the parent placeholder's timeout duration, leading to potential premature timeouts."
ccb2a8a44eee74504f1e3f3bebc272cbb1fcc0f0,1551379838,"Replace test renderer's fake Scheduler implementation with mock build (#14970)

* Replace test renderer's fake Scheduler implementation with mock build

The test renderer has its own mock implementation of the Scheduler
interface, with the ability to partially render work in tests. Now that
this functionality has been lifted into a proper mock Scheduler build,
we can use that instead.

* Fix Profiler tests in prod

","['packages/jest-react/src/JestReact.js', 'packages/react-cache/src/__tests__/ReactCache-test.internal.js', 'packages/react-reconciler/src/__tests__/ErrorBoundaryReconciliation-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseFuzz-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/react-test-renderer/src/ReactTestRendererScheduling.js', 'packages/react-test-renderer/src/__tests__/ReactTestRendererAsync-test.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js', 'packages/react/src/__tests__/ReactProfilerDevToolsIntegration-test.internal.js', 'scripts/jest/matchers/reactTestMatchers.js', 'scripts/rollup/forks.js']","Test renderer's custom mock implementation of the Scheduler interface is redundant now with the mock Scheduler build available, causing potential inconsistencies in work rendering during tests."
0f0aca3ab35354040950ac0001fd4c01d70dceb4,1655564518,"Aborting early should not infinitely suspend (#24751)

Before this change we weren't calling onError nor onFatalError if you abort
before completing the shell.

This means that the render never completes and hangs.

Aborting early can happen before even creating the stream for AbortSignal,
before rendering starts in Node since there's an setImmediate atm, or
during rendering.
","['packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMLegacyServerImpl.js', 'packages/react-server/src/ReactFizzServer.js']","Aborting before completing the shell causes the render to hang indefinitely, even before the stream for AbortSignal is created or rendering starts in Node."
888874673f81c08d9c3cfd4a56e2e93fd728894c,1680291348,"Allow transitions to interrupt Suspensey commits (#26531)

I originally made it so that a Suspensey commit — i.e. a commit that's
waiting for a stylesheet, image, or font to load before proceeding —
could not be interrupted by transitions. My reasoning was that Suspensey
commits always time out after a short interval, anyway, so if the
incoming update isn't urgent, it's better to wait to commit the current
frame instead of throwing it away.

I don't think this rationale was correct, for a few reasons. There are
some cases where we'll suspend for a longer duration, like stylesheets —
it's nearly always a bad idea to show content before its styles have
loaded, so we're going to be extend this timeout to be really long.

But even in the case where the timeout is shorter, like fonts, if you
get a new update, it's possible (even likely) that update will allow us
to avoid showing a fallback, like by navigating to a different page. So
we might as well try.

The behavior now matches our behavior for interrupting a suspended
render phase (i.e. `use`), which makes sense because they're not that
conceptually different.
","['packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-reconciler/src/ReactFiberRootScheduler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js']","Suspensey commits (commits that wait for stylesheets, images, or fonts to load) are not interruptible by transitions, potentially leading to longer wait times and unnecessary fallbacks."
c9be16f5b6fc85e1458467a0c1e9743b15549424,1539380535,"[scheduler] Rename priority levels (#13842)

- ""Interactive"" -> ""user-blocking""
- ""Whenever"" -> ""Idle""

These are the terms used by @spanicker in their main-thread scheduling
proposal: https://github.com/spanicker/main-thread-scheduling#api-sketch

That proposal also uses ""microtask"" instead of ""immediate"" and ""default""
instead of ""normal."" Not sure about ""microtask"" because I don't think
most people know what that is. And our implementation isn't a proper
microtask, though you could use it to implement microtasks if you made
sure to wrap every entry point. I don't really have a preference between
""default"" and ""normal.""

These aren't necessarily the final names. Still prefixed by `unstable_`.
","['packages/scheduler/src/Scheduler.js', 'packages/scheduler/src/__tests__/Scheduler-test.internal.js', 'packages/scheduler/src/__tests__/SchedulerNoDOM-test.internal.js']","Current terminology for scheduler priority levels is unclear and doesn't align with industry standard terms, causing confusion among developers."
8b580a89d6dbbde8a3ed69475899addef1751116,1569297168,"Idle updates should not be blocked by hidden work (#16871)

* Idle updates should not be blocked by hidden work

Use the special `Idle` expiration time for updates that are triggered at
Scheduler's `IdlePriority`, instead of `Never`.

The key difference between Idle and Never¹ is that Never work can be
committed in an inconsistent state without tearing the UI. The main
example is offscreen content, like a hidden subtree.

¹ ""Never"" isn't the best name. I originally called it that because it
""never"" expires, but neither does Idle. Since it's mostly used for
offscreen subtrees, we could call it ""Offscreen."" However, it's also
used for dehydrated Suspense boundaries, which are inconsistent in the
sense that they haven't finished yet, but aren't visibly inconsistent
because the server rendered HTML matches what the hydrated tree would
look like.

* Reset as early as possible using local variable

* Updates in a hidden effect should be Idle

I had made them Never to avoid an extra render when a hidden effect
updates the hidden component -- if they are Idle, we have to render once
at Idle, which bails out on the hidden subtree, then again at Never to
actually process the update -- but the problem of needing an extra
render pass to bail out hidden updates already exists and we should fix
that properly instead of adding yet another special case.

","['packages/react-reconciler/src/ReactFiberExpirationTime.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.internal.js', 'packages/react/src/__tests__/ReactDOMTracing-test.internal.js', 'scripts/jest/matchers/schedulerTestMatchers.js']","Idle updates are being blocked by hidden work, leading to inconsistencies in the UI, particularly with offscreen content and dehydrated Suspense boundaries."
f411e8990ff2a6d5ea5e0813489f11747e518d7b,1678567576,"Remote `.internal` override from untrusted URL tests (#26372)

Adding `.internal` to a test file prevents it from being tested in build
mode. The best practice is to instead gate the test based on whether the
feature is enabled.

Ideally we'd use the `@gate` pragma in these tests, but the `itRenders`
test helpers don't support that.
","['packages/react-dom/src/__tests__/ReactDOMServerIntegrationUntrustedURL-test.js', 'scripts/jest/setupTests.www.js']","Untrusted URL tests are currently skipped in build mode because they are marked as `.internal`, instead of being gated according to whether the feature is enabled."
131768166b60b3bc271b54a3f93f011f310519de,1678574071,"Support Context as renderable node (#25641)

## Based on #25634

Like promises, this adds support for Context as a React node.

In this initial implementation, the context dependency is added to the
parent of child node. This allows the parent to re-reconcile its
children when the context updates, so that it can delete the old node if
the identity of the child has changed (i.e. if the key or type of an
element has changed). But it also means that the parent will replay its
entire begin phase. Ideally React would delete the old node and mount
the new node without reconciling all the children. I'll leave this for a
future optimization.
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-reconciler/src/ReactChildFiber.js', 'packages/react-reconciler/src/ReactFiberNewContext.js', 'packages/react-reconciler/src/__tests__/ReactUse-test.js', 'packages/react-server/src/ReactFizzServer.js']","Context elements are not being treated as renderable React nodes, causing inefficient reconciliation of children when context updates."
4fcc9184ac2662186cbf1470005bf2b7c67dd40b,1676632990,"Test :Add a small test for ReactTestUtils to find rendered component with type in document (#24368)

I tried to write test for the ReactTestUtils to find rendered component
with type in document

Tests before this PR

![Windows PowerShell 4_13_2022 11_35_24
PM](https://user-images.githubusercontent.com/72331432/163243620-40eb753c-4136-4793-a628-efcf9e004562.png)


Tests after this PR 

![Windows PowerShell 4_13_2022 11_35_30
PM](https://user-images.githubusercontent.com/72331432/163244704-cd17f0e3-7289-4794-895a-be03753e46de.png)
",['packages/react-dom/src/__tests__/ReactTestUtils-test.js'],"ReactTestUtils cannot find rendered components by type in document, making it challenging to write accurate tests."
d77d12510b1a1c37484d771a323e0a02cbeb9ba7,1561165534,"Expire rendering the tail of SuspenseList after a timeout (#15946)

* Expire rendering the tail of SuspenseList after a timeout

This is the first Suspense feature that isn't actually dependent on IO.

The thinking here is that it's normal for a SuspenseList to show loading
states, and it'll be designed to handle it one at a time.

However, sometimes there are lists with really big items that take a long
time to CPU render. Since data can become available as we do that, it is
likely that we have all the data and become CPU bound.

In that case, the list would naively just render until the end and then
display all items at once. I think that's actually what you want for fast
lists. However, for slow ones (like News Feed), you're better off showing
a few rows at a time.

It's not necessarily one at a time because if you can do many in a short
period of time and fit them all on the screen, then it's better to do them
all at once than pop them in one at a time very quickly.

Therefore, I use a heuristic of trying to render as many rows as I can in
500ms before giving up.

This timer starts before the first row of the tail and we only check it
after. This ensures that we always make a little progress each attempt.
An alternative approach could be to start the time before doing the head
of the list but we don't want that being slow prevent us from making
further progress.

Currently, I disable this optimization at Never priority because there's
nothing intermediate that becomes visible anyway.

* Fix tracing through a SuspenseList

This ensures that we can spawn new work during render through arbitrary
priorities.

We'll need this for other features too.

Since each priority can commit separately we need to use an array to
include the current interactions on each priority.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseList-test.internal.js', 'packages/react/src/__tests__/ReactDOMTracing-test.internal.js']","Large item lists that depend on CPU rendering in SuspenseList can become CPU bound, delaying the display of all items at once and affecting UX for slow lists. Current heuristics of rendering as many rows in 500ms before timeout may not yield optimal results in such scenarios."
267ed981466ef323b1461b013b5db8db31e31772,1549383016,"expose `TestUtils.act()` for batching actions in tests (#14744)

* expose unstable_interact for batching actions in tests

* move to TestUtils

* move it all into testutils

* s/interact/act

* warn when calling hook-like setState outside batching mode

* pass tests

* merge-temp

* move jsdom test to callsite

* mark failing tests

* pass most tests (except one)

* augh IE

* pass fuzz tests

* better warning, expose the right batchedUpdates on TestRenderer for www

* move it into hooks, test for dom

* expose a flag on the host config, move stuff around

* rename, pass flow

* pass flow... again

* tweak .act() type

* enable for all jest environments/renderers; pass (most) tests.

* pass all tests

* expose just the warning from the scheduler

* don't return values

* a bunch of changes.

can't return values from .act
don't try to await .act calls
pass tests

* fixes and nits

* ""fire events that udpates state""

* nit

* 🙄

* my bad

* hi andrew

(prettier fix)

","['packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js', 'packages/react-dom/src/__tests__/ReactDOMSuspensePlaceholder-test.js', 'packages/react-dom/src/__tests__/ReactTestUtils-test.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseFuzz-test.internal.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.internal.js']",TestUtils.act() is not exposed for batching actions in tests causing issues with state updates and jest environment compatibility.
41f920e43043ce027970cfe3e1ac65bbd2477c7a,1512679993,"Add a test-only transform to catch infinite loops (#11790)

* Add a test-only transform to catch infinite loops

* Only track iteration count, not time

This makes the detection dramatically faster, and is okay in our case because we don't have tests that iterate so much.

* Use clearer naming

* Set different limits for tests

* Fail tests with infinite loops even if the error was caught

* Add a test

","['scripts/babel/__tests__/transform-prevent-infinite-loops-test.js', 'scripts/babel/transform-prevent-infinite-loops.js', 'scripts/jest/preprocessor.js', 'scripts/jest/setupTests.js']","Tests are not able to detect infinite loops, causing them to run indefinitely without producing an error or result."
aa25824f3ebbdbbea01be48417f2f99251be1a12,1629330694,"Scheduling profiler: Fix tooltip wheel event regression (#22130)

Panning horizontally via mouse wheel used to allow you to scrub over snapshot images. This was accidentally broken by a recent change. The core of the fix for this was to update `useSmartTooltip()` to remove the dependencies array so that a newly rendered tooltip is positioned even if the mouseX/mouseY coordinates don't change (as they don't when panning via wheel).

I also cleaned a couple of unrelated things up while doing this:
* Consolidated hover reset logic formerly split between `CanvasPage` and `Surface` into the `Surface` `handleInteraction()` function.
* Cleaned up redundant ref setting code in EventTooltip.
","['packages/react-devtools-scheduling-profiler/src/CanvasPage.js', 'packages/react-devtools-scheduling-profiler/src/EventTooltip.js', 'packages/react-devtools-scheduling-profiler/src/utils/useSmartTooltip.js', 'packages/react-devtools-scheduling-profiler/src/view-base/Surface.js']","Horizontal panning using mouse wheel is not functioning on snapshot images due to a tooltip positioning issue which does not change mouseX/mouseY coordinates. Also, hover reset logic is inconsistently spread between CanvasPage and Surface."
7028ce74561b1585de401f8a70ce79b98d63849d,1662604024,"experimental_use(promise) for Server Components (#25207)

Follow up to #25084. Implements experimental_use(promise) API in 
the Server Components runtime (Flight).

The implementation is much simpler than in Fiber because there is no
state. Even the ""state"" added in this PR — to track the result of each
promise across attempts — is reset as soon as a component 
successfully renders without suspending.

There are also fewer caveats around neglecting to cache a promise
because the state of the promises is preserved even if we switch to a
different task.

Server Components is the primary runtime where this API is intended to
be used.

The last runtime where we need to implement this is the server renderer
(Fizz).
","['packages/react-reconciler/src/ReactFiberWakeable.new.js', 'packages/react-reconciler/src/ReactFiberWakeable.old.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react-server/src/ReactFlightHooks.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactFlightWakeable.js', 'packages/react/src/ReactSharedSubset.experimental.js']","Server Components lack an implementation for the experimental_use(promise) API. Additionally, tracking of promise results across attempts isn't reset immediately after a component successfully renders without suspending."
ea7b2ec2898c615f648aec30fcbcf73aed156583,1649455132,"Remove wrong return pointer warning

I'm about to refactor part of the commit phase to use recursion instead
of iteration. As part of that change, we will no longer assign the
`return` pointer when traversing into a subtree. So I'm disabling
the internal warning that fires if the return pointer is not consistent
with the parent during the commit phase.

I had originally added this warning to help prevent mistakes when
traversing the tree iteratively, but since we're intentionally switching
to recursion instead, we don't need it.

","['packages/react-dom/src/__tests__/ReactWrongReturnPointer-test.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']",The process of assigning the 'return' pointer during subtree traversal is leading to internal warnings. This is due to inconsistency with the parent during the commit phase.
8e80592a3ab2bdbd036f5af77c89fcf937b8f43b,1631035621,"Remove state queue from useSyncExternalStore (#22265)

The userspace shim of useSyncExternalStore uses a useState hook because
it's the only way to trigger a re-render. We don't actually use the
queue to store anything, because we read the current value directly
from the store.

In the native implementation, we can schedule an update on the fiber
directly, without the overhead of a queue.
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js']","useSyncExternalStore's userspace shim is utilising useState hook only to trigger re-renders and not actually using the queue to store anything, leading to unnecessary overhead."
25b18d31c8b7ffd256416672dc21c50dd22ac3dc,1603825339,"Traverse commit phase effects iteratively (#20094)

* Move traversal logic to ReactFiberCommitWork

The current traversal logic is spread between ReactFiberWorkLoop and
ReactFiberCommitWork, and it's a bit awkward, especially when
refactoring. Idk the ideal module structure, so for now I'd rather keep
it all in one file.

* Traverse commit phase effects iteratively

We suspect that using the JS stack to traverse through the tree in the
commit phase is slower than traversing iteratively.

I've kept the recursive implementation behind a flag, both so we have
the option to run an experiment comparing the two, and so we can revert
it easily later if needed.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.native.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js']",The commit phase tree traversal using the JavaScript stack is suspected to be slower than iterative traversal. The traversal logic is awkwardly spread between two files hampering refactoring.
d6e433899f387be42a3cec2115b4607f32910a3b,1597959569,"Use Global Render Timeout for CPU Suspense (#19643)

* Use Retry lane for resuming CPU suspended work

* Use a global render timeout for CPU suspense heuristics

* Fix profiler test since we're now reading time more often

* Sync to new reconciler

* Test synchronously rerendering should not render more rows
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberLane.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.new.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']",CPU suspended work does not resume correctly and synchronously rendered rows generate more than expected due to inaccuracies in render timeout for CPU suspense heuristics.
8f96c6b2ac3ff0e38f60c87b1f08deb9993526b5,1631200470,"[Bugfix] Prevent infinite update loop caused by a synchronous update in a passive effect (#22277)

* Add test that triggers infinite update loop

In 18, passive effects are flushed synchronously if they are the
result of a synchronous update. We have a guard for infinite update
loops that occur in the layout phase, but it doesn't currently work for
synchronous updates from a passive effect.

The reason this probably hasn't come up yet is because synchronous
updates inside the passive effect phase are relatively rare: you either
have to imperatively dispatch a discrete event, like `el.focus`, or you
have to call `ReactDOM.flushSync`, which triggers a warning. (In
general, updates inside a passive effect are not encouraged.)

I discovered this because `useSyncExternalStore` does sometimes
trigger updates inside the passive effect phase.

This commit adds a failing test to prove the issue exists. I will fix
it in the next commit.

* Fix failing test added in previous commit

The way we detect a ""nested update"" is if there's synchronous work
remaining at the end of the commit phase.

Currently this check happens before we synchronously flush the passive
effects. I moved it to after the effects are fired, so that it detects
whether synchronous work was scheduled in that phase.
","['packages/react-dom/src/__tests__/ReactUpdates-test.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']",Synchronous updates in a passive effect phase are causing an infinite update loop; the current guard for infinite loops in the layout phase doesn't apply here.
0c81d347b6856c0e0f1b1ca10654ce47f81f632e,1632241428,"Write artifacts to `build` instead of `build2`

Now that all the CI jobs have been migrated to the new build script,
we can start renaming the `build2` directory to `build`.

Since there are lots of scripts that reference `build2`, including
downstream scripts that live outside this repo, I'm going to keep
the `build2` directory around as a copy of `build`.

Then once all the references are updated, I will delete the copy.

",['scripts/rollup/build-all-release-channels.js'],"Artifacts are erroneously being written to `build2` instead of the default `build` directory, resulting in scripts referencing the wrong directory."
915dfe6977e17dfdf364bced50e7c26d54ee72ab,1561645394,"Slightly improve performance of hydration. (#15998)

* Slightly improve performance of hydration.

Avoid loading nodeType and data couple times from the same node in a row,
but instead load them only once, which will help engines to run this code
faster, especially during startup of the application. The general approach
is still not ideal, since hydrating this way forces the browser engine
to materialize JavaScript wrapper objects for all DOM nodes, even if they
are not interesting to hydration itself.

* Fix condition for COMMENT_NODEs.

* Improve general code readability

",['packages/react-dom/src/client/ReactDOMHostConfig.js'],"Repeated loading of nodeType and data from the same node during hydration is slowing down application startup. Current approach forces all DOM nodes, including irrelevant ones, to materialize JavaScript wrapper objects."
8e69bc45aa2edf9fba0f5a26f1db6a4a1f87d70f,1667343757,"Make host context use null as empty and only error in dev (#25609)

Makes it slightly more blazing.

No host config actually uses null as any useful and we use this as a
placeholder value anyway. It's also better for perf since it doesn't let
two different hidden classes pass around. It's also a magic place holder
that triggers error if we do try to access anything from it.
","['packages/react-reconciler/src/ReactFiberHostContext.new.js', 'packages/react-reconciler/src/ReactFiberHostContext.old.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js']",Using non-null placeholders in the host context causes performance issues and potential errors when accessing inaccessible properties.
7eb7c5a350f10a29c3629a72d08e2183ea2d9920,1556113066,"Match Fibers to saved selection as they mount

This implements matching Fibers against the tracked selection path.

The algorithm is optimized to do as little checks as possible:

* When not trying to restore selection, we don't do anything
* When restoring selection, we only check .return pointers of new mounts
* Only when .return pointers match our current deepest match, we compare the frames

",['src/backend/renderer.js'],"During restoration of selection, Fibers aren't correctly being matched against the tracked selection path, resulting in unnecessary checks and inefficient computations."
cbc484b5ae8cb683aef5ee61fac468679e9bb2aa,1637804229,"Update attribute-behavior fixture (#22522)

* Fix missing key warning

* Add build instructions

* Update interpretation now that React 17 is latest stable and 18 is next

* Ignore ReactDOM.render deprecation warning

* Ensure a server implementation with `renderToString` is used

* Update AttributeTableSnapshot

* Ensure Popover doesn't overflow
",['fixtures/attribute-behavior/src/App.js'],"Missing key warning in attribute-behavior fixture, vague build instructions, outdated React version interpretation, ignored ReactDOM.render deprecation warning, non-usage of `renderToString` in server implementation, and Popover overflows are causing multiple issues.
"
bcd24a6706cd802e49e9c0a509a42893ddceca7b,1640118402,"DevTools: Only show StrictMode badge on root elements (#23012)

* DevTools: Only show StrictMode badge on root elements

Showing an inline non-compliance badge for every element in the tree is noisy. This commit changes it so that we only show inline icons for root elements (although we continue to show an icon for inspected elements regardless).

",['packages/react-devtools-shared/src/devtools/views/Components/Element.js'],"Inline non-compliance badges are appearing on every element in the DevTools tree, making the interface noisy and hard to interpret."
1b5f043e015afae9e203bec0388805fa610ed917,1556451957,"Fix for 'Attempting to use a disconnected port object'

Fixes https://github.com/bvaughn/react-devtools-experimental/issues/217

The error reproduces with any two React websites, e.g. `https://reactjs.org` and `https://nextjs.org`, by keeping the DevTools Components tab open and switching between these websites in the same browser tab.

There are several issues with the code that contribute to this:
1. `Bridge` leaves behind a dangling timer that fires `_flush` after the bridge has been abandoned (""shutdown"").
2. `bridge.send('shutdown')` is asynchronous, so the event handlers do not get unsubscribed in time.
3. `port.onDisconnect` does not trigger on in-tab navigation like new URL or back/forward navigation.
4. State management design of the code that uses shared variables and callbacks makes it hard to handle race conditions originating from the browser.

This commit cleans up some of the lacking symmetry when using `addListener`/`removeListener`, but the code in `shells/browser/shared/src/main.js` is hard to reason about with regards to race conditions, and there are many possible race conditions originating from the browser, so maybe there could be a better design paradigm (like a formal state machine) to manage the state changes in response to sequences of events than plain old event listeners, callbacks, and shared variables.

Unrelated, but clicking Chrome Back/Forward/Back/Forward very fast makes the browser and the DevTools and the DevTools of DevTools stall and become unresponsive for some time, then recovers but the Back/Forward/Stop/Refresh button and favicon loading indicator may remain broken. Looks like a Chrome bug, some kind of a temporary deadlock in handling the browser history.

","['flow.js', 'shells/browser/shared/src/backend.js', 'shells/browser/shared/src/main.js', 'shells/dev/src/backend.js', 'shells/dev/src/devtools.js', 'src/__tests__/setupTests.js', 'src/bridge.js', 'src/types.js']","Switching between different React websites in the same browser tab with the DevTools Components tab open leads to 'Attempting to use a disconnected port object' error due to state management issues and a dangling timer. Also, rapid navigation results in temporary unresponsiveness.
"
2d2f2af29bc3175530a158bc90189fc6f12f7855,1694803999,"Restrict React DOM imports from Server Components (#27382)

Adds a separate entry point for the react-dom package when it's accessed
from a Server Component environment, using the ""react-server"" export
condition.

When you're inside a Server Component module, you won't be able to
import client-only APIs like useState. This applies to almost all React
DOM exports, except for Float ones like preload.
","['packages/react-dom/npm/react-dom.shared-subset.js', 'packages/react-dom/src/ReactDOMSharedSubset.js', 'scripts/rollup/bundles.js', 'scripts/rollup/forks.js', 'scripts/shared/inlinedHostConfigs.js']","Server Component environment is able to import client-only APIs like useState from the react-dom package, leading to potential misuse of client-side APIs."
fd557d453d37eab29eca18f0507750ab2093669d,1551807687,"Warn on mount when deps are not an array (#15018)

* Warn on mount when deps are not an array

* Check other Hooks

* I can't figure out how to fix error/warning nesting lint

But it doesn't really matter much because we test other cases in the other test.

","['packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']","When mounting, no warning is generated if dependencies are not an array, potentially leading to silent failures. Same issue with other Hooks."
0e0b1a45fa09c0a8b162cde655016af97eda5c88,1646242008,"Show DevTools backend and frontend versions in UI (#23399)

This information can help with bug investigation for renderers (like React Native) that embed the DevTools backend into their source (separately from the DevTools frontend, which gets run by the user).

If the DevTools backend is too old to report a version, or if the version reported is the same as the frontend (as will be the case with the browser extension) then only a single version string will be shown, as before. If a different version is reported, then both will be shown separately.
","['packages/react-devtools-shared/src/backend/agent.js', 'packages/react-devtools-shared/src/bridge.js', 'packages/react-devtools-shared/src/devtools/store.js', 'packages/react-devtools-shared/src/devtools/views/Settings/GeneralSettings.js', 'packages/react-devtools-shell/src/app/index.js']","There is a lack of visibility regarding the version information of DevTools backend and frontend in the UI, which is necessary for effective bug investigation when dealing with embedded DevTools backend applications like React Native."
81346764bb62dc3fb04ccbf7f507cd390a249840,1626277220,"Run persistent tests in more configurations in CI (#21880)

I noticed that `enableSuspenseLayoutEffectSemantics` is not fully
implemented in persistent mode. I believe this was an oversight
because we don't have a CI job that runs tests in persistent mode and
with experimental flags enabled.

This adds additional test configurations to the CI job so we don't miss
stuff like this again. It doesn't fix the failing tests — I'll address
that separately.
","['packages/react-reconciler/src/__tests__/ReactOffscreen-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js', 'scripts/jest/TestFlags.js']","Lack of CI job to run tests in persistent mode along with experimental flags enabled, resulting in oversights like incomplete implementation of `enableSuspenseLayoutEffectSemantics` in persistent mode."
4eed18dd72cb811de11bd34b8ff86e4d193c7d4e,1517512557,"Invoke both legacy and UNSAFE_ lifecycles when both are present (#12134)

* Invoke both legacy and UNSAFE_ lifecycles when both are present

This is to support edge cases with eg create-react-class where a mixin defines a legacy lifecycle but the component being created defines an UNSAFE one (or vice versa).

I did not warn about this case because the warning would be a bit redundant with the deprecation warning which we will soon be enabling. I could be convinced to change my stance here though.

* Added explicit function-type check to SS ReactPartialRenderer

","['packages/react-dom/src/__tests__/ReactComponentLifeCycle-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerLifecycles-test.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-test-renderer/src/ReactShallowRenderer.js', 'packages/react-test-renderer/src/__tests__/ReactShallowRenderer-test.js', 'packages/react/src/__tests__/createReactClassIntegration-test.js']","When a mixin defines a legacy lifecycle and the component being created defines an UNSAFE one (or vice versa) in create-react-class, only one lifecycle is invoked causing functionality issues."
996e4c0d56dabab382ca932cd5b8517e63020999,1670853616,"Offscreen add attach (#25603)

`Offscreen.attach` is imperative API to signal to Offscreen that its
updates should be high priority and effects should be mounted. Coupled
with `Offscreen.detach` it gives ability to manually control Offscreen.
Unlike with mode `visible` and `hidden`, it is developers job to make
sure contents of Offscreen are not visible to users.
`Offscreen.attach` only works if mode is `manual`.

Example uses:
```jsx
let offscreenRef = useRef(null);
<Offscreen mode={'manual'} ref={offscreenRef)}>
  <Child />
</Offscreen>

// ------

// Offscreen is attached by default. 
// For example user scrolls away and Offscreen subtree is not visible anymore.
offscreenRef.current.detach();


// User scrolls back and Offscreen subtree is visible again.
offscreenRef.current.attach();
```

Co-authored-by: Andrew Clark <git@andrewclark.io>
","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberOffscreenComponent.js', 'packages/react-reconciler/src/__tests__/ReactOffscreen-test.js']","Offscreen component not working as expected when in manual mode, leading to visibility issues with its content by users; there is no API method to make updates high-priority or mount effects."
0e8a5aff3ddf0f863839a924738f958fd940e3be,1634841704,"Scheduling Profiler: Add marks for component effects (mount and unmount) (#22578)

DevTools (and its profilers) should not require users to be familiar with React internals. Although the scheduling profiler includes a CPU sample flame graph, it's there for advanced use cases and shouldn't be required to identify common performance issues.

This PR proposes adding new marks around component effects. This will enable users to identify components with slow effect create/destroy functions without requiring them to dig through the call stack. (Once #22529 lands, these new marks will also include component stacks, making them more useful still.)

For example, here's a profile with a long-running effect. Without this change, it's not clear why the effects phase takes so long. After this change, it's more clear why that the phase is longer because of a specific component.

We may consider adding similar marks around render phase hooks like useState, useReducer, useMemo. I avoided doing that in this PR because it would be a pretty pervasive change to the ReactFiberHooks file.

Note that this change should have no effect on production bundles since everything is guarded behind a profiling feature flag.

Going to tag more people than I normally would for this pR, since it touches both reconciler and DevTools packages. Feel free to ignore though if you don't have strong feelings.

Note that although this PR adds new marks to the scheduling profiler, it's done in a way that's backwards compatible for older profiles.
","['packages/react-devtools-scheduling-profiler/src/EventTooltip.js', 'packages/react-devtools-scheduling-profiler/src/content-views/ComponentMeasuresView.js', 'packages/react-devtools-scheduling-profiler/src/content-views/constants.js', 'packages/react-devtools-scheduling-profiler/src/import-worker/__tests__/preprocessData-test.internal.js', 'packages/react-devtools-scheduling-profiler/src/import-worker/preprocessData.js', 'packages/react-devtools-scheduling-profiler/src/types.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/SchedulingProfiler.js', 'packages/react-reconciler/src/__tests__/SchedulingProfiler-test.internal.js']","DevTools Scheduling Profiler is missing marks for component effects (mount and unmount), making it difficult for users to identify components with slow effect create/destroy functions without delving into call stacks."
13d0225c7d4715d98772a85d8deb26d244921287,1695932972,"Pass lanes as argument to performSyncWorkOnRoot (#26763)

`performSyncWorkOnRoot` has only a single caller, and the caller already
computes the next lanes (`getNextLanes`) before deciding to call the
function. So we can pass them as an argument instead of computing the
lanes again.

There was already a TODO comment about this, but it was mostly perf
related. However, @rickhanlonii noticed a discrepancy where the inner
`getNextLanes` call was not being passed the current work-in- progress
lanes. Usually this shouldn't matter because there should never be
work-in-progress sync work; it should finish immediately. There is one
case I'm aware of where we exit the work loop without finishing a sync
render, which is selective hydration, but even then it should switch to
the sync hydration lane, not the normal sync lane. So something else is
probably going on. I suspect it might be related to the
`enableUnifiedSyncLane` experiment.

This is likely related to a regression found internally at Meta. We're
still working on getting a proper regression test; I can come up with a
contrived one but I'm not confident it'll be the same as the actual
regression until we get a better repro.
","['packages/react-reconciler/src/ReactFiberRootScheduler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js']","Multiple computations of next lanes in 'performSyncWorkOnRoot' could potentially lead to discrepancies and unintended behaviour, especially while handling work-in-progress sync work or during selective hydration."
6e4f7c788603dac7fccd227a4852c110b072fe16,1535507891,"Profiler integration with interaction-tracking package (#13253)

* Updated suspense fixture to use new interaction-tracking API

* Integrated Profiler API with interaction-tracking API (and added tests)

* Pass interaction Set (rather than Array) to Profiler onRender callback

* Removed some :any casts for enableInteractionTracking fields in FiberRoot type

* Refactored threadID calculation into a helper method

* Errors thrown by interaction tracking hooks use unhandledError to rethrow more safely.
Reverted try/finally change to ReactTestRendererScheduling

* Added a $FlowFixMe above the FiberRoot :any cast

* Reduce overhead from calling work-started hook

* Remove interaction-tracking wrap() references from unwind work in favor of managing suspense/interaction continuations in the scheduler
* Moved the logic for calling work-started hook from performWorkOnRoot() to renderRoot()

* Add interaction-tracking to bundle externals. Set feature flag to __PROFILE__

* Renamed the freezeInteractionCount flag and replaced one use-case with a method param

* let -> const

* Updated suspense fixture to handle recent API changes

","['fixtures/unstable-async/suspense/src/components/App.js', 'fixtures/unstable-async/suspense/src/index.js', 'packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberRoot.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js', 'packages/react/src/__tests__/ReactProfilerDevToolsIntegration-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'scripts/rollup/bundles.js', 'scripts/rollup/modules.js']","Interaction-tracking API integration with the Profiler API, and with suspense/interaction continuations in the scheduler, is missing, leading to errors from tracking hooks and improper thread ID calculation."
b04c7fa28cadaa76fd8390963fe2b8d2a7962c50,1586470176,"Decouple expiration times and transition timeouts (#17920)

We currently use the expiration time to represent the timeout of a
transition. Since we intend to stop treating work priority as a
timeline, we can no longer use this trick.

In this commit, I've changed it to store the event time on the update
object instead. Long term, we will store event time on the root as a map
of transition -> event time. I'm only storing it on the update object
as a temporary workaround to unblock the rest of the changes.

","['packages/react-reconciler/src/ReactFiberClassComponent.new.js', 'packages/react-reconciler/src/ReactFiberExpirationTime.new.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberNewContext.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactUpdateQueue.new.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js']","The system incorrectly uses expiration time to represent transition timeouts, which comes inconsistent as we intend to stop considering work priority as a timeline."
18dff7990a81b3ff1e716dd2cf113c6027bdcc06,1667852597,"[DevTools] add support for HostSingleton & HostResource (#25616)

## Summary

This is to support two new reconciler work tags `HostSingleton` and
`HostResource` introduced in PRs #25243 #25426. The behavior is
described below.
I also renamed an option in components settings from an internal concept
""host"" to more understood ""dom nodes""

## How did you test this change?

Tested on the latest Vercel playground app
https://github.com/vercel/app-playground/

Before the change, devtools cannot show correct display name for these
new elements. Also, some unnecessary internal details are exposed to
users.
<img width=""1395"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/199578181-c4e4ea74-baa1-4507-83d0-91a62ad7de5f.png"">

After the change, the display names are correctly shown and the ""state""
would always be hidden in the detail view.
<img width=""1417"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/199578442-adc1951d-7d5b-4b84-ad64-85bcf7a8ebcc.png"">

These elements will also be hidden just like other native dom elements
(e.g. `<div>`)
<img width=""836"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/199578598-2dfacf64-ddc9-42b5-a246-dd0b09f629af.png"">
","['packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-shared/src/backend/types.js', 'packages/react-devtools-shared/src/devtools/views/Components/InspectedElementStateTree.js', 'packages/react-devtools-shared/src/devtools/views/Settings/ComponentsSettings.js']","DevTools does not display correct names for new reconciler work tags `HostSingleton` and `HostResource` elements, exposing unnecessary internal details to users."
7785a5263e0bbbdcb997a84a840c9c039fcf6e5d,1585936189,"[DevTools] - Highlight rendered by elements on hover. (#18479)

* [DevTools] - Highlight rendered by elements on hover.

* Fixed formatting issue.

* DevTools - Extracted highlight logic to custom hook. Added highlight support for rendered by elements.

* Removed unnecessary padding style

* Removed unnecessary wrapper function.

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>
","['packages/react-devtools-shared/src/devtools/views/Components/SelectedElement.js', 'packages/react-devtools-shared/src/devtools/views/Components/Tree.js', 'packages/react-devtools-shared/src/devtools/views/hooks.js']","DevTools: Hovering doesn't highlight 'rendered by' elements, and there's also unnecessary padding style and wrapper function."
f87e97a0a67fa7cfd7e6f2ec985621c0e825cb23,1682439994,"Handle line endings correctly on Windows in build script for RN (#26727)

## Summary

We added some post-processing in the build for RN in #26616 that broke
for users on Windows due to how line endings were handled to the regular
expression to insert some directives in the docblock. This fixes that
problem, reported in #26697 as well.

## How did you test this change?

Verified files are still built correctly on Mac/Linux. Will ask for help
to test on Windows.
",['scripts/rollup/packaging.js'],Post-processing in the build for React Native is breaking for users on Windows due to incorrect handling of line endings in regular expressions for inserting directives in docblocks.
f828bad387f573c462d2a58afb38aea8bdbe9cb5,1678713942,"Extracted definition and access to public instances to a separate module in Fabric (#26321)

## Summary

The current definition of `Instance` in Fabric has 2 fields:
- `node`: reference to the native node in the shadow tree.
- `canonical`: public instance provided to users via refs + some
internal fields needed by Fabric.

We're currently using `canonical` not only as the public instance, but
also to store internal properties that Fabric needs to access in
different parts of the codebase. Those properties are, in fact,
available through refs as well, which breaks encapsulation.

This PR splits that into 2 separate fields, leaving the definition of
instance as:
- `node`: reference to the native node in the shadow tree.
- `publicInstance`: public instance provided to users via refs.
- Rest of internal fields needed by Fabric at the instance level.

This also migrates all the current usages of `canonical` to use the
right property depending on the use case.

To improve encapsulation (and in preparation for the implementation of
this [proposal to bring some DOM APIs to public instances in React
Native](https://github.com/react-native-community/discussions-and-proposals/pull/607)),
this also **moves the creation of and the access to the public instance
to separate modules** (`ReactFabricPublicInstance` and
`ReactFabricPublicInstanceUtils`). In a following diff, that module will
be moved into the `react-native` repository and we'll access it through
`ReactNativePrivateInterface`.

## How did you test this change?

Existing unit tests.
Manually synced the PR in Meta infra and tested in Catalyst + the
integration with DevTools. Everything is working normally.
","['packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactFabricComponentTree.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactFabricPublicInstance.js', 'packages/react-native-renderer/src/ReactFabricPublicInstanceUtils.js', 'packages/react-native-renderer/src/ReactNativeComponentTree.js', 'packages/react-native-renderer/src/ReactNativeFiberInspector.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-native-renderer/src/ReactNativePublicCompat.js', 'packages/react-native-renderer/src/ReactNativeTypes.js', 'packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactFabricAndNative-test.internal.js', 'scripts/flow/react-native-host-hooks.js']","The `Instance` definition in Fabric is breaking encapsulation due to the usage of `canonical` for storing both the public instance and internal properties, causing a mix of user and internal data.
"
7a833dad95b3059ebfdfba44d3fa68e1301d8e6a,1522287702,"setState() in componentDidMount() should flush synchronously even with createBatch() (#12466)

* Add a failing test for setState in cDM during batch.commit()

* Copy pasta

* Flush all follow-up Sync work on the committed batch

* Nit: Use performSyncWork

Call performSyncWork right after flushing the batch. Does effectively
the same thing by reusing the existing function.

Also added some comments.

* Delete accidentally duplicated test

","['packages/react-dom/src/__tests__/ReactDOMRoot-test.internal.js', 'packages/react-reconciler/src/ReactFiberScheduler.js']","Calling setState() in componentDidMount() does not flush synchronously when executed with createBatch(), leading to discrepancies in state management."
c73ab39c1f5f466991b97c9e0c782910e3b1cf37,1555438587,"React events: make nested Focus work as expected (#15421)

This patch makes a change to the Focus module so that it only reports
focus/blur on the host node that's a direct child of the event component. This
brings the expected behaviour in line with the browser default of focus/blur
events not bubbling for Pressable.
","['packages/react-events/src/Focus.js', 'packages/react-events/src/__tests__/Focus-test.internal.js']",Focus/Blur events in the Focus module are not consistent with browser default behavior while working with nested event components in Pressable.
56d1b0fb5991e954c21609dce80d9849eda115fe,1566231715,"[react-events] DOM event testing library (#16433)

This patch formalizes the mock native events and event sequences used in unit tests.

The `createEventTarget` function returns an object that can be used to dispatch native event sequences on the target without having to manually do so across all the scenarios we need to account for. Unit tests can be written as if we were only working with PointerEvent, but they will dispatch realistic native event sequences based on the execution environment (e.g., is PointerEvent supported?) and pointer type.

```
describe.each(environments)('Suite', (hasPointerEvents) => {
  beforeEach(() => {
    // setup
  });

  test.each(pointerTypes)('Test', (pointerType) => {
    const target = createEventTarget(node);
    target.pointerdown({pointerType});
    expect(callback).toBeCalled();
  });
});
```

Every native event that is dispatched now includes a complete object by default. The properties of the events can be customized. Properties that shouldn't be relied on in responder implementations are excluded from the mock native events to ensure tests will fail. Equivalent properties are normalized across different event types, e.g., 'pointerId' is converted to 'identifier' before a TouchEvent is dispatched.
","['packages/react-events/src/dom/Press.js', 'packages/react-events/src/dom/Scroll.js', 'packages/react-events/src/dom/__tests__/ContextMenu-test.internal.js', 'packages/react-events/src/dom/__tests__/Focus-test.internal.js', 'packages/react-events/src/dom/__tests__/FocusWithin-test.internal.js', 'packages/react-events/src/dom/__tests__/Hover-test.internal.js', 'packages/react-events/src/dom/__tests__/Keyboard-test.internal.js', 'packages/react-events/src/dom/__tests__/Press-test.internal.js', 'packages/react-events/src/dom/__tests__/Scroll-test.internal.js', 'packages/react-events/src/dom/test-utils.js', 'packages/react-events/src/dom/testing-library/domEnvironment.js', 'packages/react-events/src/dom/testing-library/domEventSequences.js', 'packages/react-events/src/dom/testing-library/domEvents.js', 'packages/react-events/src/dom/testing-library/index.js']","Unit tests require manual dispatch of native event sequences across various scenarios, lacking a streamlined process to generate and manage these events for different execution environments and pointer types."
a56309fb883fcb04d7c3d1e4bc40987175c473f0,1585011225,"[Flight] Integrate Blocks into Flight (#18371)

* Resolve Server-side Blocks instead of Components

React elements should no longer be used to extract arbitrary data but only
for prerendering trees.

Blocks are used to create asynchronous behavior.

* Resolve Blocks in the Client

* Tests

* Bug fix relay JSON traversal

It's supposed to pass the original object and not the new one.

* Lint

* Move Noop Module Test Helpers to top level entry points

This module has shared state. It needs to be external from builds.

This lets us test the built versions of the Noop renderer.
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-client/src/__tests__/ReactFlight-test.js', 'packages/react-flight-dom-relay/src/ReactFlightDOMRelayServerHostConfig.js', 'packages/react-flight-dom-relay/src/__mocks__/ReactFlightDOMRelayClientIntegration.js', 'packages/react-flight-dom-relay/src/__mocks__/ReactFlightDOMRelayServerIntegration.js', 'packages/react-flight-dom-relay/src/__tests__/ReactFlightDOMRelay-test.internal.js', 'packages/react-flight-dom-webpack/src/ReactFlightClientWebpackBundlerConfig.js', 'packages/react-flight-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-noop-renderer/flight-modules.js', 'packages/react-noop-renderer/npm/flight-modules.js', 'packages/react-noop-renderer/src/ReactNoopFlightClient.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react/src/ReactBlock.js', 'packages/shared/ReactSymbols.js', 'packages/shared/isValidElementType.js', 'scripts/flow/react-relay-hooks.js', 'scripts/rollup/bundles.js', 'scripts/rollup/validate/eslintrc.cjs.js', 'scripts/rollup/validate/eslintrc.umd.js']","React elements are being used to extract arbitrary data leading to inappropriate handling of asynchronous behavior. Shared state in Noop Module Test Helpers isn't external from builds, potentially introducing inconsistencies."
7a3cb8f9cf43591afc74722ece9e3216ccc98128,1694536242,"Track the key path difference between right before the first array (#27360)

There's a subtle difference if you suspend before the first array or
after. In Fiber, we don't deal with this because we just suspend the
parent and replay it if lazy() or Usable are used in its child slots. In
Fizz we try to optimize this a bit more and enable resuming inside the
component.

Semantically, it's different if you suspend/postpone before the first
child array or inside that child array. Because when you resume the
inner result might be another array and either that's part of the parent
path or part of the inner slot.

There might be more clever way of structuring this but I just use -1 to
indicate that we're not yet inside the array and is in the root child
position. If that renders an element, then that's just the same as the 0
slot.

We need to also encode this in the resuming. I called that resuming the
element or resuming the slot.
","['packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-server/src/ReactFizzServer.js']","In Fizz, if suspension/postponement occurs before the first child array or inside it, this causes key path discrepancies when resuming as it's not clear whether the resumed inner result is part of the parent path or part of the inner slot."
825682390d825bb51be2e06835cf7e3458352e83,1512672342,"ValidateDOMNesting tests(#11299) (#11742)

*  ValidateDOMNesting tests(#11299)

 * Rewrite tests using only public API.
 * Modified the tests to prevent duplication of code.
 * Code review changes implemented.
 * Removed the .internal from the test file name as
   its now written using public APIs.

* Remove mutation

* Remove unnecessary argument

Now that we pass warnings, we don't need to pass a boolean.

* Move things around a bit, and add component stack assertions

","['packages/react-dom/src/__tests__/validateDOMNesting-test.internal.js', 'packages/react-dom/src/__tests__/validateDOMNesting-test.js', 'packages/react-dom/src/client/validateDOMNesting.js']","Existing DOM Nesting validation tests contain duplicative code and utilize private API, making maintenance and updates challenging."
f88deda83bab316385f39e8479850527cda90607,1523322996,"Throw more specific error if passed undefined in React.cloneElement (#12534)

* throw error if passed undefined

* should be TypeError

* simplify

* use invariant

* editor messed up spacing

* better check

* Revert ""better check""

This reverts commit 273370758eafa54d329577b3dc942c70587eccd3.

* yarn prettier test was failing

* more explicit copy

* es6 import

* tests

* formatting

* Move import

","['packages/react/src/ReactElement.js', 'packages/react/src/__tests__/ReactElementClone-test.js']",React.cloneElement function is throwing a non-specific error when it is passed undefined as an argument.
581f0c42ed4baa07309dbda296dc93a101bd922b,1646939934,"[Flight] add support for Lazy components in Flight server (#24068)

* [Flight] add support for Lazy components in Flight server

Lazy components suspend until resolved just like in Fizz. Add tests to confirm Lazy works with Shared Components and Client Component references.

* Support Lazy elements

React.Lazy can now return an element instead of a Component. This commit implements support for Lazy elements when server rendering.

* add lazy initialization to resolveModelToJson

adding lazying initialization toResolveModelToJson means we use attemptResolveElement's full logic on whatever the resolved type ends up being. This better aligns handling of misued Lazy types like a lazy element being used as a Component or a lazy Component being used as an element.
","['packages/react-client/src/__tests__/ReactFlight-test.js', 'packages/react-server/src/ReactFlightServer.js']","Server-side rendering doesn't support React Lazy components, which could lead to inconsistencies in component handling. This issue becomes evident when a Lazy component is used in the Flight server."
58605f798803081069971d9a0342ba08563248af,1678208850,"Codemod act -> await act (2/?) (#26335)

Similar to the rationale for `waitFor` (see #26285), we should always
await the result of an `act` call so that microtasks have a chance to
fire.

This only affects the internal `act` that we use in our repo, for now.
In the public `act` API, we don't yet require this; however, we
effectively will for any update that triggers suspense once `use` lands.
So we likely will start warning in an upcoming minor.
","['packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js', 'packages/react-dom/src/__tests__/ReactDOMSuspensePlaceholder-test.js', 'packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactFabricHostComponent-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.js', 'packages/react-reconciler/src/__tests__/ReactNoopRendererAct-test.js', 'packages/react-reconciler/src/__tests__/ReactOffscreen-test.js', 'packages/react-reconciler/src/__tests__/ReactThenable-test.js', 'packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js', 'packages/use-sync-external-store/src/__tests__/useSyncExternalStoreNative-test.js', 'packages/use-sync-external-store/src/__tests__/useSyncExternalStoreShared-test.js']","`act` calls not awaited could result in microtasks not getting a chance to execute, potentially affecting any updates that trigger suspense when `use` lands."
ac2cff4b10624b87b14333d9b7c5d41a51fac0ec,1605720219,"Warn if commit phase error thrown in detached tree (#20286)

Until `skipUnmountedBoundaries` lands again, we need some way to detect
when errors are thrown inside a deleted tree. I've added a warning to
`captureCommitPhaseError` that fires when we reach the root of a subtree
without finding either a boundary or a HostRoot.

Even after `skipUnmountedBoundaries`  lands, this warning could be a
useful guard against internal bugs, like a bug in the
`skipUnmountedBoundaries` implementation itself.

In the meantime, do not add this warning to the allowlist; this is only
for our internal use. For this reason, I've also only added it to the
new fork, not the old one, to prevent this from accidentally leaking
into the open source build.
","['packages/react-dom/src/events/__tests__/DOMPluginEventSystem-test.internal.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js']","Errors thrown inside a deleted tree are not currently detectable, potentially leading to missed captures in `captureCommitPhaseError` when reaching the root of a subtree without a boundary or a HostRoot."
56efc65e5857abe22062c9506207abc35c9532d1,1636658542,"DevTools should properly report re-renders due to (use)context changes (#22746)

Note that this only fixes things for newer versions of React (e.g. 18 alpha). Older versions will remain broken because there's not a good way to read the most recent context value for a location in the tree after render has completed. This is because React maintains a stack of context values during render, but by the time DevTools is called– render has finished and the stack is empty.
","['packages/react-devtools-shared/src/__tests__/profilerChangeDescriptions-test.js', 'packages/react-devtools-shared/src/backend/renderer.js']","DevTools improperly reporting re-renders due to changes in (use)context, especially noticeable with older versions of React, leading to difficulties in reading most recent context values post-render."
f93e34e98052d7bb6594bd02012e13432e039445,1512685739,"Remove an extra allocation for open source bundles (#11797)

* Remove EventListener fbjs utility

EventListener normalizes event subscription for <= IE8. This is no
longer necessary. element.addEventListener is sufficient.

* Remove an extra allocation for open source bundles

* Split into two functions to avoid extra runtime checks

* Revert unrelated changes

","['packages/react-dom/src/events/EventListener.js', 'packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-dom/src/events/forks/EventListener-www.js', 'scripts/flow/environment.js', 'scripts/rollup/forks.js']",Unnecessary event listener utility and extra allocation for open source bundles leading to additional runtime checks and wasted resources.
75662d6a7d135df9d10055f49c3a4ca09fe4efcc,1646102100,"Remove hacky stream.locked check, declare as byte stream instead (#23387)

We used to check for stream.locked in pull to see if we've been passed to
something that reads yet.

This was a bad hack because it won't actually call pull again if that changes.

The source of this is because the default for ""highWaterMark"" is 1 on some
streams. So it always wants to add one ""chunk"" (of size 1).

If we leave our high water mark as 0, we won't fill up any buffers unless we're
asked for more.

This web API is somewhat odd because it would be way more efficient if it
just told us how much the recipient wants instead of calling us once per
chunk.

Anyway, I turns out that if we define ourselves as a ""bytes"" type of
stream, the default also happens to be a high water mark of 0 so we can
just use that instead.
","['packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js']",The check for stream.locked in 'pull' method is unreliable and inefficient due to incorrect highWaterMark default causing unnecessary buffer fillup.
787c2ad2d97d001f35757877abd623c9a6b87afd,1509570084,"Constructor error message (#11395)

* Constructor test and fix complete

* Linters and prettier run

* Remove unnecessary checks

* Update error message

* Updat unit test

* prettier

* Tweak the check to be more specific

* Move tests to ReactCompositeComponent-test

* add error call count and remove line

","['packages/react-dom/src/__tests__/ReactCompositeComponent-test.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js']","Current error message generated by constructors is not specific or informative enough, potentially leading to confusion during debugging."
970fa122d8188bafa600e9b5214833487fbf1092,1594389485,"Use lanes to check if a render is a Suspense retry (#19307)

Now that Suspense retries have their own dedicated set of lanes
(#19287), we can determine if a render includes only retries by checking
if its lanes are a subset of the retry lanes.

Previously we inferred this by checking
`workInProgressRootLatestProcessedEventTime`. If it's not set, that
implies that no updates were processed in the current render, which
implies it must be a Suspense retry. The eventual plan is to get rid of
`workInProgressRootLatestProcessedEventTime` and instead track event
times on the root; this change is one the steps toward that goal.

The relevant tests were originally added in #15769.
","['packages/react-reconciler/src/ReactFiberLane.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","Determining a Suspense retry render is currently inferred through `workInProgressRootLatestProcessedEventTime`, which is unreliable and impedes plans of tracking event times on root."
b8c96b136d9968fd593ea0ed44adfc2ac39b6b8d,1657646842,"Move ref commit effects inside switch statement

Only certain fiber types can have refs attached to them, so this moves the
Ref effect logic out of the common path and into the corresponding branch
of the layout phase's switch statement.

The types of fibers this affects are host components and class components.
Function components are not affected because they can only have a ref via
useImperativeHandle, which has a different implementation. The experimental
Scope type attaches its refs in the mutation phase, not the layout phase.

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']","Moving ref commit effects out of the common path can affect only host components and class components, while function components can have a ref via useImperativeHandle. The issue with experimental Scope type as it attaches its refs in the mutation phase, not the layout phase."
5027eb4650730d2bc7f909f2567828ffdf938642,1618588907,"DevTools fork console patching logic (#21301)

React has its own component stack generation code that DevTools embeds a fork of, but both of them use a shared helper for disabling console logs. This shared helper is DEV only though, because it was intended for use with React DEV-only warnings and we didn't want to unnecessarily add bytes to production builds.

But DevTools itself always ships as a production build– even when it's used to debug DEV bundles of product apps (with third party DEV-only warnings). That means this helper was always a noop.

The resolveCurrentDispatcher method was changed recently to replace the thrown error with a call to console.error. This newly logged error ended up slipping through and being user visible because of the above issue.

This PR updates DevTools to also fork the console patching logic (to remove the DEV-only guard).

Note that I didn't spot this earlier because my test harness (react-devtools-shell) always runs in DEV mode. 🤡
","['packages/react-devtools-core/webpack.backend.js', 'packages/react-devtools-shared/src/backend/DevToolsComponentStackFrame.js', 'packages/react-devtools-shared/src/backend/DevToolsConsolePatching.js']","DevTools' shared helper for disabling console logs doesn't function in production builds resulting in user-visible errors, due to its design for DEV-only React warnings."
40addbd110335c8e900d30657fa82b06f2c89808,1526605519,"Run Flow for each renderer separately (#12846)

* Generate Flow config on install

We'll need to do pre-renderer Flow passes with different configs.
This is the first step to get it working. We only want the original version checked in.

* Create multiple Flow configs from a template

* Run Flow per renderer

* Lint

* Revert the environment consolidation

I thought this would be a bit cleaner at first because we now have non-environment files in this directory.
But Sebastian is changing these files at the same time so I want to avoid conflicts and keep the PR more tightly scoped. Undo.

* Misc

","['scripts/flow/createFlowConfigs.js', 'scripts/flow/runFlow.js', 'scripts/flow/typedRenderers.js', 'scripts/tasks/flow-ci.js', 'scripts/tasks/flow.js']","Flow isn't running separately for each renderer, creating the need for multiple passes with varying configurations. Furthermore, non-environment files in certain directories complicate script execution and cause potential conflicts."
b2763d3eaa4a56ce9c973945783aba7cac63478f,1653507722,"Move hydration code out of normal Suspense path (#24532)

* Move hydration code out of normal Suspense path

Shuffling some code around to make it easier to follow. The logic for
updating a dehydrated Suspense boundary is significantly different
from the logic for a client-rendered Suspense boundary. Most of it was
already lifted out into a separate function; this moves the remaining
hydration-specific logic out of updateSuspenseComponent and into
updateDehydratedSuspenseComponent instead.

No expected changes to program behavior.

* Extract hydration logic in complete phase, too

Same as previous step but for the complete phase. This is a separate
commit to make bisecting easier in case something breaks. The logic
is very subtle but mostly all I've done is extract it to
another function.
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js']","Dehydrated Suspense update logic is mingled with client-rendered Suspense update logic, making it difficult to follow and possibly resulting in unexpected behavior."
f9d75e32ba85b3c6a2a5d20fa27ba7e23d5529b2,1695407763,"fix[devtools/extension]: added a workaround for proxy content script injection in firefox (#27375)

Changes:
1. [Firefox-only] For some reason, Firefox might try to inject
dynamically registered content script in pages like `about:blank`. I
couldn't find a way to change this behaviour, `about:` is not a valid
scheme, so we can't exclude it and `match_about_blank` flag is not
supported in `chrome.scripting.registerContentScripts`.
2. While navigating the history in Firefox, some content scripts might
not be re-injected and still be alive. To handle this, we are now
patching `window` with `__REACT_DEVTOOLS_PROXY_INJECTED__` flag, to make
sure that proxy is injected and only once. This flag is cleared on
`pagehide` event.
","['packages/react-devtools-extensions/src/background/index.js', 'packages/react-devtools-extensions/src/contentScripts/proxy.js']","Firefox attempts to inject dynamically registered content script in `about:blank` pages and does not re-inject some content scripts while navigating history, resulting in scripts being alive when they shouldn't be."
96cdeaf89bfde7551b4ffe4d685da169b780f2f7,1677267234,"[Fizz Node] Fix null bytes written at text chunk boundaries (#26228)

We encode strings 2048 UTF-8 bytes at a time. If the string we are
encoding crosses to the next chunk but the current chunk doesn't fit an
integral number of characters, we need to make sure not to send the
whole buffer, only the bytes that are actually meaningful.

Fixes #24985. I was able to verify that this fixes the repro shared in
the issue (be careful when testing because the null bytes do not show
when printed to my terminal, at least). However, I don't see a clear way
to add a test for this that will be resilient to small changes in how we
encode the markup (since it depends on where specific multibyte
characters fall against the 2048-byte boundaries).
","['packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-server/src/ReactServerStreamConfigNode.js']","String encoding in 2048 UTF-8 chunks results in null bytes being written when the chunks don't fit an integral number of characters, leading to unnecessary extra bytes in the buffer."
87b3ada89dc83c88a89ff1b599b0f39e3c49cc32,1626287847,"DevTools: Named hooks supports ""cheap-module-source-map"" (#21874)

""cheap-module-source-map"" is the default source-map generation mode used in created-react-dev mode because of speed. The major trade-off is that the source maps generated don't contain column numbers, so DevTools needs to be more lenient when matching AST nodes in this mode.

In this case, it can ignore column numbers and match nodes using line numbers only– so long as only a single node matches. If more than one match is found, treat it the same as if none were found, and fall back to no name.
","['packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/ComponentWithExternalCustomHooks.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/ComponentWithMultipleHooksPerLine.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/ContainingStringSourceMappingURL.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/Example.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/InlineRequire.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/ToDoList.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/index.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/useTheme.js', 'packages/react-devtools-extensions/src/__tests__/parseHookNames-test.js', 'packages/react-devtools-extensions/src/__tests__/updateMockSourceMaps.js', 'packages/react-devtools-extensions/src/astUtils.js', 'packages/react-devtools-extensions/src/parseHookNames.js']","DevTools failing to match AST nodes using line numbers in ""cheap-module-source-map"" mode, leading to unnamed hooks when more than one or no matches are found."
c89a83695c18814e98a8e815a2389a11540e0160,1663970112,"Update RulesOfHooks with useEvent rules (#25285)

This update to the RulesOfHooks rule checks that functions created with
`useEvent` can only be invoked in a `useEffect` callback, in another
event function, or a closure.
They can't be passed down directly as a reference to child components.

This PR also updates the ExhaustiveDeps lint rule to treat useEvent's 
return value as stable, so it can be omitted from dependency lists.

Currently this all gated behind an experimental flag.

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>
","['packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js', 'packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js', 'packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js', 'packages/eslint-plugin-react-hooks/src/RulesOfHooks.js']","Functions created with `useEvent` are improperly invoked outside of a `useEffect` callback, other event functions, or a closure, and are incorrectly passed as direct references to child components."
5a06072780e1323204cd7823665b3a95a0450747,1632325555,"[Old server renderer] Retry error on client (#22399)

We're still in the process of migrating to the Fizz server renderer. In
the meantime, this makes the error semantics on the old server renderer
match the behavior of the new one: if an error is thrown, it triggers a
Suspense fallback, just as if it suspended (this part was already
implemented). Then the errored tree is retried on the client, where it
may recover and finish successfully.
","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js', 'packages/react-dom/src/server/ReactPartialRenderer.js']","Errors thrown on the old server renderer don't trigger a Suspense fallback and retry on the client, leading to mismatch in error handling behavior compared to the new server renderer."
3f5b8c214f64f72aeb1ec0e0aae3d2185b3362a6,1692713548,"Jest: remove haste config (#27257)

Since we're not using haste at all, we can just remove the config to
disable haste instead of enabling, just to inject an implementation that
blocks any haste modules from being recognized.

Test Plan:
Creating a module and required it to get the expected error that the
module doesn't exist.
","['scripts/jest/config.base.js', 'scripts/jest/noHaste.js']","The Jest configuration currently includes Haste, although it's not being used, and blocks any Haste modules from being recognized."
b4cdd3e8922713f8c9817b004a0dc51be47bc5df,1692802689,"Scaffolding for useFormState (#27270)

This exposes, but does not yet implement, a new experimental API called
useFormState. It's gated behind the enableAsyncActions flag.

useFormState has a similar signature to useReducer, except instead of a
reducer it accepts an (async) action function. React will wait until the
promise resolves before updating the state:

```js
async function action(prevState, payload) {
  // ..
}
const [state, dispatch] = useFormState(action, initialState)
```

When used in combination with Server Actions, it will also support
progressive enhancement — a form that is submitted before it has
hydrated will have its state transferred to the next page. However, like
the other action-related hooks, it works with fully client-driven
actions, too.
","['.eslintrc.js', 'packages/react-dom-bindings/src/shared/ReactDOMFormActions.js', 'packages/react-dom/index.classic.fb.js', 'packages/react-dom/index.experimental.js', 'packages/react-dom/index.js', 'packages/react-dom/index.modern.fb.js', 'packages/react-dom/server-rendering-stub.js', 'packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js', 'packages/react-dom/src/__tests__/ReactDOMForm-test.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/server/ReactDOMServerRenderingStub.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-server/src/ReactFizzHooks.js']","The new experimental API called useFormState, designed to handle asynchronous actions, is not implemented yet, and there is no support for state preservation across pages for forms submitted before hydration."
564166099b5f46dd33f3356b01a72c0314103a18,1677269585,"[DevTools] remove script tag immediately (#26233)

Fixes https://github.com/facebook/react/issues/25924 for React DevTools
specifically.

## Summary

If we remove the script after it's loaded, it creates a race condition
with other code. If some other code is searching for the first script
tag or first element of the document, this might broke it.

## How did you test this change?

I've tested in my local build that even if we remove the script tag
immediately, the code is still correctly executed.
",['packages/react-devtools-extensions/src/contentScripts/prepareInjection.js'],"Removing a script tag after it's loaded introduces a race condition, potentially breaking code that relies on querying the document's first script tag or first element."
cbbc2b6c4d0d8519145560bd8183ecde55168b12,1540319816,"[Synchronous Suspense] Suspending a class outside concurrent mode (#13926)

* [Synchronous Suspense] Suspending a class outside concurrent mode

When a class component suspends during mount outside concurrent mode,
change the tag so it's not mistaken for a completed component. For
example, we should not call componentWillUnmount if it is deleted.

* PR nits

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/shared/ReactWorkTags.js']","Class components suspending during mount outside concurrent mode are mistaken for completed components, leading to errors such as incorrect componentWillUnmount calls."
8d4ddd33acabe139dea0c9c50386143e6bc994f4,1561187138,"[Scheduler] Yield less if there's no pending input (#15959)

At the end of each frame, Scheduler yields control of the main thread so
the browser can execute important tasks; most importantly, painting the
screen and responding to user input. There's some overhead involved in
regaining control of the main thread, so we'd like to yield as
infrequently as possible to keep the UI responsive.

The reason we yield on every frame is because there's no way for us to
know whether we're blocking user input.

`isInputPending` is an experimental browser API that gives us this
information. It tells us whether there's a pending user input, which
also means it tells us if there's *not* a pending user input. We can use
this signal to decide whether it's OK not to yield.

There's a max frame length after which we'll yield regardless, as a
precaution against blocking non-input tasks that we don't know about.
",['packages/scheduler/src/forks/SchedulerHostConfig.default.js'],Overhead in reacquiring main thread is causing UI responsiveness issues. Scheduler currently yields after every frame but lacks information on whether it's blocking user input.
9b36df86c6ccecb73ca44899386e6a72a83ad445,1510782377,"Use requestIdleCallback timeout to force expiration (#11548)

* Don't call idle callback unless there's time remaining

* Expiration fixture

Fixture that demonstrates how async work expires after a certain interval.
The fixture clogs the main thread with animation work, so it only works if the
`timeout` option is provided to `requestIdleCallback`.

* Pass timeout option to requestIdleCallback

Forces `requestIdleCallback` to fire if too much time has elapsed, even if the
main thread is busy. Required to make expiration times work properly. Otherwise,
async work can expire, but React never has a chance to flush it because the
browser never calls into React.

","['fixtures/expiration/src/index.js', 'packages/react-cs-renderer/src/ReactNativeCS.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-native-renderer/src/ReactNativeFiberRenderer.js', 'packages/react-native-renderer/src/ReactNativeFrameScheduling.js', 'packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-reconciler/src/ReactFiberExpirationTime.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-rt-renderer/src/ReactNativeRTFiberRenderer.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/shared/ReactDOMFrameScheduling.js', 'scripts/jest/environment.js']","Without a timeout option in `requestIdleCallback`, React is not given the opportunity to flush expired async work due to the browser never calling into React, especially when the main thread is busy."
e8857918422b5ce8505ba5ce4a2d153e509c17a1,1527015036,"Fix a regression that caused us to listen to extra events at the top (#12878)

* Rewrite to a switch

I find it a bit easier to follow than many comparison conditions.

* Remove unnecessary assignments

They are being assigned below anyway. This is likely a copypasta from the FOCUS/BLUR special case (which *does* need those assignments).

* Unify ""cancel"" and ""close"" cases

Their logic is identical.

* Don't listen to media events at the top

* Add a unit test for double-invoking form events

* Remove an unused case and document it in a test

The case I added was wrong (just like including this event in the top level list was always wrong).

In fact it never bubbles, even for <img>. And since we don't special case it in the <img> event
attachment logic when we create it, we never supported <img onLoadStart> at all.

We could fix it. But Chrome doesn't support it either: https://bugs.chromium.org/p/chromium/issues/detail?id=458851.
Nobody asked us for it yet. And supporting it would require attaching an extra listener to every <img>.

So maybe we don't need it? Let's document the existing state of things.

* Add a test verifying we don't attach unnecessary listeners

* Add a comment

* Add a test for submit (bubbles: false)

","['packages/react-dom/src/__tests__/ReactDOMEventListener-test.js', 'packages/react-dom/src/events/DOMTopLevelEventTypes.js', 'packages/react-dom/src/events/ReactBrowserEventEmitter.js']","Regression causes extra events to be listened at the top, which includes unintended media and double-invoking form events. Also, <img onLoadStart> support might be unnecessary and currently unserved."
51c8411d9dab33290b794fe716b9514e7db1fb68,1645128977,"Log a recoverable error whenever hydration fails (#23319)

There are several cases where hydration fails, server-rendered HTML is
discarded, and we fall back to client rendering. Whenever this happens,
we will now log an error with onRecoverableError, with a message
explaining why.

In some of these scenarios, this is not the only recoverable error that
is logged. For example, an error during hydration will cause hydration
to fail, which is itself an error. So we end up logging two separate
errors: the original error, and one that explains why hydration failed.

I've made sure that the original error always gets logged first, to
preserve the causal sequence.

Another thing we could do is aggregate the errors with the Error ""cause""
feature and AggregateError. Since these are new-ish features in
JavaScript, we'd need a fallback behavior. I'll leave this for a
follow up.
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzShellHydration-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.new.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/useMutableSourceHydration-test.js']",Hydration failure leads to server-rendered HTML being discarded and fallback to client rendering without any error message guiding why this is happening.
55b3172f1de0b89ac02c761af954ee78b9cb16dd,1509042130,"Rewrite ReactDOMInput-test depending on internal API (#11299) (#11309)

* Rewrite tests depending on internal API

* Remove focus being called when there was no blur event function before

* Remove triggering function and just let ReactTestUtils take care

* Use native events

* Remove duplicate

* Simulate native event when changing value on reentrant

* Change wasn't being called

* Use Simulate only

* Use React event handlers on test

* Move commentary

* Lint commit

* Use native event

* Comment native event dispatching

* Prettier

* add setUntrackedValue

* Prettier-all

* Use dispatchEvent instead of ReactTestUtils Simulates;

* Prettier

* Fix lint

* Remove useless arg

* Wrap event dispatcher into function

* Remove deprecated Event

* Remove unused change event dispatcher

* Fix merge

* Prettier

* Add missing focus/blur calls

They are necessary to cover for the fix in #8240.

",['packages/react-dom/src/__tests__/ReactDOMInput-test.js'],"Issues with ReactDOMInput-test due to dependencies on internal API and insufficient focus/blur calls, causing coverage issues related to the fix in #8240."
edfe50510b4129295cbe49f05d7b94bbfc48da5b,1629760951,"DevTools: Replaced WeakMap with LRU for inspected element cache (#22160)

We use an LRU for this rather than a WeakMap because of how the ""no-change"" optimization works.

When the frontend polls the backend for an update on the element that's currently inspected, the backend will send a ""no-change"" message if the element hasn't updated (rendered) since the last time it was asked. In thid case, the frontend cache should reuse the previous (cached) value. Using a WeakMap keyed on Element generally works well for this, since Elements are mutable and stable in the Store. This doens't work properly though when component filters are changed, because this will cause the Store to dump all roots and re-initialize the tree (recreating the Element objects).

So instead we key on Element ID (which is stable in this case) and use an LRU for eviction.
","['packages/react-devtools-shared/src/__tests__/inspectedElement-test.js', 'packages/react-devtools-shared/src/inspectedElementCache.js', 'packages/react-devtools-shared/src/inspectedElementMutableSource.js', 'packages/react-devtools-shared/src/types.js']","Change in component filters causes the Store to dump all roots and re-initialize, leading to improper working of WeakMap used for frontend cache in ""no-change"" optimization."
03126dd087b285789447ab814ee7f3385e1c179d,1607550410,"[Flight] Add read-only fs methods (#20412)

* Don't allocate the inner cache unnecessarily

We only need it when we're asking for text. I anticipate I'll want to avoid allocating it in other methods too when it's not strictly necessary.

* Add fs.access

* Add fs.lstat

* Add fs.stat

* Add fs.readdir

* Add fs.readlink

* Add fs.realpath

* Rename functions to disambiguate two caches
","['packages/react-fs/src/ReactFilesystem.js', 'scripts/flow/environment.js', 'scripts/rollup/modules.js']","Unnecessary allocation of inner cache in read-only fs methods is causing performance issues, and there's lack of several essential fs methods."
1fcbd22431d97e404c1f684744dc543b6c22b076,1548097569,"Disallow reading context during useMemo etc (#14648)

* Disallow reading context during useMemo etc

* Continue allowing readContext() in classes and context consumers

The previous commit check was too broad and incorrectly restricted classes from calling readContext(). This check is more precise and only targets components that are Hook-capable. It exploits the fact that `renderExpirationTime` is never `NoWork` after `renderWithHooks` -- something we already rely on.

","['packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/ReactFiberDispatcher.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']","The context is being read during useMemo execution and other hooks-capable components inappropriately, and classes are being restricted from calling readContext() incorrectly."
b5810163e913e8c95a7a0a6dee039bc102e3c987,1683683414,"Change `yarn test` to default to experimental (#26741)

The idea is that the default `yarn test` command should be the one that
includes the most bleeding edge features, because during development you
probably want as many features enabled as possible.

That used to be `www-modern` but nowadays it's `experimental` because
we've landed a bunch of async actions stuff in experimental but it isn't
yet being tested at Meta.

So this switches the default to `experimental`.
",['scripts/jest/jest-cli.js'],"The default 'yarn test' command is not set to 'experimental' leading to lack of testing of new, bleeding-edge features, specifically asynchronous actions that haven't been tested at meta."
d54be90be658afca13c3f882ff28de14e0bd35ad,1629467780,"Set up test infra for dynamic Scheduler flags (#22139)

I copied the set up we use for React.

In the www-variant test job, the Scheduler `__VARIANT__` flags will be
`true`. When writing a test, we can read the value of the flag with the
`gate` pragma and method.

Note: Since these packages are currently released in lockstep, maybe we
should remove SchedulerFeatureFlags and use ReactFeatureFlags for both.
","['packages/scheduler/src/SchedulerFeatureFlags.js', 'packages/scheduler/src/forks/SchedulerFeatureFlags.www-dynamic.js', 'packages/scheduler/src/forks/SchedulerFeatureFlags.www.js', 'scripts/jest/TestFlags.js', 'scripts/jest/setupTests.www.js']","Testing infrastructure for dynamic Scheduler flags does not exist, causing difficulties in effectively conducting www-variant testing."
5dcf93d146ccde90af2c442d6cb32b29efddb46b,1524400778,"Validate props on context providers (#12658)

* checkPropTypes in updateContextProvider

* invalid “prop”

* `type not `types` .. :l

* test

* don’t need extra check with no spelling mistake (:

* change error message to specifically address provider

* don’t need class, add extra render to make sure good props go through

* nitpicky rename

* prettier

* switch to `Context.Provider`

* add stack to warning, add extra undefined check

* separate dev check

* add stack to test

* more efficient

* remove unused function

* prettier

* const to top

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react/src/__tests__/ReactContextValidator-test.js']","Context providers are not validating props, potentially causing incorrect or inappropriate props to be passed to them."
f0cf832e1d0c8544c36aa8b310960885a11a847c,1675789769,"Update Flight Fixture to ""use client"" instead of .client.js (#26118)

This updates the Flight fixture to support the new ESM loaders in newer
versions of Node.js.

It also uses native fetch since react-fetch is gone now. (This part
requires Node 18 to run the fixture.)

I also updated everything to use the `""use client""` convention instead
of file name based convention.

The biggest hack here is that the Webpack plugin now just writes every
`.js` file in the manifest. This needs to be more scoped. In practice,
this new convention effectively requires you to traverse the server
graph first to find the actual used files. This is enough to at least
run our own fixture though.

I didn't update the ""blocks"" fixture.

More details in each commit message.
","['fixtures/flight/config/webpack.config.js', 'fixtures/flight/loader/index.js', 'fixtures/flight/server/cli.js', 'fixtures/flight/server/handler.js', 'fixtures/flight/src/App.js', 'fixtures/flight/src/Counter.js', 'fixtures/flight/src/Counter2.client.js', 'fixtures/flight/src/Counter2.js', 'fixtures/flight/src/ShowMore.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeLoader.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeRegister.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackPlugin.js', 'packages/react-server-dom-webpack/src/__tests__/utils/WebpackMock.js', 'scripts/rollup/bundles.js']","The Flight fixture currently does not support newer ESM loaders in latest versions of Node.js, and relies on react-fetch which is no longer available. The project-wide file-naming convention is not consistent."
fd69c239a0bb8fde412aa7c1c0cea9c7fda287a9,1512077095,"Use defaultValue instead of setAttribute('value') (#11534)

* Use defaultValue instead of setAttribute('value')

This commit replaces the method of synchronizing an input's value
attribute from using setAttribute to assigning defaultValue. This has
several benefits:

- Fixes issue where IE10+ and Edge password icon disappears (#7328)
- Fixes issue where toggling input types hides display value on dates
  in Safari (unreported)
- Removes mutationMethod behaviors from DOMPropertyOperations

* initialValue in Input wrapperState is always a string

* The value property is assigned before the value attribute. Fix related tests.

* Remove initial value tests in ReactDOMInput

I added these tests after removing the `value` mutation
method. However they do not add any additional value over existing
tests.

* Improve clarity of value checks in ReactDOMInput.postMountWrapper

* Remove value and defaultValue from InputWithWrapperState type

They are already included in the type definition for HTMLInputElement

* Inline stringification of value in ReactDOMInput

Avoids eagier stringification and makes usage more consistent.

* Use consistent value/defaultValue presence in postMountHook

Other methods in ReactDOMInput check for null instead of
hasOwnProperty.

* Add missing semicolon

* Remove unused value argument in ReactDOMInput test

* Address cases where a value switches to undefined

When a controlled input value switches to undefined, it reverts back
to the initial state of the controlled input.

We didn't have test coverage for this case, so I've added two describe
blocks to cover both null and undefined.

","['fixtures/dom/src/components/fixtures/number-inputs/index.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js', 'packages/react-dom/src/client/DOMPropertyOperations.js', 'packages/react-dom/src/client/ReactDOMFiberInput.js', 'packages/react-dom/src/shared/DOMProperty.js', 'packages/react-dom/src/shared/HTMLDOMPropertyConfig.js']","Synchronous use of `setAttribute('value')` for syncing an input's value attribute leads to disappearing of password icons in some browsers, unreported display value issues on date inputs in Safari and unnecessary mutationMethod behaviors in DOMPropertyOperations. Additionally, controlled input values switching to undefined reverts back to the initial state of the controlled input."
79b8fc66704a9a24588bf41b25afbcd818358b80,1632151933,"Implement getServerSnapshot in userspace shim (#22359)

* Convert useSES shim tests to use React DOM

Idea is that eventually we'll run these tests against an actual build of
React DOM 17 to test backwards compatibility.

* Implement getServerSnapshot in userspace shim

If the DOM is not present, we assume that we are running in a server
environment and return the result of `getServerSnapshot`.

This heuristic doesn't work in React Native, so we'll need to provide
a separate native build (using the `.native` extension). I've left this
for a follow-up.

We can't call `getServerSnapshot` on the client, because in versions of
React before 18, there's no built-in mechanism to detect whether we're
hydrating. To avoid a server mismatch warning, users must account for
this themselves and return the correct value inside `getSnapshot`.

Note that none of this is relevant to the built-in API that is being
added in 18. This only affects the userspace shim that is provided
for backwards compatibility with versions 16 and 17.
","['packages/use-sync-external-store/src/__tests__/useSyncExternalStoreShared-test.js', 'packages/use-sync-external-store/src/__tests__/useSyncExternalStoreShimServer-test.js', 'packages/use-sync-external-store/src/useSyncExternalStore.js']","In server environments when DOM is not present, getServerSnapshot function in userspace shim fails. This also does not work in React Native, potentially causing server mismatch warnings."
9bda7b28f3b149c8f8ca826f0c395a81ed2d3bec,1529015367,"Suspended high pri work forces lower priority work to expire early  (#12965)

* onFatal, onComplete, onSuspend, onYield

For every call to renderRoot, one of onFatal, onComplete, onSuspend,
and onYield is called upon exiting. We use these in lieu of returning a
tuple. I've also chosen not to inline them into renderRoot because these
will eventually be lifted into the renderer.

* Suspended high pri work forces lower priority work to expire early

If an error is thrown, and there is lower priority pending work, we
retry at the lower priority. The lower priority work should expire
at the same time at which the high priority work would have expired.
Effectively, this increases the priority of the low priority work.

Simple example: If an error is thrown during a synchronous render, and
there's an async update, the async update should flush synchronously in
case it's able to fix the error. I've added a unit test for
this scenario.

User provided timeouts should have the same behavior, but I'll leave
that for a future PR.

","['packages/react-reconciler/src/ReactFiberExpirationTime.js', 'packages/react-reconciler/src/ReactFiberPendingPriority.js', 'packages/react-reconciler/src/ReactFiberRoot.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js']","When a rendering error occurs during high priority work, it forces lower priority work out of queue, increasing their priority and causing them to expire early."
a21d1475ffd7225a463f2d0c0c9b732c8dd795eb,1682139864,"[Flight] Fix File Upload in Node.js (#26700)

Use the Blob constructor + append with filename instead of File
constructor. Node.js doesn't expose a global File constructor but does
support it in this form.

Queue fields until we get the 'end' event from the previous file. We
rely on previous files being available by the time a field is resolved.
However, since the 'end' event in Readable is fired after two
micro-tasks, these are not resolved in order.

I use a queue of the fields while we're still waiting on files to
finish. This still doesn't resolve files and fields in order relative to
each other but that doesn't matter for our usage.
","['fixtures/flight/src/Form.js', 'fixtures/flight/src/actions.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server/src/ReactFlightReplyServer.js']","File uploads in Node.js fail because fields and files are not resolved in order due to post-microtask timing of 'end' event firing in Readable. Moreover, global File constructor is not exposed in Node.js."
9b5e0517b4d203d49063e975a4597e9c666e0212,1644435437,"Remove deprecated wildcard folder mapping (#23256)

* Remove deprecated folder mapping

Node v16 deprecated the use of trailing ""/"" to define subpath folder
mappings in the ""exports"" field of package.json.

The recommendation is to explicitly list all our exports. We already do
that for all our public modules. I believe the only reason we have a
wildcard pattern is because our package.json files are also used at
build time (by Rollup) to resolve internal source modules that don't
appear in the final npm artifact.

Changing trailing ""/"" to ""/*"" fixes the warnings. See
https://nodejs.org/api/packages.html#subpath-patterns for more info.

Since the wildcard pattern only exists so our build script has access to
internal at build time, I've scoped the wildcard to ""/src/*"". Because
our public modules are located outside the ""src"" directory, this means
deep imports of our modules will no longer work: only packages that are
listed in the ""exports"" field.

The only two affected packages are react-dom and react. We need to be
sure that all our public modules are still reachable. I audited the
exports by comparing the entries to the ""files"" field in package.json,
which represents a complete list of the files that are included in the
final release artifact.

At some point, we should add an e2e packaging test to prevent
regressions; for now, we should have decent coverage because in CI we
run our Jest test suite against the release artifacts.

* Remove umd from exports

Our expectation is that if you're using the UMD builds, you're not
loading them through a normal module system like require or import.
Instead you're probably copying the files directly or loading them from
a CDN like unpkg.
","['scripts/rollup/bundles.js', 'scripts/shared/inlinedHostConfigs.js']","Node v16 deprecation of trailing ""/"" for defining subpath folder mappings in package.json is causing warnings. Deprecation adversely affects packages requiring internal source modules at build time and compromises deep imports of modules not explicitly listed in the ""exports"" field."
3b3daf5573efe801fa3dc659020625b4023d3a9f,1639152318,"Advocate for StrictMode usage within Components tree (#22886)

Adds the concept of subtree modes to DevTools to bridge protocol as follows:
1. Add-root messages get two new attributes: one specifying whether the root is running in strict mode and another specifying whether the root (really the root's renderer) supports the concept of strict mode.
2. A new backend message type (TREE_OPERATION_SET_SUBTREE_MODE). This type specifies a subtree root (id) and a mode (bitmask). For now, the only mode this message deals with is strict mode.

The DevTools frontend has been updated as well to highlight non-StrictMode compliant components.

The changes to the bridge protocol require incrementing the bridge protocol version number, which will also require updating the version of react-devtools-core backend that is shipped with React Native.
","['packages/react-devtools-shared/src/__tests__/legacy/storeLegacy-v15-test.js', 'packages/react-devtools-shared/src/__tests__/store-test.js', 'packages/react-devtools-shared/src/backend/legacy/renderer.js', 'packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-shared/src/bridge.js', 'packages/react-devtools-shared/src/constants.js', 'packages/react-devtools-shared/src/devtools/store.js', 'packages/react-devtools-shared/src/devtools/views/Components/Element.js', 'packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js', 'packages/react-devtools-shared/src/devtools/views/Components/types.js', 'packages/react-devtools-shared/src/devtools/views/Icon.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/CommitTreeBuilder.js', 'packages/react-devtools-shared/src/types.js', 'packages/react-devtools-shared/src/utils.js', 'packages/react-devtools-shell/src/app/PartiallyStrictApp/index.js', 'packages/react-devtools-shell/src/app/index.js']","The DevTools do not currently support or indicate usage of StrictMode within the components tree, making it difficult to detect non-StrictMode compliant components."
3c4c1c4703e8f7362370c44a48ac9348229e3791,1634855999,"Remove warning for dangling passive effects (#22609)

In legacy mode, a test can get into a situation where passive effects are
""dangling"" — an update finished, and scheduled some passive effects,
but the effects don't flush.

This is why React warns if you don't wrap updates in act. The act API is
responsible for flushing passive effects. But there are some cases where
the act API (in legacy roots) intentionally doesn't warn, like updates
that originate from roots and classes. It's possible those updates will
render children that contain useEffect. Because of this, dangling
effects are still possible, and React doesn't warn about it.

So we implemented a second act warning for dangling effects.

However, in concurrent roots, we now enforce that all APIs that schedule
React work must be wrapped in act. There's no scenario where dangling
passive effects can happen that doesn't already trigger the warning for
updates. So the dangling effects warning is redundant.

The warning was never part of a public release. It was only enabled
in concurrent roots.

So we can delete it.
","['packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","Dangling passive effects can occur in legacy roots, due to some updates that originate from roots and classes potentially not being wrapped in the act API, but in concurrent roots this situation is impossible and triggers a warning."
e3fb7c1de1ed375e32397b3502a30b8ae4c2db9f,1687347408,"feat[devtools]: support x_google_ignoreList source maps extension (#26951)

## Summary
This was originally implemented by Mengdi @mondaychen in
https://github.com/facebook/react/pull/26506.

Because we patch console methods (to append components stack and some
other features), errors in console will include
`react_devtools_backend-....js` in its stack traces. Example:
<img width=""763"" alt=""Screenshot 2023-06-15 at 13 31 49""
src=""https://github.com/facebook/react/assets/28902667/fa9c3d26-b6c5-4965-af71-62d100cd806d"">

Using https://github.com/mondaychen/devtools-ignore-webpack-plugin to
support [x_google_ignoreList source maps
extension](https://developer.chrome.com/blog/devtools-better-angular-debugging/#the-x_google_ignorelist-source-map-extension).

@mondaychen created a react app, which throws an error via
`console.error`, when user click on the button -
https://3owqsn.csb.app/.

Stack trace with these changes: 
<img width=""759"" alt=""Screenshot 2023-06-14 at 14 26 38""
src=""https://github.com/facebook/react/assets/28902667/b118b168-3200-4a47-9718-39fc455ea993"">
","['packages/react-devtools-extensions/src/__tests__/xGoogleIgnoreList-test.js', 'packages/react-devtools-extensions/webpack.backend.js', 'packages/react-devtools-shared/src/__tests__/utils.js', 'scripts/jest/config.build-devtools.js']","Errors displayed in the console erroneously include `react_devtools_backend-....js` in its stack traces due to patching of console methods, hindering accurate debugging."
88d7ed8bfbccd860c3e309da39d356d0a3127aa7,1530672420,"React.Timeout -> React.Placeholder (#13105)

Changed the API to match what we've been using in our latest discussions.

Our tentative plans are for <Placeholder> to automatically hide the timed-out
children, instead of removing them, so their state is not lost. This part is
not yet implemented. We'll likely have a lower level API that does not include
the hiding behavior. This is also not yet implemented.
","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react/src/React.js', 'packages/shared/ReactSymbols.js', 'packages/shared/ReactTypeOfWork.js', 'packages/shared/getComponentName.js', 'packages/shared/isValidElementType.js']",The current React.Timeout API does not match with the latest discussions and does not preserve the state of timed-out children due to their removal.
3cad3a54eda7b2d1c670c2d414f33d78a4c3f6af,1678140797,"Use content hash for facebook-www builds (#26331)

Currently, any commit to React causes an internal sync since the Git
commit hash is part of the build. This creates a lot more sync commits
and noise than necessary, see:
https://github.com/facebook/react/commits/builds/facebook-www

This PR changes the version string to be a hash of the target build
files instead. This way we get a new version with any change that
actually impacts the generated files and still have a matching version
across the files.
",['scripts/rollup/build-all-release-channels.js'],"Unnecessary syncing and noise in React due to current builds using the Git commit hash, resulting in a new version even when there are no changes in the generated files."
82e9e9909876591dbe808cdac7110610e63c3896,1657057887,"Suspending inside a hidden tree should not cause fallbacks to appear (#24699)

* [FORKED] Hidden trees should capture Suspense

If something suspends inside a hidden tree, it should not affect
anything in the visible part of the UI. This means that Offscreen acts
like a Suspense boundary whenever it's in its hidden state.

* Add previous commit to forked revisions
","['packages/react-reconciler/src/ReactFiber.new.js', 'packages/react-reconciler/src/ReactFiber.old.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberOffscreenComponent.js', 'packages/react-reconciler/src/ReactFiberSuspenseContext.new.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/__tests__/ReactOffscreenSuspense-test.js']",Suspension within a hidden tree causes unexpected fallbacks to appear in the visible part of the UI.
1e3383a41154cb32d8d6b78b2451ee4dabfcb973,1621352528,"DevTools: Reload all roots after Fast Refresh force remount (#21516)

Works around the corrupted Store state by detecting a broken Fast Refresh remount and forcefully dropping the root and re-mounting the entire tree. This prevents Fibers from getting duplicated in the Store (and in the Components tree). The benefit of this approach is that it doesn't rely on an update or change in behavior to Fast Refresh. (This workaround is pretty dirty, but since it's a DEV-only code path, it's probably okay.)

Note that this change doesn't fix all of the reported issues (see #21442 (comment)) but it does fix some of them.

This commit also slightly refactors the way DevTools assigns and manages unique IDs for Fibers in the backend by removing the indirection of a ""primary Fiber"" and instead mapping both the primary and alternate.

It also removes the previous cache-on-read behavior of getFiberID and splits the method into three separate functions for different use cases:
* getOrGenerateFiberID – Like the previous function, this method returns an ID or generates and caches a new one if the Fiber hasn't been seen before.
* getFiberIDUnsafe – This function returns an ID if one has already been generated or null if not. (It can be used to e.g. log a message about a Fiber without potentially causing it to leak.)
* getFiberIDThrows – This function returns an ID if one has already been generated or it throws. (It can be used to guarantee expected behavior rather than to silently cause a leak.)
","['packages/react-devtools-shared/src/__tests__/FastRefreshDevToolsIntegration-test.js', 'packages/react-devtools-shared/src/backend/renderer.js']","Fast Refresh remount causes corrupted Store state and Fiber duplication in the Components tree. Also, there are issues in how DevTools assigns and manages unique IDs for Fibers."
2d0356a5243b880a8bff853a6bbde97f223dbacf,1533315925,"Make sure that `select` has `multiple` attribute set to appropriate state before appending options (#13270)

* Make sure that `select` has `multiple` attribute set to appropriate state before appending options
fixes #13222

* Add dom test fixture to test long multiple select scrolling to the first selected option
fixes #13222

* typo fix

* update comment
remove redundant conversion to bool type

* change a way of assigning property to domElement

* Remove unused ref on select fixture form

","['fixtures/dom/src/components/fixtures/selects/index.js', 'packages/react-dom/src/client/ReactDOMFiberComponent.js']","The `select` element does not correctly set `multiple` attribute before appending options, causing issues with scrolling to the first selected option in a long multiple select."
2fa632381839c8732dad9107b90911163b7f2b7a,1682286268,"Restore server controlled form fields to whatever they should be (#26708)

Fizz can emit whatever it wants for the SSR version of these fields when
it's a function action so they might not align with what is in the
previous props. Therefore we need to force them to update if we're
updating to a non-function where they might be relevant again.
","['packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/client/ReactDOMInput.js', 'packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js']","Fizz emits incorrect SSR version of fields for function actions, leading to possible misalignment with previous props. Necessary field updates hindered when updating to non-function."
fdc8c81e07e9b3b49604afe524ee6d130fd3e03e,1688742585,"[Flight] Client and Server Reference Creation into Runtime (#27033)

We already did this for Server References on the Client so this brings
us parity with that. This gives us some more flexibility with changing
the runtime implementation without having to affect the loaders.

We can also do more in the runtime such as adding `.bind()` support to
Server References.

I also moved the CommonJS Proxy creation into the runtime helper from
the register so that it can be handled in one place.

This lets us remove the forks from Next.js since the loaders can be
simplified there to just use these helpers.

This PR doesn't change the protocol or shape of the objects. They're
still specific to each bundler but ideally we should probably move this
to shared helpers that can be used by multiple bundler implementations.
","['packages/react-server-dom-esm/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-esm/src/ReactFlightESMNodeLoader.js', 'packages/react-server-dom-esm/src/ReactFlightESMReferences.js', 'packages/react-server-dom-esm/src/ReactFlightServerConfigESMBundler.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerEdge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/ReactFlightServerConfigWebpackBundler.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeLoader.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeRegister.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackReferences.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMReply-test.js', 'scripts/rollup/bundles.js', 'scripts/shared/inlinedHostConfigs.js']","Disparity between server references creation on client and server leads to inconsistencies and restricts flexibility for runtime implementations changes, and prevents additional functions such as `.bind()` support."
fcf2187919d2b509772b6a10f90e74331165ac78,1677870118,"[DevTools] Remove renderer.js from extension build (#26234)

## Summary

When looking into the compiled code of `installHook.js` of the extension
build, I noticed that it actually includes the large `attach` function
(from renderer.js). I don't think it was expected.
This is because `hook.js` imports from `backend/console.js` which
imports from `backend/renderer.js` for `getInternalReactConstants`
A straightforward way is to extract function
`getInternalReactConstants`. However, I think it's more simplified to
just merge these two files and save the 361K renderer.js from the
extension build since we have always been loading this code anyways.
I changed the execution check from `__REACT_DEVTOOLS_ATTACH__ ` to the
session storage.

## How did you test this change?

Everything works normal in my local build.
","['packages/react-devtools-extensions/src/background.js', 'packages/react-devtools-extensions/src/contentScripts/prepareInjection.js', 'packages/react-devtools-extensions/src/contentScripts/renderer.js', 'packages/react-devtools-extensions/webpack.config.js', 'packages/react-devtools-shared/src/backend/index.js', 'packages/react-devtools-shared/src/hook.js']","The compiled `installHook.js` of the extension build unexpectedly includes the large `attach` function from `renderer.js` due to an import in `backend/console.js`, leading to an unnecessarily large extension build."
6736a38b9abdd19a015929c0279783c92b30d372,1622692466,"Add single source of truth for package versions (#21608)

The versioning scheme for `@next` releases does not include semver
information. Like `@experimental`, the versions are based only on the
hash, i.e. `0.0.0-<commit_sha>`. The reason we do this is to prevent
the use of a tilde (~) or caret (^) to match a range of
prerelease versions.

For `@experimental`, I think this rationale still makes sense — those
releases are very unstable, with frequent breaking changes. But `@next`
is not as volatile. It represents the next stable release. So, I think
we can afford to include an actual verison number at the beginning of
the string instead of `0.0.0`.

We can also add a label that indicates readiness of the upcoming
release, like ""alpha"", ""beta"", ""rc"", etc.

To prepare for this the new versioning scheme, I updated the build
script. However, **this PR does not enable the new versioning scheme
yet**. I left a TODO above the line that we'll change once we're ready.

We need to specify the expected next version numbers for each package,
somewhere. These aren't encoded anywhere today — we don't specify
version numbers until right before publishing to `@latest`, using an
interactive script: `prepare-release-from-npm`.

Instead, what we can do is track these version numbers in a module. I
added `ReactVersions.js` that acts as the single source of truth for
every package's version. The build script uses this module to build the
`@next` packages.

In the future, I want to start building the `@latest` packages the same
way we do `@next` and `@experimental`. (What we do now is download a
`@next` release from npm and swap out its version numbers.) Then we
could run automated tests in CI to confirm the packages are releasable,
instead of waiting to verify that right before publish.
","['ReactVersions.js', 'packages/shared/ReactVersion.js', 'scripts/release/utils.js', 'scripts/rollup/build-all-release-channels.js']","Package versions for `@next` releases do not contain semver information and are based only on the hash, not providing accurate representation of package's readiness. Existing version handling mechanism lacks a single source of truth causing inconsistencies."
21a161fa37dce969c58ae17f67f2856d06514892,1686304534,"refactor[renderer]: expose getInspectorDataForInstance in rendererConfig (#26913)

## Summary
This is required for the case when we have an instance and want to get
inspector data for it. Such case occurs when RN's application being
debugged via React DevTools.

React DevTools sends instance to RN, which then gets all auxiliary data
to highlight some elements. Having `getInspectorDataForInstance` method
exposed makes it possible to easily get current props from fiber, which
then can be used to display some margins & paddings for hovered element
(via props.style).

I see that `getInspectorDataForInstance` is being exported at the top
level of the renderer, but feels like this should also be inside
DevTools global hook, the same way we use it for
[`getInspectorDataForViewAtPoint`](https://github.com/facebook/react-native/blob/e7d3662904e0e35e43380ee6d54859388713a592/packages/react-native/Libraries/Inspector/getInspectorDataForViewAtPoint.js).
","['packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactFiberConfigFabric.js', 'packages/react-native-renderer/src/ReactFiberConfigNative.js', 'packages/react-native-renderer/src/ReactNativeFiberInspector.js', 'packages/react-native-renderer/src/ReactNativeRenderer.js']","When debugging React Native applications via React DevTools, there's no straightforward method to get current props from a fiber instance which makes it difficult to display style details for highlighted elements.
"
1ebedbec2bec08e07c286ea6c3cff62737a0fd3a,1695913399,"Add Server Context deprecation warning (#27424)

As agreed, we're removing Server Context. This was never official
documented.

We've found that it's not that useful in practice. Often the better
options are:

- Read things off the url or global scope like params or cookies.
- Use the module system for global dependency injection.
- Use `React.cache()` to dedupe multiple things instead of computing
once and passing down.

There are still legit use cases for Server Context but you have to be
very careful not to pass any large data, so in generally we recommend
against it anyway.

Yes, prop drilling is annoying but it's not impossible for the cases
this is needed. I would personally always pick it over Server Context
anyway.

Semantically, Server Context also blocks object deduping due to how it
plays out with Server Components that can't be deduped. This is much
more important feature.

Since it's already in canary along with the rest of RSC, we're adding a
warning for a few versions before removing completely to help migration.

---------

Co-authored-by: Josh Story <josh.c.story@gmail.com>
","['packages/react-client/src/__tests__/ReactFlight-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react/src/ReactServerContext.js', 'packages/shared/ReactServerContextRegistry.js']","Server Context, although functional, has specific use-cases and is often less useful in practice. Its misuse could lead to potential issues with data handling and object deduping, especially with Server Components."
2b509e2c8c8c1fbc33ae59ce7c7dca0107732ff4,1532130546,"[Experimental] API for reading context from within any render phase function (#13139)

* Store list of contexts on the fiber

Currently, context can only be read by a special type of component,
ContextConsumer. We want to add support to all fibers, including
classes and functional components.

Each fiber may read from one or more contexts. To enable quick, mono-
morphic access of this list, we'll store them on a fiber property.

* Context.unstable_read

unstable_read can be called anywhere within the render phase. That
includes the render method, getDerivedStateFromProps, constructors,
functional components, and context consumer render props.

If it's called outside the render phase, an error is thrown.

* Remove vestigial context cursor

Wasn't being used.

* Split fiber.expirationTime into two separate fields

Currently, the `expirationTime` field represents the pending work of
both the fiber itself — including new props, state, and context — and of
any updates in that fiber's subtree.

This commit adds a second field called `childExpirationTime`. Now
`expirationTime` only represents the pending work of the fiber itself.
The subtree's pending work is represented by `childExpirationTime`.

The biggest advantage is it requires fewer checks to bailout on already
finished work. For most types of work, if the `expirationTime` does not
match the render expiration time, we can bailout immediately without
any further checks. This won't work for fibers that have
`shouldComponentUpdate` semantics (class components), for which we still
need to check for props and state changes explicitly.

* Performance nits

Optimize `readContext` for most common case

","['packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/ReactFiberDispatcher.js', 'packages/react-reconciler/src/ReactFiberNewContext.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/ReactUpdateQueue.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js', 'packages/react/src/ReactContext.js', 'packages/react/src/ReactCurrentOwner.js', 'packages/shared/ReactTypes.js']","Context can only be accessed by a special type of component, hindering functionality in other fibers. Additionally, the `expirationTime` field is representing both the pending work of the fiber itself and that of any updates in the fiber's subtree, causing inefficiencies."
40351575d3cfaef62426c889a90431c01fdeff0f,1645634121,"Split writeChunk into void and return value (#23343)

This function was modeled after Node streams where write returns a boolean
whether to keep writing or not. I think we should probably switch this
up and read desired size explicitly in appropriate places.

However, in the meantime, we don't have to return a value where we're
not going to use it. So I split this so that we call writeChunkAndReturn
if we're going to return the boolean.

This should help with the compilation so that they can be inlined.
","['packages/react-dom/src/server/ReactDOMLegacyServerStreamConfig.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayServerHostConfig.js', 'packages/react-server-dom-relay/src/ReactServerStreamConfigFB.js', 'packages/react-server-native-relay/src/ReactFlightNativeRelayServerHostConfig.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactFlightServerConfigStream.js', 'packages/react-server/src/ReactServerStreamConfigBrowser.js', 'packages/react-server/src/ReactServerStreamConfigNode.js', 'packages/react-server/src/forks/ReactServerStreamConfig.custom.js']","Current design of writeChunk function after Node streams conflicts with desired functionality, returning values that are not used and possibly affecting inlining during compilation."
2b003a5cc6df77f745e1639404f912bd0077a39b,1678337155,"Split out ServerReferenceMetadata into Id and Bound Arguments (#26351)

This is just moving some stuff around and renaming things.

This tuple is opaque to the Flight implementation and we should probably
encode it separately as a single string instead of a model object.

The term ""Metadata"" isn't the same as when used for ClientReferences so
it's not really the right term anyway.

I also made it optional since a bound function with no arguments bound
is technically different than a raw instance of that function (it's a
clone).

I also renamed the type ReactModel to ReactClientValue. This is the
generic serializable type for something that can pass through the
serializable boundary from server to client. There will be another one
for client to server.

I also filled in missing classes and ensure the serializable sub-types
are explicit. E.g. Array and Thenable.
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-client/src/ReactFlightClientStream.js', 'packages/react-client/src/forks/ReactFlightClientHostConfig.custom.js', 'packages/react-client/src/forks/ReactFlightClientHostConfig.dom-bun.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayClientHostConfig.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayServer.js', 'packages/react-server-dom-relay/src/ReactFlightDOMRelayServerHostConfig.js', 'packages/react-server-dom-webpack/src/ReactFlightClientNodeBundlerConfig.js', 'packages/react-server-dom-webpack/src/ReactFlightClientWebpackBundlerConfig.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMClientEdge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMClientNode.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerEdge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/ReactFlightServerWebpackBundlerConfig.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeLoader.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeRegister.js', 'packages/react-server-native-relay/src/ReactFlightNativeRelayClientHostConfig.js', 'packages/react-server-native-relay/src/ReactFlightNativeRelayServer.js', 'packages/react-server-native-relay/src/ReactFlightNativeRelayServerHostConfig.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactFlightServerBundlerConfigCustom.js', 'packages/react-server/src/ReactFlightServerConfigStream.js']","ServerReferenceMetadata renaming and restructuring is causing confusion. Specifically, it being opaque to Flight implementation, optional bound function argument inconsistency, and unclear naming conventions around ReactModel and other related classes."
ea2af878cc3fb139b0e08cf9bc4b2f4178429d69,1588104462,"Root API should clear non-empty roots before mounting (#18730)

* Root API should clear non-empty roots before mounting

Legacy render-into-subtree API removes children from a container before rendering into it. The root API did not do this previously, but just left the children around in the document.

This commit adds a new FiberRoot flag to clear a container's contents before mounting. This is done during the commit phase, to avoid multiple, observable mutations.

","['packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom/src/__tests__/ReactDOMRoot-test.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberHostConfigWithNoMutation.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js']","Root API isn't clearing children from container before rendering, leading to leftover child elements in the document after new content has been mounted."
3566de59e2046e7e8478462375aaa71716f1095b,1694116120,"[Fizz][Float] `<img>` inside `<picture>` should not preload during SSR (#27346)

img tags inside picture tags should not automatically be preloaded
because usually the img is a fallback. We will consider a more
comprehensive way of preloading picture tags which may require a
technique like using an inline script to construct the image in the
browser but for now we simply omit the preloads to avoid harming load
times by loading fallbacks.
","['packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js']","Automatic preload of img tags within picture tags during SSR may harm load times, considering these images typically serve as fallbacks."
6fbe630549de1ea7d2c34752880459f854c4440d,1565745981,"[Partial Hydration] Attempt hydration at a higher pri first if props/context changes (#16352)

* Test that we can suspend updates while waiting to hydrate

* Attempt hydration at a higher pri first if props/context changes

* Retrying a dehydrated boundary pings at the earliest forced time

This might quickly become an already expired time.

* Mark the render as delayed if we have to retry

This allows the suspense config to kick in and we can wait for much longer
before we're forced to give up on hydrating.

","['fixtures/ssr/src/components/Chrome.js', 'packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js']","Hydration process is not prioritized correctly when props/context change, potentially causing updates to suspend while waiting and retries to result in already expired time marks."
c15579631ff4d387401d57d9006d849ca1d5cd71,1680645969,"Put common aliases in Map/Set instead of switch over strings (#26551)

This is a follow up to https://github.com/facebook/react/pull/26546

This is strictly a perf optimization since we know that switches over
strings aren't optimally implemented in current engines. Basically
they're a sequence of ifs.

As a result, we're better off putting the unusual cases in a Map and the
very common cases in the beginning of the switch. We might be better off
putting very common cases in explicit ifs - just in case the engine does
optimize switches to a hash table which is potentially worse.

---------

Co-authored-by: Sophie Alpert <git@sophiebits.com>
","['packages/react-dom-bindings/src/client/DOMPropertyOperations.js', 'packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom-bindings/src/shared/getAttributeAlias.js', 'packages/react-dom-bindings/src/shared/isUnitlessNumber.js']",Performance degradation observed due to suboptimal implementation of string switches; unusual cases and highly common ones incurring unnecessary computational overhead.
9d47143e85105cc0213949fae33960200c38560f,1541460805,"Implement {,un}hideInstance on RN renderer (#14115)

This is required to use lazy.

Test Plan:
* Verified lazy works on a real world use case (shows spinner, shows real content).
* Verified that if I change the primary content's styles to have `display: 'none'` then it never appears (i.e., the code in `unhide` reads the styles successfully)
","['packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js']","The React Native renderer lacks {,un}hideInstance implementation, making it impossible to use lazy loading functionality."
cd1b167ad40c5c62cf2a0b32451fe2aebb669d08,1570464978,"[Scheduler Profiler] Use microsecond precision (#17010)

The `performance.now` returns a timestamp in milliseconds as a float.
The browser has the option to adjust the precision of the float, but
it's usually more precise than a millisecond. However, this precision
is lost when the timestamp is logged by the Scheduler profiler, because
we store the numbers in an Int32Array.

This change multiplies the millisecond float value by 1000, giving us
three more degrees of precision.
","['packages/scheduler/src/SchedulerProfiling.js', 'packages/scheduler/src/__tests__/SchedulerProfiling-test.js']","Loss of precision in Scheduler profiler's timestamps as it stores numbers in an Int32Array, despite `performance.now` returning timestamp with more precision than a millisecond."
40eaa22d9af685c239f9d8d42b454d031791e76d,1645284327,"Remove dependency on Offscreen Fiber updateQueue for React Cache (#23229)

We need to use the Offscreen Fiber's update queue for interaction tracing. This PR removes the optimization that React Cache uses to not need to push and pop the cache in special circumstances and defaults to always pushing and popping the cache as long as there was a previous cache.
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCacheComponent.new.js', 'packages/react-reconciler/src/ReactFiberCacheComponent.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.new.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","The React Cache overuses Offscreen Fiber's update queue for interaction tracing, causing potential performance issues due to unnecessary cache pushing and popping."
5cb8f6f344a6f3e296f095b8d151157d1f05c835,1562036194,"Add tail=""collapsed"" option to SuspenseList (#16007)

* Add tail=""collapsed"" option

* Fix issue with tail exceeding the CPU time limit

We used to assume that this didn't suspend but this branch happens in
both cases. This fixes it so that we first check if we suspended.

Now we can fix the tail so that it always render an additional fallback
in this scenario.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseList-test.internal.js']","SuspenseList doesn't have an option for ""collapsed"" tail, and this results in tail implementation exceeding the CPU time limit."
4ddc019aca8e08fd59cb43de5e0032be77d6174e,1686744952,"chore[devtools]: upgrade to webpack v5 (#26887)

## Summary
- Updated `webpack` (and all related packages) to v5 in
`react-devtools-*` packages.
- I haven't touched any `TODO (Webpack 5)`. Tried to poke it, but each
my attempt failed and parsing hook names feature stopped working. I will
work on this in a separate PR.
- This work is one of prerequisites for updating Firefox extension to
manifests v3

related PRs:
https://github.com/facebook/react/pull/22267
https://github.com/facebook/react/pull/26506

## How did you test this change?
Tested on all surfaces, explicitly checked that parsing hook names
feature still works.
","['packages/react-devtools-core/src/standalone.js', 'packages/react-devtools-core/webpack.backend.js', 'packages/react-devtools-core/webpack.standalone.js', 'packages/react-devtools-extensions/build.js', 'packages/react-devtools-extensions/webpack.backend.js', 'packages/react-devtools-extensions/webpack.config.js', 'packages/react-devtools-inline/webpack.config.js', 'packages/react-devtools-shared/src/hooks/parseHookNames/loadSourceAndMetadata.js', 'packages/react-devtools-shell/constants.js', 'packages/react-devtools-shell/src/e2e-regression/devtools.js', 'packages/react-devtools-shell/webpack-server.js', 'scripts/circleci/run_devtools_e2e_tests.js']",The outdated Webpack version in `react-devtools-*` packages needs upgrading to facilitate the update of Firefox extension to manifests v3.
8ced545e3df95afab6fa35bc29f9320bafbcef26,1539904042,"Suspense component does not capture if `fallback` is not defined (#13879)

* Suspense component does not capture if `fallback` is not defined

A missing fallback prop means the exception should propagate to the next
parent (like a rethrow). That way a Suspense component can specify other
props like maxDuration without needing to provide a fallback, too.

Closes #13864

* Change order of checks

","['packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactPure-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js']","Suspense component doesn't propagate exceptions to the parent if 'fallback' prop is undefined, preventing the specification of props like 'maxDuration' without a fallback."
2807d781a08db8e9873687fccc25c0f12b4fb3d4,1695052607,"[Fizz] Reuse rootSegmentID as the SuspenseBoundaryID (#27387)

Originally the intension was to have React assign an ID to a user
rendered DOM node inside a `fallback` while it was loading. If there
already were an explicit `id` defined on the DOM element we would reuse
that one instead. That's why this was a DOM Config option and not just
built in to Fizz.

This became tricky since it can load late and so we'd have to transfer
it down and detect it only once it finished rendering and if there is no
DOM element it doesn't work anyway. So instead, what we do in practice
is to always use a `<template>` tag with the ID. This has the downside
of an extra useless node and shifting child CSS selectors.

Maybe we'll get around to fixing this properly but it might not be worth
it.

This PR just gets rid of the SuspenseBoundaryID concept and instead we
just use the same ID number as the root segment ID of the boundary to
refer to the boundary to simplify the implementation.

This also solves the problem that SuspenseBoundaryID isn't currently
serializable (although that's easily fixable by itself if necessary).
","['packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/forks/ReactFizzConfig.custom.js']","React fails to assign an ID to a user-rendered DOM node inside a `fallback` during loading. Problems arise when it loads late, and there is no DOM element. Redundant `<template>` tag also offsets child CSS selectors."
3ac0eb075d82b19a912c6665eb4f6adb9245cbcb,1571184801,"Modify Babel React JSX Duplicate Children Fix (#17101)

If a JSX element has both a children prop and children (ie. <div children={childOne}>{childTwo}</div>), IE throws an Multiple definitions of a property not allowed in strict mode. This modifies the previous fix (which used an Object.assign) by making the duplicate children a sequence expression on the next prop/child instead so that ordering is preserved. For example:

```
<Component children={useA()} foo={useB()} children={useC()}>{useD()}</Component>
```
should compile to
```
React.jsx(Component, {foo: (useA(), useB()), children: (useC(), useD)})
```
","['packages/babel-plugin-react-jsx/__tests__/TransformJSXToReactJSX-test.js', 'packages/babel-plugin-react-jsx/src/TransformJSXToReactBabelPlugin.js']","IE throws a ""Multiple definitions of a property not allowed in strict mode"" error when a JSX element has both a children prop and children, disrupting the order preservation."
a5fc797db14c6e05d4d5c4dbb22a0dd70d41f5d5,1694805844,"[Fizz] Replay Postponed Paths (#27379)

This forks Task into ReplayTask and RenderTask.

A RenderTask is the normal mode and it has a segment to write into.

A ReplayTask doesn't have a segment to write into because that has
already been written but instead it has a ReplayState which keeps track
of the next set of paths to follow. Once we hit a ""Resume"" node we
convert it into a RenderTask and continue rendering from there.

We can resume at either an Element position or a Slot position. An
Element pointing to a component doesn't mean we resume that component,
it means we resume in the child position directly below that component.
Slots are slots inside arrays.

Instead of statically forking most paths, I kept using the same path and
checked for the existence of a segment or replay state dynamically at
runtime.

However, there's still quite a bit of forking here like retryRenderTask
and retryReplayTask. Even in the new forks there's a lot of duplication
like resumeSuspenseBoundary, replaySuspenseBoundary and
renderSuspenseBoundary. There's opportunity to simplify this a bit.
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-server/src/ReactFizzServer.js']","Task bifurcation into ReplayTask and RenderTask leads to duplication and operational ambiguity - lack of a segment in ReplayTask creates issues in path tracking, and the ""Resume"" node transition is unclear."
238b57f0f712aeddc89604b0dc9c1b13ffb0129a,1583536486,"[Blocks] Make it possible to have lazy initialized and lazy loaded Blocks (#18220)

* Lazify Blocks

Blocks now initialize lazily.

* Initialize Blocks eagerly in ChildFiber

This is for the case when it's a new Block that hasn't yet initialized.
We need to first initialize it to see what ""render function"" it resolves
to so that we can use that in our comparison.

* Remove extra import type line
","['packages/react-reconciler/src/ReactChildFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react/src/block.js', 'packages/shared/ReactLazyComponent.js']","Blocks do not initialize lazily, causing issues when a new Block hasn't initialized yet and needs to be used for comparison in ChildFiber."
58eedbb024d188081e20bee1514d794d731873ad,1582917249,"Check in a forked version of object-assign only for UMD builds (#18180)

* Check in a forked version of object-assign

This one uses ES modules so that we can inline it into UMD builds.

We could wait for object-assign to make an ESM export but we're going to
remove this dependency and assume global polyfills in the next version
anyway. However, we'd have to figure out how to keep the copyright header
and it'll get counted in terms of byte size (even if other tooling removes
it).

A lot of headache when we have our own implementation anyway. So I'll just
use that.

Ours is not resilient to checking certain browser bugs but those browsers
are mostly unused anyway. (Even FB breaks on them presumably.)

We also don't need to be resilient to Symbols since the way React uses it
we shouldn't need to copy symbols

* Don't transpile Object.assign to object-assign in object-assign

The polyfill needs to be able to feature detect Object.assign.

","['packages/shared/forks/object-assign.inline-umd.js', 'scripts/babel/transform-object-assign-require.js', 'scripts/rollup/forks.js']","The object-assign dependency currently used does not support ES modules, affecting the UMD build process, with potential copyright header issues and byte size counts. Its lack of resilience to certain browser bugs and symbols is also notable."
cfefc81ab2f5103bedc9e45701e8c00c0689f499,1587166375,"Fix for #18657 (#18663)

* Failing test for #18657

* Remove incorrect priority check

I think this was just poor factoring on my part in #18411. Honestly it
doesn't make much sense to me, but my best guess is that I must have
thought that when `baseTime > currentChildExpirationTime`, the function
would fall through to the
`currentChildExpirationTime < renderExpirationTime` branch below.

Really I think just made an oopsie.

Regardless, this logic is galaxy brainéd. A goal of the Lanes refactor
I'm working on is to make these types of checks -- is there remaining
work in this tree? -- a lot easier to think about. Hopefully.
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']","Incorrect priority check leads to failing tests, potentially because of poor refactoring earlier. The logic checks for remaining work in the tree are difficult to understand."
215db465a228955cfbb9d51cc68ed9390bfc353a,1628044009,"[Fabric] Add `flex: 1` to Offscreen view container (#22019)

Without this style property, the layout of the children is messed up.

The goal is for the container view to have no layout at all. It should
be a completely transparent wrapper, except for when we set `display:
none` to hide its contents. On the web, the equivalent (at least in the
spec) is `display: contents`.

After some initial testing, this seems to be close enough to the desired
behavior that we can ship it. We'll try rolling it out behind a flag.
",['packages/react-native-renderer/src/ReactFabricHostConfig.js'],"The Offscreen view container's layout is distorting the positioning of its children components due to the absence of a style property, `flex: 1`, making it unable to act as a transparent wrapper."
7e87df809052bf4f861e61cf8c6ee58cbdcf9743,1521167301,"Feature flag: Use custom requestIdleCallback even when native one exists (#12385)

We'll use this in www to test whether the polyfill is better at
scheduling high-pri async work than the native one. My preliminary tests
suggest ""yes"" but it's hard to say for certain, given how difficult it
is to consistently reproduce the starvation issues we've been seeing.
","['packages/shared/ReactDOMFrameScheduling.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric.js', 'packages/shared/forks/ReactFeatureFlags.native.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.www.js']",Testing difficulties and inconsistent reproduction of starvation issues with the native requestIdleCallback are hindering the ability to compare scheduling efficiency against the polyfill.
4f3f7eeb7f467be7a8c5e7c2cdf64cb95a6099c3,1599259604,"Bugfix: Effect clean up when deleting suspended tree (#19752)

* Bug: Effect clean up when deleting suspended tree

Adds a failing unit test.

* Re-use static flags from suspended primary tree

When switching to a Suspense boundary's fallback, we need to be sure
to preserve static subtree flags from the primary tree.
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']","Deleting suspended tree fails to cleanup effects, causing issues when switching to a Suspense boundary's fallback."
4e62fd2712fc279cc01a65a73ac7e7866489c654,1608075234,"clone json obj in relay flight client host config parser (#20465)

When `parseModel` suspends because of missing dependencies, it will exit and retry to parse later. However, in the relay implementation, the model is an object that we modify in place when we parse it, so when we we retry, part of the model might be parsed already into React elements, which will error because the parsing code expect a Flight model. This diff clones instead of mutating the original model, which fixes this error.


",['packages/react-server-dom-relay/src/ReactFlightDOMRelayClientHostConfig.js'],"Suspension during `parseModel` due to missing dependencies can cause part of the model to be prematurely parsed into React elements in the relay implementation, leading to parsing errors."
3499c343ab48968192aaefe295dcf4185b3a4f99,1612941706,"Apply #20778 to new fork, too (#20782)

* Apply #20778 to new fork, too

* Fix tests that use runWithPriority

Where possible, I tried to rewrite in terms of an idiomatic API.

For DOM tests, we should be dispatching an event with the desired
priority level.

For Idle updates (very unstable feature), probably need an unstable
API like ReactDOM.unstable_IdleUpdates.

Some of these fixes are not great, but we can replace them once we've
landed the more of our planned changes to the layering between
Scheduler, the reconciler, and the renderer.
","['packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js', 'packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-noop-renderer/src/ReactNoopPersistent.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/useMutableSource-test.internal.js', 'packages/react-reconciler/src/__tests__/useMutableSourceHydration-test.js', 'packages/react/src/__tests__/ReactDOMTracing-test.internal.js']","The new fork is not aligned with changes made in #20778, resulting in tests that use runWithPriority to fail since they were not rewritten in terms of an idiomatic API."
2c1ac9fe1d124e474f0cfb24625930023b92b46b,1509474183,"Inline fbjs/lib/EventListener dependency (#11402)

* Drop fbjs/lib/EventListener from tests

Assert on the underlying native event listener instead.

This test file still needs to be rewritten in terms of public APIs.

* Inline fbjs/lib/EventListener dependency

We explicitly don't want to shim this and we don't use the return value.

We can probably even drop the IE path now since we don't support it.
Not sure if that'll be a true breaking change though.

* Wrap event listeners and the callback passed to requestIdleCallback

This is a FBism.

This uses the injection model in ReactErrorUtils. This isn't technically
going to used for errors but close enough.

This really wants to be eager but we can't because of dynamic injection.

","['packages/react-dom/src/__tests__/ReactBrowserEventEmitter-test.js', 'packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/shared/ReactErrorUtils.js']","The dependency on fbjs/lib/EventListener in tests and in the library needs to be removed due to unnecessary shim and unused return value. Compatibility issues with IE are suspect, and FB specific event listeners are not correctly wrapped."
e6e393b9c5221bfb1a5ddcc7221c42e96ab3baca,1515515089,"Add warning in server renderer if class doesn't extend React.Component (#11993)

* Add warning in server renderer if class doesn't extend React.Component

In dev mode, while server rendering, a warning will be thrown if there is a class that doesn't extend React.Component.

* Use `.toWarnDev` matcher and deduplicate warnings

* Deduplicate client-side warning if class doesn't extend React.Component

* Default componentName to Unknown if null

","['packages/react-dom/src/__tests__/ReactCompositeComponent-test.js', 'packages/react-dom/src/__tests__/ReactServerRendering-test.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js']","Server renderer doesn't throw a warning when encountering a class that doesn't extend React.Component, leading to potential silent failures in dev mode."
d0e041aee83b50e54176d2dc957d86c0f571257e,1559776422,"[Fresh] Support classes by force-remounting them on edit (#15801)

* Remount classes during hot reload

* Fix a crash when Hook isn't in scope inside the signature

* Minor tweaks

* Support a comment annotation to force state reset

* Refactoring: pass a function instead of WeakMap

This hides the implementation a little bit and reduces how much React knows about the underlying mechanism.

* Refactor: use forceReset to remount unknown Hooks

We already have the logic to reset a component, so let's just reuse it instead of that special case.

","['packages/react-fresh/src/ReactFreshBabelPlugin.js', 'packages/react-fresh/src/ReactFreshRuntime.js', 'packages/react-fresh/src/__tests__/ReactFresh-test.js', 'packages/react-fresh/src/__tests__/ReactFreshBabelPlugin-test.js', 'packages/react-fresh/src/__tests__/ReactFreshIntegration-test.js', 'packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberHotReloading.js']","Hot reloading causes crashes when Hooks aren't in scope inside the signature, and annotations for forced component state resets are unsupported; additionally, unknown Hooks aren't properly remounted."
7df32c4c8c53d971e894c5e8d62a3cc908489b05,1580761801,"Flush `useEffect` clean up functions in the passive effects phase (#17925)

* Flush useEffect clean up functions in the passive effects phase

This is a change in behavior that may cause broken product code, so it has been added behind a killswitch (deferPassiveEffectCleanupDuringUnmount)

* Avoid scheduling unnecessary callbacks for cleanup effects

Updated enqueuePendingPassiveEffectDestroyFn() to check rootDoesHavePassiveEffects before scheduling a new callback. This way we'll only schedule (at most) one.

* Updated newly added test for added clarity.

* Cleaned up hooks effect tags

We previously used separate Mount* and Unmount* tags to track hooks work for each phase (snapshot, mutation, layout, and passive). This was somewhat complicated to trace through and there were man tag types we never even used (e.g. UnmountLayout, MountMutation, UnmountSnapshot). In addition to this, it left passive and layout hooks looking the same after renders without changed dependencies, which meant we were unable to reliably defer passive effect destroy functions until after the commit phase.

This commit reduces the effect tag types to only include Layout and Passive and differentiates between work and no-work with an HasEffect flag.

* Disabled deferred passive effects flushing in OSS builds for now

* Split up unmount and mount effects list traversal

","['packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/ReactHookEffectTags.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","Existing behavior may lead to broken product code when useEffect clean up functions are not appropriately flushed in the passive effects phase. Additionally, unnecessary callbacks are being scheduled for cleanup effects."
9d756d903fdd07895fc320962c3fab95fa099bd5,1551474612,"Revert #14756 changes to ReactFiberScheduler (#14992)

* Revert #14756 changes to ReactFiberScheduler

This PR introduced some bugs in concurrent mode during internal testing.
Until we figure out a proper solution, I'm going to try reverting it.

Not totally certain this is sufficient to unbreak the bugs we found, but
I'm using this branch to determine that.

* Add back commented out Scheduler import

With a note not to use named imports next time we import Scheduler
in this module.

",['packages/react-reconciler/src/ReactFiberScheduler.js'],"Concurrent mode bugs introduced by the changes in ReactFiberScheduler (#14756); internal testing indicates undesired behaviour.
"
46b3c3e4ae0d52565f7ed2344036a22016781ca0,1512069046,"Use static injection for ReactErrorUtils (#11725)

* Use `this` inside invokeGuardedCallback

It's slightly odd but that's exactly how our www fork works.
Might as well do it in the open source version to make it clear we rely on context here.

* Move invokeGuardedCallback into a separate file

This lets us introduce forks for it.

* Add a www fork for invokeGuardedCallback

* Fix Flow

","['packages/react-dom/src/client/ReactDOMFB.js', 'packages/shared/ReactErrorUtils.js', 'packages/shared/__tests__/ReactErrorUtils-test.internal.js', 'packages/shared/forks/invokeGuardedCallback.www.js', 'packages/shared/invokeGuardedCallback.js', 'scripts/rollup/forks.js']","The current dynamic injection model for 'ReactErrorUtils' could potentially cause contexts to mix up due to its reliance on it, causing improper functioning of error utilities."
915bb5321a8db3435eb36ef1cf9414c15333b447,1523456836,"Bump expiration for interactive updates to 150ms in production (#12599)

* Bump expiration for interactive updates to 150ms in production

**what is the change?:**
Changes the expiration deadline from 500ms to 150ms, only in production.
In development it will still be 500ms.

I'm thinking we may want to change the 'bucket size' too, will look into
that a bit.

**why make this change?:**
We need to ensure interactions are responsive enough in order to gather
more test data on async. mode.

**test plan:**
No tests failed - where shall we add a test for this?

* Add comments

",['packages/react-reconciler/src/ReactFiberScheduler.js'],The expiration deadline of 500ms for interactive updates in production is causing interactions to be less responsive.
d83601080a7c913cedcfbad86044702d008039c7,1538691072,"Wrap retrySuspendedRoot using SchedulerTracing (#13776)

Previously, we were emptying root.pendingInteractionMap and permanently losing those interactions when applying an unrelated update to a tree that has no scheduled work that is waiting on promise resolution. (That is, one that is showing a fallback and waiting for the suspended content to resolve.)

The logic I'm leaving untouched with `nextRenderIncludesTimedOutPlaceholder` is *not* correct -- what we want is instead to know if *any* placeholder anywhere in the tree is showing its fallback -- but we don't currently have a better replacement, and this should unblock tracing with suspense again.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']",Applying an unrelated update to a tree with no scheduled work waiting on promise resolution results in emptying root.pendingInteractionMap and losing interactions permanently - need better way to handle this.
33602d435a351404bc8a29b2dc461fc376e1cbaf,1534086845,"Improve soundness of ReactDOMFiberInput typings (#13367)

* Improve soundness of ReactDOMFiberInput typings

This is an attempt in improving the soundness for the safe value cast
that was added in #11741. We want this to avoid situations like [this
one](https://github.com/facebook/react/pull/13362#discussion_r209380079)
where we need to remember why we have certain type casts. Additionally
we can be sure that we only cast safe values to string.

The problem was `getSafeValue()`. It used the (deprecated) `*` type to
infer the type which resulted in a passing-through of the implicit `any`
of the props `Object`. So `getSafeValue()` was effectively returning
`any`.

Once I fixed this, I found out that Flow does not allow concatenating
all possible types to a string (e.g `"""" + false` fails in Flow). To
fix this as well, I've opted into making the SafeValue type opaque and
added a function that can be used to get the string value. This is sound
because we know that SafeValue is already checked.

I've verified that the interim function is inlined by the compiler and
also looked at a diff of the compiled react-dom bundles to see if I've
regressed anything. Seems like we're good.

* Fix typo

","['packages/react-dom/src/client/ReactDOMFiberInput.js', 'packages/react-dom/src/client/SafeValue.js']","The cast from safe values to string in ReactDOMFiberInput typings is unsound due to the deprecated `*` type, causing unsafe potential `any` return from `getSafeValue()`. This prevents the correct concatenation of all types to a string."
2e7cc949ae7c7ed5a583d15b4ea32c68c7730dab,1590707557,"Remove www builds of fetch (#19038)

I don't think we'll ever use this just because we have such a unique set up
for network delivery so we'll use something custom for this case.

Also, we don't need a profiling build for this since it doesn't have an
entry point.
",['scripts/rollup/bundles.js'],"The fetch function is using unnecessary www builds and profiling builds, despite having a unique setup for network delivery and lacking an entry point."
a0733fe13d598303f45b9d27c84ce0ec40d09021,1538087138,"pure (#13748)

* pure

A higher-order component version of the `React.PureComponent` class.
During an update, the previous props are compared to the new props. If
they are the same, React will skip rendering the component and
its children.

Unlike userspace implementations, `pure` will not add an additional
fiber to the tree.

The first argument must be a functional component; it does not work
with classes.

`pure` uses shallow comparison by default, like `React.PureComponent`.
A custom comparison can be passed as the second argument.

Co-authored-by: Andrew Clark <acdlite@fb.com>
Co-authored-by: Sophie Alpert <sophiebits@fb.com>

* Warn if first argument is not a functional component

","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/__tests__/ReactPure-test.internal.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/react/src/React.js', 'packages/react/src/pure.js', 'packages/shared/ReactSymbols.js', 'packages/shared/ReactWorkTags.js', 'packages/shared/isValidElementType.js']","The `pure` higher-order component fails when used with class components, it only works with functional components causing unexpected behavior in the application."
5e8c1961c03269ca0ee741182f3c877e0766efb8,1657652394,"[Transition Tracing] onMarkerProgress (#24861)

This PR adds support for `onMarkerProgress` (`onTransitionProgress(transitionName: string, markerName: string, startTime: number, currentTime: number, pending: Array<{name: null | string}>)`)

We call this callback when:
    * When **a child suspense boundary of the marker commits in a fallback state**. Only the suspense boundaries that are triggered and commit in a fallback state when the transition first occurs (and all subsequent suspense boundaries in the initial suspense boundary's subtree) are considered a part of the transition
    * **A child suspense boundary of the marker resolves**
   
When we call `onMarkerProgress`, we call the function with a `pending` array. This array contains the names of the transition's suspense boundaries that are still in a fallback state
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.new.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactTransitionTracing-test.js']","Lack of a callback function to track the progress of a marker during a transition, which is crucial when child suspense boundaries commit in a fallback state or resolve."
f440bfd55911588d90c1d6e00d5a6b8feeda9b48,1564526796,"Bugfix:  Effects should never have higher than normal priority (#16257)

* Bugfix: Priority when effects are flushed early

The priority of passive effects is supposed to be the same as the
priority of the render. This fixes a bug where the priority is sometimes
wrong if the effects are flushed early.

But the priority should really never be higher than Normal Priority.
I'll change that in the next commit.

* Effects never have higher than normal priority

Effects currently have the same priority as the render that spawns them.
This changes the behavior so that effects always have normal priority,
or lower if the render priority is lower (e.g. offscreen prerendering).

The implementation is a bit awkward because of the way `renderRoot`,
`commitRoot`, and `flushPassiveEffects` are split. This is a known
factoring problem that I'm planning to address once 16.9 is released.

","['packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/SchedulerWithReactIntegration.js', 'packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.internal.js']","Render priority can incorrectly increase during early flushing of passive effects, causing inconsistencies with expected behaviour that effects always have normal or lower priority."
41110021f28100b16c11d6d9a248582c5bb6bc3c,1677688728,"Fix: Selective hydration causing incorrect thenable type passed to DevTools (#26275)

Selective hydration is implemented by suspending the current render
using a special internal opaque object. This is conceptually similar to
suspending with a thenable in userspace, but the opaque object should
not leak outside of the reconciler.

We were accidentally passing this object to DevTool's
markComponentSuspended function, which expects an actual thenable. This
happens in the error handling path (handleThrow).

The fix is to check for the exception reason before calling
markComponentSuspended. There was already a naive check in place, but it
didn't account for all possible enum values of the exception reason.
",['packages/react-reconciler/src/ReactFiberWorkLoop.js'],"Selective hydration error is causing internal opaque object to leak to DevTool's markComponentSuspended function, the object is not in the expected thenable format."
4c03bb6ed01a448185d9a1554229208a9480560d,1652504090,"[DevTools] ignore tests without reactVersion pragma if REACT_VERSION specified (#24555)

In DevTools tests, if the REACT_VERSION specified, we know this is a regression test (testing older React Versions). Because a lot of tests test the DevTools front end and we don't want to run them in the regression test scenario, we decided to only run tests that have the // @reactVersion pragma defined.

Because if there are no tests specified, jest will fail, we also opt to use jest.skip to skip all the tests that we don't want to run for a specific React version istead.

This PR makes this change.
","['packages/react-devtools-shared/src/__tests__/transform-react-version-pragma-test.js', 'scripts/babel/transform-react-version-pragma.js', 'scripts/jest/config.build-devtools.js', 'scripts/jest/devtools/preprocessor.js', 'scripts/jest/devtools/setupEnv.js', 'scripts/jest/preprocessor.js']","DevTools regression tests are running unnecessary tests not specified for older React versions, causing Jest to fail if no tests are specified."
d3d2451a08c9afcc561f66383211ce2274d864e6,1613002175,"Use a single lane per priority level (#20791)

(Except transitions and retries.)

The idea is that the only priorities that benefit from multiple parallel
updates are the ones that might suspend: transitions and retries. All
other priorities, including the ones that are interruptible like
Continuous and Idle, don't need multiple lanes because it's better to
batch everything together.
","['packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js']","Multiple parallel updates are being used for all priority levels, causing unnecessary batch separation in interruptible processes like Continuous and Idle."
3fbebb2a0b3b806f428c4154700af8e75e561895,1548102878,"Revert ""Double-render function components with Hooks in DEV in StrictMode"" (#14652)

* Revert ""Revert ""Disallow reading context during useMemo etc"" (#14651)""

This reverts commit 5fce6488ce1dc97e31515a47ff409d32ab722d65.

* Revert ""Add test coverage for readContext() on the server (#14649)""

This reverts commit fe2ecd276e9b9e57a49ddf2d86ff01677b69b493.

* Revert ""Warn about incorrect use of useImperativeHandle() (#14647)""

This reverts commit 8f45a7fdc469c6d88ca5ca105095b03dd4e862e1.

* Revert ""Disallow reading context during useMemo etc (#14648)""

This reverts commit 1fcbd22431d97e404c1f684744dc543b6c22b076.

* Revert ""Warn about refs on lazy function components (#14645)""

This reverts commit 2a084f51a94df30e3bffd42bf3a04ce3da231512.

* Revert ""Fix typo (#14560)""

This reverts commit b5a3df6e8894ebf2334179e445b0803f6819aa9f.

* Revert ""fix typo (#14316)""

This reverts commit 9c146e675174a523f90f630c87f62f55812bacea.

* Revert ""Mention forwardRef() in <Fn ref={...} /> errors and warnings (#14644)""

This reverts commit baa6d40fc856c65e1d74ddf4fa038d7a65a787ed.

* Revert ""Double-render function components with Hooks in DEV in StrictMode (#14643)""

This reverts commit a1414e8949915c006bba411fa2949b304dd044ae.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']","Multiple reverts necessary due to various issues encountered with hooks in DEV in StrictMode, including incorrect context reading during useMemo, incorrect use of useImperativeHandle(), and problems with refs on lazy function components."
7e36d8beba53102e11c523f317976b311666e449,1612306082,"Some release script fixes (#20718)

* Retry loop should not start over from beginning

When the otp times out, we should not retry the packages that were
already successfully published. We should pick up where we left off.

* Don't crash if build-info.json doesn't exist

The ""print follow up instructions"" step crashes if build-info.json is
not found. The new build workflow doesn't include those yet (might not
need to) and since the instructions that depend on it only affect
semver (latest) releases, I've moved the code to that branch. Will
follow up with a proper fix, either by adding back a build-info.json
file or removing that dependency and reading the commit some other way.
","['scripts/release/publish-commands/print-follow-up-instructions.js', 'scripts/release/publish-commands/publish-to-npm.js', 'scripts/release/publish.js']","Release script retry loop restarts from the beginning upon otp timeout instead of continuing from where it left off. Also, the absence of a 'build-info.json' file crashes the ""print follow up instructions"" step."
98313aaa7ea58d49eb30ecffc0f9eb6fc1ef467a,1610644820,"Migrate prepare-release-from-ci to new workflow (#20581)

* Migrate prepare-release-from-ci to new workflow

I added a `--releaseChannel (-r)` argument to script. You must choose
either ""stable"" or ""experimental"", because every build job now includes
both channels.

The prepare-release-from-npm script is unchanged since those releases
are downloaded from npm, nt CI.

(As a side note, I think we should start preparing semver releases using
the prepare-release-from-ci script, too, and get rid of
prepare-release-from-npm. I think that was a neat idea originally but
because we already run `npm pack` before storing the artifacts in CI,
there's really not much additional safety; the only safeguard it adds is
the requirement that a ""next"" release must have already been published.)

* Move validation to parse-params module
","['scripts/release/prepare-release-from-ci.js', 'scripts/release/shared-commands/download-build-artifacts.js', 'scripts/release/shared-commands/get-latest-master-build-number.js', 'scripts/release/shared-commands/parse-params.js', 'scripts/release/utils.js']","The prepare-release-from-ci script doesn't support the new workflow, unavailable options for selecting release channels (either ""stable"" or ""experimental"") while preparing a release."
7385de9fc233cc78572951bb26055e996823bc44,1564161187,"react-devtools-core standalone bugfix: prevent electron crash

CSS source maps require the style-loader to use URL.createObjectURL (rather than just a <style> tag). For some reason, this crashes Electron's webview process, which completely breaks the embedded extension inside of Nuclide and other Electron apps. This commit turns (CSS) source maps off for production builds to avoid this crash.

","['packages/react-devtools-core/webpack.standalone.js', 'shells/browser/shared/webpack.config.js', 'shells/dev/webpack.config.js']","The use of URL.createObjectURL in CSS source maps is causing Electron's webview process to crash, rendering the embedded extension in Nuclide and other Electron apps non-functional."
15e3dffb4c9ca9b9466f4ef1a6b8b2293d41e9d6,1522347362,"Don't bail out on referential equality of Consumer's props.children function (#12470)

* Test case for React Context bailing out unexpectedly

* This is 💯% definitely not the correct fix at all

* Revert ""This is 💯% definitely not the correct fix at all""

This reverts commit 8686c0f6bdc1cba3056fb2212f3f7740c749d33a.

* Formatting + minor tweaks to the test

* Don't bail out on consumer child equality

* Tweak the comment

* Pretty lint

* Silly Dan

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js']",React Context bailing out unexpectedly due to referential equality of Consumer's props.children function.
652e6c5a1b2067cbe1964c6b4ec1af5ff295d7ed,1656198821,"[sizebot] Add link to diff view (#24790)

Updates the sizebot output so that the file names link to a diff view of
the corresponding build artifact.

Example diff view: https://react-builds.vercel.app/commits/955cad9bcc6d755b2a672f8038fe9754e0fe5108/files/oss-stable-semver/react-dom/cjs/react-dom.production.min.js?compare=c3d7a7e3d72937443ef75b7e29335c98ad0f1424

The diff view itself is rendered by a Next.js app that I built as a side
project and is hosted at https://react-builds.vercel.app. If we find
this useful enough I could move the app to a React-owned repo but since
this isn't a critical feature it might be OK to leave it separate for
now, so we don't need to commit to supporting it indefinitely.
",['dangerfile.js'],"Sizebot output currently lacks the feature link to a diff view of the corresponding build artifact, causing inconveniences in analysing difference between builds."
bbc8530ed7a67859583a7c990ac51cd39c7746e5,1694531350,"[Float] Refactor public interface and internal HostDispatcher implementation (#27361)

When Float was first developed the internal implementation and external
interface were the same. This is problematic for a few reasons. One, the
public interface is typed but it is also untrusted and we should not
assume that it is actually respected. Two, the internal implementations
can get called from places other than the the public interface and
having to construct an options argument that ends up being destructured
to process the request is computationally wasteful and may limit JIT
optimizations to some degree. Lastly, the wire format was not as
compressed as it could be and it was untyped.

This refactor aims to address that by separating the public interface
from the internal implementations so we can solve these challenges and
also make it easier to change Float in the future

* The internal dispatcher method preinit is now preinitStyle and
preinitScript.
* The internal dispatcher method preinitModule is now
preinitModuleScript in anticipation of different implementations for
other module types in the future.
* The wire format is explicitly typed and only includes options if they
are actually used omitting undefined and nulls.
* Some function arguments are not options even if they are optional. For
instance precedence can be null/undefined because we deafult it to
'default' however we don't cosnider this an option because it is not
something we transparently apply as props to the underlying instance.
* Fixes a problem with keying images in flight where srcset and sizes
were not being taken into account.
* Moves argument validation into the ReactDOMFloat file where it is
shared with all runtimes that expose these methods
* Fixes crossOrigin serialization to use empty string except when
'use-credentials'
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactDOMFlightServerHostDispatcher.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFlightServerConfigDOM.js', 'packages/react-dom-bindings/src/shared/ReactDOMResourceValidation.js', 'packages/react-dom-bindings/src/shared/ReactFlightClientConfigDOM.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-dom/src/__tests__/react-dom-server-rendering-stub-test.js', 'packages/react-dom/src/shared/ReactDOMFloat.js', 'packages/react-dom/src/shared/ReactDOMTypes.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/forks/ReactFlightServerConfig.custom.js']","Float's identical internal implementation and external interface causing untrusted interface assumptions, computationally wasteful operations due to options argument destructure in internal calls, and uncompressed, untyped wire format. Also, srcset and sizes attributes are overlooked during in-flight image keying."
26bc8ff9bfcdb67e255fea424b56909899ac208b,1635366884,"Revert logic for checking for duplicate installations of DevTools (#22638)

* Revert ""Only show DevTools warning about unrecognized build in Chrome (#22571)""

This reverts commit b72dc8e9300f5ae997f7f5cfcd79b604cca3df0c.

* Revert ""Show warning in UI when duplicate installations of DevTools extension are detected (#22563)""

This reverts commit 930c9e7eeb4c9721e1b8dee074c2eef4d1eae5dc.

* Revert ""Prevent errors/crashing when multiple installs of DevTools are present (#22517)""

This reverts commit 545d4c2de7934a43b0c5d3ce050d77b4c3113bd3.

* Remove all references to passing extensionId in postMessage

* Keep build changes

* lint
","['packages/react-devtools-extensions/src/background.js', 'packages/react-devtools-extensions/src/checkForDuplicateInstallations.js', 'packages/react-devtools-extensions/src/constants.js', 'packages/react-devtools-extensions/src/contentScript.js', 'packages/react-devtools-extensions/src/injectGlobalHook.js', 'packages/react-devtools-extensions/src/main.js', 'packages/react-devtools-shared/src/devtools/views/DevTools.js', 'packages/react-devtools-shared/src/devtools/views/DuplicateInstallationDialog.js']",Multiple installations of DevTools are causing errors/crashes and showing warnings about unrecognized builds in Chrome. There are also issues with passing extensionId in postMessage.
067cc24f55ef01a233be9e7564b337e35fed72ea,1533746573,"Profiler actualDuration bugfix (#13313)

* Simplified profiler actualDuration timing

While testing the new DevTools profiler, I noticed that sometimes– in larger, more complicated applications– the actualDuration value was incorrect (either too large, or sometimes negative). I was not able to reproduce this in a smaller application or test (which sucks) but I assume it has something to do with the way I was tracking render times across priorities/roots. So this PR replaces the previous approach with a simpler one.

* Changed bubbling logic after chatting out of band with Andrew

* Replaced __PROFILE__ with feature-flag conditionals in test

* Updated test comment

","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/ReactProfilerTimer.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']",Profiler actualDuration value inaccurately returns excessively large or negative values in complex applications due to potential issues with render time tracking across priorities/roots.
790c8ef04195f0fc11ca3fb08e63f870f81483ac,1547688215,"Allow useReducer to bail out of rendering by returning previous state (#14569)

* Allow useReducer to bail out of rendering by returning previous state

This is conceptually similar to `shouldComponentUpdate`, except because
there could be multiple useReducer (or useState) Hooks in a single
component, we can only bail out if none of the Hooks produce a new
value. We also can't bail out if any the other types of inputs — state
and context — have changed.

These optimizations rely on the constraint that components are pure
functions of props, state, and context.

In some cases, we can bail out without entering the render phase by
eagerly computing the next state and comparing it to the current one.
This only works if we are absolutely certain that the queue is empty at
the time of the update. In concurrent mode, this is difficult to
determine, because there could be multiple copies of the queue and we
don't know which one is current without doing lots of extra work, which
would defeat the purpose of the optimization. However, in our
implementation, there are at most only two copies of the queue, and if
*both* are empty then we know that the current queue must be.

* Add test for context consumers inside hidden subtree

Should not bail out during subsequent update. (This isn't directly
related to this PR because we should have had this test, anyway.)

* Refactor to use module-level variable instead of effect bit

* Add test combining state bailout and props bailout (memo)

","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberNewContext.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js']","'UseReducer' fails to skip rendering even when returned state is previous, thereby unnecessarily rendering components even when there are no new values from Hooks or changes in state or context."
bd45ad05dc4fe05f289d482bfd0111bee5d09ef4,1623704237,"Add a DOCTYPE to the stream if the <html> tag is rendered (#21680)

This makes it a lot easier to render the whole document using React without
needing to patch into the stream.

We expect that currently people will still have to patch into the stream
to do advanced things but eventually the goal is that you shouldn't
need to.
","['fixtures/ssr/server/render.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/__tests__/ReactRenderDocument-test.js', 'packages/react-dom/src/server/ReactDOMLegacyServerBrowser.js', 'packages/react-dom/src/server/ReactDOMLegacyServerNode.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom/src/server/ReactDOMServerLegacyFormatConfig.js']","Rendering the whole document using React without a DOCTYPE in the stream is challenging, requiring additional patch into the stream."
e9a2ec915655fa1968b7d41c4e8ad9e90f7268cb,1541464370,"[suspense] Avoid double commit by re-rendering immediately and reusing primary children (#14083)

* Avoid double commit by re-rendering immediately and reusing children

To support Suspense outside of concurrent mode, any component that
starts rendering must commit synchronously without being interrupted.
This means normal path, where we unwind the stack and try again from the
nearest Suspense boundary, won't work.

We used to have a special case where we commit the suspended tree in an
incomplete state. Then, in a subsequent commit, we re-render using the
fallback.

The first part — committing an incomplete tree — hasn't changed with
this PR. But I've changed the second part — now we render the fallback
children immediately, within the same commit.

* Add a failing test for remounting fallback in sync mode

* Add failing test for stuck Suspense fallback

* Toggle visibility of Suspense children in mutation phase, not layout

If parent reads visibility of children in a lifecycle, they should have
already updated.

","['packages/react-dom/src/__tests__/ReactDOMSuspensePlaceholder-test.internal.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']","Synchronous commitment of suspended components leads to double rendering and visibility of Suspense children gets toggled in layout instead of mutation phase, causing issues with lifecycle."
ed6c091fe961a3b95e956ebcefe8f152177b1fb7,1625177647,"Replace unbatchedUpdates with flushSync (#21776)

There's a weird quirk leftover from the old Stack (pre-Fiber)
implementation where the initial mount of a leagcy (ReactDOM.render)
root is flushed synchronously even inside `batchedUpdates`.

The original workaround for this was an internal method called
`unbatchedUpdates`. We've since added another API that works almost the
same way, `flushSync`.

The only difference is that `unbatchedUpdates` would not cause other
pending updates to flush too, only the newly mounted root. `flushSync`
flushes all pending sync work across all roots. This was to preserve
the exact behavior of the Stack implementation.

But since it's close enough, let's just use `flushSync`. It's unlikely
anyone's app accidentally relies on this subtle difference, and the
legacy API is deprecated in 18, anyway.
","['packages/react-dom/src/__tests__/ReactMount-test.js', 'packages/react-dom/src/client/ReactDOMLegacy.js', 'packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-noop-renderer/src/ReactNoopPersistent.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.js']","Initial mount of a legacy root (ReactDOM.render) within `batchedUpdates` is being flushed synchronously due to a quirk left from the Stack implementation, causing potential update issues."
435cff9866d38d137aafe6396c776437710a8481,1616524778,"[Fizz] Expose callbacks in options for when various stages of the content is done (#21056)

* Report errors to a global handler

This allows you to log errors or set things like status codes.

* Add complete callback

* onReadyToStream callback

This is typically not needed because if you want to stream when the
root is ready you can just start writing immediately.

* Rename onComplete -> onCompleteAll
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server/src/ReactFizzServer.js']","Global error handler is not reporting errors properly and lacking a complete callback for stages of content. Also, 'onComplete' function needs a rename for better clarity."
4a1cc2ddd035f5c269e82ab6f7686e2e60d3b3ea,1680539693,"Fix logic around attribute seralization (#26526)

There was a bug in the attribute seralization for stylesheet resources
injected by the Fizz runtime. For boolean properties the attribute value
was set to an empty string but later immediately set to a string coerced
value. This PR fixes that bug and refactors the code paths to be clearer
",['packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js'],Boolean properties in stylesheet resources injected by Fizz runtime are incorrectly set to an empty string immediately before being coerced to a string value.
88df88f9441e0f83917e60e04d4f75118c1adec5,1686647078,"fix: devtools cannot be closed correctly (#25510)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Fix devtools cannot be shutdown by bridge.shutdown().

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
","['packages/react-devtools-shared/src/__tests__/bridge-test.js', 'packages/react-devtools-shared/src/bridge.js']",DevTools is not shutting down properly when the bridge.shutdown() method is invoked.
487c693846dbe58a68a410c658699d27386323b3,1589384645,"[eslint-plugin-react-hooks] useWithoutEffectSuffix fix (#18902) (#18907)

* [eslint-plugin-react-hooks] reproduce bug with a test and fix it (#18902)

Since we only reserve `-Effect` suffix, react-hooks/exhaustive-deps is
expected to succeed without warning on a custom hook which contains -Effect- in
the middle of it's name (but does NOT contain it as a suffix).

* [eslint-plugin-react-hooks] reproduced bug with a test and fix it

Since we only reserve `-Effect` suffix, react-hooks/exhaustive-deps is expected
to succeed without warning on a render helper which contains -use- in the middle
of it's name (but does NOT contain it as a prefix, since that would violate hook
naming convetion).

Co-authored-by: Boris Sergeyev <boris.sergeyev@quolab.com>
","['packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js', 'packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js']","""useWithoutEffectSuffix"" fails the react-hooks/exhaustive-deps check because it unnecessarily reserves ""-Effect"" suffix even when ""Effect"" is not at the end of the name. Same applies to ""use-"" prefix check."
ab075a232409ea1f566526c6a5dca30f658280de,1667315488,"Do not unmount layout effects on initial Offscreen mount (#25592)

`wasHidden` is evaluted to false if `current` is null. This means
Offscreen has never been shown but this code assumes it is going from
'visible' to 'hidden' and unmounts layout effects.
To fix this, only unmount layout effects if `current` is not null.

I'm not able to repro this problem or write unit test for it. I see this
crash bug in production test.
The problem with repro is that if Offscreen starts as hidden, it's
render is deferred and current is no longer null.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/__tests__/ReactOffscreen-test.js']","Initial Offscreen mount incorrectly unmounts layout effects due to the assumption that it's transitioning from 'visible' to 'hidden', causing crashes in production."
1425fcbb86285a665bb8f42866e8e61efe512923,1592928983,"Re-enabled DebugTracing feature for old reconciler fork (#19161)

* Re-enabled DebugTracing feature for old reconciler fork

It was temporarily removed by @sebmarkbage via PR #18697. Newly re-added tracing is simplified, since the lane(s) data type does not require the (lossy) conversion between priority and expiration time values.

@sebmarkbage mentioned that he removed this because it might get in the way of his planned discrete/sync refactor. I'm not sure if that concern still applies, but just in case- I have only re-added it to the old reconciler fork for now.

* Force Code Sandbox CI to re-run
","['packages/react-reconciler/src/DebugTracing.js', 'packages/react-reconciler/src/ReactFiberClassComponent.old.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactFiberThrow.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","DebugTracing feature was temporarily removed from the old reconciler fork, inhibiting the tracing of lane data types and potentially interfering with planned refactoring work."
8a09a2fc538e98523f67022095de9120e5dc2c32,1517298550,"Interactive updates (#12100)

* Updates inside controlled events (onChange) are sync even in async mode

This guarantees the DOM is in a consistent state before we yield back
to the browser.

We'll need to figure out a separate strategy for other
interactive events.

* Don't rely on flushing behavior of public batchedUpdates implementation

Flush work as an explicit step at the end of the event, right before
restoring controlled state.

* Interactive updates

At the beginning of an interactive browser event (events that fire as
the result of a user interaction, like a click), check for pending
updates that were scheduled in a previous interactive event. Flush the
pending updates synchronously so that the event handlers are up-to-date
before responding to the current event.

We now have three classes of events:

- Controlled events. Updates are always flushed synchronously.
- Interactive events. Updates are async, unless another a subsequent
event is fired before it can complete, as described above. They are
also slightly higher priority than a normal async update.
- Non-interactive events. These are treated as normal, low-priority
async updates.

* Flush lowest pending interactive update time

Accounts for case when multiple interactive updates are scheduled at
different priorities. This can happen when an interactive event is
dispatched inside an async subtree, and there's an event handler on
an ancestor that is outside the subtree.

* Update comment about restoring controlled components

","['packages/events/ReactControlledComponent.js', 'packages/events/ReactGenericBatching.js', 'packages/events/ReactSyntheticEventType.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-dom/src/events/SimpleEventPlugin.js', 'packages/react-dom/src/events/__tests__/ChangeEventPlugin-test.internal.js', 'packages/react-dom/src/events/__tests__/SimpleEventPlugin-test.internal.js', 'packages/react-dom/src/events/__tests__/SimpleEventPlugin-test.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactFabricRenderer.js', 'packages/react-native-renderer/src/ReactNativeRenderer.js', 'packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberScheduler.js']","Interactive browser events could be handling stale state due to asynchronously scheduled updates from previous events not completed, potentially affecting accurate response to current events. Rendering issues could also occur with multiple interactive updates scheduled at different priorities."
41287d44753f0ea03d54bd8296d733ff82dfe336,1658254292,"Use recursion to traverse during ""reappear layout"" phase

This converts the ""reappear layout"" phase to iterate over its effects
recursively instead of iteratively. This makes it easier to track
contextual information, like whether a fiber is inside a hidden tree.

We already made this change for several other phases, like mutation and
layout mount. See 481dece for more context.

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']","The ""reappear layout"" phase is currently iterative and can lead to difficulties tracking context, like whether a fiber is inside a hidden tree."
5022fdfd5f9b3639c9c8bb2df31100586d1cfd01,1585965700,"Refactor Error Dialog Logging (#18487)

* Remove unnecessary CapturedError fields.

componentName is not necessary and is misleading when the error is caused
elsewhere in the stack. The stack is sufficient.

The many error boundary fields are unnecessary because they can be inferred
by the boundary itself.

* Don't attempt to build a stack twice

If it was possible, it would've been done in createCapturedValue.

* Push the work needed by the works into the forks

This avoids needing this in the npm published case.
","['packages/react-reconciler/src/ReactCapturedValue.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberErrorDialog.js', 'packages/react-reconciler/src/ReactFiberErrorLogger.js', 'packages/react-reconciler/src/ReactFiberThrow.js', 'packages/react-reconciler/src/forks/ReactFiberErrorDialog.native.js', 'packages/react-reconciler/src/forks/ReactFiberErrorDialog.www.js']","The current error dialog logging contains unnecessary fields in CapturedError, which may mislead when error is elsewhere, and multiple error boundary fields that can be inferred. Creating stacks are attempted twice which is redundant."
a014c915c77f908ba3be3de9e6a06d05c71d5b62,1612819608,"Parallel transitions: Assign different lanes to consecutive transitions (#20672)

* Land enableTransitionEntanglement changes

Leaving the flag though because I plan to reuse it for additional,
similar changes.

* Assign different lanes to consecutive transitions

Currently we always assign the same lane to all transitions. This means
if there are two pending transitions at the same time, neither
transition can finish until both can finish, even if they affect
completely separate parts of the UI.

The new approach is to assign a different lane to each consecutive
transition, by shifting the bit to the right each time. When we reach
the end of the bit range, we cycle back to the first bit. In practice,
this should mean that all transitions get their own dedicated lane,
unless we have more pending transitions than lanes, which should
be rare.

We retain our existing behavior of assigning the same lane to all
transitions within the same event. This is achieved by caching the first
lane assigned to a transition, then re-using that one until the next
React task, by which point the event must have finished. This preserves
the guarantee that all transition updates that result from a single
event will be consistent.
","['packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js', 'packages/react-reconciler/src/__tests__/ReactTransition-test.js']","Multiple pending transitions are assigned the same lane, causing a delay in transition completion when they could potentially finish independently."
dd480ef923930c8906a02664b01bcdea50707b5d,1692717750,"Fix: Stylesheet in error UI suspends indefinitely (#27265)

This fixes the regression test added in the previous commit. The
""Suspensey commit"" implementation relies on the
`shouldRemainOnPreviousScreen` function to determine whether to 1)
suspend the commit 2) activate a parent fallback and schedule a retry.
The issue was that we were sometimes attempting option 2 even when there
was no parent fallback.

Part of the reason this bug landed is due to how `throwException` is
structured. In the case of Suspensey commits, we pass a special ""noop""
thenable to `throwException` as a way to trigger the Suspense path. This
special thenable must never have a listener attached to it. This is not
a great way to structure the logic, it's just a consequence of how the
code evolved over time. We should refactor it into multiple functions so
we can trigger a fallback directly without having to check the type. In
the meantime, I added an internal warning to help detect similar
mistakes in the future.
","['packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-reconciler/src/ReactFiberThenable.js', 'packages/react-reconciler/src/ReactFiberThrow.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js']","Suspensey commit's dependency on `shouldRemainOnPreviousScreen` results in attempts to activate a parent fallback and schedule a retry when no parent fallback exists, leading to indefinite suspension of error UI stylesheet."
bc9818f24d55e681aea39ecae59b8f544318169d,1549441001,"Scheduler.unstable_next (#14756)

* Add Scheduler.unstable_next

* Use Scheduler to prioritize updates

Changes the implementation of syncUpdates, deferredUpdates, and
interactiveUpdates to use runWithPriority, so

This is the minimum integration between Scheduler and React needed to
unblock use of the Scheduler.next API.

* Add Scheduler.unstable_next

* Use Scheduler to prioritize updates

Changes the implementation of syncUpdates, deferredUpdates, and
interactiveUpdates to use runWithPriority, so

This is the minimum integration between Scheduler and React needed to
unblock use of the Scheduler.next API.

","['packages/react-cache/src/__tests__/ReactCache-test.internal.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react/src/ReactSharedInternals.js', 'packages/scheduler/npm/umd/scheduler.development.js', 'packages/scheduler/npm/umd/scheduler.production.min.js', 'packages/scheduler/npm/umd/scheduler.profiling.min.js', 'packages/scheduler/src/Scheduler.js', 'packages/shared/forks/Scheduler.umd.js']","Current implementation of syncUpdates, deferredUpdates, and interactiveUpdates fails to leverage Scheduler for prioritizing updates, limiting usage of Scheduler.next API."
5711811da17c62de7ba6c911dbc7f20f16bfc980,1606835644,"Reconcile element types of lazy component yielding the same type (#20357)

* Reconcile element types of lazy component yielding the same type

* Add some legacy mode and suspense boundary flushing tests

* Fix infinite loop in legacy mode

In legacy mode we typically commit the suspending fiber and then rerender
the nearest boundary to render the fallback in a separate commit.

We can't do that when the boundary itself suspends because when we try to
do the second pass, it'll suspend again and infinite loop.

Interestingly the legacy semantics are not needed in this case because
they exist to let an existing partial render fully commit its partial state.

In this case there's no partial state, so we can just render the fallback
immediately instead.

* Check fast refresh compatibility first

resolveLazy can suspend and if it does, it can resuspend. Fast refresh
assumes that we don't resuspend. Instead it relies on updating the inner
component later.

* Use timers instead of act to force fallbacks to show
","['packages/react-reconciler/src/ReactChildFiber.new.js', 'packages/react-reconciler/src/ReactChildFiber.old.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberThrow.old.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js']","In legacy mode, repeated rerendering of a suspending boundary results in an infinite loop. Additionally, Fast Refresh assumes no resuspension, but resolveLazy can suspend and resuspend, causing potential issues."
fec97ecbc4bc2e0e1407160289a8f5fac5241cbc,1681152018,"act: Move didScheduleLegacyUpdate to ensureRootIsScheduled (#26552)

`act` uses the `didScheduleLegacyUpdate` field to simulate the behavior
of batching in React <17 and below. It's a quirk leftover from a
previous implementation, not intentionally designed.

This sets `didScheduleLegacyUpdate` every time a legacy root receives an
update as opposed to only when the `executionContext` is empty. There's
no real reason to do it this way over some other way except that it's
how it used to work before #26512 and we should try our best to maintain
the existing behavior, quirks and all, since existing tests may have
come to accidentally rely on it.

This should fix some (though not all) of the internal Meta tests that
started failing after #26512 landed.

Will add a regression test before merging.
","['packages/react-reconciler/src/ReactFiberRootScheduler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactIsomorphicAct-test.js', 'scripts/jest/matchers/reactTestMatchers.js']","The act function is mishandling didScheduleLegacyUpdate, leading to inaccurate simulation of React's batching behavior, and causing test failures."
ab5fe174c69ea4ea5019390f4234a83ef7ce8d52,1552599609,"Don't set the first option as selected in select tag with `size` attribute  (#14242)

* Set 'size' attribute to select tag if it occurs before appending options

* Add comment about why size is assigned on select create. Tests

I added some more clarification for why size must be set on select
element creation:

- In the source code
- In the DOM test fixture
- In a unit test

* Use let, not const in select tag stub assignment

","['fixtures/dom/src/components/fixtures/selects/index.js', 'packages/react-dom/src/__tests__/ReactDOMSelect-test.js', 'packages/react-dom/src/client/ReactDOMComponent.js']",Setting the 'size' attribute to select tag before appending options causes the first option to be automatically selected.
392530104c00c25074ce38e1f7e1dd363018c7ce,1528759867,"Remove feature flag around 'getDerivedStateFromProps' bug fix (#13022)

**what is the change?:**
Basically undoes https://github.com/facebook/react/commit/4b2e65d32e3adec7d4ef5ddd5fcb35e617e0cde6#diff-904ceabd8a1e9a07ab1d876d843d62e1

**why make this change?:**
We rolled out this fix internally and in open source weeks ago, and now
we're cleaning up.

**test plan:**
Ran tests and lint, and really we have been testing this because the
flag is open internally as of last week or so.

**issue:**
Internal task T29948812 has some info.
","['packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/__tests__/ReactIncremental-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric-oss.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","The 'getDerivedStateFromProps' bug fix has been implemented but is still enclosed within a feature flag, potentially causing unnecessary code complexity and confusion."
73c380fca77a32af167d85c77553ae5d40c6fda8,1559349990,"WorkPhase -> ExecutionContext

WorkPhase is an enum that represents the currently executing phase of
the React update -> render -> commit cycle. However, in practice, it's
hard to use because different ""phases"" can be nested inside each other.
For example, the commit phase can be nested inside the
""batched phase.""

This replaces WorkPhase with a different concept: ExecutionContext.
ExecutionContext is a bitmask instead of an enum. It represents a stack
of React entry points. For example, when `batchedUpdates` is called
from inside an effect, the ExecutionContext is
`BatchedContext | CommitContext`.

",['packages/react-reconciler/src/ReactFiberWorkLoop.js'],"WorkPhase enum in React's update -> render -> commit cycle is difficult to use due to the possibility of nested ""phases"", causing confusion and potential misuse in the updating process."
a29adc9f62a836378e766d8aa66e9bc902c2dd94,1565652482,"Dehydrated suspense boundaries in suspense list (#16369)

If we get an insertion after a boundary, that has not yet been hydrated,
we take our best guess at which state the HTML is showing.

isSuspenseInstancePending means that we're still waiting for more server
HTML before we can hydrate. This should mean that we're showing the
fallback state.

isSuspenseInstanceFallback means that we want to client render something.
That most likely means that the server was unable to render and is
displaying a fallback state in this slot.

Adds tests to ensure that dehydrated components don't consider the force
flag.
","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js']","Issue: Insertion after an unhydrated boundary in a suspense list incorrectly guesses the state of HTML being displayed, potentially causing inconsistencies in the rendered output."
9a9da7721e5b73a8af242807e463e2af842c58ee,1681092998,"Don't update textarea defaultValue and input checked unnecessarily (#26580)

In #26573 I changed it so that textareas get their defaultValue reset if
you don't specify one.

However, the way that was implemented, it always set it for any update
even if it hasn't changed.

We have a test for that, but that test only works if no properties
update at all so that no update was scheduled. This fixes the test so
that it updates some unrelated prop.

I also found a test for `checked` that needed a similar fix.

Interestingly, we don't do this deduping for `defaultValue` or
`defaultChecked` on inputs and there's no test for that.
","['packages/react-dom-bindings/src/client/ReactDOMInput.js', 'packages/react-dom-bindings/src/client/ReactDOMTextarea.js', 'packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/__tests__/ReactDOMTextarea-test.js']","Unnecessary updates of textarea defaultValue and input checked are triggering even when they haven't changed, leading to excessive rendering. Tests for these parameters do not capture this issue."
42ef45b1294ec4f0ee0f5318dc24721ba226852e,1629325617,"[DevTools] Using array destructuring without assigning first variable does not error (#22129)

## Summary

Before this commit, if a hook returned an array the was destructured, but without assigning a variable to the first element in the array, this would produce an error. This was detected via internal testing.

This commit fixes that and adds regression tests.


## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools
- added new regression tests 
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).


","['packages/react-devtools-extensions/src/__tests__/__source__/__untransformed__/ComponentWithUseState.js', 'packages/react-devtools-extensions/src/__tests__/parseHookNames-test.js', 'packages/react-devtools-extensions/src/astUtils.js']",Destructuring hook returned arrays without assigning the first element leads to production of an error. Detected via internal testing.
0f334553c9558a56037b481fedc9b9fcad3643e7,1585714499,"Reset stateNode in resetWorkInProgress (#18448)

* test(SuspenseList): Add failing test for class component

* Reset stateNode when resetWorkInProgress

This is supposed to put the Fiber into the same state as if it was just
created by child fiber reconciliation. For newly created fibers, that means
that stateNode is null.

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>
","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseList-test.internal.js']","Fiber not properly reset during 'resetWorkInProgress', causing inconsistencies with new class component fibers whose 'stateNode' should be null."
ce6fe50b0195449a65e1edc26724eaad9fa08e51,1585188211,"Add server-runtime to create Server Blocks (#18392)

This is equivalent to the jsx-runtime in that this is what the compiled
output on the server is supposed to target.

It's really just the same code for all the different Flights, but they
have different types in their arguments so each one gets their own entry
point. We might use this to add runtime warnings per entry point.

Unlike the client-side React.block call this doesn't provide the factory
function that curries the load function. The compiler is expected to wrap
this call in the currying factory.
","['packages/react-client/src/__tests__/ReactFlight-test.js', 'packages/react-flight-dom-relay/server-runtime.js', 'packages/react-flight-dom-relay/src/ReactFlightDOMRelayServerHostConfig.js', 'packages/react-flight-dom-relay/src/__tests__/ReactFlightDOMRelay-test.internal.js', 'packages/react-flight-dom-webpack/npm/server-runtime.js', 'packages/react-flight-dom-webpack/server-runtime.js', 'packages/react-flight-dom-webpack/src/ReactFlightServerWebpackBundlerConfig.js', 'packages/react-flight-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-noop-renderer/flight-server-runtime.js', 'packages/react-noop-renderer/npm/flight-server-runtime.js', 'packages/react-server/flight-server-runtime.js', 'packages/react-server/npm/flight-server-runtime.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactFlightServerBundlerConfigCustom.js', 'packages/react-server/src/ReactFlightServerRuntime.js', 'packages/react/src/ReactBlock.js', 'scripts/flow/react-relay-hooks.js', 'scripts/rollup/bundles.js', 'scripts/shared/inlinedHostConfigs.js']","Compiled output on the server doesn't target an equivalent to jsx-runtime, resulting in discrepancies during process executions reaching different Flight types."
9d4582dffdea5b4dcb6a6093ea848d15423c7701,1692910108,"[Float][Fizz][Static] add `importMap` option to Fizz and Static server renderers (#27260)

Import maps need to be emitted before any scripts or preloads so the
browser can properly locate these resources.

Unlike most scripts, importmaps are singletons meaning you can only have
one per document and they must appear before any modules are loaded or
preloaded. In the future there may be a way to dynamically add more
mappings however the proposed API for this seems likely to be a
javascript API and not an html tag.

Given the unique constraints here this PR implements React's support of
importMaps as the following

1. an `importMap` option accepting a plain object mapping module
specifier to path is accepted in any API that renders a preamble (head
content). Notably this precludes resume rendering because in resume
cases the preamble should have already been produced as part of the
prerender step.
2. the importMap is stringified and emitted as a `<script
type=""importmap"">...</script>` in the preamble.
3. the importMap is escaped identically to how bootstrapScriptContent is
escaped, notably, isntances of `</script>` are escaped to avoid breaking
out of the script context

Users can still render importmap tags however with Float enabled this is
rather pointless as most modules will be hoisted above the importmap
that is rendered. In practice this means the only functional way to use
import maps with React is to use this config API.
","['packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStatic-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerBun.js', 'packages/react-dom/src/server/ReactDOMFizzServerEdge.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzStaticEdge.js', 'packages/react-dom/src/server/ReactDOMFizzStaticNode.js', 'packages/react-dom/src/shared/ReactDOMTypes.js', 'packages/react-dom/src/test-utils/FizzTestUtils.js']","Import maps, which are needed to locate resources properly, are not processed correctly before scripts or preloads in the Fizz and Static server renderers, and can only have one per document before any modules are loaded or preloaded. This situation poses unique constraints on React's support of importMaps."
d3b183c32326cacc29efea43ca9300a17ed4aca0,1516919453,"Debug render-phase side effects in ""strict"" mode (#12094)

A new feature flag has been added, debugRenderPhaseSideEffectsForStrictMode. When enabled, StrictMode subtrees will also double-invoke lifecycles in the same way as debugRenderPhaseSideEffects.

By default, this flag is enabled for __DEV__ only. Internally we can toggle it with a GK.

This breaks several of our incremental tests which make use of the noop-renderer. Updating the tests to account for the double-rendering in development mode makes them significantly more complicated. The most straight forward fix for this will be to convert them to be run as internal tests only. I believe this is reasonable since we are the only people making use of the noop renderer.
","['packages/react-call-return/src/__tests__/ReactCallReturn-test.internal.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/ReactFiberUpdateQueue.js', 'packages/react-reconciler/src/__tests__/ReactIncremental-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorLogging-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalReflection-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalSideEffects-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalTriangle-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js', 'packages/react/src/__tests__/ReactStrictMode-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric.js', 'packages/shared/forks/ReactFeatureFlags.native.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","StrictMode subtrees aren't double-invoking lifecycles similarly to debugRenderPhaseSideEffects, causing inconsistencies in rendering. This behaviour causes the incremental tests using the noop-renderer to fail."
b70a0d70224ceb4e277bd8ac535a2caafa5c075a,1693499006,"[Fizz] Track postponed holes in the prerender pass (#27317)

This is basically the implementation for the prerender pass.

Instead of forking basically the whole implementation for prerender, I
just add a conditional field on the request. If it's `null` it behaves
like before. If it's non-`null` then instead of triggering client
rendered boundaries it triggers those into a ""postponed"" state which is
basically just a variant of ""pending"". It's supposed to be filled in
later.

It also builds up a serializable tree of which path can be followed to
find the holes. This is basically a reverse `KeyPath` tree.

It is unfortunate that this approach adds more code to the regular Fizz
builds but in practice. It seems like this side is not going to add much
code and we might instead just want to merge the builds so that it's
smaller when you have `prerender` and `resume` in the same bundle -
which I think will be common in practice.

This just implements the prerender side, and not the resume side, which
is why the tests have a TODO. That's in a follow up PR.
","['packages/react-dom/npm/server.node.js', 'packages/react-dom/server.node.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerBun.js', 'packages/react-dom/src/server/ReactDOMFizzServerEdge.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzStaticEdge.js', 'packages/react-dom/src/server/ReactDOMFizzStaticNode.js', 'packages/react-dom/src/server/ReactDOMLegacyServerImpl.js', 'packages/react-dom/src/server/ReactDOMLegacyServerNodeStream.js', 'packages/react-dom/src/test-utils/FizzTestUtils.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server-dom-esm/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-fb/src/ReactDOMServerFB.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerEdge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/ReactFlightServer.js']","The prerender pass of Fizz does not keep track of postponed holes, which are supposed to be filled in at a later stage. This is causing difficulties with client rendered boundaries."
668fbd651b6b245da5c42e9e243adc88f0278517,1557882490,"Fix serial passive effects (#15650)

* Failing test for false positive warning

* Flush passive effects before discrete events

Currently, we check for pending passive effects inside the `setState`
method before we add additional updates to the queue, in case those
pending effects also add things to the queue.

However, the `setState` method is too late, because the event that
caused the update might not have ever fired had the passive effects
flushed before we got there.

This is the same as the discrete/serial events problem. When a serial
update comes in, and there's already a pending serial update, we have to
do it before we call the user-provided event handlers. Because the event
handlers themselves might change as a result of the pending update.

This commit moves the `flushPassiveEffects` call to before the discrete
event handlers are called, and removes it from the `setState` method.
Non-discrete events will not cause passive effects to flush, which is
fine, since by definition they are not order dependent.

","['packages/react-dom/src/__tests__/ReactDOMHooks-test.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js']","Passive effects are not flushed before discrete events, interfering with the queue state and possibly preventing some events from firing."
5f21a9fca455069bc1e986e1528963a5055a8f21,1616876777,"Clean up host pointers in level 2 of clean-up flag (#21112)

The host tree is a cyclical structure. Leaking a single DOM node can
retain a large amount of memory. React-managed DOM nodes also point
back to a fiber tree.

Perf testing suggests that disconnecting these fields has a big memory
impact. That suggests leaks in non-React code but since it's hard to
completely eliminate those, it may still be worth the extra work to
clear these fields.

I'm moving this to level 2 to confirm whether this alone is responsible
for the memory savings, or if there are other fields that are retaining
large amounts of memory.

In our plan for removing the alternate model, DOM nodes would not be
connected to fibers, except at the root of the whole tree, which is
easy to disconnect on deletion. So in that world, we likely won't have
to do any additional work.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']","Leaking a single DOM node in host tree leads to retainment of large amount of memory, indicating potential memory leaks in non-React codes. Moving of clean-up operations to level 2 may also be retaining memory."
56b14477e902ac076018be2e7bf2ea3092ac9e7d,1695327980,"fix[devtools/useTransition]: don't check for dispatch property when determining if hook is stateful (#27365)

https://github.com/facebook/react/pull/26740 introduced regression:
React DevTools doesn't record updates for `useTransition` hook. I can
add more details about things on DevTools side, if needed.

The root cause is
https://github.com/facebook/react/blob/491aec5d6113ce5bae7c10966bc38a4a8fc091a8/packages/react-reconciler/src/ReactFiberHooks.js#L2728-L2730

React DevTools expects dispatch to be present for stateful hooks that
can schedule an update -
https://github.com/facebook/react/blob/2eed1328478e8c923fcb4e6abf5efbd9e1233402/packages/react-devtools-shared/src/backend/renderer.js#L1422-L1428

With these changes, we still call dispatch in `startTransition`, but
also patch `queue` object with it, so that React DevTools can recognise
`useTransition` as stateful hook that can schedule update.

I am not sure if this is the right approach to fix this, can we
distinguish if `startTransition` was called from `useTransition` hook or
as a standalone function?
",['packages/react-devtools-shared/src/backend/renderer.js'],React DevTools are not recording updates for the `useTransition` hook due to a regression introduced which misinterprets the hook as stateless because it lacks a `dispatch` property.
4c7036e807fa18a3e21a5182983c7c0f05c5936e,1591027281,"Bugfix: Infinite loop in beforeblur event (#19053)

* Failing test: Infinite loop in beforeblur event

If the focused node is hidden by a Suspense boundary, we fire the
beforeblur event. Our check for whether a tree is being hidden isn't
specific enough. It should only fire when the tree is initially hidden,
but it's being fired for updates, too.

* Only fire beforeblur on visible -> hidden

Should only beforeblur fire if the node was previously visible. Not
during updates to an already hidden tree.

To optimize this, we should use a dedicated effect tag and mark it in
the render phase. I've left this for a follow-up, though. Maybe can
revisit after the planned refactor of the commit phase.

* Move logic to commit phase

isFiberSuspenseAndTimedOut is used elsewhere, so I inlined the commit
logic into the commit phase itself.
","['packages/react-dom/src/events/__tests__/DOMModernPluginEventSystem-test.internal.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberTreeReflection.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","The beforeblur event triggers an infinite loop when the focused node is hidden by a Suspense boundary, firing incorrectly on updates in addition to the tree being initially hidden."
5fcf1a4b4c2150a1b9fe0de0144a82a053c63966,1671684949,"Bugfix: Synchronous ping during render phase sometimes unwinds the stack, leading to crash (#25851)

I found this bug when working on a different task.

`pingSuspendedRoot` sometimes calls `prepareFreshStack` to interupt the
work-in-progress tree and force a restart from the root. The idea is
that if the current render is already in a state where it be blocked
from committing, and there's new data that could unblock it, we might as
well restart from the beginning.

The problem is that this is only safe to do if `pingSuspendedRoot` is
called from a non-React task, like an event handler or a microtask.
While this is usually the case, it's entirely possible for a thenable to
resolve (i.e. to call `pingSuspendedRoot`) synchronously while the
render phase is already executing. If that happens, and work loop
attempts to unwind the stack, it causes the render phase to crash.
","['packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']",A thenable resolving synchronously during the render phase and causing `pingSuspendedRoot` can lead to a crashed render phase if the work loop attempts to unwind the stack.
9fb2469a63d32f2ff9788b70ee8e9b6dc4442c06,1678286257,"Restore definition of NativeMethods as an object for React Native (#26341)

## Summary

In #26283, I changed definition of `NativeMethods` from an object to an
interface. This is correct but introduces a lot of errors in React
Native, so this restores the original definition and exports the fixed
type as a separate type so we can gradually migrate in React Native.

## How did you test this change?

Manually applied this change in React Native and validated the errors
are gone.
","['packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeFiberHostComponent.js', 'packages/react-native-renderer/src/ReactNativePublicCompat.js', 'packages/react-native-renderer/src/ReactNativeTypes.js']",Changing the definition of `NativeMethods` from an object to an interface in React Native results in a significant number of errors.
48740429b4a74e984193e4e2d364d461e4fdc3be,1619307168,"Expiration: Do nothing except disable time slicing (#21345)

We have a feature called ""expiration"" whose purpose is to prevent
a concurrent update from being starved by higher priority events.
If a lane is CPU-bound for too long, we finish the rest of the work
synchronously without allowing further interruptions.

In the current implementation, we do this in sort of a roundabout way:
once a lane is determined to have expired, we entangle it with SyncLane
and switch to the synchronous work loop.

There are a few flaws with the approach. One is that SyncLane has a
particular semantic meaning besides its non-yieldiness. For example,
`flushSync` will force remaining Sync work to finish; currently, that
also includes expired work, which isn't an intended behavior, but rather
an artifact of the implementation.

An event worse example is that passive effects triggered by a Sync
update are flushed synchronously, before paint, so that its result
is guaranteed to be observed by the next discrete event. But expired
work has no such requirement: we're flushing expired effects before
paint unnecessarily.

Aside from the behaviorial implications, the current implementation has
proven to be fragile: more than once, we've accidentally regressed
performance due to a subtle change in how expiration is handled.

This PR aims to radically simplify how we model starvation protection by
scaling back the implementation as much as possible. In this new model,
if a lane is expired, we disable time slicing. That's it. We don't
entangle it with SyncLane. The only thing we do is skip the call to
`shouldYield` in between each time slice. This is identical to how we
model synchronous-by-default updates in React 18.
","['packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js', 'packages/react-reconciler/src/ReactFiberRoot.new.js', 'packages/react-reconciler/src/ReactFiberRoot.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js', 'packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']",Concurrent updates run into issues due to the 'expiration' feature handling - unintended behaviors occur like unnecessary flushing of expired effects before paint and performance regression due to complexity in how expiration is handled.
13645d224d66dc7d295c5e65dae4b2bb62ee174d,1550610461,"Deal with fallback content in Partial Hydration (#14884)

* Replace SSR fallback content with new suspense content

* The three states of a Dehydrated Suspense

This introduces three states for dehydrated suspense boundaries

Pending - This means that the tree is still waiting for additional data or
to be populated with its final content.

Fallback - This means that the tree has entered a permanent fallback state
and no more data from the server is to be expected. This means that the
client should take over and try to render instead. The fallback nodes will
be deleted.

Normal - The node has entered its final content and is now ready to be
hydrated.

* Rename retryTimedOutBoundary to resolveRetryThenable

This doesn't just retry. It assumes that resolving a thenable means that
it is ok to clear it from the thenable cache.

We'll reuse the retryTimedOutBoundary logic separately.

* Register a callback to be fired when a boundary changes away from pending

It's now possible to switch from a pending state to either hydrating
or replacing the content.

","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/shared/HostConfigWithNoHydration.js']","During partial hydration, a suspense boundary may mismanage its state leading to improper content replacement. Also, transitioning from a pending state lacks registration of required callbacks."
1cc3bba004e96c18d8f812ed64d37d66a8bd666b,1559165690,"Parallelizes the build script across multiple processes (#15716)

* Write size info to separate file per bundle

`bundle-sizes.json` contains the combined size information for every
build. This makes it easier to store and process, but it prevents us
from parallelizing the build script, because each process would need to
write to the same file.

So I've updated the Rollup script to output individual files per build.
A downstream CI job consolidates them into a single file.

I have not parallelized the Rollup script yet. I'll do that next.

* Parallelize the build script

Uses CircleCI's `parallelism` config option to spin up multiple build
processes.

","['scripts/circleci/upload_build.sh', 'scripts/rollup/build.js', 'scripts/rollup/consolidateBundleSizes.js', 'scripts/rollup/stats.js']","The build script can't be parallelized because multiple processes would need to write to the same 'bundle-sizes.json' file, preventing efficient build execution."
d7a98a5e97c3512ba43dd809337ae1691df1ae66,1684326874,"Fix strict mode badge URL (#26825)

## Summary
Closes https://github.com/facebook/react/issues/26821

[[Fix #26821]](https://github.com/facebook/react/issues/26821) Update
strict mode badge URL


Updated the URL in the strict mode badge to point to the correct React
documentation for StrictMode. The previous URL was outdated. Now, when a
component is not running in StrictMode, the badge links to
https://react.dev/reference/react/StrictMode for more information.


## How did you test this change?

I verified that the strict mode badge now correctly links to the updated
URL. Previously, it pointed to the outdated URL
(https://fb.me/devtools-strict-mode). After the update, it correctly
points to the React Dev documentation for StrictMode
(https://react.dev/reference/react/StrictMode).


_Since its my first contribution here, i have completed the CLA_
",['packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js'],"The URL link for the strict mode badge is outdated, which leads to incorrect React documentation for StrictMode."
5fdcd23aaa30a13eead12b7661a3a5903c6837f1,1663090423,"Flow: upgrade to 0.140 (#25252)

This update range includes:

- `types_first` ([blog](https://flow.org/en/docs/lang/types-first/), all exports need annotated types) is default. I disabled this for now to make that change incremental.
- Generics that escape the scope they are defined in are an error. I fixed some with explicit type annotations and some are suppressed that I didn't easily figure out.
","['packages/react-cache/src/LRU.js', 'packages/react-cache/src/ReactCacheOld.js', 'packages/react-dom/src/client/ReactDOMInput.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-native-renderer/src/legacy-events/accumulate.js', 'packages/react-native-renderer/src/legacy-events/forEachAccumulated.js', 'packages/react-reconciler/src/ReactFiberClassUpdateQueue.new.js', 'packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-refresh/src/ReactFreshRuntime.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js']","The current version of Flow lacks incremental type changes due to non-default 'types_first', and improperly handles generics that escape their defined scope, resulting in errors."
c94b4b8b86c72a450c74ca763a509aefd481a2b4,1515174285,"Fixed potential false-positive in toWarnDev matcher (#11898)

* Warn about spying on the console

* Added suppress warning flag for spyOn(console)

* Nits

* Removed spy-on-console guard

* Fixed a potential source of false-positives in toWarnDev() matcher
Also updated (most of) ReactIncrementalErrorLogging-test.internal to use the new matcher

* Removed unused third param to spyOn

* Improved clarity of inline comments

* Removed unused normalizeCodeLocInfo() method

","['packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorLogging-test.internal.js', 'scripts/jest/matchers/toWarnDev.js']",The toWarnDev() matcher is generating potential false-positives which could lead to unnecessary warning flags for spying on the console.
60afa3c11761e62d98c90b036890372c61bcc4c9,1590703465,"Lint bundles using the bundle config instead of scanning for files (#19025)

* Lint bundles using the bundle config instead of scanning for files

This ensures that we look for all the files that we expect to see there.
If something doesn't get built we wouldn't detect it.

However, this doesn't find files that aren't part of our builds such as
indirection files in the root. This will need to change with ESM anyway
since indirection files doesn't work. Everything should be built anyway.

This ensures that we can use the bundles.js config to determine special
cases instead of relying on file system conventions.

* Run lint with flag
","['scripts/rollup/build.js', 'scripts/rollup/bundles.js', 'scripts/rollup/validate/eslintrc.cjs.js', 'scripts/rollup/validate/index.js']","Current linting process relies on file scanning instead of the bundle config leading to potential missed files if they are not built. Furthermore, indirection files not part of our build are also not detected."
393924879fbba20e43d9de76f9fb4f01c945cefa,1558730708,"[Fresh] Babel plugin now handles HOCs + add integration tests (#15724)

* Refactor component search to prepare for deeper traversals

* Register HOCs with intermediate results

* Register components that are used as JSX types

* Add integration test skeleton

The integration test combines testing runtime together with the Babel plugin. It's a bit harder to debug because multiple things can go wrong, but it helps us build confidence that specific scenarios work well.

* Add HOC integration test and fix conflict with JSX transform

* Infer usage from createElement too

This helps us avoid dependency on the plugin order.

* Remove outdated comments

* Wrap tests in __DEV__

* Support export default hoc(...) for anonymous functions

* Fix test indentation

* Fix comment typo

* Use named function for test as this case is more important

","['packages/react-fresh/src/ReactFreshBabelPlugin.js', 'packages/react-fresh/src/__tests__/ReactFresh-test.js', 'packages/react-fresh/src/__tests__/ReactFreshBabelPlugin-test.js', 'packages/react-fresh/src/__tests__/ReactFreshIntegration-test.js']","The Babel plugin does not properly handle higher order components (HOCs), leading to faulty component registration. This synchronizes poorly with the JSX transform and lacks support for anonymous functions with default export. Additionally, there is a dependency on plugin order."
ab9cdd34fb6c88d56c83882dbd011b4546878483,1650402547,"Bugfix: In legacy mode, call suspended tree's unmount effects when it is deleted (#24400)

* Bug: Missing unmount when suspended tree deleted

When a suspended tree switches to a fallback, we unmount the effects.
If the suspended tree is then deleted, there's a guard to prevent us
from unmounting the effects again.

However, in legacy mode, we don't unmount effects when a tree suspends.
So if the suspended tree is then deleted, we do need to unmount
the effects.

We're missing a check for legacy/concurrent mode.

* Fix: Unmount suspended tree when it is deleted
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemanticsDOM-test.js']","In legacy mode, effects are not unmounted when a suspended tree is deleted - causing issues with rerendering."
7a5b8227c7d67aefe62f015cf0e961e28075d897,1654221335,"Allow aritfacts download even if CI is broken (#24666)

* Allow aritfacts download even if CI is broken

Adds an option to the download script to disable the CI check and
continue downloading the artifacts even if CI is broken.

I often rely on this to debug broken build artifacts. I was thinking
the sizebot should also use this when downloading the base artifacts
from main, since for the purposes of size tracking, it really doesn't
matter whether the base commit is broken.

* Sizebot should work even if base rev is broken

Sizebot works by downloading the build artifacts for the base revision
and comparing the fize sizes, but the download script will fail if
the base revision has a failing CI job. This happens more often than it
should because of flaky cron jobs, but even when it does, we shouldn't
let it affect the sizebot — for the purposes of tracking sizes, it
doesn't really matter whether the base revision is broken.
","['scripts/release/shared-commands/get-build-id-for-commit.js', 'scripts/release/shared-commands/parse-params.js']","Artifact downloads are blocked if the CI fails, hampering the debugging of broken builds and size tracking. Sizebot also fails if base revision's CI job is failing."
c35a1e74835d2b4c07f1e14779a22ae8ca5a0d10,1529694474,"Fix crash during server render in react 16.4.1. (#13088)

* Fix crash during server render.

setTimeout and clearTimeout may not be available in some server-render environments (such as ChakraCore in React.NET), and loading ReactScheduler.js will cause a crash unless the existence of the variables are checked via a typeof comparison.

https://github.com/reactjs/React.NET/issues/555

The crash did not occur in 16.4.0, and the change appears to have been introduced here: https://github.com/facebook/react/pull/12931/files#diff-bbebc3357e1fb99ab13ad796e04b69a6L47

I tested this by using yarn link and running it with a local copy of React.NET. I am unsure the best way to unit test this change, since assigning null to `setTimeout` causes an immediate crash within the Node REPL.

* Fix flow errors and log warning if setTimeout / clearTimeout are
not defined / not a function.

* Use invariant to assert setTimeout / clearTimeout are functions

* Remove use of invariant

* Explain

",['packages/react-scheduler/src/ReactScheduler.js'],"Server-render environments without availability of setTimeout and clearTimeout (e.g., ChakraCore in React.NET) are experiencing crashes upon loading ReactScheduler.js. The issue started with React version 16.4.1."
7d1169b2d7ad8d2345c28a2063bc101a4cc2d570,1536433679,"Remove injectComponentTree from unstable-native-dependencies, add EventPluginHub (#13598)

* Remove injectComponentTree from unstable-native-dependencies, add
EventPluginHub

injectComponentTree was exposed for react-native-web, but wasn't
actually being used by the project. They were using EventPluginHub
through ReactDOM's secret internals, but that was removed in https://github.com/facebook/react/pull/13539

This removes the unused injectComponentTree export, refactors the
ResponderEventPlugin test so it doesn't depend on it, and also adds
EventPluginHub to the exports to unbreak react-native-web

* Re-export injectEventPluginsByName from ReactDOM internals

","['packages/events/__tests__/ResponderEventPlugin-test.internal.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-dom/src/unstable-native-dependencies/ReactDOMUnstableNativeDependencies.js']",React-native-web project is not using the exposed 'injectComponentTree' from unstable-native-dependencies and is instead relying on 'EventPluginHub' through secret internals of ReactDOM which has now been removed.
1e98682dd383ca07f2819dc8987bd46cdb5fa028,1653340697,"[DevTools] Fix moduleNameMapper Order in DevTools Config  #24602)

We need the regression config moduleNameMapper to come before the current moduleNameMapper so when it tries to map ""/^react-dom\/([^/]+)$/ it doesn't get confused. The reason is because order in which the mappings are defined matters. Patterns are checked one by one until one fits, and the most specific rule should be listed first.
","['packages/react-devtools-shared/src/__tests__/profilingCache-test.js', 'scripts/jest/config.build-devtools.js']","""moduleNameMapper in DevTools config misreads mapping for ""/^react-dom\/([^/]+)$/"" due to incorrect ordering of regression config and current moduleNameMapper. The specific rule order is not prioritized leading to confusion."""
cdb8a1d19d0c0d43a72c3f0fe739b04da247c360,1634697370,"[Fizz] Add option to inject bootstrapping script tags after the shell is injected (#22594)

* Add option to inject bootstrap scripts

These are emitted right after the shell as flushed.

* Update ssr fixtures to use bootstrapScripts instead of manual script tag

* Add option to FB renderer too
","['fixtures/ssr/server/render.js', 'fixtures/ssr/src/components/Chrome.js', 'fixtures/ssr2/server/render.js', 'fixtures/ssr2/src/Html.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom/src/server/ReactDOMServerLegacyFormatConfig.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server-dom-relay/src/ReactDOMServerFB.js', 'packages/react-server-dom-relay/src/__tests__/ReactDOMServerFB-test.internal.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/forks/ReactServerFormatConfig.custom.js']","There's no option to inject bootstrap script tags immediately after the shell is flushed, requiring manual script tag manipulation."
1f1f8eb559d064c5b1954e5dde7517d87d594e7a,1677876635,"[Float][Fizz][Fiber]: Refactor <style> Resource implementation to group on flush (#26280)

There is a problem with <style> as resource. For css-in-js libs there
may be an very large number of these hoistables being created. The
number of style tags can grow quickly and to help reduce the prevalence
of this FIzz now aggregates all style tags for a given precedence into a
single tag. The client can 'hydrate' against these compound tags but
currently on the client insertions are done individually.

additionally drops the implementation where style tags are embedding in
a template for one where `media=""not all""` is set. The idea is to have
the browser construct the underlying stylesheet eagerly which does not
happen if the tag is embedded in a template

Key Decision:
One choice made in this PR is that we flush style tags eagerly even if a
boundary is blocked that is the only thing that depends on that style
rule. The reason we are starting with this implementation is that it
allows a very condensed representation of the style resources. If we
tracked which rules were used in which boundaries we would need a style
resource for every rendered <style> tag. This could be problematic for
css-in-js libs that might render hundreds or thousands of style tags.
The tradeoff here is we slightly delay content reveal in some cases (we
send extra bytes) but we have fewer DOM tags and faster SSR runtime
","['packages/react-dom-bindings/src/client/ReactDOMFloatClient.js', 'packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom-bindings/src/server/ReactDOMServerLegacyFormatConfig.js', 'packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetExternalRuntime.js', 'packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineCodeStrings.js', 'packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineSource.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/forks/ReactServerFormatConfig.custom.js', 'packages/shared/ReactFeatureFlags.js']","High volume of hoistable style tags being created by css-in-js libraries is causing quick growth in style tags. Also, style-tag insertions in the client side are not being done collectively even after Fizz aggregates all style tags."
b775564d35d6fe9f9acead0f380bbc86bb6bdd2c,1695226913,"[Fizz] Ensure Resumable State is Serializable (#27388)

Moves writing queues to renderState.

We shouldn't need the resource tracking's value. We just need to know if
that resource has already been emitted. We can use a Set for this. To
ensure that set is directly serializable we can just use a
dictionary-like object with no value.

See individual commits for special cases.
","['packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerBun.js', 'packages/react-dom/src/server/ReactDOMFizzServerEdge.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzStaticEdge.js', 'packages/react-dom/src/server/ReactDOMFizzStaticNode.js', 'packages/react-dom/src/server/ReactDOMLegacyServerImpl.js', 'packages/react-dom/src/server/ReactDOMLegacyServerNodeStream.js', 'packages/react-server-dom-fb/src/ReactDOMServerFB.js', 'packages/react-server/src/ReactFizzServer.js']","Resumable state is not serializable, causing issues with resource tracking and rendering queues."
ec52a5698e2dfea7050a0b015f0b79abfb2d81b7,1649455395,"Fix: Don't call cWU if already unmounted

When a tree goes offscreen, we unmount all the effects just like we
would in a normal deletion. (Conceptually it _is_ a deletion; we keep
the fiber around so we can reuse its state if the tree mounts again.)

If an offscreen component gets deleted ""for real"", we shouldn't unmount
it again.

The fix is to track on the stack whether we're inside a hidden tree.

We already had a stack variable for this purpose, called
`offscreenSubtreeWasHidden`, in another part of the commit phase, so I
reused that variable instead of creating a new one. (The name is a bit
confusing: ""was"" refers to the current tree before this commit. So, the
""previous current"".)

Co-authored-by: dan <dan.abramov@me.com>

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemanticsDOM-test.js']",Unmounting effects for offscreen Trees that were already unmounted leads to unnecessary operations when a component gets deleted.
55444a6f490ce84550ba664b9a82f1724134fb76,1540273035,"Try rendering again if a timed out tree receives an update (#13921)

Found a bug related to suspending inside an already mounted tree. While
investigating this I noticed we really don't have much coverage of
suspended updates. I think this would greatly benefit from some fuzz
testing; still haven't thought of a good test case, though.
","['packages/jest-react/src/JestReact.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js']",There is an issue with suspending updates inside a mounted tree and inadequate test coverage for suspended updates.
1ebeb0542fd0c3741c31098a9d9a8859d9b8176a,1515092491,"Move npm output from build/packages/* to build/node_modules/* (#11962)

* Move build/packages/* to build/node_modules/*

This fixes Node resolution in that folder and lets us require() packages in it in Node shell for manual testing.

* Link fixtures to packages/node_modules

This updates the location and also uses link: instead of file: to avoid Yarn caching the folder contents.

","['fixtures/packaging/webpack-alias/dev/config.js', 'fixtures/packaging/webpack-alias/prod/config.js', 'fixtures/packaging/webpack/dev/config.js', 'fixtures/packaging/webpack/prod/config.js', 'scripts/jest/config.build.js', 'scripts/release/publish-commands/check-build-status.js', 'scripts/release/publish-commands/publish-to-npm.js', 'scripts/rollup/packaging.js', 'scripts/rollup/validate/index.js']","The current npm output directory, build/packages/*, is causing issues with Node resolution and manual testing in Node shell. Furthermore, Yarn is caching folder contents due to usage of file: instead of link: in package fixtures."
52c393b5d261550609dda955f059a26d1db63538,1645680236,"Revert to client render on text mismatch (#23354)

* Refactor warnForTextDifference

We're going to fork the behavior of this function between concurrent
roots and legacy roots.

The legacy behavior is to warn in dev when the text mismatches during
hydration. In concurrent roots, we'll log a recoverable error and revert
to client rendering. That means this is no longer a development-only
function — it affects the prod behavior, too.

I haven't changed any behavior in this commit. I only rearranged the
code slightly so that the dev environment check is inside the body
instead of around the function call. I also threaded through an
isConcurrentMode argument.

* Revert to client render on text content mismatch

Expands the behavior of enableClientRenderFallbackOnHydrationMismatch to
check text content, too.

If the text is different from what was rendered on the server, we will
recover the UI by falling back to client rendering, up to the nearest
Suspense boundary.
","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-dom/src/client/ReactDOMComponent.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.new.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.old.js', 'packages/react-reconciler/src/__tests__/useMutableSourceHydration-test.js']","Mismatch between server-rendered text and client-rendered text during hydration in concurrent roots, results in unwanted effects. The fallback to client rendering needs an extension to check text content."
b9faa3b0925f9842f12150bc5b6ac4b19c31e9ed,1565357207,"[act] remove obsolete container element (#16312)

In a previous version of act(), we used a dummy dom element to flush effects. This doesn't need to exist anymore, and this PR removes it. The warning doesn't need to be there either (React will fire a wrong renderer act warning if needed).
","['packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.internal.js']","Obsolete dummy DOM element used for flushing effects in earlier versions of act() is still present, causing unnecessary actions."
316aa368654427270a53543cd3f4952746374596,1617681902,"[Scheduler] Fix de-opt caused by out-of-bounds access (#21147)

Scheduler's heap implementation sometimes accesses indices that are out
of bounds (larger than the size of the array). This causes a VM de-opt.

This change fixes the de-opt by always checking the index before
accessing the array. In exchange, we can remove the typecheck on the
returned element.

Background: https://v8.dev/blog/elements-kinds#avoid-reading-beyond-the-length-of-the-array

Co-authored-by: Andrew Clark <git@andrewclark.io>
",['packages/scheduler/src/SchedulerMinHeap.js'],"The Scheduler's heap implementation accesses indices beyond the array size, triggering a VM de-optimization."
c6702656ff312fda4da9f442c99fe3931745c80d,1619629014,"Revert ""Clean up host pointers in level 2 of clean-up flag (#21112)""

This reverts commit 8ed0c85bf174ce6e501be62d9ccec1889bbdbce1.

The host tree is a cyclical structure. Leaking a single DOM node can
retain a large amount of memory. React-managed DOM nodes also point
back to a fiber tree.

Perf testing suggests that disconnecting these fields has a big memory
impact. That suggests leaks in non-React code but since it's hard to
completely eliminate those, it may still be worth the extra work to
clear these fields.

I'm moving this to level 2 to confirm whether this alone is responsible
for the memory savings, or if there are other fields that are retaining
large amounts of memory.

In our plan for removing the alternate model, DOM nodes would not be
connected to fibers, except at the root of the whole tree, which is
easy to disconnect on deletion. So in that world, we likely won't have
to do any additional work.

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']","A removed feature that was responsible for clearing some fields in a DOM-fiber linked structure might be causing memory leakages, thereby retaining larger amounts of memory than expected."
3c27178a2f2c74f14d90613028e3929e1f06d830,1695272229,"Update tracked value after resetting radio group (#27394)

Fixes #26876, I think. Review each commit separately (all assertions
pass in main already, except the last assertInputTrackingIsClean in
""should control radio buttons"").

I'm actually a little confused on two things here:
* All the isCheckedDirty assertions are true. But I don't think we set
.checked unconditionally? So how does this happen?
* https://github.com/facebook/react/issues/26876#issuecomment-1611662862
claims that
https://github.com/facebook/react/compare/d962f35ca...1f248bdd7 contains
the faulty change, but it doesn't appear to change the restoration logic
that I've touched here. (One difference outside restoration is that
updateProperties did previously set `.checked` when `nextProp !==
lastProp` whereas the new logic in updateInput is to set it when
`node.checked !== !!checked`.)

But it seems to me like we need this call here anyway, and if it fixes
it then it fixes it? I think technically speaking we probably should do
all the updateInput() calls and then all the updateValueIfChanged()
calls—in particular I think if clicking A changed the checked radio
button from B to C then the code as I have it would be incorrect, but
that also seems unlikely so idk whether to care.

cc @zhengjitf @Luk-z who did some investigation on the original issue
","['packages/react-dom-bindings/src/client/ReactDOMInput.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js']","Radio group resetting is not updating the tracked value correctly, leading to failing assertions and potential inconsistencies with changing checked radio buttons."
559e83aebb2026035d47aa0ebf842f78d4cd6757,1682971274,"[Fizz] Allow an action provide a custom set of props to use for progressive enhancement (#26749)

Stacked on top of #26735.

This allows a framework to add a `$$FORM_ACTION` property to a function.
This lets the framework return a set of props to use in place of the
function but only during SSR. Effectively, this lets you implement
progressive enhancement of form actions using some other way instead of
relying on the replay feature.

This will be used by RSC on Server References automatically by
convention in a follow up, but this mechanism can also be used by other
frameworks/libraries.
","['packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js']","During server-side rendering (SSR), there's no effective way to implement progressive enhancement of form actions without relying on the replay feature, creating a BLOCKER for frameworks/libraries to enhance form actions."
9c54b29b44d24f8f8090da9c7ebf569747a444df,1679507676,"Remove ReactFabricPublicInstance and used definition from ReactNativePrivateInterface (#26437)

## Summary

Now that React Native owns the definition for public instances in Fabric
and ReactNativePrivateInterface provides the methods to create instances
and access private fields (see
https://github.com/facebook/react-native/pull/36570), we can remove the
definitions from React.

After this PR, React Native public instances will be opaque types for
React and it will only handle their creation but not their definition.
This will make RN similar to DOM in how public instances are handled.

This is a new version of #26418 which was closed without merging.

## How did you test this change?

* Existing tests.
* Manually synced the changes in this PR to React Native and tested it
end to end in Meta's infra.
","['packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactFabricPublicInstance.js', 'packages/react-native-renderer/src/ReactFabricPublicInstanceUtils.js', 'packages/react-native-renderer/src/ReactNativeFiberInspector.js', 'packages/react-native-renderer/src/ReactNativePublicCompat.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/createPublicInstance.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/getNativeTagFromPublicInstance.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/getNodeFromPublicInstance.js', 'packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactFabricAndNative-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactFabricHostComponent-test.internal.js', 'scripts/flow/react-native-host-hooks.js']","The current setup of public instance definitions in both React and React Native Fabric leads to redundancy and lack of single source of truth, causing potential inconsistencies."
b014e2d5e377a94bbf8d94d9a2602ce05c184e38,1586393837,"Don't use closures in DevTools injection (#18278)

* Don't use closures in DevTools injection

Nested closures are tricky. They're not super efficient and when they share
scope between multiple closures they're hard for a compiler to optimize.
It's also unclear how many versions will be created.

By hoisting things out an just make it simple calls the compiler can do
a much better job.

* Store injected hook to work around fast refresh
","['packages/react-reconciler/src/ReactFiberDevToolsHook.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js']","Nested closures in DevTools injection lead to inefficiencies and difficulties in compiler optimization, with ambiguity in the number of versions created."
53ac21937864c1c7fc3d9077bc2d80b3e11193e3,1688382964,"Devtools:-Removed unused CSS (#27032)

I tried to check out for the CSS bundle using the
[eslint-plugin-css-modules](https://www.npmjs.com/package/eslint-plugin-css-modules),
and ran it locally , seems like There are lot of unused styles and
classes present .
I have attached the output below after running the lint command.

https://gist.github.com/Biki-das/647ceb7383b43cca9c8619e1dc33fe0d

All the shared.css files should not be touched i feel as they are being
used randomly by some file

Thoughts @hoxyq
","['packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js', 'packages/react-devtools-shared/src/devtools/views/Components/OwnersStack.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/SidebarSelectedFiberInfo.js', 'packages/react-devtools-shared/src/devtools/views/SearchInput.js']",Unused styles and classes are present in the CSS bundle which might be unnecessary and increasing the bundle size.
80170a0681def183f8f3153425f1086d3d383922,1649725308,"Match bundle.name and match upper case entry points (#24346)

Fix matching in the build script.

It's possible to provide a custom bundle name in the case we build deep
imports. We should match those names as a convenience.

The script also calls toLowerCase on requested names but some entries have
upper case now.
",['scripts/rollup/build.js'],Build script does not accommodate custom bundle names for deep imports and struggles with matching case-sensitive entry points.
df61e708c82134133e002f8559c19d4897204b54,1667506555,"Remove check in renderDidSuspendDelayIfPossible (#25630)

I don't think we need this anymore. It was added originally because
RootSuspended would take priority over RootSuspendedWithDelay. But we've
since changed it: any ""bad"" fallback state is permitted to block a
""good"" fallback state.

The other status flags that this check used to account for are
RootDidNotComplete and RootFatalErrored:

- RootFatalErrored is like an invariant violation, it means something
went really wrong already and we can't recover from it
- RootCompleted and RootDidNotComplete are only set at the very end of
the work loop, there's no way for renderDidSuspendDelayIfPossible to
sneak in after that (at least none that I can think of — it's only
called from the render phase)

So I think we can just delete this.

It's entirely possible there's some scenario I haven't considered,
though, which is why I'm submitting this change as its own PR. To
preserve the ability to bisect to it later.
","['packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","The redundant check in renderDidSuspendDelayIfPossible might be interfering with the render phase, uncertain about any potential overlooked scenarios."
96814e71b2ec13af64cd2670c9e69ab982ab2951,1631215601,"Revert Suspense cache Thenable.catch() change (#22280)

Reverts part of #22275 (adding .catch() to Thenables in Suspense caches) in response to #22275 (comment).

After taking another look with fresh eyes, I think I see the ""uncaught error"" issue I initially noticed was in checkForUpdate() (which did not pass an error handler to .then)
","['packages/react-devtools-shared/src/hookNamesCache.js', 'packages/react-devtools-shared/src/inspectedElementCache.js']","Thenables in Suspense caches lack error handling in checkForUpdate(), leading to probable ""uncaught error"" issue."
c0830a0e63247d3ef5f906863d1a40125db03837,1564095194,"[Scheduler] Test browser implementation details (#16198)

The Scheduler implementation uses browser APIs like `MessageChannel`,
`requestAnimationFrame`, and `setTimeout` to schedule work on the main
thread. Most of our tests treat these as implementation details;
however, the sequence and timing of these APIs are not precisely
specified, and can vary wildly across browsers.

To prevent regressions, we need the ability to simulate specific edge
cases that we may encounter in various browsers.

This adds a new test suite that mocks all browser methods used in our
implementation. It assumes as little as possible about the order and
timing of events. The only thing it assumes is that
requestAnimationFrame is passed a frame time that is equal to or less
than the time returned by performance.now. Everything else can be
controlled at will.

It also includes Scheduler-specific invariants, e.g. only one rAF
callback can be scheduled at a time.

It overlaps slightly with the existing SchedulerDOM-test suite, which
also mocks the browser APIs, but exposes a higher-level set of testing
primitives. I will consolidate the two suites in a follow-up.
","['packages/scheduler/src/__tests__/SchedulerBrowser-test.js', 'packages/scheduler/src/forks/SchedulerHostConfig.default.js']","The sequence and timing of browser APIs (`MessageChannel`, `requestAnimationFrame`, `setTimeout`) used in the Scheduler implementation varies across browsers, leading to inconsistencies and potential regressions."
d47339ea3659133940f7699144cd30453fb6ed43,1632493322,"[Fizz] Remove assignID mechanism (#22410)

* Remove pushEmpty

This is only used to support the assignID mechanism.

* Remove assignID mechanism

This effectively isn't used anyway because we always insert a dummy tag
into the fallback.

* Emit the template tag with an ID directly in pending boundaries

This ensures that assigning the ID is deterministic since it's done during
writing.

This also avoids emitting it for client rendered boundaries that start as
client rendered since we never need to refer to them.

* Move lazy ID initialization to the core implementation

We never need an ID before we write a pending boundary. This also ensures
that ID generation is deterministic by moving it to the write phase.

* Simplify the inserted scripts

We can assume that there are no text nodes before the template tag so this
simplifies the script that finds the comment node. It should be the direct
previous child.
","['packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom/src/server/ReactDOMServerLegacyFormatConfig.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/forks/ReactServerFormatConfig.custom.js']","The assignID mechanism and pushEmpty are unnecessary and may cause non-deterministic ID assignment. Additionally, some scripts can be simplified assuming no text nodes are present before the template tag."
bb1d8d166799eb97892be6c7826179270ba283d0,1694474724,"Encode lazy Node slots properly in key path and resumable paths (#27359)

It's possible to postpone a specific node and not using a wrapper
component. Therefore we encode the resumable slot as the index slot.
When it's a plain client component that postpones, it's encoded as the
child slot inside that component which is the one that's postponed
rather than the component itself.

Since it's possible for a child slot to suspend (e.g. React.lazy's
microtask in this case) retryTask might need to keep its index around
when it resolves.
","['packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-server/src/ReactFizzServer.js']","Postponing specific nodes without a wrapper component is not properly encoding slots in the resumable path, causing a child slot's suspend function (like React.lazy's microtask) issues in retryTask."
546178f9109424f6a0176ea8702a7620c4417569,1696521194,"`react-dom/server-rendering-stub`: restore experimental prefix for `useFormState` and `useFormStatus` (#27470)

in #27461 the experimental prefix was added back for `useFormState` and
`useFormStatus` in react-dom. However these functions are also exported
from the server rendering stub too and when using the stub with
experimental prefixes their absence causes unexpected errors.

This change adds back the experimental prefix for these two hooks to
match the experimental build of react-dom.
",['packages/react-dom/server-rendering-stub.js'],The absence of experimental prefix for `useFormState` and `useFormStatus` in server rendering stub is causing unexpected errors when used with experimental build of react-dom.
69e732ac9d32ecb7251834af4209d46fff5d5102,1588896440,"Disable Profiler commit filtering (#18862)

* Disable Profiler commit filtering

We used to filter ""empty"" DevTools commits, but it was error prone (see #18798). A commit may appear to be empty (no actual durations) because of component filters, but filtering these empty commits causes interaction commit indices to be off by N. This not only corrupts the resulting data, but also potentially causes runtime errors.

For that matter, hiding ""empty"" commits might cause confusion too. A commit *did happen* even if none of the components the Profiler is showing were involved.

* Restart flaky CI
",['packages/react-devtools-shared/src/devtools/views/Profiler/utils.js'],"Filtering 'empty' DevTools commits in Profiler causes interaction commit indices to be offset, potentially leading to data corruption and runtime errors. Additionally, it may cause confusion as the commits did occur even if none of the components the Profiler is displaying were involved."
86b0e91998a04b22bb54a95d54f4a7632efa902f,1682781256,"Gate DevTools test to fix CI (#26742)

This test started failing recently in older versions of React because
the Scheduler priority inside a microtask is Normal instead of
Immediate. This is expected because microtasks are not Scheduler tasks;
it's an implementation detail.

I gated the test to only run in v17 because it's a regression test for
legacy Suspense behavior, and the implementation details of the snapshot
changed in v18.

Test plan
---------

Using latest:

```
yarn test --build --project devtools --release-channel=experimental profilingcache
```

Using v17 (typically runs in a timed CI workflow):

```
/scripts/circleci/download_devtools_regression_build.js 17.0 --replaceBuild
yarn test --build --project devtools --release-channel=experimental --reactVersion 17.0 profilingcache
```
","['packages/react-devtools-shared/src/__tests__/profilingCache-test.js', 'scripts/jest/jest-cli.js']","Older versions of React fail DevTools test due to microtask Scheduler priority being Normal instead of Immediate, reflecting a discrepancy in implementation details across React versions."
48274a43aa708f63a7580142a4c1c1a47f31c1ac,1672861800,"Remove vestigial Suspense batching logic (#25861)

This code was originally added in the old ExpirationTime implementation
of Suspense. The idea is that if multiple updates suspend inside the
same Suspense boundary, and both of them resolve, we should render both
results in the same batch, to reduce jank.

This was an incomplete idea, though. We later discovered a stronger
requirement — once we show a fallback, we cannot fill in that fallback
without completing _all_ the updates that were previously skipped over.
Otherwise you get tearing. This was fixed by #18411, then we discovered
additional related flaws that were addressed in #24685. See those PR
descriptions for additional context.

So I believe this older code is no longer necessary.
",['packages/react-reconciler/src/ReactFiberWorkLoop.js'],"Multiple updates suspending inside the same Suspense boundary and resolving simultaneously leads to rendering in the same batch, causing potential tearing when filling in a previously shown fallback."
8f42196892847a3dd1ab4c84eda0c8d52508ecf6,1682127883,"Change DOM HostContext to number instead of string (#26698)

In React DOM, we use HostContext to represent the namespace of whatever
is currently rendering — SVG, Math, or HTML. Because there is a fixed
set of possible values, we can switch this to be a number instead. My
motivation is that I want to start tracking additional information in
this type, and I want to pack all of it into a single number instead of
turning it into an object. For better performance.

(In dev, the host context type is already an object that includes
additional information, but that's dev so who cares.)

Technically, before this change, the host context could be any namespace
URI string, but any value other than SVG or Math was treated the same
way. Only SVG and Math have special behavior. So in the new structure,
there are three enum values: SVG, Math, or None, which represents the
HTML namespace as well as all other possible namespaces.
","['packages/react-dom-bindings/src/client/DOMNamespaces.js', 'packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js']","The current implementation of HostContext in React DOM as a string might be limiting the performance and preventing the tracking of additional information, since it recognizes only SVG, Math and all other namespaces as HTML."
ba708fa79b3db6481b7886f9fdb6bb776d0c2fb9,1550885250,"Remove ReactNoop.flushDeferredPri and flushUnitsOfWork (#14934)

* Remove ReactNoop.flushDeferredPri and flushUnitsOfWork

Some of our older tests worked by counting how many times React checked
whether it should yield to the main thread, instead of something
publicly observable like how many times a component is rendered.

Our newer tests have converged on a style where we push into a log and
make assertions on the log. This pattern is less coupled to the
implementation while still being sufficient to test performance
optimizations, like resuming (whenever we add that back).

This commit removes flushDeferredPri and flushUnitsOfWork and upgrades
the affected tests.

* Remove shouldYieldToRenderer indirection

This wrapper is no longer necessary.

","['packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactIncremental-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorLogging-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalPerf-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalReflection-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalSideEffects-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalTriangle-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js']","The presence of ReactNoop.flushDeferredPri and flushUnitsOfWork leads to tests that are tightly coupled to the specific implementation, count internal React checks rather than observable events, and cause unnecessary indirection with shouldYieldToRenderer."
9a72e622716f6dab714ebe8b957ee9970154664b,1685025513,"run SchedulerFeatureFlags with variant flags again (#26851)

With df12d7eac40c87bd5fdde0aa5a739bce9e7dce27 I accidentally made it so
that tests aren't run with the 2 variant modes for most
SchedulerFeatureFlags anymore. This fixes it with the same approach as
ee4233bdbc71a7e09395a613c7dde01194d2a830.

Test Plan:
Run and notice the boolean flags follow the variant:
```
yarn test-www --variant=true
yarn test-www --variant=false
```
",['scripts/jest/setupTests.www.js'],The tests are not running with the 2 variant modes for most SchedulerFeatureFlags due to an accidental change in a recent commit.
0887c7d56cb9b83f36dcb490b4245d7bc33bda1f,1524082610,"Fork React Native renderer into FB and OSS bundles (#12625)

* Added new ""native-fb"" and ""native-fabric-fb"" bundles.
* Split RN_DEV and RN_PROD bundle types into RN_OSS_DEV, RN_OSS_PROD, RN_FB_DEV, and RN_FB_PROD. (This is a bit redundant but it seemed the least intrusive way of supporting a forked feature flags file for these bundles.)
* Renamed FB_DEV and FB_PROD bundle types to be more explicitly for www (FB_WWW_DEV and FB_WWW_PROD)
* Removed Haste @providesModule headers from the RB-specific RN renderer bundles to avoid a duplicate name conflicts.
* Remove dynamic values from OSS RN feature flags. (Leave them in FB RN feature flags.)
* Updated the sync script(s) to account for new renderer type.
* Move ReactFeatureFlags.js shim to FB bundle only (since OSS bundle no longer needs dynamic values).
","['packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactFabricAndNative-test.internal.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric-oss.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'scripts/rollup/build.js', 'scripts/rollup/bundles.js', 'scripts/rollup/forks.js', 'scripts/rollup/packaging.js', 'scripts/rollup/shims/react-native-fb/ReactFeatureFlags.js', 'scripts/rollup/sync.js', 'scripts/rollup/validate/index.js', 'scripts/rollup/wrappers.js']","Forking of React Native renderer required for different bundles (FB and OSS), causing conflicts in feature flags, bundle types, and renderer types, including duplicate naming issues in Haste @providesModule headers."
06460b6fb51e99cfab840424a9514651488b2e99,1677886744,"Remove unnecessary (and incorrect) code for compatibility with Paper in the Fabric version of GlobalResponderHandler (#26290)

## Summary

I'm working on a refactor of the definition of `Instance` in Fabric and
I came across this code that seemed to be for compatibility with Paper,
but that it would actually throw an error in that case.

In Paper, `stateNode` is an instance of `ReactNativeFiberHostComponent`,
which doesn't have a `canonical` field. We try to access nested
properties in that field in a couple of places here, which would throw a
type error (cannot read property `_nativeTag` of `undefined`) if we
actually happened to pass a reference to a Paper state node.

In this line:

```javascript
const isFabric = !!(
      fromOrToStateNode && fromOrToStateNode.canonical._internalInstanceHandle
    );
```

If it wasn't Fabric, `fromOrToStateNode.canonical` would be undefined,
and we don't check for that before accessing
`fromOrToStateNode.canonical._internalInstanceHandle`. This means that
we actually never use this logic in Paper or we would've seen the error.

## How did you test this change?

Existing tests.
",['packages/react-native-renderer/src/ReactFabricGlobalResponderHandler.js'],"In the instance of Fabric, the `GlobalResponderHandler` code is trying to access nested properties on `stateNode` assuming it to be compatible with Paper, and this results in Type Errors due to the absence of `canonical` field in `ReactNativeFiberHostComponent`, instance of `stateNode` in Paper."
34e4c9756121ef89d4b31e75e590ebdd3f05587b,1634686081,"Clear extra nodes if there's a hydration mismatch within a suspense boundary  (#22592)

* Clear extra nodes if there's a mismatch within a suspense boundary

This usually happens when we exit out a DOM node but a suspense boundary
is a virtual DOM node and we didn't do it in that case because we took a
short cut by calling resetHydrationState directly since we know we won't
need to pop.

* Tighten up the types of getFirstHydratableChild

We currently call getFirstHydratableChild to step into the children of
a suspense boundary. This can be a text node or a suspense boundary
which isn't compatible with getFirstHydratableChild, and we cheat the type.

This accidentally works because .firstChild always returns null on those
nodes in the DOM.

This just makes that explicit.
","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.new.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.old.js']","Mismatch within a suspense boundary during hydration doesn't clear extra nodes, resulting in hydration state resets when there are no nodes to pop. This causes type inconsistency between suspense boundary children and getFirstHydratableChild."
a1b1e391e1663a401b84642b2107390fe9451a38,1657646842,"Wrap try-catch directly around each user function

(This is the same as f9e6aef, but for the layout phase rather than the
mutation phase.)

This moves the try-catch from around each fiber's layout phase to
direclty around each user function (effect function, callback, etc).

We already do this when unmounting because if one unmount function
errors, we still need to call all the others so they can clean up
their resources.

Previously we didn't bother to do this for anything but unmount,
because if a mount effect throws, we're going to delete that whole
tree anyway.

But now that we're switching from an iterative loop to a recursive one,
we don't want every call frame on the stack to have a try-catch, since
the error handling requires additional memory.

Wrapping every user function is a bit tedious, but it's better
for performance. Many of them already had try blocks around
them already.

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']","The mutation phase is having a try-catch setup around each fiber's layout phase instead of around each user function, leading to unnecessarily heavy call frames on the stack during an iterative loop and affecting performance."
1e3b6192b54df20ac117a2af56afbe00ac9487b7,1551912105,"Import Scheduler directly, not via host config (#14984)

* Import Scheduler directly, not via host config

We currently schedule asynchronous tasks via the host config. (The host
config is a static/build-time dependency injection system that varies
across different renderers — DOM, native, test, and so on.) Instead of
calling platform APIs like `requestIdleCallback` directly, each renderer
implements a method called `scheduleDeferredCallback`.

We've since discovered that when scheduling tasks, it's crucial that
React work is placed in the same queue as other, non-React work on the
main thread. Otherwise, you easily end up in a starvation scenario where
rendering is constantly interrupted by less important tasks. You need a
centralized coordinator that is used both by React and by other
frameworks and application code. This coordinator must also have a
consistent API across all the different host environments, for
convention's sake and so product code is portable — e.g. so the same
component can work in both React Native and React Native Web.

This turned into the Scheduler package. We will have different builds of
Scheduler for each of our target platforms. With this approach, we treat
Scheduler like a built-in platform primitive that exists wherever React
is supported.

Now that we have this consistent interface, the indirection of the host
config no longer makes sense for the purpose of scheduling tasks. In
fact, we explicitly do not want renderers to scheduled task via any
system except the Scheduler package.

So, this PR removes `scheduleDeferredCallback` and its associated
methods from the host config in favor of directly importing Scheduler.

* Missed an extraneous export

","['packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeFrameScheduling.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactProfilerTimer.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js']",Indirect scheduling of asynchronous tasks via the host config leads to frequent rendering interruptions by less important tasks. This results in a need for a centralized coordinator with a consistent API for all host environments for both React and other application code.
4387d752dadada921938f9ea171d065b44a769c1,1668714522,"Allow more hooks to be added when replaying mount

Currently, if you call setState in render, you must render the exact
same hooks as during the first render pass.

I'm about to add a behavior where if something suspends, we can reuse
the hooks from the previous attempt. That means during initial render,
if something suspends, we should be able to reuse the hooks that were
already created and continue adding more after that. This will error
in the current implementation because of the expectation that every
render produces the same list of hooks.

In this commit, I've changed the logic to allow more hooks to be added
when replaying. But only during a mount — if there's already a current
fiber, then the logic is unchanged, because we shouldn't add any
additional hooks that aren't in the current fiber's list. Mounts are
special because there's no current fiber to compare to.

I haven't change any other behavior yet. The reason I've put this into
its own step is there are a couple tests that intentionally break the
Hook rule, to assert that React errors in these cases, and those happen
to be coupled to the behavior. This is undefined behavior that is always
accompanied by a warning and/or error. So the change should be safe.



","['packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']","When setState is called in render, same hooks must be rendered as during the first render pass. However, in cases of suspension during initial render, current implementation doesn't allow usage or addition of more hooks, causing errors."
d63cd972454125d4572bb8ffbfeccbdf0c5eb27b,1649953804,"don't stringify objects for console log second render (#24373)

Fixes #24302 based on #24306.
---

The current implementation for strict mode double logging stringiness and dims the second log. However, because we stringify everything, including objects, this causes objects to be logged as `[object Object]` etc.

This PR creates a new function that formats console log arguments with a specified style. It does this by:
1. The first param is a string that contains %c: Bail out and return the args without modifying the styles. We don't want to affect styles that the developer deliberately set.
2. The first param is a string that doesn't contain %c but contains string formatting: `[`%c${args[0]}`, style, ...args.slice(1)]` Note: we assume that the string formatting that the developer uses is correct.
3. The first param is a string that doesn't contain string formatting OR is not a string: Create a formatting string where:
   -  boolean, string, symbol -> %s
   -  number -> %f OR %i depending on if it's an int or float
   -  default -> %o
---
Co-authored-by: Billy Janitsch <billy@kensho.com>
","['packages/react-devtools-shared/src/__tests__/console-test.js', 'packages/react-devtools-shared/src/__tests__/utils-test.js', 'packages/react-devtools-shared/src/backend/console.js', 'packages/react-devtools-shared/src/backend/utils.js', 'packages/react-devtools-shared/src/hook.js']","Strict mode double logging in console can't appropriately display objects, turning them into '[object Object]' due to premature stringification."
70b0bbda767ed016925889e8952b10f49921c0cf,1676999423,"[fizz][external-runtime] Fix: process mutation records before disconnecting (#26169)

> All notifications of mutations that have already been detected, but
not yet reported to the observer, are discarded. To hold on to and
handle the detected but unreported mutations, use the takeRecords()
method.
>    -- ([Mozilla docs for disconnect](

https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/disconnect))

Fizz external runtime needs to process mutation records (representing
potential Fizz instructions) before calling `disconnect()`. We currently
do not do this (and might drop some instructions).

",['packages/react-dom-bindings/src/server/ReactDOMServerExternalRuntime.js'],Detected but unreported mutations are getting discarded in Fizz external runtime because `disconnect()` method is called before processing them.
ec78b135fb0b6184bc42e11b15e4b492764ed0f3,1638948372,"Don't override use-sync-external-store peerDeps (#22882)

Usually the build script updates transitive React dependencies so that
they refer to the corresponding release version.

For use-sync-external-store, though, we also want to support older
versions of React, too. So the normal behavior of the build script
isn't sufficient.

For now, to unblock, I hardcoded a special case, but we should consider
a better way to handle this in the future.
","['scripts/release/publish-commands/parse-params.js', 'scripts/rollup/build-all-release-channels.js']","The build script is overriding transitive React dependencies for use-sync-external-store, hindering support for older versions of React."
0154a79fedef38a824a837c535bc853013dd4588,1532534298,"Remove 'warning' module from the JS scheduler (#13264)

* Remove 'warning' module from the JS scheduler

**what is the change?:**
See title

**why make this change?:**
Internally the 'warning' module has some dependencies which we want to
avoid pulling in during the very early stages of initial pageload. It is
creating a cyclical dependency.

And we wanted to remove this dependency anyway, because this module
should be kept small and decoupled.

**test plan:**
- Tested the exact same change internally in Facebook.com
- Ran unit tests
- Tried out the fixture

**issue:**
Internal task T31831021

* check for console existence before calling console.error

* Move DEV check into separate block

",['packages/react-scheduler/src/ReactScheduler.js'],"'warning' module in the JS scheduler pulls in unnecessary dependencies during the early stages of initial page load, creating a cyclical dependency and bloating the module size."
6c526c5153bc350d2a62c7dcbc698be77d3f2439,1612857787,"Don't shift interleaved updates to separate lane (#20681)

Now that interleaved updates are added to a special queue, we no longer
need to shift them into their own lane. We can add to a lane that's
already in the middle of rendering without risk of tearing.

See #20615 for more background.

I've only changed this in the new fork, and only behind the
enableTransitionEntanglements flag.

Most of this commit involves updating tests. The ""shift-to-a-new"" lane
trick was intentionally used in a handful of tests where two or more
updates need to be scheduled in different lanes. Most of these tests
were written before `startTransition` existed, and all of them were
written before transitions were assigned arbitrary lanes.

So I ported these tests to use `startTransition` instead, which is the
idiomatic way to mark an update as parallel.

I didn't change the old fork at all. Writing these tests in such a way
that they also pass in the old fork actually revealed a few flaws in the
current implementation regarding interrupting a suspended refresh
transition early, which is a good reminder that we should be writing our
tests using idiomatic patterns as much as we possibly can.
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/ReactUpdateQueue.new.js', 'packages/react-reconciler/src/ReactUpdateQueue.old.js', 'packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js', 'packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/ReactTransition-test.js', 'packages/react-reconciler/src/__tests__/SchedulingProfiler-test.internal.js']","Shifting interleaved updates into separate lanes can lead to unnecessary complexity and potential risks of tearing, interrupting a suspended refresh transition early."
8ccfce460f141299d61290f877745407e05e531e,1582937176,"Only use Rollup's CommonJS plugin for ""react-art"" (#18186)

* Only use Rollup's CommonJS plugin for ""react-art""

We still need it for the ""art"" UMD builds but nothing else should have
CommonJS dependencies anymore.

* react-debug-tools and jest-react should leave object-assign as an external dep

This avoids it being compiled into the output.

",['scripts/rollup/build.js'],"The Rollup's CommonJS plugin is being used excessively beyond ""react-art"", whilst ""react-debug-tools"" and ""jest-react"" are compiling ""object-assign"" into the output instead of treating it as an external dependency."
db50164dbac39d7421c936689a5c026e9fd2f034,1686622607,"[Flight] Optimize Large Strings by Not Escaping Them (#26932)

This introduces a Text row (T) which is essentially a string blob and
refactors the parsing to now happen at the binary level.

```
RowID + "":"" + ""T"" + ByteLengthInHex + "","" + Text
```

Today, we encode all row data in JSON, which conveniently never has
newline characters and so we use newline as the line terminator. We
can't do that if we pass arbitrary unicode without escaping it. Instead,
we pass the byte length (in hexadecimal) in the leading header for this
row tag followed by a comma.

We could be clever and use fixed or variable-length binary integers for
the row id and length but it's not worth the more difficult
debuggability so we keep these human readable in text.

Before this PR, we used to decode the binary stream into UTF-8 strings
before parsing them. This is inefficient because sometimes the slices
end up having to be copied so it's better to decode it directly into the
format. The follow up to this is also to add support for binary data and
then we can't assume the entire payload is UTF-8 anyway. So this
refactors the parser to parse the rows in binary and then decode the
result into UTF-8. It does add some overhead to decoding on a per row
basis though.

Since we do this, we need to encode the byte length that we want decode
- not the string length. Therefore, this requires clients to receive
binary data and why I had to delete the string option.

It also means that I had to add a way to get the byteLength from a chunk
since they're not always binary. For Web streams it's easy since they're
always typed arrays. For Node streams it's trickier so we use the
byteLength helper which may not be very efficient. Might be worth
eagerly encoding them to UTF8 - perhaps only for this case.
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-dom-bindings/src/server/ReactDOMLegacyServerStreamConfig.js', 'packages/react-server-dom-fb/src/ReactServerStreamConfigFB.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMEdge-test.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMNode-test.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactServerStreamConfigBrowser.js', 'packages/react-server/src/ReactServerStreamConfigBun.js', 'packages/react-server/src/ReactServerStreamConfigEdge.js', 'packages/react-server/src/ReactServerStreamConfigNode.js', 'packages/react-server/src/forks/ReactServerStreamConfig.custom.js']","Large strings are inefficiently processed due to decoding from binary to UTF-8 before parsing, causing data slices to be unnecessarily copied. Additionally, newline characters cannot be used as line terminators for arbitrary unicode strings without escaping them."
db281b3d9cd033cdc3d63e00fc9f3153c03aa70c,1679090711,"Feature: Suspend commit without blocking render (#26398)

This adds a new capability for renderers (React DOM, React Native):
prevent a tree from being displayed until it is ready, showing a
fallback if necessary, but without blocking the React components from
being evaluated in the meantime.

A concrete example is CSS loading: React DOM can block a commit from
being applied until the stylesheet has loaded. This allows us to load
the CSS asynchronously, while also preventing a flash of unstyled
content. Images and fonts are some of the other use cases.

You can think of this as ""Suspense for the commit phase"". Traditional
Suspense, i.e. with `use`, blocking during the render phase: React
cannot proceed with rendering until the data is available. But in the
case of things like stylesheets, you don't need the CSS in order to
evaluate the component. It just needs to be loaded before the tree is
committed. Because React buffers its side effects and mutations, it can
do work in parallel while the stylesheets load in the background.

Like regular Suspense, a ""suspensey"" stylesheet or image will trigger
the nearest Suspense fallback if it hasn't loaded yet. For now, though,
we only do this for non-urgent updates, like with startTransition. If
you render a suspensey resource during an urgent update, it will revert
to today's behavior. (We may or may not add a way to suspend the commit
during an urgent update in the future.)

In this PR, I have implemented this capability in the reconciler via new
methods added to the host config. I've used our internal React ""no-op""
renderer to write tests that demonstrate the feature. I have not yet
implemented Suspensey CSS, images, etc in React DOM. @gnoff and I will
work on that in subsequent PRs.
","['packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom-bindings/src/client/ReactDOMHostConfig.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-noop-renderer/src/ReactNoopPersistent.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberFlags.js', 'packages/react-reconciler/src/ReactFiberHostConfigWithNoSingletons.js', 'packages/react-reconciler/src/ReactFiberOffscreenComponent.js', 'packages/react-reconciler/src/ReactFiberRoot.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.js', 'packages/react-reconciler/src/ReactFiberThenable.js', 'packages/react-reconciler/src/ReactFiberThrow.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js']","React renderers don't support suspending commit without blocking component evaluation, leading to issues such as flash of unstyled content during CSS loading. Current Suspense mechanisms only block during the render phase and not at commit phase."
b72ed698fb5f15e0c33c5017422b8428b01ff12a,1677836288,"Fixed incorrect value returned as public instance from reconciler (#26283)

## Summary

A few methods in `ReactFiberReconciler` are supposed to return
`PublicInstance` values, but they return the `stateNode` from the fiber
directly. This assumes that the `stateNode` always matches the public
instance (which it does on Web) but that's not the case in React Native,
where the public instance is a field in that object.

This hasn't caused issues because everywhere where we use that method in
React Native we actually extract the real public instance from this
""fake"" public instance.

This PR fixes the inconsistency and cleans up some code.

## How did you test this change?

Existing tests.
","['packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeFiberHostComponent.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-native-renderer/src/ReactNativeRenderer.js', 'packages/react-native-renderer/src/ReactNativeTypes.js', 'packages/react-reconciler/src/ReactFiberReconciler.js']","Methods in ReactFiberReconciler returning 'stateNode' directly from fiber, causing inconsistency between expected 'PublicInstance' value and actual value, especially in React Native."
a4aceafc63a4a54b507ab60d530b25d9ff189024,1694470957,"Fix: Skip hidden inputs before text instance (#27358)

Found a hydration bug that happens when you pass a Server Action to
`formAction` and the next node is a text instance.

The HTML generated by Fizz is something like this:

```html
<button name=""$ACTION_REF_5"" formAction="""" formEncType=""multipart/form-data"" formMethod=""POST"">
  <input type=""hidden"" name=""$ACTION_5:0"" value=""...""/>
  <input type=""hidden"" name=""$ACTION_5:1"" value=""...""/>
  <input type=""hidden"" name=""$ACTION_KEY"" value=""...""/>Count: <!-- -->0
</button>
```

Fiber is supposed to skip over the extra hidden inputs, but it doesn't
handle this correctly if the next expected node isn't a host instance.
In this case, it's a text instance.

Not sure if the proper fix is to change the HTML that is generated, or
to change the hydration logic, but in this PR I've done the latter.
","['packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js', 'packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js']","Hydration logic is not handling cases correctly where the next expected node after hidden inputs is a text instance, leading to bugs when Server Actions are passed to `formAction`."
e11bf42ceac5bb5ef0d7c98d0d075048c94352dd,1567724765,"Check for Suspense boundary in a root Container (#16673)

If we find a Container that might mean that we're on a node that is inside
a Suspense boundary that is directly inside the Container root.

Imagine the div is a Container and the span is a dehydrated instance:

```
<div>
  <!--$-->
  <span />
  <!--/$-->
</div>
```

There's no way to tests this yet since I'm not actually utilizing
the return value yet.

The solution is to just use the same path to check for a Suspense boundary
as if we find a parent instance.
",['packages/react-dom/src/client/ReactDOMComponentTree.js'],Nodes inside a Suspense boundary directly within the Container root might result in a unverifiable Suspense boundary in root Container.
43ffae2d1750ee32409e140e41ea562ff46d2516,1531506243,"Suspending inside a constructor outside of strict mode (#13200)

* Suspending inside a constructor outside of strict mode

Outside of strict mode, suspended components commit in an incomplete
state, then are synchronously deleted in a subsequent commit. If a
component suspends inside the constructor, it mounts without
an instance.

This breaks at least one invariant: during deletion, we assume that
every mounted component has an instance, and check the instance for
the existence of `componentWillUnmount`.

Rather than add a redundant check to the deletion of every class
component, components that suspend inside their constructor and outside
of strict mode are turned into empty functional components before they
are mounted. This is a bit weird, but it's an edge case, and the empty
component will be synchronously unmounted regardless.

* Do not fire lifecycles of a suspended component

In non-strict mode, suspended components commit, but their lifecycles
should not fire.

","['packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/shared/ReactTypeOfSideEffect.js']","In non-strict mode, components suspending inside their constructor mount without instances, violating invariants and potentially causing issues during deletion. Additionally, the lifecycles of these suspended components are being fired unnecessarily."
fd3fb8e3c5d1c977f4bfa73d715143804c69d4b0,1682098186,"Rethrow errors from form actions (#26689)

This is the next step toward full support for async form actions.

Errors thrown inside form actions should cause the form to re-render and
throw the error so it can be captured by an error boundary. The behavior
is the same if the `<form />` had an internal useTransition hook, which
is pretty much exactly how we implement it, too.

The first time an action is called, the form's HostComponent is
""upgraded"" to become stateful, by lazily mounting a list of hooks. The
rest of the implementation for function components can be shared.

Because the error handling behavior added in this commit is just using
useTransition under-the-hood, it also handles pending states, too.
However, this pending state can't be observed until we add a new hook
for that purpose. I'll add this next.
","['packages/react-dom-bindings/src/events/plugins/FormActionEventPlugin.js', 'packages/react-dom/src/__tests__/ReactDOMForm-test.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js']","Form actions not re-throwing errors, leading to forms not re-rendering or capturing errors in an error boundary. Lack of support for pending states in error handling behavior."
45473c94cdb5d5d9642e5cde55ed3a5795720801,1555014021,"React events: Press event fixes (#15386)

1. Fix hiding context menu for longpress via touch.
2. Fix scrolling of viewport for longpress via spacebar key.
3. Add tests for anchor-related behaviour and preventDefault.
4. Add a deactivation delay for forced activation
5. Add pointerType to Press events.

NOTE: this currently extends pointerType to include `keyboard`.

NOTE: React Native doesn't have a deactivation delay for forced activation, but this is possibly because of the async bridge meaning that the events aren't dispatched sync.
","['packages/react-events/src/Hover.js', 'packages/react-events/src/Press.js', 'packages/react-events/src/__tests__/Press-test.internal.js']","Context menu won't hide on touch longpress, viewport doesn't scroll on longpress via spacebar key, and lack of tests for anchor behavior and preventDefault. No deactivation delay for forced activation and missing pointerType in Press events."
d1bb1c586117df11123859d1ef59228bbf7c750a,1663859994,"Fix memory leak after repeated setState bailouts (#25309)

There's a global queue (`concurrentQueues` in the
ReactFiberConcurrentUpdates module) that is cleared at the beginning of
each render phase.

However, in the case of an eager `setState` bailout where the state is
updated to same value as the current one, we add the update to the queue
without scheduling a render. So the render phase never removes it from
the queue. This can lead to a memory leak if it happens repeatedly
without any other updates.

There's only one place where this ever happens, so the fix was pretty
straightforward.

Currently there's no great way to test this from a Jest test, so I
confirmed locally by checking in an existing test whether the array gets
reset. @sompylasar had an interesting suggestion for how to catch these
in the future: in the development build (perhaps behind a flag), use a
Babel plugin to instrument all module-level variables. Then periodically
sweep to confirm if something has leaked. The logic is that if there's
no React work scheduled, and a module-level variable points to an
object, it very likely indicates a memory leak.
","['packages/react-reconciler/src/ReactFiberConcurrentUpdates.new.js', 'packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","Repeated setState bailouts cause a memory leak due to updates being added to the global queue without scheduling a render, leading to the updates not being removed from the queue."
5a1e558df21bd3cafbaea01cc418fa69d14a8cab,1653328253,"[DevTools] Regression Test Jest Config (#24598)

Some older React versions have different module import names and are missing certain features. This PR mocks modules that don't exist and maps modules in older versions to the ones that are required in tests. Specifically:

* In React v16.5, scheduler is named schedule
* In pre concurrent React, there is no act
* Prior to React v18.0, react-dom/client doesn't exist
* In DevTools, we expect to use scheduler/tracing-profiling instead of scheduler/tracing
","['scripts/jest/config.build-devtools.js', 'scripts/jest/devtools/config.build-devtools-regression.js', 'scripts/jest/devtools/setupTests.build-devtools-regression.js']","Testing issues due to varying module names and missing features in different React versions; notably react-dom/client absence in versions prior to v18.0, and inconsistencies in scheduler naming and act functionality."
01974a867c543fca6ebe9f4e612dcc3bb8f80528,1580330418,"Bugfix: Expiring a partially completed tree (#17926)

* Failing test: Expiring a partially completed tree

We should not throw out a partially completed tree if it expires in the
middle of rendering. We should finish the rest of the tree without
yielding, then finish any remaining expired levels in a single batch.

* Check if there's a partial tree before restarting

If a partial render expires, we should stay in the concurrent path
(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the
behavior remains the same.

We will only revert to the sync path (performSyncWorkOnRoot) when
starting on a new level.

This approach prevents partially completed concurrent work from
being discarded.

* New test: retry after error during expired render

","['packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.internal.js']","Partial trees are being discarded when they expire during rendering, resulting in failure to finish the remaining expired levels in a single batch."
171e0b7d447a20b7cc90808a95478c6e5b8b6af0,1531864003,"Fix “no onChange handler” warning to fire on falsy values ("""", 0, false) too (#12628)

* throw warning for falsey `value` prop

* add nop onChange handler to tests for `value` prop

* prettier

* check for falsey checked

* fix tests for `checked` prop

* new tests for `value` prop

* test formatting

* forgot 0 (:

* test for falsey `checked` prop

* add null check

* Update ReactDOMInput-test.js

* revert unneeded change

* prettier

* Update DOMPropertyOperations-test.js

* Update ReactDOMInput-test.js

* Update ReactDOMSelect-test.js

* Fixes and tests

* Remove unnecessary changes

","['packages/react-dom/src/__tests__/DOMPropertyOperations-test.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js', 'packages/react-dom/src/__tests__/ReactDOMSelect-test.js', 'packages/react-dom/src/__tests__/ReactDOMTextarea-test.js', 'packages/react-dom/src/shared/ReactControlledValuePropTypes.js']","""No onChange handler"" warning does not trigger for falsey values ("""", 0, false) for the `value` and `checked` prop."
8fa41ffa275cae4895b650b0c3b5e8acdbb5055d,1679020757,"Don't ""fix up"" mismatched text content with suppressedHydrationWarning (#26391)

In concurrent mode we error if child nodes mismatches which triggers a
recreation of the whole hydration boundary. This ensures that we don't
replay the wrong thing, transform state or other security issues.

For text content, we respect `suppressedHydrationWarning` to allow for
things like `<div suppressedHydrationWarning>{timestamp}</div>` to
ignore the timestamp. This mode actually still patches up the text
content to be the client rendered content.

In principle we shouldn't have to do that because either value should be
ok, and arguably it's better not to trigger layout thrash after the
fact.

We do have a lot of code still to deal with patching up the tree because
that's what legacy mode does which is still in the code base. When we
delete legacy mode we would still be stuck with a lot of it just to deal
with this case.

Therefore I propose that we change the semantics to not patch up
hydration errors for text nodes. We already don't for attributes.
","['packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzSuppressHydrationWarning-test.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.js']","In concurrent mode, even when suppressedHydrationWarning is set, text content mismatches still result in an unnecessary correction of the entire hydration boundary, which potentially causes layout thrash."
72c890e3123d3ea48b5d7f51bca301d7da16a8b1,1681320973,"Convert more Suspense tests to use act (2/n) (#26610)

Many of our Suspense-related tests were written before the `act` API was
introduced, and use the lower level `waitFor` helpers instead. So they
are less resilient to changes in implementation details than they could
be.

This converts some of our test suite to use `act` in more places. I
found these while working on a PR to expand our fallback throttling
mechanism to include all renders that result from a promise resolving,
even if there are no more fallbacks in the tree.

I think this covers all the remaining tests that are affected.
","['packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-reconciler/src/__tests__/ReactBatching-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactMemo-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemanticsDOM-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']","Suspense-related tests are using lower level 'waitFor' helpers rather than the newer 'act' API, leaving them vulnerable to changes in implementation details."
6dc2734b41aef944e457eaa23ae218952fce0a54,1572628808,"Codemod tests to `it.experimental` (#17243)

`it.experimental` marks that a test only works in Experimental builds.

It also asserts that a test does *not* work in the stable builds. The
main benefit is that we're less likely to accidentally expose an
experimental API before we intend. It also forces us to un- mark an
experimental test once it become stable.
","['packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.internal.js', 'packages/react-dom/src/__tests__/ReactDOMHooks-test.js', 'packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js', 'packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js', 'packages/react-dom/src/__tests__/ReactUnmockedSchedulerWarning-test.js', 'packages/react-dom/src/events/__tests__/ChangeEventPlugin-test.internal.js', 'packages/react-dom/src/events/__tests__/DOMEventResponderSystem-test.internal.js', 'packages/react-dom/src/events/__tests__/SimpleEventPlugin-test.internal.js', 'packages/react-interactions/events/src/dom/__tests__/Input-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js']","Tests may accidentally expose an experimental API early or fail to update tests once they've become stable, potentially leading to mismatches between test and build states."
b85b47630be57c7031b0a9ab741cf858dc0ca215,1594174223,"Fix state leaking when a function component throws on server render (#19212)

* add unit test asserting internal hooks state is reset

* Reset internal hooks state before rendering

* reset hooks state on error

* Use expect...toThrow instead of try/catch in test

* reset dev-only hooks state inside resetHooksState

* reset currentlyRenderingComponent to null
","['packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-dom/src/server/ReactPartialRendererHooks.js']",Server-side rendering of function components that throws an error results in state leakage due to not properly resetting internal hooks.
5fb2c15a89de844a1dd12a61e7674e55dc0dfa89,1685651033,"[Fizz][Float] stop preloading stylesheets that are not stylesheet resources (#26873)

We previously preloaded stylesheets that were rendered in Fizz. The idea
was we'd get a headstart fetching these resources since we know they are
going to be rendered. However to really be effective non-float
stylesheets need to rendered in the head and the preload here is not
helpful and potentially hurtful to perf in a minor way. This change
removes this functionality to make the code smaller and simpler
","['packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-dom/src/__tests__/ReactDOMSingletonComponents-test.js']",Preloading non-float stylesheets in Fizz is not effective and potential minor performance degradation is noticed.
9aad17d60cd8453357ec36e8180b61aaaf313b7e,1559166964,"using the wrong renderer's act() should warn (#15756)

* warn when using the wrong renderer's act around another renderer's updates

like it says. it uses a real object as the sigil (instead of just a boolean). specifically, it uses a renderer's flushPassiveEffects as the sigil. We also run tests for this separate from our main suite (which doesn't allow loading multiple renderers in a suite), but makes sure to run this in CI as well.

* unneeded (and wrong) comment

* run the dom fixture on CI

* update the sigil only in __DEV__

* remove the obnoxious comment

* use an explicit export for the sigil

","['fixtures/dom/src/index.test.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/fire/ReactFire.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-dom/src/test-utils/ReactTestUtilsAct.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-test-renderer/src/ReactTestRendererAct.js', 'packages/react/src/ReactCurrentActingRendererSigil.js', 'packages/react/src/ReactSharedInternals.js']","Using the wrong renderer's act() around another renderer's updates does not provide a warning, leading to potential inaccuracies in render updates."
d278a3ff8b2863afb9ab7807e42d31f33c84eb78,1558023156,"`act()` - s / flushPassiveEffects / Scheduler.unstable_flushWithoutYielding (#15591)

* s/flushPassiveEffects/unstable_flushWithoutYielding

a first crack at flushing the scheduler manually from inside act(). uses unstable_flushWithoutYielding(). The tests that changed, mostly replaced toFlushAndYield(...) with toHaveYielded(). For some tests that tested the state of the tree before flushing effects (but still after updates), I replaced act() with bacthedUpdates().

* ugh lint

* pass build, flushPassiveEffects returns nothing now

* pass test-fire

* flush all work (not just effects), add a compatibility mode

of note, unstable_flushWithoutYielding now returns a boolean much like flushPassiveEffects

* umd build for scheduler/unstable_mock, pass the fixture with it

* add a comment to Shcduler.umd.js for why we're exporting unstable_flushWithoutYielding

* run testsutilsact tests in both sync/concurrent modes

* augh lint

* use a feature flag for the missing mock scheduler warning

I also tried writing a test for it, but couldn't get the scheduler to unmock. included the failing test.

* Update ReactTestUtilsAct-test.js

- pass the mock scheduler warning test,
- rewrite some tests to use Scheduler.yieldValue
- structure concurrent/legacy suites neatly

* pass failing tests in batchedmode-test

* fix pretty/lint/import errors

* pass test-build

* nit: pull .create(null) out of the act() call

","['packages/react-dom/src/__tests__/ReactTestUtilsAct-test.internal.js', 'packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js', 'packages/react-dom/src/test-utils/ReactTestUtilsAct.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/__tests__/ReactBatchedMode-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactNoopRendererAct-test.js', 'packages/react-test-renderer/src/ReactTestRendererAct.js', 'packages/scheduler/src/forks/SchedulerHostConfig.mock.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js', 'packages/shared/forks/Scheduler.umd.js', 'scripts/rollup/bundles.js']","The use of `flushPassiveEffects()` inside `act()`, is causing test inconsistencies and issues with manual scheduler flushing."
32d6f39eddd6d6b32b6c68068e96c66109ae8425,1616867438,"[Fizz] Support special HTML/SVG/MathML tags to suspend (#21113)

* Encode tables as a special insertion mode

The table modes are special in that its children can't be created outside
a table context so we need the segment container to be wrapped in a table.

* Move formatContext from Task to Segment

It works the same otherwise. It's just that this context needs to outlive
the task so that I can use it when writing the segment.

* Use template tag for placeholders and inserted dummy nodes with IDs

These can be used in any parent. At least outside IE11. Not sure yet what
happens in IE11 to these.

Not sure if these are bad for perf since they're special nodes.

* Add special wrappers around inserted segments depending on their insertion mode

* Allow the root namespace to be configured

This allows us to insert the correct wrappers when streaming into an
existing non-HTML tree.

* Add comment
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server/src/ReactFizzServer.js']","Special tags in HTML/SVG/MathML fail to suspend correctly, potentially causing issues with non-HTML tree streaming, context formatting, and placeholder insertions."
b14f8da15598cdc2253529a905421ac795d68ab1,1680517937,"refactor[devtools]: forbid editing class instances in props (#26522)

## Summary
Fixes https://github.com/facebook/react/issues/24781

Restricting from editing props, which are class instances, because their
internals should be opaque.

Proposed changes:
1. Adding new data type `class_instance`: based on prototype chain of an
object we will check if its plain or not. If not, then will be marked as
`class_instance`. This should not affect `arrays`, ..., because we do
this in the end of an `object` case in `getDataType` function.

Important detail: this approach won't work for objects created with
`Object.create`, because of the custom prototype. This can also be
bypassed by manually deleting a prototype ¯\\\_(ツ)_/¯
I am not sure if there might be a better solution (which will cover all
cases) to detect if object is a class instance. Initially I was trying
to use `Object.getPrototypeOf(object) === Object.prototype`, but this
won't work for cases when we are dealing with `iframe`.


2. Objects with a type `class_instance` will be marked as unserializable
and read-only.

## Demo
`person` is a class instance, `object` is a plain object


https://user-images.githubusercontent.com/28902667/228914791-ebdc8ab0-eb5c-426d-8163-66d56b5e8790.mov
","['packages/react-devtools-shared/src/__tests__/utils-test.js', 'packages/react-devtools-shared/src/hydration.js', 'packages/react-devtools-shared/src/utils.js', 'packages/react-devtools-shell/src/app/InspectableElements/UnserializableProps.js']","Editing properties of class instances in DevTools is allowed, leading to potential opacity issues of their internals. The current approach doesn't work for objects created with `Object.create` due to custom prototypes."
779a472b0901b2d28e382f3850b2ad09a555b014,1603828294,"Prevent inlining into recursive commit functions (#20105)

Adds a bunch of no-inline directives to commit phase functions to
prevent them from being inlined into one of our recursive algorithms.

The motivation is to minimize the number of variables in the recursive
functions, since each one contributes to the size of the stack frame.

Theoretically, this could help the performance of both the recursive
and non-recursive (iterative) implementations of the commit phase,
since even the iterative implementation sometimes uses the JS stack.
",['packages/react-reconciler/src/ReactFiberCommitWork.new.js'],"Recursive commit phase functions are inlining, which increases the number of variables contributing to size of the stack frame, potentially hampering performance."
8faf751937e9672fb69dac8143dbfb0929caf77e,1679946745,"Codemod some expiration tests to waitForExpired (#26491)

Continuing my journey to migrate all the Scheduler flush* methods to
async versions of the same helpers.

`unstable_flushExpired` is a rarely used helper that is only meant to be
used to test a very particular implementation detail (update starvation
prevention, or what we sometimes refer to as ""expiration"").

I've prefixed the new helper with `unstable_`, too, to indicate that our
tests should almost always prefer one of the other patterns instead.
","['packages/internal-test-utils/ReactInternalTestUtils.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js']","Scheduler's flush* methods' synchronous versions encounter issues in testing update starvation prevention, or ""expiration"", needing an update to async versions."
faa697f4f9afe9f1c98e315b2a9e70f5a74a7a74,1595005124,"Set current update lane priority for user blocking events (#19342)

* Set current update lane priority for user blocking events

* Update to use LanePriority and not use runWithPriority

* Remove unused imports

* Fix tests, and I missed ReactDOMEventListener

* Fix more tests

* Add try/finally and hardcode lane priorities instead

* Also hard code InputContinuousLanePriority in tests

* Remove un-needed exports

* Comment rollbacks
","['packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/events/DeprecatedDOMEventResponderSystem.js', 'packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-dom/src/events/ReactDOMEventReplaying.js', 'packages/react-noop-renderer/src/ReactNoop.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.js', 'packages/react/src/__tests__/ReactDOMTracing-test.internal.js']","User-blocking events do not have their update lane priority set correctly, causing misalignment with LanePriority and resulting in test failures."
1022ee0ec140b8fce47c43ec57ee4a9f80f42eca,1571688937,"Read current time without marking event start time (#17160)

* Failing test: DevTools hook freezes timeline

The DevTools hook calls `requestCurrentTime` after the commit phase has
ended, which has the accidnental consequence of freezing the start
time for subsequent updates. If enough time goes by, the next update
will instantly expire.

I'll push a fix in the next commit.

* Read current time without marking event start time

`requestCurrentTime` is only meant to be used for updates, because
subsequent calls within the same event will receive the same time.
Messing this up has bad consequences.

I renamed it to `requestCurrentTimeForUpdate` and created a new
function that returns the current time without the batching heuristic,
called `getCurrentTime`.

Swapping `requestCurrentTime` for `getCurrentTime` in the DevTools
hook fixes the regression test added in the previous commit.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/ReactFiberDevToolsHook.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react/src/__tests__/ReactProfilerDevToolsIntegration-test.internal.js']","Calling `requestCurrentTime` in the DevTools hook after commit phase completion inadvertently freezes start time for future updates, causing immediate expiration on next updates if significant time passes."
103378b1eada44561821b1c22ff54e0537cf9764,1552347589,"Warn for javascript: URLs in DOM sinks (#15047)

* Prevent javascript protocol URLs

* Just warn when disableJavaScriptURLs is false

This avoids a breaking change.

* Allow framesets

* Allow <html> to be used in integration tests

Full document renders requires server rendering so the client path
just uses the hydration path in this case to simplify writing these tests.

* Detect leading and intermediate characters and test mixed case

These are considered valid javascript urls by browser so they must be
included in the filter.

This is an exact match according to the spec but maybe we should include
a super set to be safer?

* Test updates to ensure we have coverage there too

* Fix toString invocation and Flow types

Right now we invoke toString twice when we hydrate (three times
with the flag off). Ideally we should only do it once even in this case
but the code structure doesn't really allow for that right now.

* s/itRejects/itRejectsRendering

* Dedupe warning and add the unsafe URL to the warning message

* Add test that fails if g is added to the sanitizer

This only affects the prod version since the warning is deduped anyway.

* Fix prod test

","['packages/react-dom/src/__tests__/ReactDOMServerIntegrationUntrustedURL-test.internal.js', 'packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js', 'packages/react-dom/src/client/DOMPropertyOperations.js', 'packages/react-dom/src/client/validateDOMNesting.js', 'packages/react-dom/src/server/DOMMarkupOperations.js', 'packages/react-dom/src/shared/DOMProperty.js', 'packages/react-dom/src/shared/sanitizeURL.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","JavaScript protocol URLs are getting executed when disableJavaScriptURLs is false, breaking the existing setup. Additionally, duplicative and possibly invalid invocations of toString during hydration are occurring."
59dac9d7a6a2f0b66003cf717d71b5587265423f,1522606237,"Fix DEV performance regression by avoiding Object.assign on Fibers (#12510)

* Fix DEV performance regression by avoiding Object.assign on Fibers

* Reduce allocations in hot path by reusing the stash

Since performUnitOfWork() is not reentrant, it should be safe to reuse the same stash every time instead of creating a new object.

","['packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorReplay-test.internal.js']",The use of Object.assign on Fibers in performUnitOfWork() is causing performance regression and unnecessary allocations in hot path.
2da155a4c317e097f4490c74d173e5a902003572,1526505502,"Quick fix for minor typo in ReactScheduler (#12834)

**what is the change?:**
We were setting a flag after some early returns, should have set it
right away.

To be fair, it's not clear how you can hit a problem with the current
state of things. Even if a callback is cancelled, it's still in the
'pendingCallbacks' queue until the rAF runs, and we only schedule a rAF
when there are pendingCallbacks in the queue.

But since this is obviously wrong, going to fix it.

We will be adding a regression test in a follow-up PR.

**why make this change?:**
To fix a random bug which was popping up.

**test plan:**
Adding a regression unit test in a follow-up PR.
",['packages/react-scheduler/src/ReactScheduler.js'],"The current flag setting position may be causing issues; despite cancelled callbacks remaining in the 'pendingCallbacks' queue until rAF runs, a problem might occur with the current setup."
037378202f1a99c79ed778a1555b0b2c32974a10,1678310712,"Internal `act`: Call scope function after an async gap (#26347)

This adds an async gap to our internal implementation of `act` (the one
used by our repo, not the public API). Rather than call the provided
scope function synchronously when `act` is called, we call it in a
separate async task. This is an extra precaution to ensure that our
tests do not accidentally rely on work being queued synchronously,
because that is an implementation detail that we should be allowed to
change. We don't do this in the public version of `act`, though we maybe
should in the future, for the same rationale. That might be tricky,
though, because it could break existing tests.

This also fixes the issue where our internal `act` requires an async
function. You can pass it a regular function, too.
","['packages/internal-test-utils/internalAct.js', 'packages/react-devtools-shared/src/__tests__/storeComponentFilters-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseFuzz-test.internal.js']","The internal implementation of `act` invokes provided scope function synchronously potentially causing reliance on queued work details and requiring an async function, which limits type of function inputs."
72bbcad160e9c2d27143f8bd617138a2790de3e9,1593131990,"Add new test cli (#19184)

* Add new test cli

* Remove --variant accidentally added to test-persist

* s/test/tests

* Updates from review

* Update package.json tests

* Missed a release channel in circle.yaml

* Update config.yml to use just run: with test commands

* Update release-channel options and add build dir checks

* Update test args to use the new release-channel options

* Fix error in circle config.yml

* Fix a wrong condition for the --variant check

* Fix a wrong condition for the --persistent check

* Prettier

* Require build check for devtool tests as well
","['scripts/jest/jest-cli.js', 'scripts/jest/jest.js']","Issues running test commands with devtool tests, erroneous conditions for --variant and --persistent checks, and non-responsive behavior with various release-channel options."
d1ced9fd58a1ba91febacba8ceaf2e17640fb942,1666417104,"[Float] support all links as Resources (#25515)

stacked on https://github.com/facebook/react/pull/25514

This PR adds support for any type of Link as long as it has a string rel
and href and does not include an onLoad or onError property.

The semantics for generic link resources matches other head resources,
they will be inserted and removed as their ref counts go positive and
back to zero.

Keys are based on rel, href, sizes, and media.

on the server preconnect and prefetch-dns are privileged and will emit
near the start of the stream.
","['packages/react-dom-bindings/src/client/ReactDOMFloatClient.js', 'packages/react-dom-bindings/src/server/ReactDOMFloatServer.js', 'packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom-bindings/src/shared/ReactDOMResourceValidation.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js']","The current implementation does not support all types of Links as Resources unless they have specific properties (rel, href) and lack others (onLoad, onError)."
4129ea8c922b950be3964f98d2bb74ff4a1c5431,1693314385,"set priority on TaskController instead of on postTask/yield (#27295)

## Summary

passing both a signal and a priority to `postTask`/`yield` in chrome
causes memory to spike and potentially causes OOMs. a fix for this has
landed in chrome 118, but we can avoid the issue in earlier versions by
setting priority on just the TaskController instead.

https://bugs.chromium.org/p/chromium/issues/detail?id=1469367

## How did you test this change?
```
yarn test SchedulerPostTask
```
","['packages/scheduler/src/__tests__/SchedulerPostTask-test.js', 'packages/scheduler/src/forks/SchedulerPostTask.js']","Passing both a signal and a priority to `postTask`/`yield` in chrome leads to memory spikes, potentially causing out-of-memory errors in versions prior to Chrome 118."
858c84206ef79f210e552c0128f01d1ae3a0cbf0,1564160784,"Don't hyphenate custom CSS properties for ReactDOMServer (#16167)

* Do not hyphenate custom CSS property

* Move check into the processStyleName fn

* Formatting

* add test

* Put isCustomProperty check after conditional return

* add test to `ReactDOMServerIntegration` and supress warning

* Don't indexOf twice

* Simpler fix

","['packages/react-dom/src/__tests__/CSSPropertyOperations-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-dom/src/shared/CSSPropertyOperations.js']","ReactDOMServer is incorrectly hyphenating custom CSS properties, leading to CSS styling not working as expected."
cc24d0ea56b0538d1ac61dc09faedd70ced5bb47,1557789350,"Invariant that throws when committing wrong tree (#15517)

If React finishes rendering a tree, delays committing it (e.g.
Suspense), then subsequently starts over or renders a new tree, the
pending tree is no longer valid. That's because rendering a new work-in
progress mutates the old one in place.

The current structure of the work loop makes this hard to reason about
because, although `renderRoot` and `commitRoot` are separate functions,
they can't be interleaved. If they are interleaved by accident, it
either results in inconsistent render output or invariant violations
that are hard to debug.

This commit adds an invariant that throws if the new tree is the same as
the old one. This won't prevent all bugs of this class, but it should
catch the most common kind.

To implement the invariant, I store the finished tree on a field on the
root. We already had a field for this, but it was only being used for
the unstable `createBatch` feature.

A more rigorous way to address this type of problem could be to unify
`renderRoot` and `commitRoot` into a single function, so that it's
harder to accidentally interleave the two phases. I plan to do something
like this in a follow-up.
","['packages/react-reconciler/src/ReactFiberRoot.js', 'packages/react-reconciler/src/ReactFiberScheduler.js']",Rendering new work-in-progress after delaying a pending tree can lead to inconsistent render output or hard-to-debug invariant violations due to potential interleaving of `renderRoot` and `commitRoot` functions.
f4148b2561d468c292f184fb35b186efbc5dd758,1572655164,"[Flight] Move around the Server side a bit (#17251)

* Rename ReactFlightStreamer -> ReactFlightServer

* Unify Browser/Node stream tests into one file and use the client reader

* Defer to the actual ReactDOM for HTML rendering for now

This will need to use a variant of Fizz to do inline SSR in Flight.
However, I don't want to build the whole impl right now but also don't
want to exclude the use case yet. So I outsource it to the existing
renderer. Ofc, this doesn't work with Suspense atm.

","['packages/react-dom/src/__tests__/ReactFlightDOM-test.js', 'packages/react-dom/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react-dom/src/__tests__/ReactFlightDOMNode-test.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom/src/server/flight/ReactFlightDOMServerNode.js', 'packages/react-noop-renderer/src/ReactNoopFlightServer.js', 'packages/react-server/flight.inline-typed.js', 'packages/react-server/flight.inline.dom-browser.js', 'packages/react-server/flight.inline.dom.js', 'packages/react-server/flight.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/forks/ReactServerFormatConfig.custom.js', 'scripts/rollup/bundles.js', 'scripts/rollup/modules.js']","Server-side ReactFlightStreamer isn't able to handle HTML rendering and inline SSR in Flight. Current workaround uses ReactDOM, which isn't compatible with Suspense."
da54641a1022edc789c0290e6aa6421d6b9543c0,1585616972,"[ESLint] Check deps when callback body is outside the Hook call, too (#18435)

* Refactor: visit CallExpression

Instead of visiting the functions and looking up to see if they're in a Hook call, visit Hook calls and look down to see if there's a callback inside. I will need this refactor so I can visit functions declared outside the call.

* Check deps when callback body is outside the Hook call

* Handle the unknown case
","['packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js', 'packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js']","Hook calls with callback bodies declared outside of the call aren't correctly checking dependencies, leading to potential errors due to unaccounted for vars.
"
9d111ffdfbcfee4b348a3d49c16f02cb718c896f,1675274213,"Serialize Promises through Flight (#26086)

This lets you pass Promises from server components to client components
and `use()` them there.

We still don't support Promises as children on the client, so we need to
support both. This will be a lot simpler when we remove the need to
encode children as lazy since we don't need the lazy encoding anymore
then.

I noticed that this test failed because we don't synchronously resolve
instrumented Promises if they're lazy. The second fix calls `.then()`
early to ensure that this lazy initialization can happen eagerly. ~It
felt silly to do this with an empty function or something, so I just did
the attachment of ping listeners early here. It's also a little silly
since they will ping the currently running render for no reason if it's
synchronously available.~ EDIT: That didn't work because a ping might
interrupt the current render. Probably need a bigger refactor.

We could add another extension but we've already taken a lot of
liberties with the Promise protocol. At least this is one that doesn't
need extension of the protocol as much. Any sub-class of promises could
do this.
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-reconciler/src/ReactFiberThenable.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-server/src/ReactFlightServer.js']",Passing Promises from server components to client components through Flight results in failed tests due to asynchronous resolution of instrumented Promises. Current render might be interrupted by ping because of this issue.
f1db9c30cc42b4fa8df748a31180b2a68f563e0f,1629325049,"[DevTools] Support object destructuring pattern without runtime errors (#22128)

## Summary

Before this commit, if a hook returned an object and we declared a variable using object destructuring on the returned value, we would produce a runtime error. This was detected via internal testing.

This commit fixes that and adds regression tests.


## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools
- added new regression tests 
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).


","['packages/react-devtools-extensions/src/SourceMapMetadataConsumer.js', 'packages/react-devtools-extensions/src/__tests__/__source__/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/bundle/index.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/external/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/external/fb-sources-extended/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/external/index-map/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/external/react-sources-extended/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/inline/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/inline/fb-sources-extended/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/inline/index-map/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/inline/react-sources-extended/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__compiled__/no-columns/ComponentWithCustomHook.js', 'packages/react-devtools-extensions/src/__tests__/__source__/__untransformed__/ComponentWithUnnamedCustomHooks.js', 'packages/react-devtools-extensions/src/__tests__/parseHookNames-test.js', 'packages/react-devtools-extensions/src/astUtils.js']","Object destructuring on hooks returning an object triggers a runtime error, as observed in internal testing."
518ce9c25f18075214cb572e7dc240598090e648,1590700595,"Add Lazy Elements Behind a Flag (#19033)

We really needed this for Flight before as well but we got away with it
because Blocks were lazy but with the removal of Blocks, we'll need this
to ensure that we can lazily stream in part of the content.

Luckily LazyComponent isn't really just a Component. It's just a generic
type that can resolve into anything kind of like a Promise.

So we can use that to resolve elements just like we can components.

This allows keys and props to become lazy as well.

To accomplish this, we suspend during reconciliation. This causes us to
not be able to render siblings because we don't know if the keys will
reconcile. For initial render we could probably special case this and
just render a lazy component fiber.

Throwing in reconciliation didn't work correctly with direct nested
siblings of a Suspense boundary before but it does now so it depends
on new reconciler.
","['packages/react-reconciler/src/ReactChildFiber.new.js', 'packages/react-reconciler/src/ReactChildFiber.old.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","Removal of Blocks requires a mechanism to lazily stream in part of the content, failure to do so leads to inability to render siblings during reconciliation due to indeterminacy of key reconciliation."
eaa493e5325cec0d8ba41bc0a4bcb300d1a72b7d,1648566691,"Profiler should only report stateful hooks that change between renders (#24189)

The Profiler has an advanced feature that shows why a component re-rendered. In the case of props and (class) state, it shows the names of props/state values that changed between renders. For hooks, DevTools tries to detect which ones may been related to the update by comparing prev/next internal hook structures.

My initial implementation tried to detect all changed hooks. In hindsight this is confusing, because only stateful hooks (e.g. useState, useReducer, and useSyncExternalStore) can schedule an update. (Other types of hooks can change between renders, but in a reactive way.) This PR changes the behavior to only report hooks that scheduled the update.
","['packages/react-devtools-shared/src/__tests__/profilingCache-test.js', 'packages/react-devtools-shared/src/backend/renderer.js']","The Profiler's advanced feature displays all changed hooks, which can be misguiding as only stateful hooks like useState, useReducer, and useSyncExternalStore can schedule updates. Other types of hooks can vary reactively and unnecessarily trigger re-renders."
691096c95d1019f57e0da2c9a060c5e094b7c586,1582064383,"Split recent passive effects changes into 2 flags (#18030)

* Split recent passive effects changes into 2 flags

Separate flags can now be used to opt passive effects into:
1) Deferring destroy functions on unmount to subsequent passive effects flush
2) Running all destroy functions (for all fibers) before create functions

This allows us to test the less risky feature (2) separately from the more risky one.

* deferPassiveEffectCleanupDuringUnmount is ignored unless runAllPassiveEffectDestroysBeforeCreates is true

","['packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","Passive effects changes are leading to risky behavior during unmounting due to simultaneous execution of destroy and create functions, requiring separate flags for testing."
ed5f010ae51db1544ce92e1a5105e870b5a5098e,1571268192,"Client render Suspense content if there's no boundary match (#16945)

Without the enableSuspenseServerRenderer flag there will never be a boundary match. Also when it is enabled, there might not be a boundary match if something was conditionally rendered by mistake.

With this PR it will now client render the content of a Suspense boundary in that case and issue a DEV only hydration warning. This is the only sound semantics for this case.

Unfortunately, landing this will once again break #16938. It will be less bad though because at least it'll just work by client rendering the content instead of hydrating and issue a DEV only warning.

However, we must land this before enabling the enableSuspenseServerRenderer flag since it does this anyway.

I did notice that we special case fallback={undefined} due to our unfortunate semantics for that. So technically a workaround that works is actually setting the fallback to undefined on the server and during hydration. Then flip it on only after hydration. That could be a workaround if you want to be able to have a Suspense boundary work only after hydration for some reason.

It's kind of unfortunate but at least those semantics are internally consistent. So I added a test for that.

","['packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.js']","In the absence of a boundary match, content of a Suspense boundary fails to render on the client side, and a hydration warning is issued in DEV mode, potentially breaking #16938."
7fec38041faf7f4691f503feccbaf5af901367e2,1624546108,"Log and show error overlay for commit phase errors (#21723)

* Enable skipped tests from #21723

* Report uncaught errors in DEV

* Clear caught error

This is not necessary (as proven by tests) because next invokeGuardedCallback clears it anyway. But I'll keep it for consistency with other calls.
","['packages/react-dom/src/__tests__/ReactDOMConsoleErrorReporting-test.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js']","Uncaught errors in the commit phase are not logged or displayed properly in DEV. This leaves errors unreported, hindering debugging efforts."
67a61d5bd7f731f5eb37d148dfc4ae0515a8c934,1677631477,"[Flight Fixture] Show SSR Support with CSS (#26263)

Builds on #26257.

To do this we need access to a manifest for which scripts and CSS are
used for each ""page"" (entrypoint).

The initial script to bootstrap the app is inserted with
`bootstrapScripts`. Subsequent content are loaded using the chunks
mechanism built-in.

The stylesheets for each pages are prepended to each RSC payload and
rendered using Float. This doesn't yet support styles imported in
components that are also SSR:ed nor imported through Server Components.
That's more complex and not implemented in the node loader.

HMR doesn't work after reloads right now because the SSR renderer isn't
hot reloaded because there's no idiomatic way to hot reload ESM modules
in Node.js yet. Without killing the HMR server. This leads to hydration
mismatches when reloading the page after a hot reload.

Notably this doesn't show serializing the stream through the HTML like
real implementations do. This will lead to possible hydration mismatches
based on the data. However, manually serializing the stream as a string
isn't exactly correct due to binary data. It's not the idiomatic way
this is supposed to work. This will all be built-in which will make this
automatic in the future.
","['fixtures/flight/config/paths.js', 'fixtures/flight/config/webpack.config.js', 'fixtures/flight/loader/global.js', 'fixtures/flight/loader/region.js', 'fixtures/flight/scripts/build.js', 'fixtures/flight/server/global.js', 'fixtures/flight/server/region.js', 'fixtures/flight/src/App.js', 'fixtures/flight/src/index.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackPlugin.js']","The current approach of rendering stylesheets for each page in the Flight Fixture does not support styles imported in SSR components or through Server Components. Also, HMR is dysfunctional after reloads due to lack of hot reloading in the SSR renderer."
3ba788ff347a1b772b7482e2535e156825239432,1665962227,"Fix download-build script (#25493)

The download-build script works by scraping the CircleCI job number from
the GitHub status API. Yes, I know this is super hacky but last I
checked this was the least bad of not a lot of options. Because the
response is paginated, sometimes the status for the build job exceeds
the page size.

This increases the page size to 100 so this is less likely to happen.

It'd be great to find a better way to download the artifacts. I don't
love how brittle this solution is. I think switching to the GitHub
Checks API might be worth trying, but last I looked into it, it has
other flaws.
",['scripts/release/shared-commands/get-build-id-for-commit.js'],"The download-build script sometimes fails as the build job status exceeds the response page size when scraped from the GitHub status API, causing missing CircleCI job numbers."
579c008a752fae70f670047d0ab687552fd8d160,1633494666,"[Fizz/Flight] pipeToNodeWritable(..., writable).startWriting() -> renderToPipeableStream(...).pipe(writable) (#22450)

* Rename pipeToNodeWritable to renderToNodePipe

* Add startWriting API to Flight

We don't really need it in this case because there's way less reason to
delay the stream in Flight.

* Pass the destination to startWriting instead of renderToNode

* Rename startWriting to pipe

This mirrors the ReadableStream API in Node

* Error codes

* Rename to renderToPipeableStream

This mimics the renderToReadableStream API for the browser.
","['fixtures/flight/server/handler.server.js', 'fixtures/ssr/server/render.js', 'fixtures/ssr2/server/render.js', 'packages/react-dom/npm/server.node.js', 'packages/react-dom/server.node.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js']","The Flight API lacks the startWriting function, and the renderToNodePipe function using an inefficient API design, causing potential delay during stream operations."
4ebaeae40dec52c84c968a25f1f21f4d0f571336,1649435300,"moved mutation code to passive (#24251)

This PR moves the code for transition tracing in the mutation phase that adds transitions to the pending callbacks object (to be called sometime later after paint) from the mutation to the passive phase.

Things to think about:

Passive effects can be flushed before or after paint. How do we make sure that we get the correct end time for the interaction?
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']",Transition tracing in the mutation phase potentially causes incorrect end time for the interaction due to its transfer to the pending callbacks object for later execution.
34464fb16c2aec8202dab868eb381da0e807d771,1673304762,"Upgrade to Flow 0.196.3 (#25974)

After the previous changes these upgrade are easy.

- removes config options that were removed
- object index access now requires an indexer key in the type, this
cause a handful of errors that were fixed
- undefined keys error in all places, this needed a few extra
suppressions for repeated undefined identifiers.

Flow's
[CHANGELOG.md](https://github.com/facebook/flow/blob/main/Changelog.md).
","['packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-shared/src/hydration.js', 'packages/react-devtools-shell/src/app/console.js', 'packages/react-reconciler/src/ReactFiberAct.js', 'packages/react-reconciler/src/ReactFiberFlags.js']","Application is not recognizing undefined keys and object index access now needing an indexer key in the type, causing errors and requiring suppressions for undefined identifiers."
d807eb52cfd999cfbcb19078a75b15f844e409bb,1670274603,"Revert recent hydration changes (#25812)

We're reverting the stack of changes that this code belongs to in order
to unblock the sync to Meta's internal codebase. We will attempt to
re-land once the sync is unblocked.

I have not yet verified that this fixes the error that were reported
internally. I will do that before landing.
","['packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js', 'packages/react-devtools-shared/src/__tests__/preprocessData-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberLane.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js']",The recent hydration changes are causing errors and blocking the sync to Meta's internal codebase.
0131d0cff40d4054ac72c857d3a13c5173c46e0a,1679330110,"Check if suspensey instance resolves in immediate task (#26427)

When rendering a suspensey resource that we haven't seen before, it may
have loaded in the background while we were rendering. We should yield
to the main thread to see if the load event fires in an immediate task.

For example, if the resource for a link element has already loaded, its
load event will fire in a task right after React yields to the main
thread. Because the continuation task is not scheduled until right
before React yields, the load event will ping React before it resumes.

If this happens, we can resume rendering without showing a fallback.

I don't think this matters much for images, because the `completed`
property tells us whether the image has loaded, and during a non-urgent
render, we never block the main thread for more than 5ms at a time (for
now — we might increase this in the future). It matters more for
stylesheets because the only way to check if it has loaded is by
listening for the load event.

This is essentially the same trick that `use` does for userspace
promises, but a bit simpler because we don't need to replay the host
component's begin phase; the work-in-progress fiber already completed,
so we can just continue onto the next sibling without any additional
work.

As part of this change, I split the `shouldSuspendCommit` host config
method into separate `maySuspendCommit` and `preloadInstance` methods.
Previously `shouldSuspendCommit` was used for both.

This raised a question of whether we should preload resources during a
synchronous render. My initial instinct was that we shouldn't, because
we're going to synchronously block the main thread until the resource is
inserted into the DOM, anyway. But I wonder if the browser is able to
initiate the preload even while the main thread is blocked. It's
probably a micro-optimization either way because most resources will be
loaded during transitions, not urgent renders.
","['packages/react-art/src/ReactARTHostConfig.js', 'packages/react-dom-bindings/src/client/ReactDOMHostConfig.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberThenable.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseyCommitPhase-test.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/react-test-renderer/src/ReactTestHostConfig.js']","When rendering a new suspense resource, it might be loaded in the background while rendering which may not be properly detected, leading to showing a fallback unnecessarily. This problem is more evident in stylesheets."
01a0c4e12c6aa9732d290e13b1452f72d276934d,1675800601,"Add Edge Server Builds for workerd / edge-light (#26116)

We currently abuse the browser builds for Web streams derived
environments. We already have a special build for Bun but we should also
have one for [other ""edge""
runtimes](https://runtime-keys.proposal.wintercg.org/) so that we can
maximally take advantage of the APIs that exist on each platform.

In practice, we currently check for a global property called
`AsyncLocalStorage` in the server browser builds which we shouldn't
really do since browsers likely won't ever have it. Additionally, this
should probably move to an import which we can't add to actual browser
builds where that will be an invalid import. So it has to be a separate
build. That's not done yet in this PR but Vercel will follow
Cloudflare's lead here.

The `deno` key still points to the browser build since there's no
AsyncLocalStorage there but it could use this same or a custom build if
support is added.
","['packages/react-client/src/forks/ReactFlightClientHostConfig.dom-edge.js', 'packages/react-dom/npm/server.edge.js', 'packages/react-dom/npm/static.edge.js', 'packages/react-dom/server.edge.js', 'packages/react-dom/src/server/ReactDOMFizzServerEdge.js', 'packages/react-dom/src/server/ReactDOMFizzStaticEdge.js', 'packages/react-dom/static.edge.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.dom-edge.js', 'packages/react-server-dom-webpack/npm/server.edge.js', 'packages/react-server-dom-webpack/server.edge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerEdge.js', 'packages/react-server/src/ReactServerStreamConfigBrowser.js', 'packages/react-server/src/ReactServerStreamConfigEdge.js', 'packages/react-server/src/forks/ReactFlightServerConfig.dom-edge.js', 'packages/react-server/src/forks/ReactServerFormatConfig.dom-edge.js', 'packages/react-server/src/forks/ReactServerStreamConfig.dom-edge.js', 'packages/react/src/__tests__/ReactFetch-test.js', 'packages/react/src/__tests__/ReactFetchEdge-test.js', 'scripts/rollup/bundles.js', 'scripts/shared/inlinedHostConfigs.js']","Browser builds are currently being misused for Web streams derived environments, creating issues with the global property 'AsyncLocalStorage'. This can result in invalid imports in the actual browser builds."
5d3d71b1ddbbf5743108c998904f7bb575f4330e,1578072511,"Partial fix DevTools Profiler ''Could not find node…'' error (#17759)

The Profiler stores:

1. A snapshot of the React tree when profiling started
2. The operations array for each commit
3. Profiling metadata (e.g. durations, what changed, etc) for each commit

It uses this information (snapshot + operations diff) to reconstruct the state of the application for a given commit as it's viewed in the Profiler UI. Because of this, it's very important that the operations and metadata arrays align. If they don't align, the profiler will be unable to correctly reconstruct the tree, and it will likely throw errors (like 'Could not find node…')

#16446 tracks a long-standing bug where these two arrays get misaligned. I am still not entirely sure what causes this bug, but with PR #17253, I exacerbated things by introducing another potential way for it to happen. This PR addresses the regression at least (and adds test coverage for it).

I will follow up this afternoon on the original #16446 issue. I think I may have a lead on what's happening at least, if not exactly an idea of how to reproduce it.
","['packages/react-devtools-shared/src/__tests__/profilerStore-test.js', 'packages/react-devtools-shared/src/backend/renderer.js']","Misalignment of operations and metadata arrays in the Profiler leads to inability to correctly reconstruct the application's state, throwing errors such as 'Could not find node…'."
43a70a610dd2cc298ab5592deebfbf8f7bbac127,1680215930,"Limit the meaning of ""custom element"" to not include `is` (#26524)

This PR has a bunch of surrounding refactoring. See individual commits.

The main change is that we no longer special case `typeof is ===
'string'` as a special case according to the
`enableCustomElementPropertySupport` flag.

Effectively this means that you can't use custom properties/events,
other than the ones React knows about on `<input is=""my-input"">`
extensions.

This is unfortunate but there's too many paths that are forked in
inconsistent ways since we fork based on tag name. I think __the
solution is to let all React elements set unknown properties/events in
the same way as this flag__ but that's a bigger change than this flag
implies.

Since `is` is not universally supported yet anyway, this doesn't seem
like a huge loss. Attributes still work.

We still support passing the `is` prop and turn that into the
appropriate createElement call.

@josepharhar
","['packages/react-dom-bindings/src/client/DOMPropertyOperations.js', 'packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/client/ReactDOMHostConfig.js', 'packages/react-dom-bindings/src/events/plugins/ChangeEventPlugin.js', 'packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom-bindings/src/shared/ReactDOMUnknownPropertyHook.js', 'packages/react-dom-bindings/src/shared/isCustomElement.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js']","The use of `is` attribute on custom elements causes forked and inconsistent paths due to React's handling of unknown properties/events based on tag name. This makes the custom properties/events unavailable on `<input is=""my-input"">` extensions when `enableCustomElementPropertySupport` flag is active."
da5c87bdfa287b8493b6e40a02acbe9896fd554a,1529608881,"Fixes children when using dangerouslySetInnerHtml in a selected <option> (#13078)

* Fixes children when using dangerouslySetInnerHtml in a selected <option>

This fixes an inadvertent cast of undefined children to an empty string when creating an option tag that will be selected:

```
  <select defaultValue=""test"">
    <option value='test' dangerouslySetInnerHTML={{ __html: '&rlm; test'}} />
  </select>
```

This causes an invariant error because both children and dangerouslySetInnerHTML are set.

* PR fix and new ReactDOMServerIntegrationForms test

* Account for null case

* Combine test cases into single test

* Add tests for failure cases

* Fix lint

","['packages/react-dom/src/__tests__/ReactDOMSelect-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationForms-test.js', 'packages/react-dom/src/server/ReactPartialRenderer.js']","Using dangerouslySetInnerHTML within a selected <option> results in an unintended cast of undefined children to an empty string, leading to an invariant error as both children and dangerouslySetInnerHTML are set."
51a7c45f8799cab903693fcfdd305ce84ba15273,1679506382,"Bugfix: SuspenseList incorrectly forces a fallback (#26453)

Fixes a bug in SuspenseList that @kassens found when deploying React to
Meta. In some scenarios, SuspenseList would force the fallback of a
deeply nested Suspense boundary into fallback mode, which should never
happen under any circumstances — SuspenseList should only affect the
nearest descendent Suspense boundaries, without going deeper.

The cause was that the internal ForceSuspenseFallback context flag was
not being properly reset when it reached the nearest Suspense boundary.
It should only be propagated shallowly.

We didn't discover this earlier because the scenario where it happens is
not that common. To trigger the bug, you need to insert a new Suspense
boundary into an already-mounted row of the list. But often when a new
Suspense boundary is rendered, it suspends and shows a fallback, anyway,
because its content hasn't loaded yet.

Another reason we didn't discover this earlier is because there was
another bug that was accidentally masking it, which was fixed by #25922.
When that fix landed, it revealed this bug.

The SuspenseList implementation is complicated but I'm not too concerned
with the current messiness. It's an experimental API, and we intend to
release it soon, but there are some known flaws and missing features
that we need to address first regardless. We'll likely end up rewriting
most of it.

Co-authored-by: Jan Kassens <jkassens@meta.com>
","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberSuspenseContext.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js']",SuspenseList is incorrectly forcing deeply nested Suspense boundaries into fallback mode in some scenarios when new Suspense boundary is inserted into an already-mounted row of the list.
ecd919a2f9b6e3d314fffc3d34b68b953a4e75e1,1548196807,"RFC: warn when returning different hooks on subsequent renders (#14585)

* warn when returning different hooks on next render

like it says. adds a field to Hook to track effect 'type', and compares when cloning subsequently.

* lint

* review changes

- numbered enum for hook types
- s/hookType/_debugType
- better dce

* cleaner detection location

* redundant comments

* different EffectHook / LayoutEffectHook

* prettier

* top level currentHookType

* nulling currentHookType

need to verify dce still works

* small enhancements

* hook order checks for useContext/useImperative

* prettier

* stray whitespace

* move some bits around

* better errors

* pass tests

* lint, flow

* show a before - after diff

* an error stack in the warning

* lose currentHookMatches, fix a test

* tidy

* clear the mismatch only in dev

* pass flow

* side by side diff

* tweak warning

* pass flow

* dedupe warnings per fiber, nits

* better format

* nit

* fix bad merge, pass flow

* lint

* missing hooktype enum

* merge currentHookType/currentHookNameInDev, fix nits

* lint

* final nits

","['packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']",Inconsistent return of different hooks on subsequent renders causes application instability and unexpected behavior.
ddff504695f33c19e8c0792bff82bd8f8b8f7c05,1693324724,"useFormState's permalink option changes form target (#27302)

When the `permalink` option is passed to `useFormState`, and the form is
submitted before it has hydrated, the permalink will be used as the
target of the form action, enabling MPA-style form submissions.

(Note that submitting a form without hydration is a feature of Server
Actions; it doesn't work with regular client actions.)

It does not have any effect after the form has hydrated.
","['packages/react-dom-bindings/src/shared/ReactDOMFormActions.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMForm-test.js', 'packages/react-server/src/ReactFizzHooks.js']","Passing `permalink` option to `useFormState` changes form target when form is submitted before hydration, leading to MPA-style form submissions. No effect observed after form has hydrated."
2e41568313620ab564425be7e5d777581e2db5d4,1632764079,"DevTools encoding supports multibyte characters (e.g. ""🟩"") (#22424)

Changes our text encoding approach to properly support multibyte characters following this algorithm. Based on benchmarking, this new approach is roughly equivalent in terms of performance (sometimes slightly faster, sometimes slightly slower).

I also considered using TextEncoder/TextDecoder for this, but it was much slower (~85%).
","['packages/react-devtools-shared/src/__tests__/store-test.js', 'packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-shared/src/utils.js']","Multibyte characters like ""🟩"" are not properly supported in the DevTools text encoding approach, affecting the performance."
55b82794237a14a5cf106f61d84237dc9a3e04f6,1539902560,"Strict mode and default mode should have same Suspense semantics (#13882)

In the default mode, Suspense has special semantics where, in
addition to timing out immediately, we don't unwind the stack before
rendering the fallback. Instead, we commit the tree in an inconsistent
state, then synchronous render *again* to switch to the fallback. This
is slower but is less likely to cause issues with older components that
perform side effects in the render phase (e.g. componentWillMount,
componentWillUpdate, and componentWillReceiveProps).

We should do this in strict mode, too, so that there are no semantic
differences (in prod, at least) between default mode and strict mode.
The rationale is that it makes it easier to wrap a tree in strict mode
and start migrating components incrementally without worrying about new
bugs in production.
","['packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js']",Suspense in default and strict mode have different semantics leading to inconsistencies and potential new bugs when wrapping a tree in strict mode and migrating components.
05f5192e8106d006cc3189ae68c523ca123ae297,1566488780,"[Partial Hydration] Dispatching events should not work until hydration commits (#16532)

* Refactor a bit to use less property access

* Add test for invoking an event before mount

* Add Hydration effect tag

This is equivalent to a ""Placement"" effect in that it's a new insertion
to the tree but it doesn't need an actual mutation.

It is only used to determine if a subtree has actually mounted yet.

* Use the Hydration flag for Roots

Previous roots had a Placement flag on them as a hack for this case but
since we have a special flag for it now, we can just use that.

* Add Flare test

","['packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js', 'packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js', 'packages/react-dom/src/client/ReactDOMComponentTree.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberTreeReflection.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/shared/ReactSideEffectTags.js']","Events dispatched before the completion of hydration are still processed, potentially leading to undesired effects and behavior."
f75f8b48a2ab14e31712389f91750c58de18c378,1602695987,"DevTools always overrides the dispatcher when shallow rendering (#20011)

This is done so that any effects scheduled by the shallow render are thrown away.

Unlike the code this was forked from (in ReactComponentStackFrame) DevTools should override the dispatcher even when DevTools is compiled in production mode, because the app itself may be in development mode and log errors/warnings.
","['packages/react-devtools-shared/src/__tests__/componentStacks-test.js', 'packages/react-devtools-shared/src/backend/DevToolsComponentStackFrame.js']","Shallow rendering in DevTools may not correctly discard scheduled effects due to dispatcher override, potentially leading to errors/warnings if the application is in development mode."
e7d2a558ad8e664df36a70b0a86a85f925d1418f,1615221194,"DevTools flushes updated passive warning/error info after delay (#20931)

* DevTools flushes updated passive warning/error info after delay
Previously this information was not flushed until the next commit, but this provides a worse user experience if the next commit is really delayed. Instead, the backend now flushes only the warning/error counts after a delay. As a safety, if there are already any pending operations in the queue, we bail.

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>
","['packages/react-devtools-shared/src/__tests__/store-test.js', 'packages/react-devtools-shared/src/__tests__/utils.js', 'packages/react-devtools-shared/src/backend/renderer.js']","Warning/error info updates in DevTools are not flushed until the next commit causing a delayed user experience, especially when the subsequent commit is significantly delayed."
7f696bd99c39348a631c20378d2a8704634bab04,1597060450,"fix: onFocus/onBlur/onBeforeInput have a matching event type (#19561)

* test: Add current behavior for event types of onFocus/onBlur

* fix: onFocus/onBlur have a matching event type

* fix useFocus

* fix: don't compare native event types with react event types

* Add FocusIn/FocusOutEventInterface

* A simpler alternative fix

* Add regression tests

* Always pass React event type and fix beforeinput

Co-authored-by: Dan Abramov <dan.abramov@me.com>
","['packages/react-dom/src/__tests__/ReactDOMEventPropagation-test.js', 'packages/react-dom/src/events/DOMPluginEventSystem.js', 'packages/react-dom/src/events/ReactSyntheticEventType.js', 'packages/react-dom/src/events/SyntheticEvent.js', 'packages/react-dom/src/events/__tests__/SyntheticFocusEvent-test.js', 'packages/react-dom/src/events/plugins/BeforeInputEventPlugin.js', 'packages/react-dom/src/events/plugins/ChangeEventPlugin.js', 'packages/react-dom/src/events/plugins/EnterLeaveEventPlugin.js', 'packages/react-dom/src/events/plugins/SelectEventPlugin.js', 'packages/react-dom/src/events/plugins/SimpleEventPlugin.js', 'packages/react-dom/src/events/plugins/__tests__/ModernBeforeInputEventPlugin-test.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-interactions/events/src/dom/create-event-handle/__tests__/useFocus-test.internal.js']",Mismatch occurs in event types of onFocus/onBlur/onBeforeInput leading to complications in comparing native event types with React event types.
ae7639c1165a6321c94c7c7203224c1eeeabb484,1510315319,"Remove tests in ReactDOMComponent-test depending on internal API (#11337)

* Remove inputValueTracking from ReactDOMComponent-test dependency

* prettier

* use node._valueTracker and add some test cases to make sure that value being tracked

* using Object.getOwnPropertyDescriptor to get the tracked value

* move getValueTracker to each test case and use its corresponding prototype

* remove tests and move the value tracker definition before React is imported

* Delete these tests completely

",['packages/react-dom/src/__tests__/ReactDOMComponent-test.js'],"Tests in ReactDOMComponent-test are depending on the internal API, particularly the inputValueTracking; this could lead to unstable tests as internal implementations may change."
bb88ce95a87934a655ef842af776c164391131ac,1618132181,"Bugfix: Don't rely on `finishedLanes` for passive effects (#21233)

I recently started using `pendingPassiveEffectsLanes` to check if there were any pending
passive effects (530027a). `pendingPassiveEffectsLanes` is the value of
`root.finishedLanes` at the beginning of the commit phase. When there
are pending passive effects, it should always be a non-zero value,
because it represents the lanes used to render the effects.

But it turns out that `root.finishedLanes` isn't always correct.
Sometimes it's `NoLanes` even when there's a new commit.

I found this while investigating an internal bug report. The only repro
I could get was via a headless e2e test runner; I couldn't get one in an
actual browser, or other interactive environment. I used the e2e test to
bisect and confirm the fix. But I don't know yet know how to write a
regression test for the precise underlying scenario. I can probably
reverse engineer one by studying the code; after a quick glance
at `performConcurrentWorkOnRoot` and `performSyncWorkOnRoot`, it's not
hard to see how this might happen.

In the meantime, I'll revert the recent change that exposed the bug.

I was surprised that this had never come up before, since the code that
assigns `root.finishedLanes` is in an extremely hot path, and it hasn't
changed in a while. The reason is that, before 530027a,
`root.finishedLanes` was only used by the DevTools profiler, which is
probably why we had never noticed any issues. In addition to fixing the
inconsistency, we might also consider making `finishedLanes` a
profiling-only field.
","['packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","`root.finishedLanes` is not always correct, sometimes it's `NoLanes` even with new commits, causing inconsistency issues with the pending passive effects check."
e7b255341b059b4e2a109847395d0d0ba2633999,1599627323,"Internal `act`: Flush timers at end of scope (#19788)

If there are any suspended fallbacks at the end of the `act` scope,
force them to display by running the pending timers (i.e. `setTimeout`).

The public implementation of `act` achieves the same behavior with an
extra check in the work loop (`shouldForceFlushFallbacks`). Since our
internal `act` needs to work in both development and production, without
additional runtime checks, we instead rely on Jest's mock timers.

This doesn't not affect refresh transitions, which are meant to delay
indefinitely, because in that case we exit the work loop without
posting a timer.
","['packages/react-dom/src/test-utils/ReactTestUtilsAct.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/__tests__/ReactBlocks-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'scripts/rollup/validate/eslintrc.cjs.js', 'scripts/rollup/validate/eslintrc.cjs2015.js', 'scripts/rollup/validate/eslintrc.fb.js', 'scripts/rollup/validate/eslintrc.rn.js', 'scripts/rollup/validate/eslintrc.umd.js']","Suspended fallbacks at the end of the `act` scope are not forced to display due to pending timers not being run, resulting in inconsistent behavior between development and production."
a2fb84bebdc282e026d2b16ed2825c6f564095a7,1587658618,"Disable prepareStackTrace while we're generating stacks (#18708)

This could be used to do custom formatting of the stack trace in a way
that isn't compatible with how we use it. So we disable it while we use
it.

In theory we could call this ourselves with the result of our stack.
It would be a lot of extra production code though. My personal opinion
is that this should always be done server side instead of on the client.

We could expose a custom parser that converts it and passes it through
prepareStackTrace as structured data. That way it's external and doesn't
have to be built-in to React.
","['packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js', 'packages/shared/ReactComponentStackFrame.js']",Custom formatting of the stack trace during stack generation leads to incompatibility issues with its use.
cfb6cfa25031992569a328530b4fb8612a5d377b,1658254293,"Reused components commit with timing as new ones

When an Offscreen tree goes from hidden -> visible, the tree may include
both reused components that were unmounted when the tree was hidden, and
also brand new components that didn't exist in the hidden tree.

Currently when this happens, we commit all the reused components'
effects first, before committing the new ones, using two separate
traversals of the tree.

Instead, we should fire all the effects with the same timing as if it
were a completely new tree. See the test I wrote for an example.

This is also more efficient because we only need to traverse the
tree once.

","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/__tests__/ReactOffscreen-test.js']","Transitioning an Offscreen tree from hidden to visible incorporates both reused and brand new components, yet the effects of reused components are committed before the new ones, requiring two traversals of the tree."
4ccf58a94dce323718540b8185a32070ded6094b,1522710510,"Fix context stack misalignment caused by error replay (#12508)

* Add regression tests for error boundary replay bugs

* Ensure the context stack is aligned if renderer throws

* Always throw when replaying a failed unit of work

Replaying a failed unit of work should always throw, because the render
phase is meant to be idempotent, If it doesn't throw, rethrow the
original error, so React's internal stack is not misaligned.

* Reset originalReplayError after replaying

* Typo fix

","['packages/react-reconciler/src/ReactFiberHostContext.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorReplay-test.js']",Error boundary replay leads to renderer throwing and thus causing misalignment of the context stack due to non-idempotent render phase.
de7a09c1e0425f8719fa9c27a583a28ae5d791cb,1560520640,"[Fresh] Make transform resilient to plugin order (#15883)

* Run Fresh tests in two modes: with and without destructuring

Destructuring transform messes up the way we collect signatures for Hooks. This adds failing tests.

* Extract collecting calls to Hooks into a separate visitor

This introduces a bit of a perf penalty but makes our plugin resilient to presence of destructuring transform and their order. Fixes new tests.

* Inline some logic into the call visitor

","['packages/react-fresh/src/ReactFreshBabelPlugin.js', 'packages/react-fresh/src/__tests__/ReactFreshIntegration-test.js']","Destructuring transform disrupts the collection of signature for Hooks, causing the plugin to fail tests and thus making it sensitive to the presence and order of destructuring transform."
5b57bc6e31689ad715161cdcfa1b1d31eac2ba3b,1632261611,"[Draft] don't patch console during first render (#22308)

Previously, DevTools always overrode the native console to dim or supress StrictMode double logging. It also overrode console.log (in addition to console.error and console.warn). However, this changes the location shown by the browser console, which causes a bad developer experience. There is currently a TC39 proposal that would allow us to extend console without breaking developer experience, but in the meantime this PR changes the StrictMode console override behavior so that we only patch the console during the StrictMode double render so that, during the first render, the location points to developer code rather than our DevTools console code.
","['packages/react-devtools-shared/src/__tests__/console-test.js', 'packages/react-devtools-shared/src/backend/console.js', 'packages/react-devtools-shared/src/backend/legacy/renderer.js', 'packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-shared/src/backend/types.js', 'packages/react-devtools-shared/src/hook.js', 'packages/react-devtools-shell/src/app/console.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberClassComponent.new.js', 'packages/react-reconciler/src/ReactFiberClassComponent.old.js', 'packages/react-reconciler/src/ReactFiberDevToolsHook.new.js', 'packages/react-reconciler/src/ReactFiberDevToolsHook.old.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js', 'packages/react-reconciler/src/ReactUpdateQueue.new.js', 'packages/react-reconciler/src/ReactUpdateQueue.old.js']",Overriding the native console in DevTools to dim or suppress StrictMode double logging changes the location displayed in the browser console leading to a poor developer experience.
377c5175f78e47a3f01d323ad6528a696c88b76e,1683218097,"DevTools: fix backend activation (#26779)

## Summary
We have a case:
1. Open components tab
2. Close Chrome / Firefox devtools window completely
3. Reopen browser devtools panel
4. Open components tab

Currently, in version 4.27.6, we cannot load the components tree.

This PR contains two changes:
- non-functional refactoring in
`react-devtools-shared/src/devtools/store.js`: removed some redundant
type castings.
- fixed backend manager logic (introduced in
https://github.com/facebook/react/pull/26615) to activate already
registered backends. Looks like frontend of devtools also depends on
`renderer-attached` event, without it component tree won't load.

## How did you test this change?
This fixes the case mentioned prior. Currently in 4.27.6 version it is
not working, we need to refresh the page to make it work.

I've tested this in several environments: chrome, firefox, standalone
with RN application.
","['packages/react-devtools-extensions/src/backendManager.js', 'packages/react-devtools-extensions/src/background.js', 'packages/react-devtools-shared/src/backend/index.js', 'packages/react-devtools-shared/src/backend/types.js', 'packages/react-devtools-shared/src/devtools/store.js']","Upon reopening the browser devtools panel and accessing the components tab, the components tree fails to load- seems to be an issue with the backend manager logic not activating registered backends."
401296310fbc6a9e769936eda6a6d0269e9c84d0,1656602192,"[Transition Tracing] Refactor Transition Tracing Root Code (#24766)

This PR refactors the transition tracing root code by reusing the tracing marker code. Namely it:
* Refactors the tracing marker code so that it takes a tracing marker instance instead of a tracing marker fiber and rename the stack to `markerInstance` instead of `tracingMarker`
* Pushes the root code onto the stack
* Moves the instantiation of `root.incompleteTransitions` to the begin phase when we are pushing the root to the stack rather than in the commit phase
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberOffscreenComponent.js', 'packages/react-reconciler/src/ReactFiberRoot.new.js', 'packages/react-reconciler/src/ReactFiberRoot.old.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.new.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.old.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.new.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.old.js', 'packages/react-reconciler/src/ReactInternalTypes.js']",Transition tracing root code is currently not reusing tracing marker code and inefficient instantiation of `root.incompleteTransitions` causes potential problems.
05dc814cf061796c54e3aab7dd18a1b54615fc6b,1569867291,"Remove IIFE wrappers from dev invariant checks (#16963)

The error transform works by replacing calls to `invariant` with
an `if` statement.

Since we're replacing a call expression with a statement, Babel wraps
the new statement in an immediately-invoked function expression (IIFE).
This wrapper is unnecessary in practice because our `invariant` calls
are always part of their own expression statement.

In the production bundle, the function wrappers are removed by Closure.
But they remain in the development bundles.

This commit updates the transform to confirm that an `invariant` call
expression's parent node is an expression statement. (If not, it throws
a transform error.)

Then, it replaces the expression statement instead of the expression
itself, effectively removing the extraneous IIFE wrapper.
","['scripts/error-codes/__tests__/transform-error-messages.js', 'scripts/error-codes/transform-error-messages.js']",Extraneous immediately-invoked function expressions (IIFE) wrappers persist in the development bundles when transforming calls to `invariant` into `if` statements using Babel.
491aec5d6113ce5bae7c10966bc38a4a8fc091a8,1682961560,"Implement experimental_useOptimisticState (#26740)

This adds an experimental hook tentatively called useOptimisticState.
(The actual name needs some bikeshedding.)

The headline feature is that you can use it to implement optimistic
updates. If you set some optimistic state during a transition/action,
the state will be automatically reverted once the transition completes.

Another feature is that the optimistic updates will be continually
rebased on top of the latest state.

It's easiest to explain with examples; we'll publish documentation as
the API gets closer to stabilizing. See tests for now.

Technically the use cases for this hook are broader than just optimistic
updates; you could use it implement any sort of ""pending"" state, such as
the ones exposed by useTransition and useFormStatus. But we expect
people will most often reach for this hook to implement the optimistic
update pattern; simpler cases are covered by those other hooks.
","['packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-reconciler/src/__tests__/ReactAsyncActions-test.js', 'packages/react-server/src/ReactFizzHooks.js', 'packages/react/index.classic.fb.js', 'packages/react/index.experimental.js', 'packages/react/index.js', 'packages/react/index.modern.fb.js', 'packages/react/src/React.js', 'packages/react/src/ReactHooks.js']","There's currently no hook to handle optimistic updates and rebasing updates on top of the latest state during a transition/action, which leads to difficulties in managing ""pending"" states."
587e759302ef1cc02954831ccc72f7f668e32426,1645657710,"Remove Numeric Fallback of Symbols (#23348)

This was already defeating the XSS issue that Symbols was meant to protect
against. So you were already supposed to use a polyfill for security.

We rely on real Symbol.for in Flight for Server Components so those require
real symbols anyway.

We also don't really support IE without additional polyfills anyway.
","['packages/react/src/__tests__/ReactElement-test.js', 'packages/react/src/__tests__/ReactElementJSX-test.js', 'packages/shared/ReactSymbols.js', 'packages/shared/__tests__/ReactSymbols-test.internal.js', 'packages/shared/isValidElementType.js']","The current use of numeric fallback for Symbols is counteracting the XSS protection intended by Symbol use, making it necessary to use a polyfill for security. Also, it is not supporting Internet Explorer without additional polyfills."
0b931f90e8964183f08ac328e7350d847abb08f9,1681186789,"Remove JND delay for non-transition updates (#26597)

Updates that are marked as part of a transition are allowed to block a
render from committing. Generally, other updates cannot — however,
there's one exception that's leftover from a previous iteration of our
Suspense architecture. If an update is not the result of a known urgent
event type — known as ""Default"" updates — then we allow it to suspend
briefly, as long as the delay is short enough that the user won't
notice. We refer to this delay as a ""Just Noticable Difference"" (JND)
delay. To illustrate, if the user has already waited 400ms for an update
to be reflected on the screen, the theory is that they won't notice if
you wait an additional 100ms. So React can suspend for a bit longer in
case more data comes in. The longer the user has already waited, the
longer the JND.

While we still believe this theory is sound from a UX perspective, we no
longer think the implementation complexity is worth it. The main thing
that's changed is how we handle Default updates. We used to render
Default updates concurrently (i.e. they were time sliced, and were
scheduled with postTask), but now they are blocking. Soon, they will
also be scheduled with rAF, too, which means by the end of the next rAF,
they will have either finished rendering or the main thread will be
blocked until they do. There are various motivations for this but part
of the rationale is that anything that can be made non-blocking should
be marked as a Transition, anyway, so it's not worth adding
implementation complexity to Default.

This commit removes the JND delay for Default updates. They will now
commit immediately once the render phase is complete, even if a
component suspends.
","['packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactOffscreenSuspense-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseEffectsSemantics-test.js', 'packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']","Default updates with a ""Just Noticeable Difference"" (JND) delay cause unnecessary implementation complexity and affect performance, especially when the render phase is complete but the update suspends due to JND."
453df3ff72dae3ebd1e1dcd6f965c4f251b0553c,1605294085,"Autofix imports when running replace-fork (#20251)

* Pass extra CLI args through to ESLint

These now work:

```
yarn run lint --fix
yarn run linc --fix
```

* Autofix imports when running replace-fork

We have a custom ESLint rule that can autofix cross-fork imports.

Usually, after running the `replace-fork` script, you need to run
`yarn lint --fix` to fix the imports.

This combines the two steps into one.
",['scripts/merge-fork/replace-fork.js'],"Running the 'replace-fork' script requires manually running 'yarn lint --fix' afterwards to fix the cross-fork imports, leading to an extra step."
18875b240131273c8e3dd213341edc159150d80e,1578523207,"Remove special casing of toString values when enableTrustedTypesIntegration (#17774)

* Remove toString of dangerouslySetInnerHTML

As far as I can tell, the toString call was added here:

https://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887

It was never really needed. Subsequently when we added Trusted Types,
this needed to be changed to a special call but we really should just
always let it pass through.

* Remove special casing of toString values when enableTrustedTypesIntegration

As far as I can tell, we only toString in user space because of IE8/9.

We don't really support IE8/9 anymore and by the time this flag is on,
we should be able to deprecate it.

Unless this is also an issue in IE11. I haven't tested yet.

","['packages/react-dom/src/client/DOMPropertyOperations.js', 'packages/react-dom/src/client/ToStringValue.js', 'packages/react-dom/src/client/setAttribute.js', 'packages/react-dom/src/client/setInnerHTML.js']","Redundant toString calls in dangerouslySetInnerHTML and special casing when enableTrustedTypesIntegration is enabled may be causing unnecessary Trusted Types related issues, especially in older IE versions."
b245795de373ca8f4a6c4962b59773e2f1bb2f1d,1526573652,"Re-enable Flow for ReactFiber and fix Flow issues (#12842)

* Lint for untyped imports and enable Flow typing in ReactFiber

* Re-enable Flow for ReactFiber and fix Flow issues

* Avoid an invariant in DEV-only code

I just introduced it, but on a second thought, it's better to keep it as a warning.

* Address review

","['packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-reconciler/src/ReactCapturedValue.js', 'packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactStrictModeWarnings.js']","ReactFiber has Flow typing disabled with lint issues for untyped imports, causing potential flow issues and invariant warnings in DEV only code."
0e526bcec2a2940eb2cea6204efab76a2e4d7c0d,1612323037,"Fix release script --commit param (#20720)

PR #20717 accidentally broke the `--commit` parameter because the
script errors if you provide both a `--build` and a `--commit`.

I solved by removing the validation error. When there's a conflict, it
will choose the --`build`.

(Although maybe we should `--build` entirely and always uses `--commit`.
I think `--commit` is a sufficient replacement.)
","['scripts/release/download-experimental-build.js', 'scripts/release/shared-commands/parse-params.js']",The release script fails due to a validation error if both `--build` and `--commit` parameters are supplied together.
a4ecd85e8628d1fdfe77c5615934de40af7d9537,1626135320,"act: Batch updates, even in legacy roots (#21797)

In legacy roots, if an update originates outside of `batchedUpdates`,
check if it's inside an `act` scope; if so, treat it as if it were
batched. This is only necessary in legacy roots because in concurrent
roots, updates are batched by default.

With this change, the Test Utils and Test Renderer versions of `act` are
nothing more than aliases of the isomorphic API (still not exposed, but
will likely be the recommended API that replaces the others).
","['packages/react-devtools-shared/src/__tests__/inspectedElement-test.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactIsomorphicAct-test.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/react/src/ReactAct.js', 'packages/react/src/ReactCurrentActQueue.js']","In legacy roots, updates originating outside of `batchedUpdates` but within an `act` scope are not treated as batched, causing inconsistency with concurrent roots where updates are batched by default."
2def7b3caf4b15ade69eb16b5ec87afa0dcd7992,1586310751,"More robust fix for #18515 (#18535)

* Add another test for #18515 using pings

Adds a regression test for the same underlying bug as #18515 but using
pings.

Test already passes, but I confirmed it fails if you revert the fix
in #18515.

* Set nextPendingLevel after commit, too
","['packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js']","Regressions observed in the original fix of #18515 while using pings, highlighting a possible issue in setting 'nextPendingLevel' post-commit."
1b2159acc34d9ca2c950e53bfc46db385a75dbad,1554847815,"[React Native] measure calls will now call FabricUIManager (#15324)

* [React Native] Add tests to paper renderer for measure, measureLayout

* [React Native] measure calls will now call FabricUIManager

The Fabric renderer was previously calling the paper UIManager's measure calls and passing the react tag. This PR changes the renderer to now call FabricUIManager passing the node instead.

One of the parts of this that feels more controversial is making NativeMethodsMixin and ReactNative.NativeComponent warn when calling measureLayout in Fabric. As Seb and I decided in https://github.com/facebook/react/pull/15126, it doesn't make sense for a component created with one of these methods to require a native ref but not work the other way around. For example: a.measureLayout(b) might work but b.measureLayout(a) wouldn't. We figure we should keep these consistent and continue migrating things off of NativeMethodsMixin and NativeComponent.

If this becomes problematic for the Fabric rollout then we should revisit this.

* Fixing Flow

* Add FabricUIManager to externals for paper renderer

* import * as FabricUIManager from 'FabricUIManager';

* Update tests

* Shouldn't have removed UIManager import

* Update with the new tests

","['packages/react-native-renderer/src/NativeMethodsMixin.js', 'packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/ReactNativeComponent.js', 'packages/react-native-renderer/src/ReactNativeTypes.js', 'packages/react-native-renderer/src/__mocks__/FabricUIManager.js', 'packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'scripts/flow/react-native-host-hooks.js', 'scripts/rollup/bundles.js']","Fabric renderer is erroneously using paper UIManager's measure calls with a react tag, leading to symmetrical inconsistencies in handling measureLayout between NativeMethodsMixin, ReactNative.NativeComponent, and components created with these methods."
7ed6084c39067e9a34a4d585e8dab2b75115cfa8,1686688226,"[Float] use common float types (#26938)

Float types are currently spread out. this moves them to a single place
to ensure we properly handle the public type interface in all three
renderers.

This is a step towards moving the public interface and validation to a
common file shared by all three runtimes. Will also probably change the
function interface to be flatter
","['packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactDOMFlightServerHostDispatcher.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFlightServerConfigDOM.js', 'packages/react-dom/src/ReactDOMSharedInternals.js', 'packages/react-dom/src/client/ReactDOM.js', 'packages/react-dom/src/server/ReactDOMServerRenderingStub.js', 'packages/react-dom/src/shared/ReactDOMFloat.js', 'packages/react-dom/src/shared/ReactDOMTypes.js']",Unstandardized float types across different renderers might lead to improper handling of the public type interface.
72d00ab623502983ebd7ac0756cf2787df109811,1586572742,"Fix Component Stacks for IE and Native Classes in Safari (#18575)

* Add more edge cases to fixture

Also adjust some expectations. I think the column should ideally be 1 but varies.
The Example row is one line off because it throws on the hook but should ideally be the component.
Similarly class components with constructors may have the line in the constructor.

* Account for the construct call taking a stack frame

We do this by first searching for the first different frame, then find
the same frames and then find the first different frame again.

* Throw controls

Otherwise they don't get a stack frame associated with them in IE.

* Protect against generating stacks failing

Errors while generating stacks will bubble to the root. Since this technique
is a bit sketchy, we should probably protect against it.

* Don't construct the thing that throws

Instead, we pass the prototype as the ""this"". It's new every time anyway.
","['fixtures/stacks/BabelClass-compiled.js', 'fixtures/stacks/BabelClass.js', 'fixtures/stacks/BabelClasses-compiled.js', 'fixtures/stacks/BabelClasses.js', 'fixtures/stacks/Components.js', 'fixtures/stacks/Example.js', 'packages/react-dom/src/__tests__/ReactErrorBoundaries-test.internal.js', 'packages/react-reconciler/src/ReactFiberComponentStack.js', 'packages/shared/ReactComponentStackFrame.js']","IE and Safari (with native classes) have inconsistent component stack trace generation—varying columns, inaccurate hook/component identification—in certain edge cases, potentially causing errors to percolate to the root."
76a6dbcb9ad93cf1e18606cb9280a1afc206b153,1605067010,"[Flight] Encode Symbols as special rows that can be referenced by models … (#20171)

* Encode Symbols as special rows that can be referenced by models

If a symbol was extracted from Symbol.for(...) then we can reliably
recreate the same symbol on the client.

S123:""react.suspense""
M456:{mySymbol: '$123'}

This doesn't suffer from the XSS problem because you have to write actual
code to create one of these symbols. That problem is only a problem because
values pass through common other usages of JSON which are not secure.

Since React encodes its built-ins as symbols, we can now use them as long
as its props are serializable. Like Suspense.

* Refactor resolution to avoid memo hack

Going through createElement isn't quite equivalent for ref and key in props.

* Reuse symbol ids that have already been written earlier in the stream
","['packages/react-client/src/ReactFlightClient.js', 'packages/react-client/src/ReactFlightClientStream.js', 'packages/react-client/src/__tests__/ReactFlight-test.js', 'packages/react-server/src/ReactFlightServer.js', 'packages/react-server/src/ReactFlightServerConfigStream.js', 'packages/react-transport-dom-relay/src/ReactFlightDOMRelayClient.js', 'packages/react-transport-dom-relay/src/ReactFlightDOMRelayProtocol.js', 'packages/react-transport-dom-relay/src/ReactFlightDOMRelayServerHostConfig.js', 'packages/react-transport-dom-relay/src/__tests__/ReactFlightDOMRelay-test.internal.js', 'packages/react-transport-dom-webpack/src/__tests__/ReactFlightDOM-test.js', 'packages/react-transport-native-relay/src/ReactFlightNativeRelayClient.js', 'packages/react-transport-native-relay/src/ReactFlightNativeRelayProtocol.js', 'packages/react-transport-native-relay/src/ReactFlightNativeRelayServerHostConfig.js']","Symbols extracted from Symbol.for(...) are not being recreated correctly on the client side, causing issues with encoding built-ins like Suspense. Also, resolution process with createElement yields inconsistent results for ref and key in props."
1173a17e6eea08599005e9f8e7d7a4245783edba,1677351891,"[Float][Fizz][Fiber] implement preconnect and prefetchDNS float methods (#26237)

Adds two new ReactDOM methods

### `ReactDOM.prefetchDNS(href: string)`
In SSR this method will cause a `<link rel=""dns-prefetch"" href=""..."" />`
to flush before most other content both on intial flush (Shell) and late
flushes. It will only emit one link per href.

On the client, this method will case the same kind of link to be
inserted into the document immediately (when called during render, not
during commit) if there is not already a matching element in the
document.

### `ReactDOM.preconnect(href: string, options?: { crossOrigin?: string
})`
In SSR this method will cause a `<link rel=""dns-prefetch"" href=""...""
[corssorigin=""...""] />` to flush before most other content both on
intial flush (Shell) and late flushes. It will only emit one link per
href + crossorigin combo.

On the client, this method will case the same kind of link to be
inserted into the document immediately (when called during render, not
during commit) if there is not already a matching element in the
document.
","['packages/react-dom-bindings/src/client/ReactDOMFloatClient.js', 'packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom-bindings/src/shared/ReactDOMFloat.js', 'packages/react-dom/index.classic.fb.js', 'packages/react-dom/index.experimental.js', 'packages/react-dom/index.js', 'packages/react-dom/index.modern.fb.js', 'packages/react-dom/index.stable.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-dom/src/client/ReactDOM.js']",No mechanism exists to prioritize DNS prefetching and preconnection in both Server-Side Rendering (SSR) and client-rendering to increase page load performance.
b14d7fa4b88dad5f0017d084e462952c700aa2ad,1670597032,"Add support for setNativeProps to Fabric (#25737)

Add support for `setNativeProps` in Fabric to make migration to the new
architecture easier. The React Native part of this has already landed in
the core and iOS in
https://github.com/facebook/react-native/commit/1d3fa40c59b234f21f516db85c322ec0ed0311e0.

It is still recommended to move away from `setNativeProps` because the
API will not work with future features.
","['packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/InitializeNativeFabricUIManager.js', 'packages/react-native-renderer/src/__tests__/ReactFabricHostComponent-test.internal.js', 'scripts/flow/react-native-host-hooks.js']","Fabric architecture lacks support for `setNativeProps`, making the migration process more challenging."
a5df18a9e5d7cc70c30ce144dcc291e9f64cb451,1568842682,"prevent firefox marking required textareas invalid (#16578)

* prevent firefox marking required textareas invalid

Bug was caused by an IE10/IE11 bugfix dealing with the placeholder attribute and textContent. Solved by avoiding the IE bugfix when textContent was empty.

Closes #16402

* more explicit conditional check for textContent

re: @philipp-spiess code review

* clarify textarea test fixture's expected result

better describe the behavior we are testing for
re: @philipp-spiess code review

","['fixtures/dom/src/components/fixtures/textareas/index.js', 'packages/react-dom/src/__tests__/ReactDOMTextarea-test.js', 'packages/react-dom/src/client/ReactDOMTextarea.js']",Firefox erroneously declares required textareas as invalid due to a bugfix intended for IE10/IE11 dealing with placeholder attribute and textContent.
7fc91f17c99fbbd1497737fb8cbd8f45cbfd6d48,1554918770,"React events: add onPressMove and pressRetentionOffset to Press (#15374)

This implementation differs from equivalents in React Native in the following ways:

1. A move during a press will not cancel onLongPress.
2. A move to outside the retention target will cancel the press and not
reactivate when moved back within the retention target.
","['packages/react-events/src/Press.js', 'packages/react-events/src/__tests__/Press-test.internal.js']",Press event in React does not align with React Native behavior: moves during a press do not cancel onLongPress and moving outside the retention target cancels the press but does not reactivate when moved back within retention target.
766a7a28a9a233b236a97166411a9242376df7a6,1611933775,"Improve React error message when mutable sources are mutated during render (#20665)

Changed previous error message from:
> Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.

To:
> Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.

Also added a DEV only warning about the unsafe side effect:
> A mutable source was mutated while the %s component was rendering. This is not supported. Move any mutations into event handlers or effects.

I think this is the best we can do without adding production overhead that we'd probably prefer to avoid.
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/__tests__/useMutableSource-test.internal.js', 'packages/react/src/ReactMutableSource.js', 'packages/shared/ReactTypes.js']",Mutation of mutable sources during rendering in React may lead to tearing or unsupported side effects that can potentially cause bugs.
c896cf9617626be54f4ef599578e6f8a3a874205,1605036004,"Set return pointer when reusing current tree (#20212)

* Do not fix return pointers during commit phase

In the commit phase, we should be able to assume that the `return`
pointers in the just-completed tree are consistent. The render phase
should be responsible for ensuring these are always correct.

I've removed the `return` pointer assignments from the render phase
traversal logic. This isn't all of them, only the ones added recently
during the effects refactor. The other ones have been around longer so
I'll leave those for a later clean up.

This breaks a few SuspenseList tests; I'll fix in the next commit.

* Set return pointer when reusing current tree

We always set the return pointer on freshly cloned, work-in-progress
fibers. However, we were neglecting to set them on trees that are reused
from current.

I fixed this in the same path of the complete phase where we reset the
fiber flags.

This is a code smell because it assumes the commit phase is never
concurrent with the render phase. Our eventual goal is to make fibers a
lock free data structure.

Will address further during refactor to alternate model.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js']","The return pointer isn't being set when current trees are reused, causing inconsistencies in the tree and failing SuspenseList tests. This issue arises especially when render phase occurs concurrently with the commit phase."
f9c0a454415172433b8b94eec94fc36b2461065c,1582769072,"Convert the rest of react-dom and react-test-renderer to Named Exports (#18145)

Nothing interesting here except that ReactShallowRenderer currently exports
a class with a static method instead of an object.

I think the public API is probably just meant to be createRenderer but
currently the whole class is exposed. So this means that we have to keep
it as default export. We could potentially also expose a named export for
createRenderer but that's going to cause compatibility issues.

So I'm just going to make that export default.

Unfortunately Rollup and Babel (which powers Jest) disagree on how to
import this. So to make it work I had to move the jest tests to imports.

This doesn't work with module resetting. Some tests weren't doing that
anyway and the rest is just testing ReactShallowRenderer so meh.
","['packages/react-dom/server.browser.js', 'packages/react-dom/server.js', 'packages/react-dom/server.node.js', 'packages/react-dom/src/__tests__/ReactTestUtils-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMServerBrowser.js', 'packages/react-dom/src/server/ReactDOMServerNode.js', 'packages/react-dom/src/test-utils/ReactTestUtils.js', 'packages/react-dom/test-utils.js', 'packages/react-dom/unstable-fizz.browser.js', 'packages/react-dom/unstable-fizz.js', 'packages/react-dom/unstable-fizz.node.js', 'packages/react-dom/unstable-native-dependencies.js', 'packages/react-server/src/ReactDOMServerFormatConfig.js', 'packages/react-test-renderer/index.js', 'packages/react-test-renderer/shallow.js', 'packages/react-test-renderer/src/ReactShallowRenderer.js', 'packages/react-test-renderer/src/ReactTestRenderer.js', 'packages/react-test-renderer/src/__tests__/ReactShallowRenderer-test.js', 'packages/react-test-renderer/src/__tests__/ReactShallowRendererHooks-test.js', 'packages/react-test-renderer/src/__tests__/ReactShallowRendererMemo-test.js']","ReactShallowRenderer exports a class with a static method instead of an object, creating compatibility issues and inconsistency in the handling of default exports. This also causes difficulties with Rollup and Babel (Jest's power supply), resulting in import issues and failed module resets in Jest tests."
7ca1d861e85868dfb4e5c1fc9db4db3d94cdefc1,1594139924,"[ESLint] Consistently treat optional chaining as regular chaining (#19273)

* Revert ""Fix ExhaustiveDeps ESLint rule throwing with optional chaining (#19260)""

This reverts commit 0f84b0f02b5579d780a9f54497007c4c84aaebb7.

* Re-add a test from #19260

* Remove all code for optional chaining support

* Consistently treat optional chaining as regular chaining

This is not ideal because our suggestions use normal chaining. But it gets rid of all current edge cases.

* Add more tests

* More consistency in treating normal and optional expressions

* Add regression tests for every occurrence of Optional*
","['packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js', 'packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js']","ESLint's ExhaustiveDeps rule encounters issues with optional chaining, causing discrepancies and edge cases compared to regular chaining."
ec67ee400c7d882ad0a285f4a5430a7caacf1764,1515524151,"Upgrade to ESLint 4.1 and add no-focused-tests rule (#11977)

* Runs a lint rule on tests only that errors if it sees `fdescribe` or `fit` calls.
* Changes `file:` to `link:` for our custom, internal rules (just to simplify updating these in the future).
* Updates `eslint` from 3.10 -> 4.1 and `babel-eslint` from 7.1 -> 8.0 so that we can run this new rule only against tests.
","['.eslintrc.js', 'scripts/eslint-rules/index.js']",Existing ESLint version (3.10) does not check for `fdescribe` or `fit` calls in test files which could lead to inadvertent focus on specific tests.
7ccb37161ffcbea33d6ede1397098faa567751f3,1526572665,"Temporary fix for grabbing wrong rAF polyfill in ReactScheduler (#12837)

* Temporary fix for grabbing wrong rAF polyfill in ReactScheduler

**what is the change?:**
For now...
We need to grab a slightly different implementation of rAF internally at
FB than in Open Source. Making rAF a dependency of the ReactScheduler
module allows us to fork the dependency at FB.

NOTE: After this lands we have an alternative plan to make this module
separate from React and require it before our Facebook timer polyfills
are applied. But want to land this now to keep master in a working state
and fix bugs folks are seeing at Facebook.

Thanks @sebmarkbage @acdlite and @sophiebits for discussing the options
and trade-offs for solving this issue.

**why make this change?:**
This fixes a problem we're running into when experimenting with
ReactScheduler internally at Facebook, **and* it's part of our long term
plan to use dependency injection with the scheduler to make it easier to
test and adjust.

**test plan:**
Ran tests, lint, flow, and will manually test when syncing into
Facebook's codebase.

**issue:**
See internal task T29442940

* ran prettier

","['packages/react-scheduler/src/ReactScheduler.js', 'packages/shared/forks/requestAnimationFrameForReact.www.js', 'packages/shared/requestAnimationFrameForReact.js', 'scripts/rollup/forks.js']","The current implementation of ReactScheduler is grabbing the wrong requestAnimationFrame (rAF) polyfill, causing issues and bugs during internal Facebook experiments."
71c8759cebfadd09cf58748eb1963fe23ec11e4f,1556062855,"Measure callback timeout relative to current time (#15479)

Fixes a bug where the timeout passed to `scheduleCallback` represented
an absolute timestamp, instead of the amount of time until that
timestamp is reached. The solution is to subtract the current time
from the expiration.

The bug wasn't caught by other tests because we use virtual times that
default to 0, and most tests don't advance time.

I also moved the `initialTimeMs` offset to the
`SchedulerWithReactIntegration` module so that we don't have to remember
to subtract the offset every time. (We should consider upstreaming this
to the Scheduler package.)
","['packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/SchedulerWithReactIntegration.js', 'packages/react-reconciler/src/__tests__/ReactExpiration-test.internal.js']","The `scheduleCallback` function inaccurately interprets timeout as an absolute timestamp, instead of the duration till the timestamp is reached."
4729ff6d1f191902897927ff4ecd3d1f390177fa,1638496183,"Implement identifierPrefix option for useId (#22855)

When an `identifierPrefix` option is given, React will add it to the
beginning of ids generated by `useId`.

The main use case is to avoid conflicts when there are multiple React
roots on a single page.

The server API already supported an `identifierPrefix` option. It's not
only used by `useId`, but also for React-generated ids that are used to
stitch together chunks of HTML, among other things. I added a
corresponding option to the client.

You must pass the same prefix option to both the server and client.
Eventually we may make this automatic by sending the prefix from the
server as part of the HTML stream.
","['packages/react-art/src/ReactART.js', 'packages/react-dom/src/__tests__/ReactDOMUseId-test.js', 'packages/react-dom/src/client/ReactDOMLegacy.js', 'packages/react-dom/src/client/ReactDOMRoot.js', 'packages/react-dom/src/server/ReactDOMServerFormatConfig.js', 'packages/react-dom/src/server/ReactDOMServerLegacyFormatConfig.js', 'packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactNativeRenderer.js', 'packages/react-native-renderer/src/server/ReactNativeServerFormatConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/ReactFiberReconciler.new.js', 'packages/react-reconciler/src/ReactFiberReconciler.old.js', 'packages/react-reconciler/src/ReactFiberRoot.new.js', 'packages/react-reconciler/src/ReactFiberRoot.old.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js', 'packages/react-server/src/ReactFizzHooks.js', 'packages/react-server/src/forks/ReactServerFormatConfig.custom.js', 'packages/react-test-renderer/src/ReactTestRenderer.js']",Multiple React roots on a single page result in conflicts due to non-unique ids being generated by `useId`. The client API currently lacks an `identifierPrefix` option supported by the server.
e2fd460cca3b11fa0f5505f324043a9b2d9db894,1613507891,"Bailout in sync task if work is not sync (#20813)

Because we don't cancel synchronous tasks, sometimes more than one
synchronous task ends up being scheduled. This is an artifact of the
fact that we have two different lanes that schedule sync tasks: discrete
and sync. So what can happen is that a discrete update gets scheduled,
then a sync update right after that. Because sync is encoded as higher
priority than discrete, we schedule a second sync task. And since we
don't cancel the first one, there are now two separate sync tasks.

As a next step, what we should do is merge InputDiscreteLane with
SyncLane, then (I believe) this extra bailout wouldn't be necessary,
because there's nothing higher priority than sync that would cause us to
cancel it. Though we may want to add logging to be sure.
","['packages/react-dom/src/events/plugins/__tests__/SimpleEventPlugin-test.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","Scheduling of more than one synchronous task due to different lanes (discrete and sync) is leading to multiple separate sync tasks, potentially resulting in inefficient resource utilization."
ce126fbb231f9110151b4c93cff765fd882a9f64,1556062865,"Fix priority inference of next level of work (#15478)

Bugfix for `inferPriorityFromExpirationTime` function. It happened to
work in our existing tests because we use virtual time.

Flow would have caught this if expiration times were an opaque type. We
should consider that in the future. (The downside of opaque types is
that all operations would have to go through helper functions, which may
or may not get inlined by Closure.)
","['packages/react-reconciler/src/ReactFiberExpirationTime.js', 'packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.internal.js']",The `inferPriorityFromExpirationTime` function displays incorrect priority inference of the next work level due to the reliance on virtual time in existing tests.
44e5f5e6451cf192af5dee3aa1f3a87119fc231e,1582134271,"Add fiber summary tooltip to devtools profiling (#18048)

* Add tooltip component

* Separate logic of ProfilerWhatChanged to a component

* Add hovered Fiber info tooltip component

* Add flame graph chart tooltip

* Add commit ranked list tooltip

* Fix flow issues

* Minor improvement in filter

* Fix flickering issue

* Resolved issues on useCallbacks and mouse event listeners

* Fix lints

* Remove unnecessary useCallback

","['packages/react-devtools-shared/src/devtools/views/Components/ProfilerWhatChanged.js', 'packages/react-devtools-shared/src/devtools/views/Components/Tooltip.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/ChartNode.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/CommitFlamegraph.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/CommitFlamegraphListItem.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/CommitRanked.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/CommitRankedListItem.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/HoveredFiberInfo.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/SidebarSelectedFiberInfo.js']","The DevTools profiling lacks a fiber summary tooltip, causing information to not be easily accessible and viewable. A flickering issue is noticed during profiling."
8d0942242476024ac74d4ca2fcac9824b3124dc8,1521551219,"Fix an infinite loop in new context (#12402)

* Add a regression test for the context infinite loop

* Fix the bug

We set .return pointer inside the loop, but the top-level parent-child relationship happens outside.

This ensures the top-level parent's child points to the right copy of the parent.

Otherwise we may end up in a situation where (workInProgress === nextFiber) is never true and we loop forever.

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/__tests__/ReactNewContext-test.internal.js']","There is an infinite loop in the new context due to incorrect setting of .return pointer, which prevents (workInProgress === nextFiber) from being true."
d2e914ab4eb265bec82c01a083f608208f50d833,1598060552,"Remove remaining references to effect list (#19673)

* Remove `firstEffect` null check

This is the last remaining place where the effect list has semantic
implications.

I've replaced it with a check of `effectTag` and `subtreeTag`, to see
if there are any effects in the whole tree. This matches the semantics
of the old check. However, I think only reason this optimization exists
is because it affects profiling. We should reconsider whether this
is necessary.

* Remove remaining references to effect list

We no longer use the effect list anywhere in our implementation. It's
been replaced by a recursive traversal in the commit phase.

This removes all references to the effect list in the new fork.
","['packages/react-reconciler/src/ReactChildFiber.new.js', 'packages/react-reconciler/src/ReactFiber.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.new.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.new.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/__tests__/SchedulingProfiler-test.internal.js']","References to the deprecated 'effect list' remain in the codebase, and there's an unnecessary null check to `firstEffect` which could be optimized or removed."
e1c7e651feb7d8f0339db5720cfb61b036ee7290,1582738115,"Update ReactDebugHooks to handle composite hooks (#18130)

The useState hook has always composed the useReducer hook. 1:1 composition like this is fine.

But some more recent hooks (e.g. useTransition, useDeferredValue) compose multiple hooks internally. This breaks react-debug-tools because it causes off-by-N errors when the debug tools re-renders the function.

For example, if a component were to use the useTransition and useMemo hooks, the normal hooks dispatcher would create a list of first state, then callback, then memo hooks, but the debug tools package would expect a list of transition then memo. This can break user code and cause runtime errors in both the react-debug-tools package and in product code.

This PR fixes the currently broken hooks by updating debug tools to be aware of the composite hooks (how many times it should call nextHook essentially) and adds tests to make sure they don't get out of sync again. We'll need to add similar tests for future composite hooks (like useMutableSource #18000).
","['packages/react-debug-tools/src/ReactDebugHooks.js', 'packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js']","ReactDebugHooks does not correctly handle hooks that compose multiple internal hooks (e.g. useTransition, useDeferredValue), causing off-by-N errors during re-rendering in debug tools and potential runtime errors in user code."
9a52cc8bcd580238f4a8b12036e698823847fd65,1677948281,"Convert ReactLazy-test to waitFor pattern (#26304)

I'm in the process of codemodding our test suite to the waitFor pattern.
See #26285 for full context.

This module required a lot of manual changes so I'm doing it as its own
PR. The reason is that most of the tests involved simulating an async
import by wrapping them in `Promise.resolve()`, which means they would
immediately resolve the next time the microtask queue was flushed. I
rewrote the tests to resolve the simulated import explicitly.

While converting these tests, I also realized that the `waitFor` helpers
weren't properly waiting for the entire microtask queue to recursively
finish — if a microtask schedules another microtask, the subsequent one
wouldn't fire until after `waitFor` had resolved. To fix this, I used
the same strategy as `act` — wait for a real task to finish before
proceeding, such as a message event.
","['packages/internal-test-utils/ReactInternalTestUtils.js', 'packages/internal-test-utils/enqueueTask.js', 'packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js']","Tests in the ReactLazy module, which simulate async imports by immediately resolving the microtask queue wrapped in Promise.resolve(), are not effectively handled with the 'waitFor' pattern, causing microtask queues to finish prematurely."
d9659e499eba3089b098c32cf112b7a067bdddf1,1539917832,"Lazy components must use React.lazy (#13885)

Removes support for using arbitrary promises as the type of a React
element. Instead, promises must be wrapped in React.lazy. This gives us
flexibility later if we need to change the protocol.

The reason is that promises do not provide a way to call their
constructor multiple times. For example:

const promiseForA = new Promise(resolve => {
  fetchA(a => resolve(a));
});

Given a reference to `promiseForA`, there's no way to call `fetchA`
again. Calling `then` on the promise doesn't run the constructor again;
it only attaches another listener.

In the future we will likely introduce an API like `React.eager` that
is similar to `lazy` but eagerly calls the constructor. That gives us
the ability to call the constructor multiple times. E.g. to increase
the priority, or to retry if the first operation failed.
","['packages/react-dom/src/__tests__/ReactServerRendering-test.js', 'packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js', 'packages/react-dom/src/server/ReactPartialRenderer.js', 'packages/react-reconciler/src/ReactFiber.js', 'packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/ReactFiberContext.js', 'packages/react-reconciler/src/ReactFiberLazyComponent.js', 'packages/react-reconciler/src/ReactFiberReconciler.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactPure-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.internal.js', 'packages/react/src/ReactLazy.js', 'packages/shared/ReactLazyComponent.js', 'packages/shared/ReactSymbols.js', 'packages/shared/getComponentName.js', 'packages/shared/isValidElementType.js']","Using arbitrary promises as the type of a React element causes issues as their constructors cannot be called multiple times. This restricts re-calls, increases priority, and retry attempts on operation failures."
d3e0a3aaf33dd0134a2c5296db8b6ca43cab968e,1528460302,"Fix jest/matchers/toWarnDev expected, actual order for jest-diff (#12285) (#12288)

`toWarnDev` calls `jestDiff(a, b)` which calls `diffStrings(a, b)` where by default `a` is annotated as `'Expected'` (green), `b` as `'Received'` (red).

So the first argument passed into `jestDiff` should be the expected message, the second should be the actual message.
It was vice versa previously.

- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54
- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93
- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251
",['scripts/jest/matchers/toWarnDev.js'],"The `toWarnDev` function is calling `jestDiff` with the actual message as the first argument and expected message as the second, contrary to `jestDiff`'s expected parameter order."
e316f785526e503eceed1ae33b7a06440084b9c9,1611720160,"RN: Implement `sendAccessibilityEvent` in RN Renderer that proxies between Fabric/non-Fabric (#20554)

* RN: Implement `sendAccessibilityEvent` on HostComponent

Implement `sendAccessibilityEvent` on HostComponent for Fabric and non-Fabric RN.

Currently the Fabric version is a noop and non-Fabric uses
AccessibilityInfo directly. The Fabric version will be updated once
native Fabric Android/iOS support this method in the native UIManager.

* Move methods out of HostComponent

* Properly type dispatchCommand and sendAccessibilityEvent handle arg

* Implement Fabric side of sendAccessibilityEvent

* Add tests: 1. Fabric->Fabric, 2. Paper->Fabric, 3. Fabric->Paper, 4. Paper->Paper

* Fix typo: ReactFaricEventTouch -> ReactFabricEventTouch

* fix flow types

* prettier
","['packages/react-native-renderer/src/ReactFabric.js', 'packages/react-native-renderer/src/ReactNativeRenderer.js', 'packages/react-native-renderer/src/ReactNativeTypes.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/InitializeNativeFabricUIManager.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/UIManager.js', 'packages/react-native-renderer/src/__mocks__/react-native/Libraries/ReactPrivate/legacySendAccessibilityEvent.js', 'packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactFabricAndNative-test.internal.js', 'packages/react-native-renderer/src/__tests__/ReactNativeMount-test.internal.js', 'scripts/flow/react-native-host-hooks.js']","`sendAccessibilityEvent` method is unimplemented for both Fabric and non-Fabric React Native, leading to inability to maintain better cross-platform accessibility support."
0f6e3cd61cf4a5a1491bb3c92780936aebc2a146,1566507492,"[Scheduler] Profiler Features (second try) (#16542)

* Revert ""Revert ""[Scheduler] Profiling features (#16145)"" (#16392)""

This reverts commit 4ba1412305be3c77b625a70e3c0b9a8638626bd0.

* Fix copy paste mistake

* Remove init path dependency on ArrayBuffer

* Add a regression test for cancelling multiple tasks

* Prevent deopt from adding isQueued later

* Remove pop() calls that were added for profiling

* Verify that Suspend/Unsuspend events match up in tests

This currently breaks tests.

* Treat Suspend and Resume as exiting and entering work loop

Their definitions used to be more fuzzy. For example, Suspend didn't always fire on exit, and sometimes fired when we did _not_ exit (such as at task enqueue).

I chatted to Boone, and he's saying treating Suspend and Resume as strictly exiting and entering the loop is fine for their use case.

* Revert ""Prevent deopt from adding isQueued later""

This reverts commit 9c30b0b695d81e9c43b296ab93d895e4416ef713.

Unnecessary because GCC

* Start counter with 1

* Group exports into unstable_Profiling namespace

* No catch in PROD codepath

* No label TODO

* No null checks

","['.eslintrc.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalPerf-test.internal.js', 'packages/scheduler/npm/umd/scheduler.development.js', 'packages/scheduler/npm/umd/scheduler.production.min.js', 'packages/scheduler/npm/umd/scheduler.profiling.min.js', 'packages/scheduler/src/Scheduler.js', 'packages/scheduler/src/SchedulerFeatureFlags.js', 'packages/scheduler/src/SchedulerPriorities.js', 'packages/scheduler/src/SchedulerProfiling.js', 'packages/scheduler/src/__tests__/SchedulerDOM-test.js', 'packages/scheduler/src/__tests__/SchedulerProfiling-test.js', 'packages/scheduler/src/forks/SchedulerFeatureFlags.www.js', 'packages/scheduler/src/forks/SchedulerHostConfig.default.js', 'scripts/rollup/bundles.js', 'scripts/rollup/validate/eslintrc.cjs.js', 'scripts/rollup/validate/eslintrc.fb.js', 'scripts/rollup/validate/eslintrc.rn.js', 'scripts/rollup/validate/eslintrc.umd.js']","Suspension and resumption events in the work loop have fuzzy definitions, potentially causing tasks to be incorrectly suspended or not suspended on task enqueue, leading to test failures and unwanted behaviours in product codepath."
a1414e8949915c006bba411fa2949b304dd044ae,1548084947,"Double-render function components with Hooks in DEV in StrictMode (#14643)

* Double-render functions in strict mode

* Double-invoke first function component render too

* Mark TestRendererAsync test as internal and revert changes to it

TestRenderer is built with strict mode doublerender off.

We could change that but I'm not sure we want to. So I'll just flip the flag off for this test.

* Only double-invoke components using Hooks

* Revert unintentional change

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js']","In DEV StrictMode, function components with Hooks are not being double-rendered, and this is causing a deviation in the expected behavior."
14c2be8dac2d5482fda8a0906a31d239df8551fc,1646422726,"Rename Node SSR Callbacks to onShellReady/onAllReady and Other Fixes (#24030)

* I forgot to call onFatalError

I can't figure out how to write a test for this because it only happens
when there is a bug in React itself which would then be fixed if we found
it.

We're also covered by the protection of ReadableStream which doesn't leak
other errors to us.

* Abort requests if the reader cancels

No need to continue computing at this point.

* Abort requests if node streams get destroyed

This is if the downstream cancels is for example.

* Rename Node APIs for Parity with allReady

The ""Complete"" terminology is a little misleading because not everything
has been written yet. It's just ""Ready"" to be written now.

onShellReady
onShellError
onAllReady

* 'close' should be enough
","['fixtures/ssr/server/render.js', 'fixtures/ssr2/server/render.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMLegacyServerBrowser.js', 'packages/react-dom/src/server/ReactDOMLegacyServerNode.js', 'packages/react-noop-renderer/src/ReactNoopServer.js', 'packages/react-server/src/ReactFizzServer.js']","In Node SSR, absence of onFatalError handling and lack of aborting requests when reader cancels or streams get destroyed may lead to unwanted process continuation or errors. Also, there are incorrect naming conventions used for Node APIs."
bdd3d0807c6e9f417909bab93ffe9795128b04d8,1667002785,"Extract logic for detecting bad fallback to helper

Pure refactor, no change in behavior.

Extracts the logic for detecting whether a suspended component will
result in a ""bad"" Suspense fallback into a helper function. An example
of a bad Suspense fallback is one that causes already-visible content
to disappear.

I want to reuse this same logic in the work loop, too.

","['packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.new.js', 'packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js', 'packages/react-reconciler/src/ReactFiberSuspenseContext.new.js', 'packages/react-reconciler/src/ReactFiberSuspenseContext.old.js']",Visibility of content is compromised due to bad Suspense fallbacks in suspended components.
d121c67004a2e6b0bb5d341843663ef213f64863,1681413679,"Synchronously flush the transition lane scheduled in a popstate event (#26025)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Browsers restore state like forms and scroll position right after the
popstate event. To make sure the page work as expected on back or
forward button, we need to flush transitions scheduled in a popstate
synchronously, and only yields if it suspends.
This PR adds a new HostConfig method to check if `window.event ===
'popstate'`, and `scheduleMicrotask` if a transition is scheduled in a
`PopStateEvent`.

## How did you test this change?

yarn test
","['packages/react-art/src/ReactFiberConfigART.js', 'packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js', 'packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js', 'packages/react-native-renderer/src/ReactFiberConfigFabric.js', 'packages/react-native-renderer/src/ReactFiberConfigNative.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberRootScheduler.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js', 'packages/react-reconciler/src/forks/ReactFiberConfig.custom.js', 'packages/react-test-renderer/src/ReactFiberConfigTestHost.js']","Transitions scheduled in a popstate event are not being flushed synchronously, which may cause incorrect restoration of state like forms and scroll position when using back or forward buttons."
4c270375e931b133261495e3aa3f34407c5f79d8,1576684407,"Favor fallthrough switch instead of case statements for work tags (#17648)

* Favor fallthrough switch instead of case statements for work tags

Currently we're inconsistently handling tags that are only relevant
for certain flags. We should throw if the tag is not part of the built
feature flags. This should also mean that the case statements can be
eliminated.

We can achieve this effect by putting the invariant outside of the switch
and always early return in the switch. We already do this in beginWork.
This PR makes this consistent in other places.

* Fail if fundamental/scope tags are discovered without the flag on

","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js']",Inconsistent handling of tags that are only relevant for certain flags. Unexpected behavior may occur due to lack of validation for built feature flags.
d0d4280640967eca2faad0d96be6fca08ac846a6,1528723010,"Remove old reference to inst._wrapperState (#12987)

This commit removes a reference to inst._wrapperState, which was the
old way of tracking input state in the stack renderer.

This means we no longer need to pass the instance into the associated
function, allowing us to eliminate an exception for IE (and a TODO).
",['packages/react-dom/src/events/ChangeEventPlugin.js'],"Old references to inst._wrapperState in the stack render leads to unnecessary passing of instances into the function, causing an exception for Internet Explorer."
3d443cad74bdd8f3d617c39756afe02d51f8d636,1661303885,"Update fixtures/flight to webpack 5 (#25115)

* Add new flight fixture

* Move flight dir files

* Enable writeToDisk and distDir

* Move flight2 -> flight

* flight2 -> flight

* Remove unused files

* Remove unused files

* Run prettier

* Ignore eslint cache

Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>
","['fixtures/flight/config/env.js', 'fixtures/flight/config/jest/babelTransform.js', 'fixtures/flight/config/paths.js', 'fixtures/flight/config/pnpTs.js', 'fixtures/flight/config/webpack.config.js', 'fixtures/flight/config/webpack/persistentCache/createEnvironmentHash.js', 'fixtures/flight/config/webpackDevServer.config.js', 'fixtures/flight/scripts/build.js', 'fixtures/flight/scripts/start.js', 'packages/react-server-dom-webpack/src/ReactFlightWebpackNodeLoader.js']","The current flight fixture is not compatible with webpack 5, causing problems with unused files, file organization, and eslint cache."
fe6e0741286345edb2aa23784c21f8ea611ebdea,1648547114,"Fix usage of console.error to prevent transform (#24188)

We were suppressing the `react-internals/warning-args` lint rule
for the call to `console.error` in `defaultOnRecoverableError`.

As far as I could tell, the lint rule exists because on dev builds,
we replace all calls to `console.error` with [this error
function](https://github.com/facebook/react/blob/main/packages/shared/consoleWithStackDev.js#L31-L37)
which expects a format string + args and nothing else. We were trying
to pass in an `Error` object directly. After this commit's change,
we will still be passing an `Error` but the transform won't occur.
",['packages/react-dom/src/client/ReactDOMRoot.js'],"Direct usage of `console.error` with an `Error` object in `defaultOnRecoverableError` is causing unwanted transformation during dev builds, due to replacement with a specific error function."
a22fabc2a110a40ead576ada5b3bf66840e852ba,1542393567,"Reduce scheduler serialization overhead (#14249)

In the process of switching to MessageChannel, it seems the postMessage call was modified to pass `""*""` (originally the target origin value from `window.postMessage`). This actually ends up triggering serialization, whereas passing `undefined` bypasses.

To save some investigation, passing a Number like `0` still incurs serialization overhead - `undefined` has special behavior.
",['packages/scheduler/src/Scheduler.js'],The switch to MessageChannel results in unnecessary serialization overhead during postMessage calls due to an incorrect value being passed.
4de99b3ca689e8f995f90f199cd8d7bfb4b35eca,1645423661,"fix getSnapshot warning when a selector returns NaN (#23333)

* fix getSnapshot warning when a selector returns NaN

useSyncExternalStoreWithSelector delegate a selector as
getSnapshot of useSyncExternalStore.

* Fiber's use sync external store has a same issue

* Small nits

We use Object.is to check whether the snapshot value has been updated,
so we should also use it to check whether the value is cached.

Co-authored-by: Andrew Clark <git@andrewclark.io>
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/use-sync-external-store/src/__tests__/useSyncExternalStoreShared-test.js', 'packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js']",A warning is triggered in getSnapshot when a selector returns NaN due to the use of useSyncExternalStoreWithSelector.
919620b2935ca6bb8dfc96204a7cf8754c006240,1682381914,"Add stub for experimental_useFormStatus (#26719)

This wires up, but does not yet implement, an experimental hook called
useFormStatus. The hook is imported from React DOM, not React, because
it represents DOM-specific state — its return type includes FormData as
one of its fields. Other renderers that implement similar methods would
use their own renderer-specific types.

The API is prefixed and only available in the experimental channel.

It can only be used from client (browser, SSR) components, not Server
Components.
","['packages/react-dom/index.classic.fb.js', 'packages/react-dom/index.experimental.js', 'packages/react-dom/index.js', 'packages/react-dom/index.modern.fb.js', 'packages/react-dom/src/ReactDOMFormActions.js', 'packages/react-dom/src/__tests__/ReactDOMFizzForm-test.js', 'packages/react-dom/src/__tests__/ReactDOMForm-test.js', 'packages/react-dom/src/client/ReactDOM.js']","The system lacks an experimental hook named useFormStatus to represent DOM-specific state in client (browser, SSR) components, which currently can't support such features."
e1f96b82b4aff1d5c50d02c76df9c60e32dba408,1596114784,"Check PassiveStatic instead of Passive (#19489)

Saves us from having to set a flag on `current` during the layout phase.

Could result in some redundant traversal, since PassiveStatic includes
effects that don't need clean-up. But it's worth it to remove the work
from the layout phase.

While I was editing this, I also re-arranged it so that we check the
`effectTag` check before we check the `tag`, since the `effectTag` check
is the one that's more likely to fail.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js']",Flag setting on `current` during layout phase causing unnecessary work and possible redundant traversal due to inclusion of effects that don't require cleanup.
b943aeba88237265523ec8cdaf40d24a171681fc,1617932735,"Fix: Passive effect updates are never sync (#21215)

I screwed this up in #21082. Got confused by the < versus > thing again.

The helper functions are annoying, too, because I always forget the
intended order of the arguments. But they're still helpful because when
we refactor the type we only have the change the logic in one place.

Added a regression test.
","['packages/react-reconciler/src/ReactEventPriorities.new.js', 'packages/react-reconciler/src/ReactEventPriorities.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactUpdatePriority-test.js']",Passive effect updates are not in sync causing confusion with helper functions and leading to potential errors.
77f576ce16d02322eabc7a3e754f5c7fb44bc375,1510777041,"Bugfix: nextFlushedRoot should always be set when performing work (#11558)

Fixes an issue where performWorkOnRoot was called, but nextFlushedRoot
was not set. This happened in a special branch where we synchronously
flush newly mounted DOM trees outside the normal work loop.

Arguably, performWorkOnRoot should read from the globally assigned root
and expiration time instead of accepting arguments, since those
arguments are expected to be the same as the global values, anyway. I
decided against that since the global values could be null, so reading
from them would require extra null checks.
","['packages/react-dom/src/__tests__/ReactErrorBoundaries-test.js', 'packages/react-reconciler/src/ReactFiberScheduler.js']","When performWorkOnRoot is called, nextFlushedRoot might not be set, particularly when newly mounted DOM trees are synchronously flushed outside the normal work loop."
6ff4c9de1c1c8f47148b68651a9f8ab72b5d31f8,1561075854,"[Flare] Press: fix stale deactivation region state (#15931)

The responder region calculation logic wasn't updating the deactivation region
during the lifetime of an event instance, causing incorrect behaviour when the
current press ends outside the press target and if the press target has moved
since the last time the first-and-only time the deactivation region was
measured.
","['packages/react-events/src/Press.js', 'packages/react-events/src/__tests__/Press-test.internal.js']","The deactivation region for a press event instance isn't dynamically updated, leading to false behavior when a press ends outside the target and if the target has been moved after the region's initial measurement."
d9e00f795b77676fb14f2a3c6f421f48f73bec2a,1695410209,"Stop flowing and then abort if a stream is cancelled (#27405)

We currently abort a stream either it's explicitly told to abort (e.g.
by an abortsignal). In this case we still finish writing what we have as
well as instructions for the client about what happened so it can
trigger fallback cases and log appropriately.

We also abort a request if the stream itself cancels. E.g. if you can't
write anymore. In this case we should not write anything to the outgoing
stream since it's supposed to be closed already now. However, we should
still abort the request so that more work isn't performed and so that we
can log the reason for it to the onError callback.

We should also not do any work after aborting.

There we need to stop the ""flow"" of bytes - so I call stopFlowing in the
cancel case before aborting.

The tests were testing this case but we had changed the implementation
to only start flowing at initial read (pull) instead of start like we
used to. As a result, it was no longer covering this case. We have to
call reader.read() in the tests to start the flow so that we need to
cancel it.

We also were missing a final assertion on the error logs and since we
were tracking them explicitly the extra error was silenced.
","['packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/server/ReactDOMFizzServerBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzServerBun.js', 'packages/react-dom/src/server/ReactDOMFizzServerEdge.js', 'packages/react-dom/src/server/ReactDOMFizzServerNode.js', 'packages/react-dom/src/server/ReactDOMFizzStaticBrowser.js', 'packages/react-dom/src/server/ReactDOMFizzStaticEdge.js', 'packages/react-server-dom-esm/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerBrowser.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerEdge.js', 'packages/react-server-dom-webpack/src/ReactFlightDOMServerNode.js', 'packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js', 'packages/react-server/src/ReactFizzServer.js', 'packages/react-server/src/ReactFlightServer.js']","The stream continues to write to the outgoing stream even when the stream itself cancels, causing unnecessary work and potential errors even after aborting. Tests are not correctly covering these cases."
27b5699694f20220e0448f0ba3eb6bfa0d3a64ed,1644619917,"Simplify cache pool contexts (#23280)

The `pooledCache` variable always points to either `root.pooledCache`
or the stack cursor that is used to track caches that were resumed from
a previous render. We can get rid of it by reading from those instead.
This simplifies the code a lot and is harder to mess up, I think.
","['packages/react-reconciler/src/ReactFiberCacheComponent.new.js', 'packages/react-reconciler/src/ReactFiberCacheComponent.old.js', 'packages/react-reconciler/src/__tests__/ReactCache-test.js']","The code has unnecessary use of `pooledCache` variable, leading to complexity and possibility of errors due to parallel usage with `root.pooledCache` and relevant stack cursor."
911f92a44da540b3c60779b28745d050ddd21679,1639502176,"DevTools: Support mulitple DevTools instances per page (#22949)

This is being done so that we can embed DevTools within the new React (beta) docs.

The primary changes here are to `react-devtools-inline/backend`:
* Add a new `createBridge` API
* Add an option to the `activate` method to support passing in the custom bridge object.

The `react-devtools-inline` README has been updated to include these new methods.

To verify these changes, this commit also updates the test shell to add a new entry-point for multiple DevTools.

This commit also replaces two direct calls to `window.postMessage()` with `bridge.send()` (and adds the related Flow types).
","['packages/react-devtools-inline/src/backend.js', 'packages/react-devtools-inline/src/constants.js', 'packages/react-devtools-inline/src/frontend.js', 'packages/react-devtools-shared/src/backend/agent.js', 'packages/react-devtools-shared/src/bridge.js', 'packages/react-devtools-shell/src/app/devtools.js', 'packages/react-devtools-shell/src/multi/devtools.js', 'packages/react-devtools-shell/src/multi/left.js', 'packages/react-devtools-shell/src/multi/right.js', 'packages/react-devtools-shell/webpack.config.js']",There is a limitation in embedding multiple instances of DevTools in a single page due to restrictions in the current `react-devtools-inline/backend` API.
657698e48d5b093b4ea5a7684e26d3fdd16695f2,1680902048,"[Tests] `waitForThrow` should diff strings (#26568)

Currently, `waitForThrow` tries to diff the expected value against the
thrown value if it doesn't match. However if the expectation is a
string, we are not diffing against the thrown message. This commit makes
it so if we are matching against message we also diff against message.
",['packages/internal-test-utils/ReactInternalTestUtils.js'],"`waitForThrow` function is not diffing the expected string values against thrown message, causing mismatch issues."
19092ac8c354b92c2e0e27b73f391571ad452505,1628044220,"Re-add old Fabric Offscreen impl behind flag (#22018)

* Re-add old Fabric Offscreen impl behind flag

There's a chance that #21960 will affect layout in a way that we don't
expect, so I'm adding back the old implementation so we can toggle the
feature with a flag.

The flag should read from the ReactNativeFeatureFlags shim so that we
can change it at runtime. I'll do that separately.

* Import dynamic RN flags from external module

Internal feature flags that we wish to control with a GK can now be
imported from an external module, which I've called
""ReactNativeInternalFeatureFlags"".

We'll need to add this module to the downstream repo.

We can't yet use this in our tests, because we don't have a test
configuration that runs against the React Native feature flags fork. We
should set up that up the same way we did for www.
","['packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberHostConfigWithNoPersistence.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberThrow.old.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb-dynamic.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.native.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www-dynamic.js', 'packages/shared/forks/ReactFeatureFlags.www.js', 'scripts/flow/xplat.js', 'scripts/rollup/bundles.js', 'scripts/rollup/modules.js']",Potential changes in layout due to new implementation of Fabric Offscreen could produce unintended effects. Additional option to toggle between old and new implementations in runtime required for comparison and testing.
4f8ffec453c41fcb6e98cb4e003f7319bb1c81b9,1673805479,"Rejct toWarnDev if given callback throws (#26003)

## Summary

Should unblock https://github.com/facebook/react/pull/25970
If the callback for `toWarnDev` was `async` and threw, we didn't
ultimately reject the await Promise from the matcher. This resulted in
tests failing even though the failure was expected due to a test gate.

## How did you test this change?

- [x] tested in https://github.com/facebook/react/pull/25970 with `yarn
test --r=stable --env=development
packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js --watch`
- [x] `yarn test`
- [x] CI
",['scripts/jest/matchers/toWarnDev.js'],"'Matcher does not reject await Promise when `toWarnDev` callback is `async` and throws, leading to failing tests even if failure is expected.'"
34600f4fadf526028a21c94030510fbed20e4665,1626473139,"Refactor ""reappear"" logic into its own traversal (#21898)

When a Suspense boundary switches to its fallback state — or similarly,
when an Offscreen boundary switches from visible to hidden — we unmount
all its layout effects. When it resolves — or when Offscreen switches
back to visible — we mount them again. This ""reappearing"" logic
currently happens in the same commit phase traversal where we perform
normal layout effects.

I've changed it so that the ""reappear"" logic happens in its own
recurisve traversal that is separate from the commit phase one.

In the next step, I will do the same for the ""disappear"" logic that
currently lives in the `hideOrUnhideAllChildren` function.

There are a few reasons to model it this way, related to future
Offscreen features that we have planned. For example, we intend to
provide an imperative API to ""appear"" and ""reappear"" all the effects
within an Offscreen boundary. This API would be called from outside the
commit phase, during an arbitrary event. Which means it can't rely on
the regular commit phase — it's not part of a commit. This isn't the
only motivation but it illustrates why the separation makes sense.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']","Switching Suspense and Offscreen boundaries to fallback state or from visible to hidden unmounts all layout effects, with ""reappearing"" logic happening in the same commit phase traversal causing modelling compatibility issues for future Offscreen features."
9ecf84ed7ffb21c8746ecf227209c050d99393cd,1666030637,"Bugfix: Suspending in shell during discrete update (#25495)

Fixes a bug that happens when you suspend in the shell (the part of the
tree that is not wrapped in a Suspense boundary) during a
discrete update.

There were two underyling issues. One was just a mistake:
RootDidNotComplete needs to be handled in both renderRootConcurrent and
renderRootSync, but it was only handled in renderRootConcurrent. I did
it this way because I thought this path was unreachable during a sync
update, but I neglected to consider that renderRootSync is sometimes
called for non-concurrent lanes, like when recovering from an error, or
patching up a mutation to an external store.

After I fixed that oversight, the other issue is that we intentionally
error if the shell suspends during a sync update. The idea was that you
should either wrap the tree in a Suspense boundary, or you should mark
the update as a transition to allow React to suspend.

However, this did not take into account selective hydration, which can
force a sync render before anything has even committed. There's no way
in that case to wrap the update in startTransition.

Our solution for now is to remove the error that happens when you
suspend in the shell during a sync update — even for discrete updates.

We will likely revisit this in the future. One appealing possibility is
to commit the whole root in an inert state, as if it were a hidden
Offscreen tree.

Co-authored-by: Sebastian Markbåge <sebastian@calyptus.eu>

Co-authored-by: Sebastian Markbåge <sebastian@calyptus.eu>
","['packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberThrow.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js']","Synchronisation issues encountered during discrete updates when suspending in the shell, specifically with unwrapped Suspense boundaries, with misleading errors occurring during selective hydration and error recovery."
978fae4b4f6d5aa28887b530b5c9bf28b1e7b74b,1678161155,"[Float][Fiber] implement a faster hydration match for hoistable elements (#26154)

This PR is now based on #26256 

The original matching function for `hydrateHoistable` some challenging
time complexity since we built up the list of matchable nodes for each
link of that type and then had to check to exclusion. This new
implementation aims to improve the complexity

For hoisted title tags we match the first title if it is valid (not in
SVG context and does not have `itemprop`, the two ways you opt out of
hoisting when rendering titles). This path is much faster than others
and we use it because valid Documents only have 1 title anyway and if we
did have a mismatch the rendered title still ends up as the
Document.title so there is no functional degradation for misses.

For hoisted link and meta tags we track all potentially hydratable
Elements of this type in a cache per Document. The cache is refreshed
once each commit if and only if there is a title or meta hoistable
hydrating. The caches are partitioned by a natural key for each type
(href for link and content for meta). Then secondary attributes are
checked to see if the potential match is matchable.

For link we check `rel`, `title`, and `crossorigin`. These should
provide enough entropy that we never have collisions except is contrived
cases and even then it should not affect functionality of the page. This
should also be tolerant of links being injected in arbitrary places in
the Document by 3rd party scripts and browser extensions

For meta we check `name`, `property`, `http-equiv`, and `charset`. These
should provide enough entropy that we don't have meaningful collisions.
It is concievable with og tags that there may be true duplciates `<meta
property=""og:image:size:height"" content=""100"" />` but even if we did
bind to the wrong instance meta tags are typically only read from SSR by
bots and rarely inserted by 3rd parties so an adverse functional outcome
is not expected.
","['packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/client/ReactDOMComponentTree.js', 'packages/react-dom-bindings/src/client/ReactDOMFloatClient.js', 'packages/react-dom-bindings/src/client/ReactDOMHostConfig.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberHostConfigWithNoResources.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js']","The original implementation of hydration match for hoistable elements like title, link, and meta tags exhibits high time complexity which makes the rendering slow, especially for documents with numerous such elements."
d56947eb2c2a0d1599975b90a353b06b58c0e00c,1632275039,"Increase polling threshold for publish-prereleases (#22392)

The publish-preleases command prints the URL of the publish workflow
so that you can visit the page and follow along.

But it can take a few seconds before the workflow ID is available, after
you create the pipeline. So the script polls the workflow endpoint
until it's available.

The current polling limit is too low so I increased it.

I also updated the error message to provide more info.
",['scripts/release/publish-using-ci-workflow.js'],"The current polling limit for retrieving the workflow ID after creating the pipeline in the publish-prereleases command is insufficient, causing an unnecessary delay."
2c59076d26e6b5ffb39dab82e1cc0decb6ed30ae,1534276293,"Warn when ""false"" or ""true"" is the value of a boolean DOM prop (#13372)

* Warn when the string ""false"" is the value of a boolean DOM prop

* Only warn on exact case match for ""false"" in DOM boolean props

* Warn on string ""true"" as well as ""false"" in DOM boolean props

* Clarify warnings on ""true"" / ""false"" values in DOM boolean props

","['packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js', 'packages/react-dom/src/shared/ReactDOMUnknownPropertyHook.js']","Using string ""false"" or ""true"" as the value of a boolean DOM prop does not trigger an error, leading to potential misuse."
78e816032c8af962343abbf384e06f3e9bae9269,1582319513,"Don't warn about unmounted updates if pending passive unmount (#18096)

I recently landed a change to the timing of passive effect cleanup functions during unmount (see #17925). This change defers flushing of passive effects for unmounted components until later (whenever we next flush pending passive effects).

Since this change increases the likelihood of a (not actionable) state update warning for unmounted components, I've suppressed that warning for Fibers that have scheduled passive effect unmounts pending.
","['packages/react-reconciler/src/ReactFiberWorkLoop.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.internal.js']","The deferment of passive effects flushing during unmount increases the likelihood of state update warnings for unmounted components, even when they aren't actionable."
b433c379d55d9684945217c7d375de1082a1abb8,1681840172,"Fix input tracking bug (#26627)

In
https://github.com/facebook/react/pull/26573/commits/2019ddc75f448292ffa6429d7625514af192631b,
we changed to set .defaultValue before .value on updates. In some cases,
setting .defaultValue causes .value to change, and since we only set
.value if it has the wrong value, this resulted in us not assigning to
.value, which resulted in inputValueTracking not knowing the right
value. See new test added.

My fix here is to (a) move the value setting back up first and (b)
narrowing the fix in the aforementioned PR to newly remove the value
attribute only if it defaultValue was previously present in props.

The second half is necessary because for types where the value property
and attribute are indelibly linked (hidden checkbox radio submit image
reset button, i.e. spec modes default or default/on from
https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default),
we can't remove the value attribute after setting .value, because that
will undo the assignment we just did! That is, not having (b) makes all
of those types fail to handle updating props.value.

This code is incredibly hard to think about but I think this is right
(or at least, as right as the old code was) because we set .value here
only if the nextProps.value != null, and we now remove defaultValue only
if lastProps.defaultValue != null. These can't happen at the same time
because we have long warned if value and defaultValue are simultaneously
specified, and also if a component switches between controlled and
uncontrolled.

Also, it fixes the test in https://github.com/facebook/react/pull/26626.
","['packages/react-dom-bindings/src/client/ReactDOMComponent.js', 'packages/react-dom-bindings/src/client/ReactDOMInput.js', 'packages/react-dom/src/__tests__/DOMPropertyOperations-test.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js']",Setting .defaultValue before .value on updates is causing incorrect value assignment and making inputValueTracking not recognize the correct value. This problem affects input types where the value property and attribute are indelibly linked.
393c452e39a72932af734c7c25998b48a20698f7,1605019230,"Add ""nested-update"" phase to Profiler API (#20163)

Background:
State updates that are scheduled in a layout effect (useLayoutEffect or componentDidMount / componentDidUpdate) get processed synchronously by React before it yields to the browser to paint. This is done so that components can adjust their layout (e.g. position and size a tooltip) without any visible shifting being seen by users. This type of update is often called a ""nested update"" or a ""cascading update"".

Because they delay paint, nested updates are considered expensive and should be avoided when possible. For example, effects that do not impact layout (e.g. adding event handlers, logging impressions) can be safely deferred to the passive effect phase by using useEffect instead.

This PR updates the Profiler API to explicitly flag nested updates so they can be monitored for and avoided when possible.

Implementation:
I considered a few approaches for this.

Add a new callback (e.g. onNestedUpdateScheduled) to the Profiler that gets called when a nested updates gets scheduled.
Add an additional boolean parameter to the end of existing callbacks (e.g. wasNestedUpdate).
Update the phase param to add an additional variant: ""mount"", ""update"", or ""nested-update"" (new).
I think the third option makes for the best API so that's what I've implemented in this PR.

Because the Profiler API is stable, this change will need to remain behind a feature flag until v18. I've turned the feature flag on for Facebook builds though after confirming that Web Speed does not currently make use of the phase parameter.

Quirks:
One quirk about the implementation I've chosen is that errors thrown during the layout phase are also reported as nested updates. I believe this is appropriate since these errors get processed synchronously and block paint. Errors thrown during render or from within passive effects are not affected by this change.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/ReactProfilerTimer.new.js', 'packages/react-reconciler/src/ReactProfilerTimer.old.js', 'packages/react/src/__tests__/ReactProfiler-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.native.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","The Profiler API lacks the ability to flag and monitor nested updates, which are state updates processed synchronously by React that can delay painting and are considered expensive."
d289d4b634749861199556e42174a3f4a3ce2b16,1515092250,"Update to Jest 22 (#11956)

* Bump deps to Jest 22

* Prevent jsdom from logging intentionally thrown errors

This relies on our existing special field that we use to mute errors.
Perhaps, it would be better to instead rely on preventDefault() directly.
I outlined a possible strategy here: https://github.com/facebook/react/issues/11098#issuecomment-355032539

* Update snapshots

* Mock out a method called by ReactART that now throws

* Calling .click() no longer works, dispatch event instead

* Fix incorrect SVG element creation in test

* Render SVG elements inside <svg> to avoid extra warnings

* Fix range input test to use numeric value

* Fix creating SVG element in test

* Replace brittle test that relied on jsdom behavior

The test passed in jsdom due to its implementation details.

The original intention was to test the mutation method, but it was removed a while ago.

Following @nhunzaker's suggestion, I moved the tests to ReactDOMInput and adjusted them to not rely on implementation details.

* Add a workaround for the expected extra client-side warning

This is a bit ugly but it's just two places. I think we can live with this.

* Only warn once for mismatches caused by bad attribute casing

We used to warn both about bad casing and about a mismatch.
The mismatch warning was a bit confusing. We didn't know we warned twice because jsdom didn't faithfully emulate SVG.

This changes the behavior to only leave the warning about bad casing if that's what caused the mismatch.
It also adjusts the test to have an expectation that matches the real world behavior.

* Add an expected warning per comment in the same test

","['packages/react-art/src/__tests__/ReactART-test.js', 'packages/react-dom/src/__tests__/DOMPropertyOperations-test.js', 'packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/__tests__/ReactDOMInput-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js', 'packages/react-dom/src/__tests__/utils/ReactDOMServerIntegrationTestUtils.js', 'packages/react-dom/src/__tests__/validateDOMNesting-test.js', 'packages/react-dom/src/client/ReactDOMFiberComponent.js', 'packages/react-dom/src/events/__tests__/ChangeEventPlugin-test.js', 'scripts/jest/setupEnvironment.js']","Upgrading to Jest 22 has caused various test failures and excessive warnings due to changes in jsdom behavior, SVG element creation, method calls, and attribute mismatch handling."
df061b396644bb7c27ea76bb27ae09784ce6444b,1695050721,"[Fizz] Don't bail out of flushing if we still have pending root tasks (#27385)

The idea for this check is that we shouldn't flush anything before we
flush the shell. That may or may not hold true in future formats like
RN.

It is a problem for resuming because with resuming it's possible to have
root tasks that are used for resuming but the shell was already flushed
so we can have completed boundaries before the shell has fully resumed.
What matters is whether the parent has already flushed or not.

It's not technically necessary to bail early because there won't be
anything in partialBoundaries or completedBoundaries because nothing
gets added there unless the parent has already flushed.

It's not exactly slow to have to check the length of three arrays so
it's probably not a big deal.

Flush partials in an early preamble needs further consideration
regardless.
",['packages/react-server/src/ReactFizzServer.js'],"Flushing process prematurely halts if there are pending root tasks, even when the shell has already been flushed and no partial or completed boundaries are present, causing issues with resuming."
49eba01930e9e1f331b34967fca65d5a0ba62846,1695747579,"[Fizz][Float] Refactor Resources  (#27400)

Refactors Resources to have a more compact and memory efficient
struture. Resources generally are just an Array of chunks. A resource is
flushed when it's chunks is length zero. A resource does not have any
other state.

Stylesheets and Style tags are different and have been modeled as a unit
as a StyleQueue. This object stores the style rules to flush as part of
style tags using precedence as well as all the stylesheets associated
with the precedence. Stylesheets still need to track state because it
affects how we issue boundary completion instructions. Additionally
stylesheets encode chunks lazily because we may never write them as html
if they are discovered late.

The preload props transfer is now maximally compact (only stores the
props we would ever actually adopt) and only stores props for
stylesheets and scripts because other preloads have no resource
counterpart to adopt props into. The ResumableState maps that track
which keys have been observed are being overloaded. Previously if a key
was found it meant that a resource already exists (either in this render
or in a prior prerender). Now we discriminate between null and object
values. If map value is null we can assume the resource exists but if it
is an object that represents a prior preload for that resource and the
resource must still be constructed.
","['packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js', 'packages/react-dom-bindings/src/server/ReactFizzConfigDOMLegacy.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticBrowser-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticFloat-test.js', 'packages/react-dom/src/__tests__/ReactDOMFizzStaticNode-test.js', 'packages/react-dom/src/__tests__/ReactDOMFloat-test.js', 'packages/react-dom/src/shared/ReactDOMTypes.js', 'packages/react-dom/src/test-utils/FizzTestUtils.js', 'packages/react-server-dom-fb/src/__tests__/ReactDOMServerFB-test.internal.js']","Resources possess inefficient structure causing memory issues, with Stylesheets and Style tags exhibiting distinct behavior. On top of this, map tracking for observed keys is suboptimal and causes confusion between preloaded and yet-to-be-constructed resources."
f3109ad8a7ddf7a162e7c9a050ffe6c3efb75491,1558548854,"Parallelize CircleCI jobs using workflows (#15704)

Updates the CircleCI config to use the workflows features to run jobs in
parallel, instead of the `parallelism` option. This change alone doesn't
improve the overall build time much, since almost all of the total time
is spent running the Rollup script, which runs entirely sequentially.
But it does improve reporting, and should make it easier to add
additional parallel jobs in the future.
",['scripts/circleci/test_entry_point.sh'],"Current CircleCI config uses `parallelism` option leading to sequential execution of jobs, notably the Rollup script, causing inefficiency in overall build time and difficulty in adding future parallel jobs."
7c150a80784ef7bcc08c25a150bc869a0e0f0846,1510329200,"Refactor SyntheticClipboardEvent tests to only use the public API (#11365)

* Refactor SyntheticClipboardEvent tests to only use the public API

* Replace local document creation by document body reset on each test case execution

* Set up and tear down container separately

* Tweak test assertion logic for clarity

* Remove simulate abstraction and create events directly

* Ensure the test covers IE8 behavior

* Verify that persistence works

",['packages/react-dom/src/events/__tests__/SyntheticClipboardEvent-test.js'],"SyntheticClipboardEvent tests rely on non-public API and locally created documents, making test setup complex and possibly missing checks for certain environment conditions like IE8 behavior and persistence aspects."
825c3021f0477bf8bd4b57693f3303078e7c77db,1615994322,"Don't delete trailing mismatches during hydration at the root (#21021)

* Don't delete any trailing nodes in the container during hydration error

* Warn when an error during hydration causes us to clear the container

* Encode unfortunate case in test

* Wrap the root for tests that are applicable to nested cases

* Now we can pipe Fizz into a container

* Grammatical fix
","['packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationFragment-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js', 'packages/react-dom/src/__tests__/ReactDOMServerIntegrationModes-test.js', 'packages/react-dom/src/__tests__/ReactMount-test.js', 'packages/react-dom/src/__tests__/ReactRenderDocument-test.js', 'packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.new.js', 'packages/react-reconciler/src/ReactFiberHydrationContext.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/useMutableSourceHydration-test.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js']",Hydration errors cause unintentional deletion of trailing nodes in the root container.
27c9c95e23ddedb9163373950e364dd62038f6c0,1624494764,"act: Bypass microtask for ""default sync"" updates (#21740)

When wrapping an update in act, instead of scheduling a microtask,
we can add the task to our internal queue.

The benefit is that the user doesn't have to await the act call. We can
flush the work synchronously. This doesn't account for microtasks that
are scheduled in userspace, of course, but it at least covers
React's usage.
","['packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","""act"" calls require awaiting, as it schedules a microtask for ""default sync"" updates. Doesn't cover the use cases where React uses microtasks."
1e3cd332a015e312149efa36eb81c7523411cc2d,1524522346,"Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag (#12648)

* Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag

**what is the change?:**
Removes the feature flag 'alwaysUseRequestIdleCallbackPolyfill', such
that we **always** use the polyfill for requestIdleCallback.

**why make this change?:**
We have been testing this feature flag at 100% for some time internally,
and determined it works better for React than the native implementation.
Looks like RN was overriding the flag to use the native when possible,
but since no RN products are using 'async' mode it should be safe to
switch this flag over for RN as well.

**test plan:**
We have already been testing this internally for some time.

**issue:**
internal task t28128480

* fix mistaken conditional

* Add mocking of rAF, postMessage, and initial test for ReactScheduler

**what is the change?:**
- In all tests where we previously mocked rIC or relied on native
mocking which no longer works, we are now mocking rAF and postMessage.
- Also adds a basic initial test for ReactScheduler.
NOTE -> we do plan to write headless browser tests for ReactScheduler!
This is just an initial test, to verify that it works with the mocked
out browser APIs as expected.

**why make this change?:**
We need to mock out the browser APIs more completely for the new
'ReactScheduler' to work in our tests. Many tests are depending on it,
since it's used at a low level.

By mocking the browser APIs rather than the 'react-scheduler' module, we
enable testing the production bundles. This approach is trading
isolation for accuracy. These tests will be closer to a real use.

**test plan:**
run the tests :)

**issue:**
internal task T28128480

","['packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.internal.js', 'packages/react-dom/src/__tests__/ReactDOMRoot-test.js', 'packages/react-dom/src/events/__tests__/ChangeEventPlugin-test.internal.js', 'packages/react-dom/src/events/__tests__/SimpleEventPlugin-test.internal.js', 'packages/react-scheduler/src/ReactScheduler.js', 'packages/react-scheduler/src/__tests__/ReactScheduler-test.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-fabric-oss.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.persistent.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","The 'alwaysUseRequestIdleCallbackPolyfill' feature flag and the native 'async' mode in RN are causing inconsistent use of 'requestIdleCallback' across different environments. Also, tests fail due to incomplete mocking of browser APIs for the new 'ReactScheduler'."
f796fa13ad13ee9939cb7847bfa90ada860068b2,1655578931,"Rename Segment to Task in Flight (#24753)

In Fizz this got split into Task and Segment. We don't have a concept of
Segment in Flight yet because we don't inline multiple segments into one
""Row"". We just emit one ""Row"" for each Segment if something suspends.

This makes Flight non-deterministic atm but that's something we'll want to
address.

Regardless, right now, this is more like a Task than a Segment.
",['packages/react-server/src/ReactFlightServer.js'],"There's confusion in terminology within Fizz and Flight, making Flight non-deterministic due to the absence of a ""Segment"" concept causing ""Rows"" to be emitted individually when suspension occurs."
9e8f3c89555e4a2a1877c27d710b4d4c1e069014,1613493084,"[CI] Use constant commit sha (#20828)

When running the publish workflow, either via the command line or
via the daily cron job, we should use a constant SHA instead of
whatever happens to be at the head of the main branch at the time the
workflow is run.

The difference is subtle: currently, the SHA is read at runtime,
each time the workflow is run. With this change, the SHA is read right
before the workflow is created and passed in as a constant parameter.

In practical terms, this means if a workflow is re-run via the CircleCI
web UI, it will always re-run using the same commit SHA as the original
workflow, instead of fetching the latest SHA from GitHub, which may
have changed.

Also avoids a race condition where the head SHA changes in between the
Next publish job and the Experimental publish job.
",['scripts/release/publish-using-ci-workflow.js'],"When re-running the publish workflow, the current setup uses the latest commit SHA from GitHub, potentially introducing discrepancies and race conditions due to interim updates."
8f03109cd269d23999f63644ab50b612de66560e,1568220692,"Moved backend injection to the content script (#16752)

* Moved backend injection logic to content script

* Moved backend injection logic to content script

* Moved injection logic to content script

* Formatting changes

* remove ability to inject arbitrary scripts

* Removed done(), added some comments explaining the change

* Lint fixes

* Moved inline comment.

* Deleted inject() script since it was no longer being used

","['packages/react-devtools-extensions/src/inject.js', 'packages/react-devtools-extensions/src/injectGlobalHook.js', 'packages/react-devtools-extensions/src/main.js']","Backend injection logic residing in an improper location, causing issues in script injection and formatting. Arbitrary scripts could be inadvertently injected."
1314299c7f70914d61d8e1cef56767f112110674,1630543958,"Initial shim of useSyncExternalStore (#22211)

This sets up an initial shim implementation of useSyncExternalStore,
via the use-sync-external-store package. It's designed to mimic the
behavior of the built-in API, but is backwards compatible to any version
of React that supports hooks.

I have not yet implemented the built-in API, but once it exists, the
use-sync-external-store package will always prefer that one. Library
authors can depend on the shim and trust that their users get the
correct implementation.

See https://github.com/reactwg/react-18/discussions/86 for background
on the API.

The tests I've added here are designed to run against both the shim and
built-in implementation, using our variant test flag feature. Tests that
only apply to concurrent roots will live in a separate suite.
","['packages/use-sync-external-store/extra.js', 'packages/use-sync-external-store/npm/extra.js', 'packages/use-sync-external-store/src/__tests__/useSyncExternalStoreShared-test.js', 'packages/use-sync-external-store/src/useSyncExternalStore.js', 'packages/use-sync-external-store/src/useSyncExternalStoreExtra.js', 'scripts/rollup/bundles.js']","The current version of React lacks a built-in API for useSyncExternalStore, reducing backwards compatibility and causing potential issues for library authors."
7118f5dd7bf5f1c44d0d2944ef8ad58e423909ad,1688571868,"[ESLint] Disallow hooks in async functions (#27045)

Hooks cannot be called in async functions, on either the client or the
server. This mistake sometimes happens when using Server Components,
especially when refactoring a Server Component to a Client Component.

React logs a warning at runtime, but it's even better to catch this with
a lint rule since it will show immediate inline feedback in the editor.

I added this to the existing ""Rules of Hooks"" ESLint rule.
","['packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js', 'packages/eslint-plugin-react-hooks/src/RulesOfHooks.js']","Calling hooks in async functions, either on client or server, is causing issues. The problem occurs frequently when refactoring Server Components to Client Components."
b565f495319750d98628425d120312997bee410b,1533248587,"Minimally support iframes (nested browsing contexts) in selection event handling (#12037)

* Prefer node’s window and document over globals

* Support active elements in nested browsing contexts

* Avoid invoking defaultView getter unnecessarily

* Prefer node’s window and document over globals

* Support active elements in nested browsing contexts

* Avoid invoking defaultView getter unnecessarily

* Implement selection event fixtures

* Prefer node’s window and document over globals

* Avoid invoking defaultView getter unnecessarily

* Fix react-scripts to work with alphas after 16.0.0

The current logic just checks if the version is an alpha with a major version of 16 to account for weirdness with the 16 RC releases, but now we have alphas for newer minor releases that don't have weirdness

* Run prettier on new selection events fixtures

* Add fixture for onSelect in iframes, remove DraftJS fixture

The DraftJs fixture wasn't really working in all supported browsers anyways, so just drop it and try to cover our bases without using it directly

* Purge remnants of draft.js from fixtures

* Use prop-types import instead of window global

* Make fixtures’ Iframe component Firefox-compatible

* Fix switch case for SelectionEventsFixture

* Remove draft.js / immutable.js dependencies

* Cache owner doc as var to avoid reading it twice

* Add documentation for getActiveElementDeep to explain try/catch

Add documentation for getActiveElementDeep to explain try/catch

* Ensure getActiveElement always returns DOM element

* Tighten up isNode and isTextNode

* Remove ie8 compatibility

* Specify cross-origin example in getActiveElementDeep

* Revert back to returning null if document is not defined

","['fixtures/dom/src/components/Fixture.js', 'fixtures/dom/src/components/Header.js', 'fixtures/dom/src/components/Iframe.js', 'fixtures/dom/src/components/fixtures/index.js', 'fixtures/dom/src/components/fixtures/selection-events/OnSelectEventTestCase.js', 'fixtures/dom/src/components/fixtures/selection-events/ReorderedInputsTestCase.js', 'fixtures/dom/src/components/fixtures/selection-events/index.js', 'fixtures/dom/src/react-loader.js', 'packages/react-dom/src/client/ReactDOMSelection.js', 'packages/react-dom/src/client/ReactInputSelection.js', 'packages/react-dom/src/events/SelectEventPlugin.js']","Selection event handling does not support iframes (nested browsing contexts), causing difficulties with selection events in nested contexts and potential issues with active elements, defaultView getter, and react-scripts compatibility with alpha versions after 16.0.0."
a8f971b7a669a9a6321b9f3cea820f68b2e4ac6e,1677269187,"Switch to mount dispatcher after use() when needed (#26232)

When resuming a suspended render, there may be more Hooks to be called
that weren't seen the previous time through. Make sure to switch to the
mount dispatcher when calling use() if the next Hook call should be
treated as a mount.

Fixes #25964.
","['packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactThenable-test.js']","When resuming a suspended render, some Hooks that weren't processed previously might have to be called. The system fails to switch to the mount dispatcher when necessary."
061d6ce3c0310d3b7f2122ad216be01bc4eff956,1553087514,"fix(react-dom): access iframe contentWindow instead of contentDocument (#15099)

MDN has a list of methods for obtaining the window reference of an
iframe:

https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Syntax

fix(react-dom): check if iframe belongs to the same origin

Accessing the contentDocument of a HTMLIframeElement can cause the browser
to throw, e.g. if it has a cross-origin src attribute.
Safari will show an error in the console when the access results in ""Blocked a frame with origin"". e.g:

```javascript
try {
 $0.contentDocument.defaultView
} catch (err) {
  console.log('err', err)
}

> Blocked a frame with origin X from accessing a frame with origin Y. Protocols, domains, and ports must match.
> err – TypeError: null is not an object (evaluating '$0.contentDocument.defaultView')
```

A safety way is to access one of the cross origin properties: Window or Location
Which might result in ""SecurityError"" DOM Exception and it is compatible to Safari.

```javascript
try {
 $0.contentWindow.location.href
} catch (err) {
 console.log('err', err)
}

> err – SecurityError: Blocked a frame with origin ""http://localhost:3001"" from accessing a cross-origin frame. Protocols, domains, and ports must match.
```

https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
",['packages/react-dom/src/client/ReactInputSelection.js'],"Attempting to access the contentDocument of an HTMLIframeElement from a different origin results in a console error in Safari, blocking access and potentially causing failures."
66eb29374239945c3a512a88aa2480637f62e5cc,1548958307,"Restrict effect return type to a function or nothing (#14119)

* Restrict effect return type to a function or nothing

We already warn in dev if the wrong type is returned. This updates the
Flow type.

* Restrict return type further

* Assume Effect hook returns either a function or undefined

* Tweak warning message

","['packages/react-debug-tools/src/ReactDebugHooks.js', 'packages/react-dom/src/server/ReactPartialRendererHooks.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberHooks.js', 'packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js', 'packages/react/src/ReactHooks.js']","Effect hook return type is not properly restricted, causing potential incorrect types to be returned."
6310087f099b5b6d11a1e65cc27881411718c5fd,1679083460,"[ci] Fix download_base_build_for_sizebot (#26422)

CircleCI now enforces passing a token when fetching artifacts. I'm also
deleting the old request-promise-json dependency because AFAIK we were
only using it to fetch json from circleci about the list of available
artifacts – which we can just do using node-fetch. Plus, the underlying
request package it uses has been deprecated since 2019.
","['scripts/release/shared-commands/download-build-artifacts.js', 'scripts/release/utils.js']","CircleCI's new enforcement of passing a token when fetching artifacts is causing issues, compounded by the use of request-promise-json dependency to fetch available artifacts' JSON which has been deprecated since 2019."
241103a6fb8544077579c4c1458f367510d92934,1586339937,"Fix bailout broken in lazy components due to default props resolving (#18539)

* Add failing tests for lazy components

* Fix bailout broken in lazy components due to default props resolving

We should never compare unresolved props with resolved props. Since comparing
resolved props by reference doesn't make sense, we use unresolved props in that
case. Otherwise, resolved props are used.

* Avoid reassigning props warning when we bailout
","['packages/react-reconciler/src/ReactFiberBeginWork.js', 'packages/react-reconciler/src/ReactFiberClassComponent.js', 'packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js']","Comparing unresolved and resolved props in lazy components results in a faulty bailout mechanism, causing unnecessary reassignments and warnings."
356c17108f4e132371450338fa86e195f5e0acf4,1595367650,"Remove capturePhaseEvents and separate events by bubbling (#19278)

* Remove capturePhaseEvents and separate events by bubbling

WIP

Refine all logic

Revise types

Fix

Fix conflicts

Fix flags

Fix

Fix

Fix test

Revise

Cleanup

Refine

Deal with replaying

Fix

* Add non delegated listeners unconditionally

* Add media events

* Fix a previously ignored test

* Address feedback

Co-authored-by: Dan Abramov <dan.abramov@me.com>
","['packages/react-dom/src/__tests__/ReactDOMEventListener-test.js', 'packages/react-dom/src/client/ReactDOMComponent.js', 'packages/react-dom/src/client/ReactDOMEventHandle.js', 'packages/react-dom/src/client/ReactDOMHostConfig.js', 'packages/react-dom/src/client/ReactDOMRoot.js', 'packages/react-dom/src/events/DOMModernPluginEventSystem.js', 'packages/react-dom/src/events/DOMTopLevelEventTypes.js', 'packages/react-dom/src/events/EventSystemFlags.js', 'packages/react-dom/src/events/ReactDOMEventListener.js', 'packages/react-dom/src/events/ReactDOMEventReplaying.js']","The presence of capturePhaseEvents in combination with bubbling causes issues; also, a certain test previously ignored might be indicating a problem. Non-delegated listeners missing in some scenarios. Issues with media events as well."
42e04b46d19648968537a404f15cebc42b6fab54,1610641135,"Fix: Detach deleted fiber's alternate, too (#20587)

We need to call `detachFiberAfterEffects` on the fiber's alternate to
clean it up. We're currently not, because the `alternate` field is
cleared during `detachFiberMutation`. So I deferred detaching the
`alternate` until the passive phase. Only the `return` pointer needs to
be detached for semantic purposes.

I don't think there's any good way to test this without using
reflection. It's not even observable using out our ""supported""
reflection APIs (`findDOMNode`), or at least not that I can think of.
Which is a good thing, in a way.

It's not really a memory leak, either, because the only reference to the
alternate fiber is from the parent's alternate. Which will be
disconnected the next time the parent is updated or deleted.

It's really only observable if you mess around with internals in ways
you're not supposed to — I found it because a product test in www that
uses Enzyme was doing just that.

In lieu of a new unit test, I confirmed this patch fixes the broken
product test.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","The cleanup process is not properly detaching the 'alternate' of a deleted fiber during the 'detachFiberMutation', which can lead to potential issues when manipulating internals."
66388150ef1dfef1388c634a2d2ce6760a92012f,1632785110,"Remove usereducer eager bailout (#22445)

* Fork dispatchAction for useState/useReducer

* Remove eager bailout from forked dispatchReducerAction, update tests

* Update eager reducer/state logic to handle state case only

* sync reconciler fork

* rename test

* test cases from #15198

* comments on new test cases

* comments on new test cases

* test case from #21419

* minor tweak to test name to kick CI
","['packages/react-reconciler/src/ReactFiberHooks.new.js', 'packages/react-reconciler/src/ReactFiberHooks.old.js', 'packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js']",Eager bailout in `useReducer` is causing problems with dispatchAction; the logic may also not handle the useState case properly.
fc96a52be36fc3ac7dd839df3f54e1df7baf7f06,1585004160,"Refactor React.Children to reduce indirection (#18332)

* Don't pool traversal context

* Remove traverseAllChildrenImpl indirection

All usages are internal so we can simply use the inner function directly.

* Implement forEach through map

* Remove second usage of traverseAllChildren

This isn't useful by itself but makes the layering easier to follow. traverseAllChildren is only used at the lowest layer now.

* Reimplement count() and toArray() in terms of map()

* Inline the only use of mapSingleChildIntoContext

* Move forEach down in the file

* Use the language

Get rid of the traversal context. Use closures.

* Make mapIntoArray take an already escaped prefix

* Move count state out of mapIntoArray

* Inline traverseAllChildren into mapIntoArray

* Inline handleChild into mapIntoArray
",['packages/react/src/ReactChildren.js'],"Refactoring needed in React.Children due to an excessive amount of indirection and unused functionality, causing complications in navigation and state handling."
a1558600183b4321d4cdc117925980f1865641fa,1619022729,"Fix: Don't flush discrete at end of batchedUpdates (#21229)

The outermost `batchedUpdates` call flushes pending sync updates at the
end. This was intended for legacy sync mode, but it also happens to
flush discrete updates in concurrent mode.

Instead, we should only flush sync updates at the end of
`batchedUpdates` for legacy roots. Discrete sync updates can wait to
flush in the microtask.

`discreteUpdates` has the same issue, which is how I originally noticed
this, but I'll change that one in a separate commit since it requires
updating a few (no longer relevant) internal tests.
","['packages/react-devtools-shared/src/__tests__/storeStressTestConcurrent-test.js', 'packages/react-dom/src/__tests__/ReactDOMNativeEventHeuristic-test.js', 'packages/react-reconciler/src/ReactFiberSyncTaskQueue.new.js', 'packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalTriangle-test.js']","`batchedUpdates` currently flushes pending sync updates at the end, which was designed for legacy sync mode. This incidental behavior also flushes discrete updates in concurrent mode, potentially affecting performance."
4b8e1641b77d0a5443403b8a2a8fa141c220c1a7,1553199652,"Fork performWork instead of using boolean flag (#15169)

I inline it into performAsyncWork instead.

Code that was only relevant to the async callback had leaked into the
performWork call which is an indication that this was a bad abstraction
and therefore the wrong place to DRY.

By inlining I also discovered that minExpirationTime is actually irrelevant
in the yieldy case so we can clean that up.
",['packages/react-reconciler/src/ReactFiberScheduler.old.js'],"The performWork function abstraction is inappropriate, leading to code leakage and irrelevant minExpirationTime in certain cases."
48a11a3efc1a3107b07d5f866a26f5abd440885f,1623165982,"Update next React version (#21647)

This does not mean that a release of 18.0 is imminent, only that the
main branch includes breaking changes.

Also updates the versioning scheme of the `@next` channel to include
the upcoming semver number, as well as the word ""alpha"" to indicate the
stability of the release.

- Before:       0.0.0-e0d9b28999
- After:        18.0.0-alpha-e0d9b28999
","['ReactVersions.js', 'scripts/release/publish-commands/validate-tags.js', 'scripts/rollup/build-all-release-channels.js']",The current versioning scheme of the '@next' channel doesn't include semver number or an indication of the release's stability.
3f4852fa5f932e5e815ef1be39c72ac8be4687d4,1552099994,"Run Placeholder tests in persistent mode, too (#15013)

* Convert ReactSuspensePlaceholder tests to use noop

Instead of the test renderer, since test renderer does not support
running in persistent mode.

* Run Placeholder tests in persistent mode, too

* Fix Flow and lint

* Hidden text instances should have correct host context

Adds a test for a subtle edge case that only occurs in persistent mode.

* createHiddenTextInstance -> cloneHiddenTextInstance

This sidesteps the problem where createHiddenTextInstance needs access
to the host context.

","['packages/react-native-renderer/src/ReactFabricHostConfig.js', 'packages/react-noop-renderer/src/createReactNoop.js', 'packages/react-reconciler/src/ReactFiberCommitWork.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.js', 'packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js', 'packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js', 'packages/shared/HostConfigWithNoPersistence.js']","ReactSuspensePlaceholder tests cannot run in persistent mode using the test renderer, and there's a potential issue with hidden text instances not having the correct host context in persistent mode."
d2c0ab10de957ba1758dad6405c824d251990ea4,1667002785,"In work loop, add enum of reasons for suspending

This is a pure refactor, no change to behavior.

When a component throws, the work loop can handle that in one of several
ways — unwind immediately, wait for microtasks, and so on. I'm about
to add another one, too. So I've changed the variable that tracks
whether the work loop is suspended from a boolean
(workInProgressIsSuspended) to an enum (workInProgressSuspendedReason).

","['packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js']","The work loop currently lacks a specific tracking system for different states when a component throws, potentially causing improper handling of different suspension cases."
161f6ae42cf570d3daec355abcf3b006c58315da,1678217970,"Codemod act -> await act (3/?) (#26336)

Similar to the rationale for `waitFor` (see #26285), we should always
await the result of an `act` call so that microtasks have a chance to
fire.

This only affects the internal `act` that we use in our repo, for now.
In the public `act` API, we don't yet require this; however, we
effectively will for any update that triggers suspense once `use` lands.
So we likely will start warning in an upcoming minor.
","['packages/react-reconciler/src/__tests__/StrictEffectsMode-test.js', 'packages/react-reconciler/src/__tests__/StrictEffectsModeDefaults-test.internal.js', 'packages/react-reconciler/src/__tests__/useEffectEvent-test.js', 'packages/react-reconciler/src/__tests__/useMutableSource-test.internal.js', 'packages/react-reconciler/src/__tests__/useMutableSourceHydration-test.js', 'packages/react-reconciler/src/__tests__/useRef-test.internal.js', 'packages/react-reconciler/src/__tests__/useSyncExternalStore-test.js', 'packages/react-refresh/src/__tests__/ReactFresh-test.js', 'packages/react-refresh/src/__tests__/ReactFreshIntegration-test.js', 'packages/react-server-dom-relay/src/__tests__/ReactFlightDOMRelay-test.internal.js', 'packages/use-subscription/src/__tests__/useSubscription-test.js']","'act' calls in our repo are not awaited, preventing microtasks from firing. This doesn't affect the public API yet but will do so upon 'use' landing, potentially triggering suspense updates."
ecbf7af40b72b90c007416132eb5e941542d4cca,1536851554,"Enhance dev warnings for forwardRef render function (#13627) (#13636)

* Enhance dev warnings for forwardRef render function

- For 0 parameters: Do not warn because it may be due to usage of the
  arguments object.

- For 1 parameter: Warn about missing the 'ref' parameter.

- For 2 parameters: This is the ideal. Do not warn.

- For more than 2 parameters: Warn about undefined parameters.

* Make test cases for forwardRef warnings more realistic

* Add period to warning sentence

","['packages/react/src/__tests__/forwardRef-test.js', 'packages/react/src/forwardRef.js']",Inadequate development warnings can mislead in case of 'forwardRef' render function causing undefined parameters and missing 'ref' parameter cases.
dc108b0f55387c811899aeb92e583294b0707b1c,1617978873,"Track which fibers scheduled the current render work (#15658)

Tracked Fibers are called ""updaters"" and are exposed to DevTools via a 'memoizedUpdaters' property on the ReactFiberRoot. The implementation of this feature follows a vaguely similar approach as interaction tracing, but does not require reference counting since there is no subscriptions API.

This change is in support of a new DevTools Profiler feature that shows which Fiber(s) scheduled the selected commit in the Profiler.

All changes have been gated behind a new feature flag, 'enableUpdaterTracking', which is enabled for Profiling builds by default. We also only track updaters when DevTools has been detected, to avoid doing unnecessary work.
","['packages/react-reconciler/src/ReactFiberCommitWork.new.js', 'packages/react-reconciler/src/ReactFiberCommitWork.old.js', 'packages/react-reconciler/src/ReactFiberLane.new.js', 'packages/react-reconciler/src/ReactFiberLane.old.js', 'packages/react-reconciler/src/ReactFiberRoot.new.js', 'packages/react-reconciler/src/ReactFiberRoot.old.js', 'packages/react-reconciler/src/ReactFiberThrow.new.js', 'packages/react-reconciler/src/ReactFiberThrow.old.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.new.js', 'packages/react-reconciler/src/ReactFiberWorkLoop.old.js', 'packages/react-reconciler/src/ReactInternalTypes.js', 'packages/react-reconciler/src/__tests__/ReactUpdaters-test.internal.js', 'packages/shared/ReactFeatureFlags.js', 'packages/shared/forks/ReactFeatureFlags.native-fb.js', 'packages/shared/forks/ReactFeatureFlags.native-oss.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.native.js', 'packages/shared/forks/ReactFeatureFlags.test-renderer.www.js', 'packages/shared/forks/ReactFeatureFlags.testing.js', 'packages/shared/forks/ReactFeatureFlags.testing.www.js', 'packages/shared/forks/ReactFeatureFlags.www-dynamic.js', 'packages/shared/forks/ReactFeatureFlags.www.js']","Profiling feature of DevTools lacks information about which Fibers scheduled the current render work, reducing its effectiveness and capacity for debug and profiling purposes."
cca994c6a1f13dd0b64ad0a909b5209b10cc8609,1578005047,"DevTools Profiler commit selector wraps around (#17760)

I used to disable the <- and -> buttons when you reached the beginning or end of the profiler data. This can be kind of annoying though when you just want to get to the last commit, and I don't think there's a good reason to enforce it anyway, so I backed that change out. The buttons now wrap around at the beginning or end of the list.
",['packages/react-devtools-shared/src/devtools/views/Profiler/SnapshotSelector.js'],"The DevTools Profiler's commit selection doesn't loop back when reaching the start or end of the profiler data, leading to unnecessary navigation to go to the first or last commit."
e0c78344e2f49fb91a75607ccdb170b5649bb1e9,1528912034,"Retry on error if there's lower priority pending work (#12957)

* Remove enableSuspense flag from PendingPriority module

We're going to use this for suspending on error, too.

* Retry on error if there's lower priority pending work

If an error is thrown, and there's lower priority work, it's possible
the lower priority work will fix the error. Retry at the lower priority.

If an error is thrown and there's no more work to try, handle the error
like we normally do (trigger the nearest error boundary).

","['packages/react-reconciler/src/ReactFiberPendingPriority.js', 'packages/react-reconciler/src/ReactFiberScheduler.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.js', 'packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js']","Errors thrown with lower priority pending work often don't retry at the lower priority, potentially leading to unresolved issues. Additionally, if there's no more work, the error handling process is not clear."
992911981bc35b6fc3e7cacb4294d6d782527603,1658173973,"[DevTools] add simple usage events for internal logging (#24888)

* [DevTools] add simple events for internal logging

* fix lint

* fix lint

* better event name

* fix flow

* better way to fix flow

* combine 'select-element'

* use same event name for selecting element by inspecting
","['packages/react-devtools-shared/src/Logger.js', 'packages/react-devtools-shared/src/devtools/views/Components/Element.js', 'packages/react-devtools-shared/src/devtools/views/Components/InspectHostNodesToggle.js', 'packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js', 'packages/react-devtools-shared/src/devtools/views/Components/Tree.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/ProfilerContext.js']","DevTools lacks internal logging for simple usage events, resulting in difficulties in tracking user interactions and data flow within the tool."
8b8817845a8efd8cf53be395fafbb1d0f62c4368,1638566628,"Timeline search (#22799)

Refactor SearchInput component (used in Components tree) to be generic DevTools component with two uses: ComponentSearchInput and TimelineSearchInput.

Refactored Timeline Suspense to more closely match other, newer Suspense patterns (e.g. inspect component, named hooks) and colocated Susepnse code in timelineCache file.

Add search by component name functionality to the Timeline. For now, searching zooms in to the component measure and you can step through each time it rendered using the next/previous arrows.
","['packages/react-devtools-shared/src/devtools/views/Components/ComponentSearchInput.js', 'packages/react-devtools-shared/src/devtools/views/Components/Tree.js', 'packages/react-devtools-shared/src/devtools/views/Components/TreeContext.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/ClearProfilingDataButton.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/Profiler.js', 'packages/react-devtools-shared/src/devtools/views/Profiler/ProfilingImportExportButtons.js', 'packages/react-devtools-shared/src/devtools/views/SearchInput.js', 'packages/react-devtools-timeline/src/CanvasPage.js', 'packages/react-devtools-timeline/src/Timeline.js', 'packages/react-devtools-timeline/src/TimelineContext.js', 'packages/react-devtools-timeline/src/TimelineSearchContext.js', 'packages/react-devtools-timeline/src/TimelineSearchInput.js', 'packages/react-devtools-timeline/src/content-views/ComponentMeasuresView.js', 'packages/react-devtools-timeline/src/content-views/constants.js', 'packages/react-devtools-timeline/src/timelineCache.js', 'packages/react-devtools-timeline/src/types.js']","The Timeline feature lacks a search by component name functionality, limiting user navigation and exploration capabilities."
b2cea9078d28015ce95a4da523a4172b171989ad,1539044938,"[scheduler] Eagerly schedule rAF at beginning of frame (#13785)

* [scheduler] Eagerly schedule rAF at beginning of frame

Eagerly schedule the next animation callback at the beginning of the
frame. If the scheduler queue is not empty at the end of the frame, it
will continue flushing inside that callback. If the queue *is* empty,
then it will exit immediately. Posting the callback at the start of the
frame ensures it's fired within the earliest possible frame. If we
waited until the end of the frame to post the callback, we risk the
browser skipping a frame and not firing the callback until the frame
after that.

* Re-name scheduledCallback -> scheduledHostCallback

","['packages/scheduler/src/Scheduler.js', 'packages/scheduler/src/__tests__/SchedulerDOM-test.js']","The current scheduling method potentially causes the browser to skip a frame, not firing the callback until the frame after that if we wait until the end of the frame to post the callback."
a8555c308e06eacf807ec47caafd1e0e789d2c54,1654819842,"[Transition Tracing] Add Tracing Marker Stack (#24661)

When a suspense boundary suspends or commits, we need to notify the corresponding tracing markers so that they know when to log that they've completed. To do this, we add a stack of tracing markers. In the begin phase, we will push the tracing markers onto the stack, and during the complete/unwind phase we will pop the tracing markers off the stack

In a later PR, we will store the active tracing markers on the suspense boundary, and during the commit phase we will process the active tracing markers by adding/removing the boundary as appropriate.
","['packages/react-reconciler/src/ReactFiberBeginWork.new.js', 'packages/react-reconciler/src/ReactFiberBeginWork.old.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.new.js', 'packages/react-reconciler/src/ReactFiberCompleteWork.old.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.new.js', 'packages/react-reconciler/src/ReactFiberTracingMarkerComponent.old.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.new.js', 'packages/react-reconciler/src/ReactFiberUnwindWork.old.js']","Suspense boundary suspend/commit actions are not notifying the corresponding tracing markers, leading to inaccurate tracking of their completion status."
9abe745aa748271be170c67cc43b09f62ca5f2dc,1656008363,"[DevTools][Timeline Profiler] Component Stacks Backend (#24776)

This PR adds a component stack field to the `schedule-state-update` event. The algorithm is as follows:
* During profiling, whenever a state update happens collect the parents of the fiber that caused the state update and store it in a map
* After profiling finishes, post process the `schedule-state-update` event and using the parent fibers, generate the component stack by using`describeFiber`, a function that uses error throwing to get the location of the component by calling the component without props.

---

Co-authored-by: Blake Friedman <blake.friedman@gmail.com>
","['packages/react-devtools-shared/src/__tests__/TimelineProfiler-test.js', 'packages/react-devtools-shared/src/__tests__/preprocessData-test.js', 'packages/react-devtools-shared/src/backend/DevToolsFiberComponentStack.js', 'packages/react-devtools-shared/src/backend/profilingHooks.js', 'packages/react-devtools-shared/src/backend/renderer.js', 'packages/react-devtools-timeline/src/types.js', 'packages/shared/ReactComponentStackFrame.js']","Profiling lacks a component stack field to the 'schedule-state-update' event, making it difficult to track and describe parent fibers that cause state updates."
0ffc7f632b5cdc2d4ede97b6f8ff55e02183bdf9,1680187642,"Update useMemoCache test to confirm that cache persists across errors (#26510)

## Summary

Updates the `useMemoCache()` tests to validate that the memo cache
persists when a component does a setState during render or throws during
render. Forget's compilation output follows the general pattern used in
this test and is resilient to rendering running partway and then again
with different inputs.

## How did you test this change?

`yarn test` (this is a test-only change)
",['packages/react-reconciler/src/__tests__/useMemoCache-test.js'],The `useMemoCache()` function may not preserve memo cache when a component runs setState during render or throws an error during rendering.
b0cb137bcbd3a11d8eff3c2229cd6b8379d29785,1587607331,"Don't dedupe using the stack (#18693)

We currently use the stack to dedupe warnings in a couple of places.
This is a very heavy weight way of computing that a warning doesn't need
to be fired.

This uses parent component name as a heuristic for deduping. It's not
perfect but as soon as you fix one you'll uncover the next. It might be a
little annoying but having many logs is also annoying.

We now have no special cases for stacks. The only thing that uses stacks in
dev is the console.error and dev tools. This means that we could
externalize this completely to an console.error patching module and drop
it from being built-in to react.

The only prod/dev behavior is the one we pass to error boundaries or the
error we throw if you don't have an error boundary.
","['packages/react-dom/src/__tests__/ReactComponent-test.js', 'packages/react-dom/src/__tests__/ReactDOMComponent-test.js', 'packages/react-dom/src/client/validateDOMNesting.js', 'packages/react-reconciler/src/ReactChildFiber.new.js', 'packages/react-reconciler/src/ReactChildFiber.old.js', 'packages/react-reconciler/src/ReactCurrentFiber.js', 'packages/react-reconciler/src/__tests__/ReactFragment-test.js', 'packages/shared/__tests__/describeComponentFrame-test.js']","Warning deduplication using stack leads to excessive computation and is heavy-weight. Logging overly dependent on stack usage, possibly impeding future externalization."

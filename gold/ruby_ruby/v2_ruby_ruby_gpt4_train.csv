commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
4efbeb11905534289a6b4a4bc4779859a9c6c6a6,1659205125,"[ruby/date] Enhanced RDoc (https://github.com/ruby/date/pull/67)

Treats:
    ::httpdate
    #to_date
    #to_time
    #to_datetime
In behalf of ::httpdate, I've introduced section ""Argument limit"" that can be pointed to by various Date methods (similar to existing section ""Argument start""). This will involve 8 already-enhanced methods plus 8 more not yet done.

https://github.com/ruby/date/commit/00326ff99c
",['ext/date/date_core.c'],"Lack of sufficient documentation for various Date methods, including ::httpdate, #to_date, #to_time and #to_datetime, specifically with regards to ""Argument limit""."
d835ed4df1ae2bf317db41a8009b1fad143c94f1,1556453338,"Define merger.rb's methods under Merger namespace

so that we do not monkey-patch all classes by defining methods on
top-level (Object class).

Not arranging indentation in it to keep `git blame` for now.
",['tool/merger.rb'],"Methods defined in merger.rb are monkey-patching all classes by being defined at top-level instead of within the Merger namespace, causing potential conflicts."
d311921d31e575e0e72f67dfa27fd90b2cfc5ec4,1496840488,"rexml: add close tag check on end of document to StreamParser

[ruby-core:81593] [Bug #13636]

Reported by Anton Sivakov. Thanks!!!


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59033 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/rexml/parsers/streamparser.rb', 'test/rexml/parser/test_stream.rb']",StreamParser in rexml does not verify if tags are appropriately closed at the end of documents.
fdb771d82db5c258757d3e2f18102eca680ecfd5,1508937585,"Make imemo_alloc writebarrier-unprotected

imemo_alloc provides a memory buffer whose contents are marked by GC.
C code can access imemo_alloc buffer freely, so imemo_alloc must be
considered writebarrier-unprotected.  But T_IMEMO is writebarrier-
protected by default, which caused a GC bug.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60427 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['gc.c', 'parse.y']","The T_IMEMO default writebarrier-protected status conflicts with the writebarrier-unprotected nature of imemo_alloc buffer, causing garbage collection errors."
b89367d6d5e6537414ab01f075427f9f13bc50c8,1497760144,"test/unit.rb: close jobserver

* test/lib/test/unit.rb (Test::Unit::Parallel#flush_job_tokens):
  close jobserver auth fds aflter flush, not to  release tokens
  more than acquired.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59110 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/lib/test/unit.rb'],Jobserver auth file descriptors in 'Test::Unit::Parallel#flush_job_tokens' are releasing more tokens than they acquired.
c982c5efac3985e989c02d10b8bc834b902c6e5c,1588914809,"[rubygems/rubygems] Skip flaky tests on jruby

I believe these are most certainly due to a problem outside of rubygems.
I'm skipping these at least until webrick officially supports jruby
(defining ""officially"" as ""webrick's CI passes on jruby"").

https://github.com/rubygems/rubygems/commit/4fca025358
",['test/rubygems/test_gem_remote_fetcher.rb'],"Certain tests are flaky on JRuby, potentially due to an issue outside of RubyGems and it seems Webrick may not officially support JRuby yet."
0f0c32f24e9556cf3d605df2891841659e6293f6,1518930652,"mjit.c: no va_copy

* mjit.c (form_args): do not use va_copy, which cannot detect
  appropriate way to simulate when cross compiling.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62463 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['internal.h', 'mjit.c', 'tool/m4/ruby_check_va_copy.m4']",Cross compiling in 'mjit.c' using va_copy fails to detect the appropriate simulation method.
efc89703365fa787c012370c18803bae67924526,1566481625,"* expand tabs. [ci skip]

Tabs are expanded because previously the file did not have any tab indentation.
Please update your editor config, and use misc/expand_tabs.rb in the pre-commit hook.
",['mjit.c'],"File has inconsistent indentation due to presence of unexpanded tabs, leading to potential formatting and readability issues."
5dfde64609f4595c599ed8d99e5fdb82240ecf73,1488742990,"docs for IO.{write,read}

* io.c: [DOC] improve docs for IO
  * IO.{write,read}: fix errors (:open_args is not an array of
    strings, it might include a perm or options hash argument;
    IO.write has no length argument, drop corresponding statement),
    improve formatting, call-seq, grammar.
  * IO#sync=: remove unnecessary ""produces no output"".
  * other improvements.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57781 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['io.c'],"Misinformation in the IO.{write,read} documentation: wrong argument types and inaccurate formatting, grammar. IO#sync= contains unnecessary statement."
3a238eff88440f450a7871fc82e49bfb1ab336e5,1680333815,"gdb: Fix a command example

It was actually harder to type `cfp + 1`. `cfp 1` also works and is more
useful.
",['misc/gdb.py'],Issue with a command example in gdb documentation: `cfp + 1` is difficult to type and less useful compared to `cfp 1`.
48273534c7aa6552c9155366a39f54ce10653c5a,1587014535,"Support for FreeBSD <sys/cdefs.h>

FreeBSD's <sys/cdefs.h> is broken.  Cygwin is also affected by that.
We need to avoid using them.

See also:
https://github.com/freebsd/freebsd/commit/d1c67819db000c02d3a9c79f3651c10aeedad1a0
https://sourceware.org/git/?p=newlib-cygwin.git;a=commit;f=newlib/libc/include/sys/cdefs.h;h=44d6d53977e6bc82c2b1e6dbe8ae7f310b260604
","['include/ruby/3/has/attribute.h', 'include/ruby/3/has/builtin.h']","The <sys/cdefs.h> header in FreeBSD and Cygwin causes issues, making it necessary to avoid its use."
a028cfc597f96bbedd05b0b86f5cb7b061d10c2d,1495949969,"test/ruby/test_io.rb: adjust CPU usage check to 10%

I miscalculated for r58934, since we sleep 100ms, and
the worst possible case is 100 Hz in the kernel meaning
we only have 10ms resolution.  So, we need to increase
our CPU percentage to >= 10% for this.

This should be more than enough for our CI machines which
have 300 Hz kernels [ruby-core:81429]:

 http://ci.rvm.jp/results/trunk-test@sasada-8core/1495942555

* test/ruby/test_io.rb (test_copy_stream_no_busy_wait):
  override default percentage

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58936 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_io.rb'],"The CPU usage check in test_io.rb is miscalibrated due to a confusion with kernel Hz and sleep time, possibly causing false failures on systems with different kernel frequencies."
9f1c009497431a5fd161eb530f8f1ccfbe0acac3,1435273608,"enum.c (enum_minmax): simplify return value creation

No need to call three functions on success when one will do.
This results in less LoC and smaller object code, too:

   text    data     bss     dec     hex filename
  33860       0     296   34156    856c gcc/enum.o-before
  33852       0     296   34148    8564 gcc/enum.o

* enum.c (enum_minmax): simplify return value creation
* test/ruby/test_enum.rb: test behavior on empty

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51036 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['enum.c', 'hash.c', 'test/ruby/test_enum.rb']","Excessive function calls when creating return values in enum_minmax(), resulting in excessive lines of code and larger object code. Also, lacks test for behavior on empty."
961569b95272b1a5034c2c4cbb777f92954e8f00,1517806684,"transform_mjit_header.rb: no extra CRs

* tool/transform_mjit_header.rb (MJITHeader.check_code!): open
  temporary file in binary mode too, not to include extra CRs.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62222 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['tool/transform_mjit_header.rb'],The MJITHeader.check_code! method when opening a temporary file includes extra carriage returns (CRs).
9a6226c61ea8a8ae7b3516b693a0d6e73526a99f,1620076308,"Eagerly allocate instance variable tables along with object

This allows us to allocate the right size for the object in advance,
meaning that we don't have to pay the cost of ivar table extension
later.  The idea is that if an object type ever became ""extended"" at
some point, then it is very likely it will become extended again.  So we
may as well allocate the ivar table up front.
","['gc.c', 'object.c']","The cost of instance variable (ivar) table extension is high due to the late allocation, especially for objects that frequently become ""extended""."
51a38a24014e35126714e08e3c58a2d696e3ee66,1496336927,"Open files in binary modes for copying in MSpec's #cp

* See https://bugs.ruby-lang.org/issues/13570.
* Found by MSP-Greg (Greg L).

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58991 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['spec/mspec/lib/mspec/helpers/fs.rb'],"Files are not being opened in binary mode during copying process in MSpec's #cp, causing potential issues with inconsistent data transfer."
ffa87b40576976f5ab0bfeb7c7eca81021841500,1446103604,"* gc.c: introduce rb_wb_unprotected_newobj_of() and
  rb_wb_protected_newobj_of(), pass the WB_PROTECTED
  information explicitly.

* internal.h: use introduced functions by NEWOBJ_OF().
  `flag' is immediate value, so that C compilers can
  solve them at compile time.

* include/ruby/ruby.h: add a commnent about that.




git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52346 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['gc.c', 'include/ruby/ruby.h', 'internal.h']","When using the NEWOBJ_OF() functions in gc.c, Write Barrier (WB) protection information is not passed explicitly, possibly leading to unpredictable behaviour."
abdd3c5616e82af487249ef5e9d3e42bc983de1c,1601045142,"test/ruby/test_enumerator.rb: check the deprecation warning

by explicitly setting `Warning[:deprecated] = true`.
I removed ""capture_io"" at 79063d8cbfb7ce4740774289252a2a20dc9a5dc1, but
it printed the warning when `RUBYOPT=-w`.

This change makes the warnings enabled explicitly, capture and check the
warning.
",['test/ruby/test_enumerator.rb'],Deprecation warnings not correctly checked in test/ruby/test_enumerator.rb; potential issues when RUBYOPT is set to -w.
a672fd8be32ea7837e814a2e755241ef805afb81,1435710638,"struct.c: hide internal objects

* struct.c (struct_set_members): hide internal back_members
  object, and members object does not need to be duped as it
  should be frozen and hidden.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51082 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['struct.c'],"Internal back_members object in struct.c is visible, and members object is unnecessarily duplicated even though it should be frozen and hidden."
3e8672094de1b6b568147140ad89eaa5b9ae327d,1447909934,"compile.c: tailcall before specialize

* compile.c (iseq_tailcall_optimize): apply tail call optimization
  before conversion to specialized instructions.  when looking
  back from `leave` instruction, `send` instructions have been
  translated already.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52663 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['compile.c'],"Tail call optimization is not applied before conversion to specialized instructions, causing issues when looking back from `leave` instruction as `send` instructions have been translated already."
c47608494f961d2a8fe24b1a7b7f627b305cf7fe,1695172614,"[ruby/yarp] Convert constant pool entries to a string type in Java Loader

* Fixes https://github.com/ruby/yarp/issues/1389
* Fields of type `string` as kept as byte[].

https://github.com/ruby/yarp/commit/234c8f47c7
",['yarp/templates/template.rb'],"Fields of type `string` are incorrectly kept as byte[] in the Java Loader, causing a mismatch with the constant pool entries."
51c4ffa45b03262ddc183b815dba07462ef0a29f,1458567363,"* internal.h (rb_fix_divmod_fix): like r54213, use FIX2NUM only if
  x == FIXNUM_MIN && y == -1. This must be a rare case and it is
  expected compiler to handle well.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54216 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['internal.h', 'numeric.c', 'time.c']","When x is equivalent to FIXNUM_MIN and y equals -1, using FIX2NUM may not provide correct results due to possible compiler handling issues."
b28c6d04d0989fa01842435f617e96420a8b4743,1594796712,"[rubygems/rubygems] Make Style/HashSyntax cop happy

Previously, we were using the old syntax like:
`task :default => :spec`, but now this commit
uses the new Ruby 1.9 hash syntax.

Signed-off-by: Utkarsh Gupta <utkarsh@debian.org>

https://github.com/rubygems/rubygems/commit/b41d0fdb56
",['spec/bundler/commands/newgem_spec.rb'],"The code contains old Ruby 1.8 hash syntax which does not conform to the current Ruby 1.9 hash syntax, failing the Style/HashSyntax cop."
2208c6b442b9ddea2d16f260a0201a33fdab14ce,1512371791,"parse.y: Fix a location of NODE_ARRAY in NODE_ARGSCAT

* parse.y: Fix the first location to be equal to the location
  of the first element of NODE_ARRAY.

  e.g. The locations of the NODE_ARRAY is fixed:

  ```
  m(*a, :b, :c)
  ```

  * Before

  ```
  NODE_ARRAY (line: 1, first_lineno: 1, first_column: 2, last_lineno: 1, last_column: 12)
  ```

  * After

  ```
  NODE_ARRAY (line: 1, first_lineno: 1, first_column: 6, last_lineno: 1, last_column: 12)
  ```

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61008 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],"The first location of NODE_ARRAY in NODE_ARGSCAT is not equal to the location of its first element, resulting in incorrect NODE_ARRAY locations."
978ee6d1ef62b36c143103f7a229bfb8bf0f99c6,1466505146,"Multiple values X-Forwarded-Proto in webrick

* lib/webrick/httprequest.rb (setup_forwarded_info): Use the first
  value in X-Forwarded-Proto, if header contains multiple comma
  separated values.  Some middlewares may add these values to the
  list, not replacing.  [Fix GH-1386]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55484 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/webrick/httprequest.rb', 'test/webrick/test_httprequest.rb']","""Webrick is using the last value in X-Forwarded-Proto header leading to issues when some middlewares add multiple comma-separated values without replacing the existing one.""
"
1fe73fc948c5f511d3c6a7b4dfb7fe61348ab169,1503460899,"gc.c: restore cfp at finalizer

* gc.c (run_finalizer): restore cfp for the case an exception
  raised in a finalizer.  [ruby-core:82432] [Bug #13832]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59649 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['gc.c', 'test/ruby/test_gc.rb']",An exception raised in a finalizer case can potentially disrupt the restoration of the current frame pointer (cfp).
be3439026a6809f6f1f30bd063201bf472222fd0,1513755504,"iseq.c (get_insn_info): use binary search instead of linear search

This change introduces get_insn_info_binary_search, which is (should be)
equivalent to the old get_insn_info.
The old get_insn_info is renamed to get_insn_info_linear_search.  When
VM_CHECK_MODE > 0, the equivalence is validated at finish_iseq_build.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61353 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['iseq.c'],"Inefficiencies in 'get_insn_info' function due to linear search instead of binary search, causing increased time complexity in opcode optimization."
d6a9603eff9b8bf5d998d83e0507273bfd390f2e,1540682489,"use Scripting.Dictionary instead of InternetExplorer.Application for
_getproperty spec.

* spec/ruby/library/win32ole/_getproperty_spec.rb: use
  Scripting.Dictionary. InternetExplorer.Application is not available on
  some environment. (Thanks to MSP-Greg (Greg L))

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65398 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['spec/ruby/library/win32ole/win32ole/_getproperty_spec.rb'],"'_getproperty_spec.rb fails on environments where InternetExplorer.Application is not available, leading to inconsistent performances.'"
7908eabf6f639cf7ec84714418b6b1aa28825af7,1661788027,"Port setivar to the new backend IR (https://github.com/Shopify/ruby/pull/362)

* Port setivar to the new backend IR

* Add a few more setivar test cases

* Prefer const_ptr

Co-authored-by: Maxime Chevalier-Boisvert <maximechevalierb@gmail.com>
",['yjit/src/codegen.rs'],"The setivar operation in the backend IR is not ported leading to failing or less efficient test cases, and a preference for const_ptr is not implemented."
32ec6dd5c7cb89979d48100acf8971ac09e0d02e,1563831816,"Document encoding of string returned by Regexp.quote [ci skip]

Also, remove documentation about returning self, which makes no
sense as self would be the Regexp class. It could be interpreted
as return the argument if no changes were made, but that hasn't
been the behavior at least since 1.8.7 (and probably before).

Fixes [Bug #10239]
",['re.c'],"Confusion about the encoding of string returned by Regexp.quote, and misleading documentation about return behavior creating an understanding that it returns 'self'."
f254b673f89c12c42538d84b431116cf5ed0cde7,1661201420,"[rubygems/rubygems] Test platform parsing stability

On past versions there were observed cases of inconsistencies when some
platforms were re-parsed.

Ensure that a platform's string representation parses again in a
platform object equal to the original.

https://github.com/rubygems/rubygems/commit/6da35ee93c
",['test/rubygems/test_gem_platform.rb'],"Re-parsing some platforms has been noted to cause inconsistencies, failing to reproduce the original platform object from its string representation."
3fd90c0158f8170ad11c8a99354bb3347c7cc121,1693996271,"[ruby/openssl] test/openssl/test_pkey_ec.rb: refactor tests for EC.builtin_curves

Check that OpenSSL::PKey::EC.builtin_curves returns an array in the
expected format.

Similarly to OpenSSL::Cipher.ciphers, OpenSSL::PKey::EC.builtin_curves
returns a list of known named curves rather than actually usable ones.

https://github.com/ruby/openssl/issues/671 found that the list may
include unapproved (and thus unusable) curves when the FIPS module is
loaded.

https://github.com/ruby/openssl/commit/c53cbabe00
",['test/openssl/test_pkey_ec.rb'],"The method OpenSSL::PKey::EC.builtin_curves returns a list of unapproved and unusable curves when FIPS module is loaded, providing misleading information about available EC curves."
86768f1d4c102ff82321fdae2e2f2e278d57f3c7,1657289904,"[ruby/openssl] Fix formatting in docs

The + tag can only be used for single words. For multiple words the <tt>
tag has to be used.

https://github.com/ruby/openssl/commit/cf2f019c3e
",['ext/openssl/ossl_asn1.c'],"""+ tag in the OpenSSL Ruby documentation formatting only functions with single words, causing multiple word entries to be formatted incorrectly."""
b4efab9ed9e2e945b230c8c5cefd0172a02b8eb5,1441892931,"parse.y: keep literal encoding

* parse.y (literal_concat_gen, evstr2dstr_gen): keep literal
  encoding beginning with an interpolation same as the source file
  encoding.  [ruby-core:70703] [Bug #11519]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51820 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['parse.y', 'test/ruby/test_literal.rb']",Interpolation in Ruby source files is not retaining the original literal encoding.
0118b985459ad20520af09e5202774b3cc52b491,1504314507,"Update Hash#compact! documentation [ci skip]

* hash.c (rb_hash_compact_bang): [DOC] update the case if no
  changes were made.  [ruby-core:82591] [Bug #13855] [Fix GH-1692]

Author:    Lucas Buchala <lucasbuchala@gmail.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59719 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['hash.c'],The current documentation for Hash#compact! does not accurately reflect the behavior when no changes are made to the hash.
cd4f5b13228879d954fa97b6aa479c4a5ef4fb0a,1630513339,"Guard array when appending

This prevents early collection of the array.  The GC doesn't see the
array on the stack when Ruby is compiled with optimizations enabled

[ruby-core:105099] [Bug #18140]
","['array.c', 'test/ruby/test_array.rb']","When Ruby is compiled with optimizations, the Garbage Collector does not recognize the array on the stack, leading to its precocious collection."
17e09f033c4d3b786672ba16d2c5d935482a2fad,1646723197,"Skip three tests on FreeBSD 13

Some tests that use signals frequently fail randomly on FreeBSD 13.
Maybe something around signals has changed in FreeBSD 13.
This change skips them tentatively.
","['test/excludes/TestThread.rb', 'test/excludes/TestThreadQueue.rb', 'test/io/console/test_io_console.rb']","Tests using signals are failing randomly on FreeBSD 13, suggesting possible changes in how FreeBSD 13 handles signals."
d5744aff3a164c358f92ef9dc2cda5c7a7612d97,1571255473,"Fix DRbServer#any_to_s

My previous fix in d0ed935d5bf8c3fce9800742a36e44fb7f63dda4 was
not correct, as pointed out by cremno on GitHub.

This simplifies things by just using Kernel#to_s.  Also switch to
bind_call(obj) instead of bind(obj).call for better performance.
","['lib/drb/drb.rb', 'test/drb/test_drb.rb']","DRbServer#any_to_s functionality is incorrect, yielding performance issues due to use of bind(obj).call instead of bind_call(obj)."
15eaedf805fb2727c79a6c59af6d5f6c2a6d634b,1566476687,"Add misc/expand_tabs.rb ported from auto-style.rb

This is implemented to close [Misc #16112] because all other options got
at least one objection, and nobody has objected to this solution.

This code is a little complicated for the purpose, but that's just
because it includes some historical code for auto-style.rb:
https://github.com/ruby/ruby-commit-hook/blob/918a7c31b69ad2f7b125608c1c6a1f4fd01ec15a/bin/auto-style.rb

Please feel free to improve this file as you like.

[Misc #16112]
",['misc/expand_tabs.rb'],The current handling of tab expansion in the codebase is causing objections and needs to be addressed.
08b82e6b40b1dbbff20ba609d7d5eb8106a2d346,1653838063,"[rubygems/rubygems] Ignore `Errno::EROFS` errors when creating `bundler.lock`

Apparently old versions of MacOS would set `GEM_HOME` to a `/System`
folder, and trying to create a file there raises `Errno::EROFS`.

We ignore the error. Any permission issues should be better handled
further down the line.

https://github.com/rubygems/rubygems/commit/ef90c071d0
","['lib/bundler/process_lock.rb', 'spec/bundler/install/process_lock_spec.rb']",Creating `bundler.lock` in `/System` folder on older versions of MacOS raises `Errno::EROFS` error due to permission issues.
2c018e9646436ca1320cce3fc06c1ef8dfcdee5d,1512614211,"parse.y: Fix locations of regexp

* parse.y (new_regexp_gen): Always set locations
  to include locations of tREGEXP_BEG and tREGEXP_END.

  e.g. The locations of the NODE_LIT is fixed:

  ```
  /a/
  ```

  * Before

  ```
  NODE_LIT (line: 1, code_range: (1,1)-(1,2))
  ```

  * After

  ```
  NODE_LIT (line: 1, code_range: (1,0)-(1,3))
  ```

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61064 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],"NODE_LIT code ranges for regular expressions are not correctly including the beginning and end marks, leading to an offsets in the described locations."
bd8dc2561d4983df7bf44dbc6ca194930532adc7,1566888746,"struct MEMO now free from ANYARGS

After 5e86b005c0f2ef30df2f9906c7e2f3abefe286a2, I now think ANYARGS is
dangerous and should be extinct.  There is only one usage of
MEMO::u3::func in load.c (where void Init_Foobar(vodi) is registered)
so why not just be explicit.
","['internal.h', 'load.c']","Use of ANYARGS in struct MEMO may introduce potential risks and inconsistencies, especially in load.c where MEMO::u3::func is explicitly registered."
26187a8520b8c6645206a2064c11a7ab86a89845,1644849354,"Use RARRAY_SHARED_ROOT_FLAG for checking re-enter

RARRAY_SHARED_ROOT_FLAG is defined as FL_USER5, but we should use
RARRAY_SHARED_ROOT_FLAG instead of depending on that they're equal.
",['array.c'],Dependence on the equality of RARRAY_SHARED_ROOT_FLAG and FL_USER5 can cause issues when checking for re-entry.
2a6457b5b7d67378528235cee7b9cb93fed00204,1567573720,"add rb_funcallv_with_cc()

Why not cache the method entry at each caller site.  The void**
is in fact a method entry, but this struct is hidden from ruby.h
so intentionally left opaque.
","['include/ruby/ruby.h', 'vm_eval.c']","Method entry at each caller site is not being cached currently, causing potential performance issues."
4f03a239dcd6704e4ae7a7029dc6b31d579e9f7c,1516624491,"mkmf.rb: ignore linker warnings

* lib/mkmf.rb (try_ldflags): ignore linker warnings.  they cause
  unexpected failures on OpenBSD.  [ruby-core:78827] [Bug #13069]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62007 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/mkmf.rb'],Linker warnings in mkmf.rb are leading to unexpected failures on OpenBSD.
99d713874381ead2c625436df51dc47ebee8d969,1512261566,"The superclass of a refinement should have BasicObject as its ancestor.

Otherwise, VM_ASSERT(callable_method_entry_p(cme)) in
prepare_callable_method_entry() fails if VM_CHECK_MODE is 2.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60984 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['eval.c'],"The superclass of a refinement doesn't have BasicObject as its ancestor, leading to a failure in prepare_callable_method_entry() if VM_CHECK_MODE is set to 2."
03246719ccb2a9c042487b59b31bcac8c30bbff1,1686016377,"[rubygems/rubygems] Fix `path` vs `deployment` precedence when path set through ENV

The `deployment` setting sets `path` to `vendor/bundle` implicitly, but
that should only apply if `path` is not set explicitly, at any level.

https://github.com/rubygems/rubygems/commit/3552c064c1
","['lib/bundler/settings.rb', 'spec/bundler/install/deploy_spec.rb']","When the `deployment` setting is enabled, it incorrectly overrides the `path` setting even when it is explicitly set through the ENV."
a4964174e26303524cee8c2d8523048b87137993,1638582015,"Fix circular dependencies specific to in-place build [Bug #18374]

* Move the rubyspec running recipe after the rule for rubyspec
  C-API extension library, so that separate dummy recipe is not
  needed.

* Add a dummy recipe for rubyspec.h before the rubyspec running
  recipe, so that the dependency of extensions do not fire the
  latter.
",['defs/gmake.mk'],"In-place build is creating circular dependencies, triggering rubyspec running recipe and extensions dependency at incorrect times."
61b14bb32b7e62760225cb2207df5fe87e5339ab,1590559312,"Eliminate a call instruction on JIT cancel path

by calling combined functions specialized for each cancel type.

I'm hoping to improve locality of hot code, but this patch's impact should
be insignificant.
","['mjit.c', 'mjit.h', 'mjit_compile.c']","There's an unnecessary call instruction occurring during JIT cancellation, potentially impacting code efficiency and performance."
f46a43fc58b945c44a726eea66b2cc8a55786b47,1479169640,"st.c: fix crashes on huge hash tables

From: Vladimir Makarov <vmakarov@redhat.com>

By Vladimir's estimation, this requires at least 64 GB of memory
to reproduce this bug due to the hash sizes required.  So there
is no new test case (and I am unable to test it, myself).

* st.c (get_bins_num): avoid out-of-bounds on shift by using correct type
  [ruby-core:78139] [Bug #12939]
* st.c (get_allocated_entries): ditto

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56793 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['st.c'],Larger hash tables (64GB or more) are causing crashes in st.c due to out-of-bounds shift.
6e052817f95095217b67256aff48cedbd57717cf,1559251277,"Abstract away Ripper::Lexer#scan in IRB::Color#scan

because 5b64d7ac6e7cbf759b859428f125539e58bac0bd made it hard to
understand #colorize_code for me and this change is needed for my next
commit.
",['lib/irb/color.rb'],The method 'colorize_code' in IRB::Color#scan has become difficult to understand due to changes in Ripper::Lexer#scan.
61e426ae059945088b2bf84cdf1c8bdef273f314,1640011324,"[ruby/openssl] pkey: assume a pkey always has public key components on OpenSSL 3.0

OpenSSL 3.0's EVP_PKEY_get0() returns NULL for provider-backed pkeys.
This causes segfault because it was supposed to never return NULL
before.

We can't check the existence of public key components in this way on
OpenSSL 3.0. Let's just skip it for now.

https://github.com/ruby/openssl/commit/ccdb6f7bfa
",['ext/openssl/ossl_pkey.c'],"OpenSSL 3.0's EVP_PKEY_get0() returning NULL leads to issues as it was supposed to always return public key components, leading to potential segfaults."
1d4a43e7b09d0c90be6bef839b0616fe6a9008cd,1693996255,"[ruby/openssl] test/openssl/test_ossl.rb: relax assertion for error messages

The test case test_error_data utilizes the error message generated by
X509V3_EXT_nconf_nid(). The next commit will use X509V3_EXT_nconf(),
which generates a slightly different error message. Let's adapt the
check to it.

https://github.com/ruby/openssl/commit/9cdfa3a4d1
",['test/openssl/test_ossl.rb'],Test case 'test_error_data' fails due to a discrepancy in error messages generated by X509V3_EXT_nconf_nid() and X509V3_EXT_nconf().
0fab06f3c33999d7366036440dbc7ce6d16ac792,1656347157,"Separate Type::String into Type::CString and Type::TString.

Also slightly broaden the cases where << on two strings will generate
specialised code rather than a plain method call.
","['yjit/src/codegen.rs', 'yjit/src/core.rs']","The Type::String is not differentiated between CStrings and TStrings, affecting the generation of specialized code when using << on two strings."
7f7dcb61789ee77ad71b11298b5e0236703faf40,1446105601,"gc.c: separate event hook call from newobj_init

* gc.c (newobj_init): separate event hook call and remove the
  argument for it.

* gc.c (newobj_slowpath): call event hook after initialized the
  new object.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52348 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['gc.c'],Event hook is being called before new object initialization causing argument misconfigurations.
d627b75e016c855fe4c921170a76773f6da7f163,1622534373,"Add static modifier to C function in re.c (#3153)

* add static modifier for rb_reg_eqq func

* add static modifier for rb_check_regexp_type func",['re.c'],"The functions 'rb_reg_eqq' and 'rb_check_regexp_type' in re.c lack static modifiers, potentially causing linkage issues or namespace pollution."
66a7c92938638e3afceb1d92ae877376902a71a0,1557777570,"Don't run the compactor if GC is disabled

GC is required for pinning / marking objects.  If the compactor runs
without pinning everything, then it will blow up, so just return early
if the GC is disabled.
",['gc.c'],Running the compactor with disabled GC results in failure due to missing object pinning/marking mechanism.
82f55bae8697645505b386c04619df353e14938f,1532521601,"Promote Exception2MessageMapper to Default gems.

  * lib/e2mmap.gemspec: Added initial gemspec.
  * lib/e2mmap/version.rb: Added Exception2MessageMapper::VERSION for gemspec.
  * tool/sync_default_gems.rb: Support Exception2MessageMapper.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64046 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/e2mmap.gemspec', 'lib/e2mmap/version.rb', 'tool/sync_default_gems.rb']",Exception2MessageMapper not present in default gems causing lack of support in tool/sync_default_gems.rb.
a86c6cb34df0c44973efe6578ba1cd9150af22cf,1619526048,"[ruby/net-ftp] Replace Timeout.timeout with socket timeout

Timeout.timeout is inefficient since it spins up a new thread for
each invocation, use Socket.tcp's connect_timeout option instead
when we aren't using SOCKS (we can't replace Timeout.timeout
for SOCKS yet since SOCKSSocket doesn't have a connect_timeout
option).

https://github.com/ruby/net-ftp/commit/d65910132f
",['lib/net/ftp.rb'],Inefficiencies observed due to Timeout.timeout spinning up a new thread for each invocation in 'net-ftp'. Lack of a connection timeout option causes problems when using SOCKS.
c23a7b0db804577b7c30603db6c056385f88cb20,1435037572,"error.c: ArgumentError if no receiver

* error.c (name_err_receiver): raise ArgumentError if no receiver
  is available on this exception object.  [Feature #10881]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51002 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['error.c'],"If no receiver is available on the exception object, the program crashes instead of raising an ArgumentError."
ea817c60fcbdc2c4496be045f5bf028b702561ba,1616003737,"Refactor vm_defined to return a boolean

We just need this function to return whether or not the thing we're
looking for is defined.  If it's defined, return something true,
otherwise false.
",['vm_insnhelper.c'],The function vm_defined does not explicitly return a boolean value for whether the particular entity is defined or not.
0f8a433cabb89072f96599f11070650d977e9077,1538892534,"add_spec.rb: skip unstable spec on mingw

This sometimes crashes mspec worker like
https://ci.appveyor.com/project/ruby/ruby/build/9806/job/37tx2atojy96227m

and it doesn't generate helpful output and it seems hard to fix it soon.
As AppVeyor is too unstable by too many factors, let me skip this
at least for a short term. until AppVeyor gets stable.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64933 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['spec/ruby/core/threadgroup/add_spec.rb'],"The spec on mingw occasionally crashes mspec worker during AppVeyor CI execution, hard to debug due to lack of useful output."
77cde58d394b01c7b5f1ab5078d18e04373065db,1436840416,"webrick/server.rb: stop immediately

* lib/webrick/server.rb (WEBrick::GenericServer#start): flush
  shutdown pipe.
* lib/webrick/server.rb (WEBrick::GenericServer#stop): request the
  server to stop immediately by sending data via shutdown pipe.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51231 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/webrick/server.rb', 'test/webrick/test_server.rb']",WEBrick's GenericServer is not stopping immediately upon receiving a stop request and there seems to be a necessary flush of the shutdown pipe.
8617bac950fbee712e621f79bf96ca30fa9aa2ec,1661788024,"Fix IncrCounter on ARM

The order of operands to LDADDAL were flipped and the destination
pointer was dereferenced instead of passed as an address.
",['yjit/src/backend/arm64/mod.rs'],"In the ARM implementation, IncrCounter operation has incorrect operand order and erroneously dereferences destination pointer rather than passing it as an address."
a6b9b360ce6874d6545ec26e5b860cb5c0118f00,1486254123,"doc: Add example for Symbol#to_s

* string.c: add example for Symbol#to_s.

The docs for Symbol#to_s only include an example for
Symbol#id2name, but not for #to_s which is an alias;
the docs should include examples for both methods.

From: Marcus Stollsteimer <sto.mar@web.de>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57536 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['string.c'],"Documentation for Symbol#to_s lacks an example, which might cause confusion as it is an alias for Symbol#id2name."
0fd5f063aa8d4e6536e7f79122b4cb17a4f481e5,1539275284,"win32/Makefile.sub: generate MJIT header pdb

in the MJIT-header-specific path, not default path like vc140.pdb.

mjit_worker.c: specify the MJIT-header-specific pdb path.

tool/rbinstall.rb: install MJIT header pdb as well.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65003 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['mjit_worker.c', 'tool/rbinstall.rb']","MJIT header pdb is being generated in the default path instead of the MJIT-header-specific path, causing path specification issues."
4e1f20679f9debf04a95f84a830b6f7b757f1f53,1532228018,"test_rubyoptions.rb: allow passing test_verbose

with --jit.

`./ruby --jit -Itest/lib test/ruby/test_rubyoptions.rb -n ""TestRubyOptions#test_verbose""`
has failed without -DMJIT_FORCE_ENABLE like:

  1) Failure:
TestRubyOptions#test_verbose [/home/travis/build/k0kubun/mjit-test/test/ruby/test_rubyoptions.rb:118]:
<""ruby 2.6.0dev (2018-07-21 trunk 64010) +JIT [x86_64-linux]""> expected but was
<""ruby 2.6.0dev (2018-07-21 trunk 64010) [x86_64-linux]"">.

but the test should pass even without -DMJIT_FORCE_ENABLE.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64011 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_rubyoptions.rb'],"JIT test fails in 'TestRubyOptions#test_verbose' without -DMJIT_FORCE_ENABLE, although it should pass without any specific flags."
66ec3217dfe92267791071acb50ac60791a7861e,1639784339,"[ruby/pp] Add context to bind_call and skip 2.7+ test

The bind_call definition here is added primarily to support
running the tests on JRuby 9.3, which only supports Ruby 2.6
features. The excluded test appears to depend on inspect behavior
that changed after Ruby 2.6.

With these two changes the test suite runs green on Ruby 2.6 and
JRuby 9.3.

https://github.com/ruby/pp/commit/892c612958
",['test/test_pp.rb'],Running tests on JRuby 9.3 with Ruby 2.6 features results in issues due to the lack of context in the bind_call definition and the dependence on inspect behavior which changed after Ruby 2.6.
44d1929d0d2afde6a6906c3006ec08f0f929479f,1531302456,"test/ruby/test_io.rb: skip garbage and CPU tests if multi-threaded

Threads should not be active during these tests, but
maybe they are...

ref: https://bugs.ruby-lang.org/issues/14906

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63950 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_io.rb'],Active threads during test_io.rb are potentially interfering with garbage and CPU tests.
00c7a0d491504b0b2b1b8723d4b70e5c24ec649c,1645001824,"fix parallel test timeout retrying

On the parallel test, workers can be killed because of timeout
and the information for the retrying can be inconsistent.
This patch will skip if the inconsistency is found and report
as an error.

http://ci.rvm.jp/results/trunk-asserts@phosphorus-docker/3834082
",['tool/lib/test/unit.rb'],"In parallel testing, timeout-induced worker termination can lead to inconsistent retrying information, causing potential errors in test reports."
084487a37251b9105bb35c1de6a351f7310a2789,1475144464,"thread_sync.c: Remove confusing comments

* thread_sync.c (Init_thread_sync): Remove confusing doc comments,
  which are picked up by rdoc unexpectedly, from Queue and
  SizedQueue.  [Fix GH-1450]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56285 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread_sync.c'],"Confusing documentation comments in thread_sync.c are being inadvertently picked up by rdoc, causing unexpected behaviors."
d51743afc80c377d89260a57121c6911564df1b0,1448319449,"ext/socket/init.c (rsock_accept): handle ENOMEM

accept(2) documents ENOMEM as a possible error, handle it
consistent with all of our other FD-allocating wrappers.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52727 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/socket/init.c'],The accept method in ext/socket/init.c doesn't properly handle ENOMEM error leading to inconsistent behavior among FD-allocating wrappers.
3b83b265f11965582d4b9b439eff8a501792ab68,1675368969,"YJIT: Crash with rb_bug() when panicking

Helps with getting good bug reports in the wild. Intended to be
backported to the 3.2.x series.
","['yjit/bindgen/src/main.rs', 'yjit/src/cruby_bindings.inc.rs', 'yjit/src/yjit.rs']",YJIT crashes with rb_bug() function when system panic is initiated.
2da5ae4232ebb4b9b2cabd8bbb8ca5ee224afdbf,1478321928,"Fix the handling of the backslash in double quotes

* lib/shellwords.rb (Shellwords#shellsplit): Fix the handling of
  the backslash in double quotes to conform to the standard.
  [ruby-core:63807] [Bug #10055]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56573 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/shellwords.rb', 'test/test_shellwords.rb']",The handling of backslashes within double quotes in Shellwords#shellsplit does not conform to standard behaviours. [Bug #10055]
65ca14ea6e12d2e0bf2aff60538c8ca291c65fd3,1675358254,"[rubygems/rubygems] Fix TarReader::Entry#read/partial to match File#read and StringIO#read

TarReader is used as an IO object, but doesn't behave the same as other
implementations. These fixes make `read` and `readpartial` conform to the
interface of StringIO and File.

https://github.com/rubygems/rubygems/commit/bba32d7217
",['lib/rubygems/package/tar_reader/entry.rb'],"TarReader's `read` and `readpartial` methods are not consistent with those of File and StringIO, compromising its behavior as an IO object."
4c2e7f26bda8df087a66e546744de0d0d467ea7c,1608556243,"[json] JSON_parse_float: Fix how to convert number

Stop BigDecimal-specific optimization.  Instead, it tries the conversion
methods in the following order:

1. `try_convert`,
2. `new`, and
3. class-named function, e.g. `Foo::Bar.Baz` function for `Foo::Bar::Baz` class

If all the above candidates are unavailable, it fallbacks to Float.
","['ext/json/parser/parser.c', 'ext/json/parser/parser.rl']",JSON_parse_float BigDecimal-specific optimization causing incorrect number conversion - alternative conversion methods stop functioning resulting in fallback to Float conversion.
ebc99e026d0ae770b297a93d1f1c1ceeffd13bfc,1564513979,"Do not change IO.pipe encodings if encodings explicitly given

This commit makes it so that if the binmode option is given with
any encoding arguments, the reader and writer IO objects are
not set to binary encoding.

Fixes [Bug #12989]
","['io.c', 'test/ruby/test_io.rb']",Issue: Explicitly specified encodings for IO.pipe are being overridden by binary encoding when the binmode option is given.
d2f685eed74fb7b345bf1a75b6023d62d86a1a52,1513581307,"io.c: opening external command

* io.c (rb_io_open_generic): try to open the named file as usual,
  if klass is not IO nor File, so that Errno::ENOENT will be
  raised probably.  calling on File will be same in the future.

From: Nobuyoshi Nakada <nobu@ruby-lang.org>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61320 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['io.c', 'test/ruby/test_io.rb']","When trying to open a file through rb_io_open_generic, if the 'klass' is not IO or File, an Errno::ENOENT error might not be raised as expected."
b39690df3a90a838cdb2de71e70a20651ebafaf4,1664218840,"Rename method name in keyword test from y to yo

Kernel#y is defined by psych/yaml, which causes occasional
nondeterministic problems with this test when doing parallel testing.
",['test/ruby/test_keyword.rb'],Kernel#y defined by psych/yaml causes non-deterministic issues when running parallel tests due to method name conflict.
512cac32400ce1f3acf77226a435d3e8cf7347c5,1687188564,"Remove taint and untrusted flags (#7958)

* Make TAINT and UNTRUSTED flags zero

These flags do nothing already, and should break nothing.

* Remove TAINT and UNTRUSTED macros same as functions

These macros had been defined to use with `#ifdef`, but should not be
used anymore.","['include/ruby/internal/fl_type.h', 'yjit/src/cruby_bindings.inc.rs']",The TAINT and UNTRUSTED flags and macros are redundant and no longer serve any purpose in the code.
72df0a8e4703c4e14cb2014d59d8ddad09a47859,1552126653,"Add ignored_sp event

* ext/ripper/lib/ripper/lexer.rb (Ripper::Lexer): add ignored_sp
  event which will be fired from Ripper::Lexer#on_heredoc_dedent
  method.  [ruby-core:91727] [Bug #15648]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67200 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/ripper/lib/ripper/lexer.rb', 'test/ripper/test_scanner_events.rb']","Ripper::Lexer is missing an event, ignored_sp, which should be fired from Ripper::Lexer#on_heredoc_dedent method."
62c1d8187b21b7741284d179c7cb313ee661f806,1697763123,"Partly revert a change in #8705

Having this variable actually helps the performance of non-JITed calls.

-----  -----------  ----------  ----------  ----------  -------------  ------------
bench  before (ms)  stddev (%)  after (ms)  stddev (%)  after 1st itr  before/after
fib    241.9        0.5         225.4       1.0         1.06           1.07
-----  -----------  ----------  ----------  ----------  -------------  ------------

(benchmarked with --yjit-cold-threshold=0)
",['vm.c'],"A recent change led to decreased performance in non-JITed calls, which can be observed in benchmarks such as 'fib'."
11f4334f754d535b221fee0c3150e5bae8e68ce3,1450783212,"* vm_insnhelper.c: move vm_callee_setup_block_arg() (and related
  functions) to the latter location.
  This moving recovers performance a little.
  [Bug #11829]




git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53236 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['vm_insnhelper.c'],Current placement of vm_callee_setup_block_arg() function is causing performance issues.
47cb789332e80d51699ab95ef610a69f5556d44d,1689178974,"[ruby/etc] Declare `getlogin` even if unistd.h is not available

Although MinGW provides this header but not the function, Windows
version ruby provides the function.

https://github.com/ruby/etc/commit/f7fa1884fa
",['ext/etc/etc.c'],`getlogin` function is not available for use in the MinGW environment despite the presence of `unistd.h` header file.
7d4db0567930e2b65dfa9ac502aaa72b01c924a4,1467274407,"test_stringio.rb: reduce retry count

* test/stringio/test_stringio.rb (test_overflow): reduce maximum
  retry count to get rid of timeout on some platforms.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55544 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/stringio/test_stringio.rb'],"The ""test_overflow"" test in stringio is leading to timeouts on certain platforms due to the high maximum retry count."
16f5b18b7aa505765a5361a7d828e33963ea61bc,1541473048,"gc.c: move ASAN check to configure

Availability of attributes are checked in configure these days,
rather than compiler macros.  Also
__attribute__((no_address_safety_analysis)) is considered
deprecated in both GCC and Clang.  Use the current best practice
if available.  See also:

https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html
https://clang.llvm.org/docs/AddressSanitizer.html


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65558 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['gc.c', 'internal.h', 'tool/m4/ruby_decl_attribute.m4']",The availability check of attributes in gc.c is outdated and relies on deprecated attributes in GCC and Clang which may cause problems.
ba001b41607fe49ce378ca3e651c2ceff2da8076,1460361983,"test_whileuntil.rb: fix old behavior

* test/ruby/test_whileuntil.rb (test_while): fix old behavior.
  mere numeric literal in condition no longer matches $. global
  variable.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54539 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_whileuntil.rb'],"Numeric literal in condition within while loop does not match with global variable $., causing unexpected functionality."
8a132358d733d9cd81c6b83c9127e807a42c8ab9,1682353873,"[ruby/reline] Revert #335 (Trap TSTP to handle C-z)
(https://github.com/ruby/reline/pull/535)

This PR was an effort to address #321 (ed_quoted_insert doesn't work
properly) but per the reporter it did not work correctly.

Moreover, it introduced a major regression: Shell job control stopped
working in all applications that use reline, notably IRB.

Bash and other shells send SIGTSTP in response to C-z to implement job
suspension. Handling SIGSTP opts out of this functionality. For a
line oriented terminal program this should be avoided (not to mention,
this behavior diverges from readline's)

https://github.com/ruby/reline/commit/26383d25b8

Co-authored-by: Carl Brasic <cbrasic@drwholdings.com>
",['lib/reline/line_editor.rb'],"Shell job control stops working in applications using reline, notably IRB, due to a major regression introduced while attempting to fix ed_quoted_insert functionality."
14ad11a963811603b43e119d5a412575a9b2ad29,1536814432,"node.h: removed unused macros

* node.h (enum node_type): removed unused macros which redefine the
  same name enum values, and probably had ended the historical role.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64710 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['node.h'],"Unused macros in node.h are redefining same name enum values, which may lead to unwanted results or conflicts."
55a24f9b08ac2217accb720e29232d56aed2e5a4,1677514342,"YJIT: Reject __send__ with splat to cfunc for now

`make test-spec` revealed this issue after applying an unrelated bug
fix. A crashing case is included, though I suspect there are other
scenarios where it misbehaves. Don't compile for now.

Note that this is *not* an issue on the 3.2.x series; it has
`send_args_splat_non_iseq` which already rejects all splats to cfuncs,
including sends with splats.
","['bootstraptest/test_yjit.rb', 'yjit/src/codegen.rs', 'yjit/src/stats.rs']",The YJIT compiler crashes when managing __send__ calls with a splat to a cfunc. The issue is visible in certain test scenarios and is specific to versions other than 3.2.x series.
9484f9ebdf675f71811a5583c1af2415b26c932f,1620865573,"[rubygems/rubygems] Use `Time.stub :now` to avoid a random failure

Essentially this reverts 45464bfcbdf9f9cfb440950bc57a27d237627a17.
The commit removed a mock of Time.now, which caused a random failure.

http://rubyci.s3.amazonaws.com/ubuntu1804/ruby-master/log/20210512T123004Z.fail.html.gz
```
  1) Failure:
TestGemPackageTarWriter#test_add_file_signer [/home/chkbuild/chkbuild/tmp/build/20210512T123004Z/ruby/test/rubygems/test_gem_package_tar_writer.rb:117]:
Field mtime of the tar header differs..
<""14046746312\u0000""> expected but was
<""14046746311\x00"">.
```

Object#stub is defined at f1af59fe02ef2cc58f13e2742e4cc6cf8c2a1a20, so
now `Time.stub :now` works.

https://github.com/rubygems/rubygems/commit/85f60a9ed0
",['test/rubygems/test_gem_package_tar_writer.rb'],Removal of `Time.now` mock in `TestGemPackageTarWriter` causes random test failure due to difference in expected and actual 'mtime' of tar header.
c4c53310c23d913c1ff25863f1d9f7332b548f51,1473694809,"Copy the serial number from the super class to the singleton class

This helps hit inline method caches more frequently.  Before this
commit:

```
[aaron@TC ruby (trunk)]$ time ./ruby -v benchmark/bm_vm2_poly_singleton.rb
ruby 2.4.0dev (2016-09-12 trunk 56141) [x86_64-darwin15]

real  0m3.679s
user  0m3.632s
sys 0m0.022s
```

After this commit:

```
[aaron@TC ruby (trunk)]$ time ./ruby -v benchmark/bm_vm2_poly_singleton.rb
ruby 2.4.0dev (2016-09-12 trunk 56141) [x86_64-darwin15]
last_commit=Copy the serial number from the super class to the singleton class

real  0m2.246s
user  0m2.203s
sys 0m0.020s
```

[Feature #12364]
[ruby-core:75425]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56144 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['benchmark/bm_vm2_poly_singleton.rb', 'class.c']",Inefficient inline method cache hits negatively impact runtime performance when using singleton classes.
0a4be5beda66d355d49f558116b526ed5322f011,1526951588,"string.c: size hints for free and realloc calls

Another part of the plan to reduce dependencies on malloc_usable_size:
https://bugs.ruby-lang.org/issues/10238

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63485 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['string.c'],The existing dependencies on malloc_usable_size create issues for memory management and size calculations in string.c.
9792c9d183ccc0e80230858c910c74cfef5ddc32,1569551942,"[ruby/fileutils] Fix test_cp_r_dev on Windows or other systems without character/block device in /dev

Previously this would give an error such as:

TestFileUtils#test_cp_r_dev [c:/fileutils/test/fileutils/test_fileutils.rb:455]:
[RuntimeError] exception expected, not.
Class: <TypeError>
Message: <""no implicit conversion of nil into String"">

https://github.com/ruby/fileutils/commit/0ce0fefbeb
",['test/fileutils/test_fileutils.rb'],"TestFileUtils#test_cp_r_dev fails on Windows or systems without character/block device in /dev, causing a RuntimeError / TypeError for nil to String conversion."
c6c55bb78429d9305e8e1c65803ff3a388582ed6,1493434733,"node.h: sign-extend

* node.h (nd_line): should sign-extend.  shifting `VALUE` extends
  with zero bits if `sizeof(VALUE)` equals to `sizeof(int)`.  the
  zero bits are truncated if `sizeof(VALUE)` is bigger enough.
  [ruby-core:80920] [Bug #13523]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58503 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['node.h', 'test/ruby/test_parse.rb']","Issue with `nd_line` in node.h, zero bits are truncated when `sizeof(VALUE)` is larger due to shifting `VALUE` that extends with zero bits if `sizeof(VALUE)` equals `sizeof(int)`."
c6464c44c02fdbb597ca8027af0bc0db28d56f66,1567702663,"Fix code locations of array node inside hash node when multiple kw splats

This is broken at least since 2.5 (I didn't check earlier versions).
It resulted in failure in test_ast.rb when the tests were added before
the parser change.

Basically, in remove_duplicate_keys, if the node is modified, set
the location information to the previous location information. The
removal of keys should not affect the location in the code.
","['parse.y', 'test/ruby/test_syntax.rb']","Location information for array nodes inside hash nodes gets incorrect when multiple keyword splats are used, leading to test failures in test_ast.rb."
ec43478f34de262ebdd2922c488e265344b489c3,1516431926,"set AC_CONFIG_MACRO_DIRS [close GH-1793]

We do not use aclocal(1) by default. But in case users do so,
AC_CONFIG_MACRO_DIRS help them reconstruct the same contents as
this commit includes.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61982 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['acinclude.m4', 'aclocal.m4']","Issue with aclocal(1) usage resulting in different contents compared to the commit, users unable to reconstruct the exact output."
15f50d3bedbae76d7774601a4f7d93a330280098,1634127399,"[rubygems/rubygems] Simplify the incomplete locked specs for platform check

It doesn't really need converged specs, since it's only about the
lockfile.

https://github.com/rubygems/rubygems/commit/9cd6224b5e
",['lib/bundler/definition.rb'],"Platform check for locked specs is complicated and uses converged specs, when it only requires the lockfile."
d41baaee9f4cb725f82d74fc4978d923e6e63cbf,1531034849,"test/ruby (*no_hidden_garbage): disable GC and skip if multi-threaded

Any single object allocation can reduce object count, and
object counts are global, so multi-threading leads to unpredictable
results.

See also similar commits: r60699 and r62608

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63885 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/ruby/test_sprintf.rb', 'test/ruby/test_time.rb']",Single object allocation potentially reducing global object count in a multithreaded environment leads to unpredictable test results.
e90e916b441dbce85c2f61f60b3bf29dcc35d72d,1467684535,"* pack.c (pack_pack): use union instead of bare variable to ease
  optimizations and avoid assigning x87 floating point number.
  [ruby-core:74496] [Bug #12209]

* pack.c (pack_unpack): ditto.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55573 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['pack.c'],Assigning x87 floating point number in pack_pack and pack_unpack functions in pack.c creates optimization difficulties and potential issues.
30f71f4768e0babc60f5be6ca235d2c40268bc27,1555136872,"GET_CFP and ec->cfp are different

When reviewing r66565, I overlooked that `GET_ISEQ()` and `GET_EP()` are
NOT `ec->cfp->iseq` and `ec->cfp->ep` but `reg_cfp->iseq` and
`reg_cfp->ep`.

`vm_push_frame` updates `ec->cfp` and in this case we want to check the
callee's cfp and so `ec->cfp` should be checked instead.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67522 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['vm_insnhelper.c'],"Mismatch between `GET_ISEQ()`, `GET_EP()` and `ec->cfp->iseq`, `ec->cfp->ep` during `vm_push_frame`, leading to incorrect callee frame pointer (cfp) check."
4dc83eefcea94dec999a7a66ffab4f1d96b9ed2c,1593396341,"rb_ary_aset: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['array.c'],Usage of 'goto' command leading to jump into a branch causing unexpected control flow behavior.
6839d47eb88a839155db263b6d262b1e5a6a2406,1479529972,"ruby.h: rb_big_sign

* include/ruby/ruby.h (RBIGNUM_SIGN): use a wrapper function to
  return the sign bit, instead of comparing with 0.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56840 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['bignum.c', 'include/ruby/ruby.h']",The current comparison method with 0 for returning the sign bit in RBIGNUM_SIGN is resulting in incorrect outcomes.
4c8f1078985613ea1015fe1a1cdbe9944528cb35,1556426776,"Make the range to export as changelog optional

* `from` is defaulted to the beginning of the branch inclusively,
  otherwise the given revision is excluded as the previous.

* `to` is defaulted to the head.
",['tool/vcs.rb'],"The range of revisions to export as a changelog is not optional, resulting in potentially unnecessary data being exported when only a specific range is needed."
5353401c254a926426d9a289606fad18a755fcd2,1563167297,"thread.c (rb_thread_shield_waiting_{inc,dec}): prefer long to int

`(unsigned int)(THREAD_SHIELD_WAITING_MASK>>THREAD_SHIELD_WAITING_SHIFT)`
is 0xffffffff, and w > 0xffffffff is always true.
Coverity Scan pointed out this issue.
",['thread.c'],"Using 'unsigned int' in 'rb_thread_shield_waiting_{inc,dec}' results in incorrect comparisons, causing 'w' to always be greater than 0xffffffff."
0459eaec95a4daf2c019683785e6fca30eae15c2,1676916244,"compile.c: eliminate getinstancevariable -> pop sequences

This case wasn't eliminated before because `getinstancevariable`
could emit a warning, but that's no longer the case since Ruby
3.0.
",['compile.c'],"Instances where `getinstancevariable` results in `pop` sequences are not being eliminated, potentially leading to unnecessary warnings."
02151dad1ba324fac5f8e9459334164d01893124,1613466673,"`$LOAD_PATH.resolve_feature_path` should not raise

I think it's more friendly and easier to work with to return `nil` when
the feature is not found in the $LOAD_PATH.
","['load.c', 'test/ruby/test_require.rb']","`$LOAD_PATH.resolve_feature_path` is raising an error when a feature is not found in the $LOAD_PATH, disrupting workflow."
8ac9a7be0fea95d9fc17cce53c0d18d70cc8d091,1563440094,"Limit expansion of fiber pool on 32-bit platforms.

On 32-bit platforms, expanding the fiber pool by a large amount may fail,
even if a smaller amount may succeed. We limit the maximum size of a single
allocation to maximise the number of fibers that can be allocated.

Additionally, we implement the book-keeping required to free allocations
when their usage falls to zero.
",['cont.c'],"Large fiber pool expansion on 32-bit platforms may fail, impacting the maximum number of allocatable fibers."
9ef7c87d677ba3d7ddd72a1c37d9c7d0766ade8f,1461826445,"win32/file.c: fix reallocation threshold

* win32/file.c (replace_to_long_name): fix reallocation threshold.
  dereferenced size of a pointer is not same as the buffer size.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54807 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['win32/file.c'],"Pointer dereference in replace_to_long_name function does not give correct buffer size, resulting in incorrect reallocation threshold."
1883dc5bde27caec44154b7ce1f06b07f95eab3d,1682518880,"defined zsuper: Handle NULL superclass for `BasicObject`

Prior to this commit, a segmentation fault occurred in `vm_defined`'s
`zsuper` implementation after NULL is returned as `BasicObject`'s superclass.
This fix returns false from `vm_defined` if the superclass is NULL.

For example, the following code resulted in a segfault.
```ruby
class BasicObject
  def seg_fault
    defined?(super)
  end
end

seg_fault
```
",['vm_insnhelper.c'],"Segmentation fault occurring in `vm_defined`'s `zsuper` implementation when NULL is returned as `BasicObject`'s superclass, as observed when running specific Ruby code."
b53ccb9c69abd24e3bdad66cbe4c7e7480eaef16,1607655445,"show deprecation warning correctly for lambda(&b)

lambda(&b) where b is given block of method (like: def foo(&b))
should warn correctly.
[Feature #17361]

Also labmda(&labmda_block) or lambda(&:to_s) (Symbol#to_proc)
should not warn (but I'm not sure who cares about it).
","['proc.c', 'test/ruby/test_proc.rb']",Deprecation warning not displayed properly when 'lambda(&b)' is used where 'b' is a given method block. Same applies to 'labmda(&labmda_block)' or 'lambda(&:to_s)'.
9986697b621e5345177a1c395489dcc9fab8602b,1668093094,"Omit test on IO Buffers which relies on String being embedded

There is currently a bug ([#19084]) in how extended strings work in
IO Buffers. Object Shapes changes will make the string in this test
extended on 32 bit machines. Since this behavior is currently broken
(unrelated to object shapes) on 32 bit machines, this test will then
fail. We preemptively omit it so that this commit can be reverted
once the bug is fixed.
",['test/ruby/test_io_buffer.rb'],Extended strings in IO Buffers cause tests to fail on 32 bit machines due to an existing bug.
8095114f1715070fcdc2b29303dcf55a7fcc32a3,1598558076,"Comply with guide for method doc: hash.c (#3466)

Instance methods considered (most unchanged):
- any
- dig
- \<=
- \<
- \>=
- \>
- to_proc",['hash.c'],"Lack of detailed documentation for `hash.c` methods (any, dig, <=, <, >=, >, to_proc) not following the recommended guide."
cceb77f57b17a25a16b26a406f5ea7a89f275949,1592475255,"[rubygems/rubygems] Fix unintended Gemfile installation

This command is failing because of the same reason that the subsequent
`bundle exec` is failing: the gemspec is invalid. The `bundle install`
here deviates the `bundle exec` focus from the test and is unnecessary:
all we need is a `Gemfile` that will trigger the `bundle exec`, so let's
create and avoid the extra command.

https://github.com/rubygems/rubygems/commit/eb83cf6cf1
",['spec/bundler/commands/exec_spec.rb'],"Invalid gemspec causing failure in 'bundle install' and 'bundle exec' commands, unnecessarily deviating focus from the tests."
d212f11a004fb60534fc49374a1d5e159a14d710,1505224656,"Random.urandom raises an exception instead of returning nil when failed

Early failure looks better in this case.  Refs [Bugs #13885].

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59858 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['random.c'],"The method Random.urandom does not return nil as expected, but throws an exception when it fails."
97564ddf2baa518e4bda5b7a59111943dc13f210,1696020677,"Fix memory leak in the parser

Reproduction script:

```
require ""ripper""

10.times do
  20_000.times do
    Ripper.parse("""")
  end

  puts `ps -o rss= -p #{$$}`
end
```

Before:

```
28032
34432
40704
47232
53632
60032
66432
72832
79232
85632
```

After:

```
21760
21760
21760
21760
21760
21760
21760
21760
21760
21760
```
",['node.c'],Ripper.parse usage in a loop is causing consistent memory growth indicating a possible memory leak.
caa9d0bd7851c3b8cc9064987109eed9952a7c90,1570240201,"[rubygems/rubygems] Always pass an encoding option to Zlib::GzipReader.wrap

The arity of this method has been -1 since the import, so the
option has been passed always, even if Zlib::GzipReader#initialize
does not take the option.  Actually it takes the option since 1.9.

https://github.com/rubygems/rubygems/commit/2fcde0f4e0
",['lib/rubygems/package.rb'],"The Zlib::GzipReader.wrap method is always passed an encoding option even though it shouldn't, causing potential incompatibility issues."
d8f628e582cb81c212979b186638ce69f1bd953e,1436517717,"dir.c: get attributes by fd

* dir.c (is_case_sensitive): get attributes by the file descriptor
  of open directory, instead of using mount point name.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51208 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['dir.c'],Mount point name used in dir.c for getting attributes instead of the file descriptor of open directory results in case-sensitivity issues.
6f73c38791bc559eddd6929fc6d0153efd9f7b95,1491164162,"compile.c: avoid duplicate mark entry for string literal Range

iseq_add_mark_object is called in iseq_set_sequence later on,
so we only need to call iseq_add_mark_object_compile_time
in iseq_peephole_optimize.  Without this change, there would've
been a duplicate entry in the long-lived iseq mark_ary.

* compile.c (iseq_peephole_optimize): avoid duplicate mark object entry
  [ruby-core:80536] [Feature #13355]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58238 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['compile.c'],Duplicate entries are being created in iseq mark array due to an unnecessary early call to iseq_add_mark_object during string literal Range compilation.
56ca006784d8737463857776a807c6f656ca8455,1591086063,"run lldb to investigate the stuck process.

Before sending signals (ABRT, KILL), use lldb to show the
backtrace of a stuck process.

This commit also reverts recent changes for terminate().
",['tool/lib/envutil.rb'],"Stuck processes lack sufficient debugging information pre-signal termination, making it difficult to understand the cause of their hang. Recent changes to terminate() may also be contributing to this issue."
b5eeb3453e7c3047ce3e4f39e8ae89af4fafb16f,1593396341,"trap_handler: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['signal.c'],"The trap handler is using GOTO to jump into a branch, leading to unpredictable and potentially incorrect behavior."
07786edd66f59a529d6febb2e0fe901782991755,1600942817,"test/net/http/test_https.rb: Stop the error due to openssl 1.1.1h

On some environments that uses OpenSSL 1.1.1h, the two tests now fail.

http://rubyci.s3.amazonaws.com/android29-x86_64/ruby-master/log/20200924T062352Z.fail.html.gz
https://github.com/ruby/ruby/runs/1159288773?check_suite_focus=true

```
  1) Failure:
TestNetHTTPS#test_get [/data/data/com.termux/files/home/cb/tmp/build/20200924T062352Z/ruby/test/net/http/test_https.rb:47]:
<""0\x82\x03\xED0\x82\x02\xD5\xA0\x03...""> expected but was
<""0\x82\x03\xE30\x82\x02\xCB\xA0\x03..."">.
```

Not sure why, but verify_callback now seems to receive only SERVER_CERT
but not CA_CERT.
It would be good to investigate the issue furthermore, but tentatively,
I want to stop the failures.
",['test/net/http/test_https.rb'],"In some environments using OpenSSL 1.1.1h, two tests fail because verify_callback only receives SERVER_CERT and not CA_CERT."
7292569d3fefacee8dd9cac739a07f4af1a1c808,1522226301,"io.c: IO#write without args returns 0

This is consistent with other implementations of .write
in openssl and stringio.

* io.c (io_write_m): return 0 on argc == 0
  [ruby-core:86285] [Bug #14338]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62967 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['io.c', 'test/ruby/test_io.rb']","IO#write function without arguments is not returning 0, causing inconsistency with other implementations like openssl and stringio."
b7ad549654f45dcca7d39701135868e3e68f4888,1493463059,"load.c: remove a redundant rb_str_freeze call

rb_file_expand_path_fast already performs the buffer shrinking
rb_str_freeze does (via expand_path macro in file.c); the
result of rb_fstring is always frozen, and that rb_fstring
call is the last use of `expanded_path` in its scope.

load.c (rb_construct_expanded_load_path): remove rb_str_freeze

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58506 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['load.c'],"The rb_str_freeze call is redundant in the rb_construct_expanded_load_path method, as rb_file_expand_path_fast already performs buffer shrinking."
4fbfc116ca375ba8ae3747fcf32fdb85c48683c9,1689164969,"[rubygems/rubygems] Update GitHub organization of Standard Ruby

## What was the end-user or developer problem that led to this PR?

The old URL https://github.com/testdouble/standard is mentioned.

## What is your fix for the problem, implemented in this PR?

This PR updates to the new URL https://github.com/standardrb/standard.

https://github.com/rubygems/rubygems/commit/eeafba72fc
",['lib/bundler/cli/gem.rb'],"The provided link to the Standard Ruby GitHub organization in RubyGems is outdated, leading to navigation issues for users and developers."
4530a8ef7fc692b057d0a54579fb02afaa4656d4,1477547915,"socket: fix rdoc of UDPSocket#recvfrom_nonblock

* ext/socket/lib/socket.rb (UDPSocket#recvfrom_nonblock): [DOC] Remove
  a false statement ""If _maxlen_ is omitted, its default value is
  65536."" maxlen, the first parameter, cannot be omitted as the method
  signature indicates. This hasn't changed ever since it was first
  implemented.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56499 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/socket/lib/socket.rb'],"The rdoc for UDPSocket#recvfrom_nonblock incorrectly indicates that maxlen, the first parameter, can be omitted, giving misleading information.
"
1d6ca665f5df248c6c838129c62fe67e040c209c,1522823766,"rexml: Fix a XPath bug of function()/path
    
[Bug #14600]
    
* lib/rexml/functions.rb: Fix a bug that ""function()/path"" always returns
  nothing.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63086 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/rexml/parsers/xpathparser.rb'],"The ""function()/path"" in rexml's XPath implementation always returns nothing."
25f5dd6799bbacc9f61d60b87b70ea6e6d815c20,1447436292,"* vm.c (vm_define_method): do not use current CREF immediately,
  but check CREF in environment or methods. Methods defined in methods
  should be public.
  [Bug #11571]

* vm_method.c (rb_scope_module_func_check): check CREF in env or me.
  if CREF is contained by `me', then return FALSE.

* test/ruby/test_method.rb: add a test.




git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52562 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/ruby/test_method.rb', 'vm.c', 'vm_method.c']",Methods defined within methods are not correctly set to public due to immediate use of current CREF. This results in problems in controlling method visibility and encapsulation.
6df6611ce77d1bb7d50375a1399e1d5101a3a616,1571852954,"Treat only left alt key as meta-key on Windows

On German keyboard, right alt key acts as like shift key.

Ex. right-alt-8 is just ""["". This input doesn't have meta-key statement.
",['lib/reline/windows.rb'],"In Windows, on a German keyboard, the right alt key functions similarly to a shift key, causing an incorrect perception that meta-key statements are incomplete or missing."
2bd061f25e93683d7b2aa36f1227cef3df8dd37e,1465453938,"common.mk: ifchange for mkconfig.rb

* common.mk (RBCONFIG): use ifchange tool to see if the content is
  changed and update the timestamp file.
* tool/mkconfig.rb: remove ifchange features.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55338 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['common.mk', 'tool/mkconfig.rb']","The mkconfig.rb script is executing ifchange features redundantly as it's already provided by the common.mk, leading to unnecessary repetitions."
583d903c2ba5de82bd3eb2eb687b1c107938f9e2,1520904507,"Speed up func1.func2 completion by using Set for ignored modules

And thus avoiding Module#name calls. Those are slow, especially in
larger projects, with lots of anonymous modules.

[Fix GH-1798]

From: Dmitry Gutov <dgutov@yandex.ru>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62732 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/irb/completion.rb'],"Large projects with many anonymous modules experience significant delays due to slow func1.func2 completion times, primarily due to the repeated calls to Module#name."
856bd77aea9450e63a3acdc2deba04613050da43,1532747410,"thread.c (blocking_region_end): clear ubf before unregister_ubf_list

If we keep ubf set after unregistering, there is a window for
other threads (including timer thread) to put this thread back
on the ubf_list right away.  Entering ubf_list unexpectedly
after GVL acquisition may cause spurious wakeup and trigger
unexpected behavior.

Finally, clear ubf before acquiring GVL, to since ubf is useless
during GVL acquisition anyways and we don't want to waste cycles
in other threads calling ubf for useless work.

[ruby-core:88141] [Bug #14945]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64083 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread.c'],Keeping ubf set after unregistering can potentially cause unexpected behavior due to spurious wakeups and superfluous cycle consumption in other threads.
20cd25c86fd28eb1b5068d0db607e6aa33107f65,1461141213,"cgi/util.rb: remove CGI::Util#_unescape

* ext/cgi/escape/escape.c (cgiesc_unescape): define unescape
  method instead of _unescape, and should pass the optional
  argument to the super method.
* lib/cgi/util.rb (CGI::Util#_unescape): remove intermediate
  method.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54655 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/cgi/escape/escape.c', 'lib/cgi/util.rb', 'test/cgi/test_cgi_util.rb']",The method CGI::Util#_unescape in lib/cgi/util.rb is excessive and potentially hindering the passing of optional arguments to the super method.
25267fdd69edc29fe0dc32745549f94a37e7485c,1689954499,"[ruby/yarp] Exclude heredoc_nested test for Rubies < 3.3

Ripper's lexemes were slightly different in Ruby 3.2 for Heredocs.
We ignored this complex heredoc test in this case because
Ripper's output has changed

https://github.com/ruby/yarp/commit/59d3d4a899
",['test/yarp/parse_test.rb'],"In Ruby versions less than 3.3, Ripper's lexemes create differing results for complex Heredocs tests."
e0c023d1c8a22533b6cd3a5fa4bbcd4145f635b5,1588491243,"Skip only .dSYM cleanup on macOS

Fix https://github.com/ruby/ruby/runs/636020145 without skipping too
many tests.

It seems that .c -> .o with debug flags and .o -> .so without debug
flags did not generate .dSYM but now .c -> .so with debug flags seems to
generate a .dSYM directory. As --jit-debug should not be used by normal
users, let me skip implementing the removal for now.
","['test/ruby/test_jit.rb', 'test/ruby/test_jit_debug.rb']",The --jit-debug flag generates unnecessary .dSYM directories during the .c -> .so compilation with debug flags.
52220154a8310d0140829daa1de665003bb11dec,1513932731,"force hash values fixable

* include/ruby/ruby.h (RB_ST2FIX): force fixable on LLP64 environment.

* hash.c (any_hash): ditto.
  [ruby-core:84395] [Bug #14218]


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61413 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['hash.c', 'include/ruby/ruby.h', 'test/ruby/test_hash.rb']","There's an issue with hash values not being fixable on the LLP64 environment, which is causing bugs in ruby's hash.c and include/ruby/ruby.h."
5c892da7d7974aeed8e7dd97bb31d2394cc19356,1636506510,"class.c: descendants must not cause GC until the result array is created

Follow up of 428227472fc6563046d8138aab17f07bef6af753. The previous fix
uses `rb_ary_new_from_values` to create the result array, but it may
trigger the GC.

This second try is to create the result array by `rb_ary_new_capa`
before the second iteration, and assume that `rb_ary_push` does not
trigger GC. This assumption is very fragile, so should be improved in
future.

[Bug #18282] [Feature #14394]
","['class.c', 'test/ruby/test_class.rb']","Creation of result array in class descendants can trigger the GC, which may be undesirable and potentially harmful to performance. This is linked to the usage of `rb_ary_new_from_values`."
e82df08b9f72a0e003f3a69fd4bc016a0ecad19f,1464683190,"optparse.rb: no duplicate strings

* lib/optparse.rb (OptionParser#parse_in_order): get rid of making
  duplicate strings; $1 and others make a new string each times.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55227 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/optparse.rb'],"The OptionParser#parse_in_order function in optparse.rb creates duplicate strings each time $1 and others are invoked, causing unnecessary usage."
76bae60d9b967415c5930c2c5906e14c8362a6dd,1665061272,"[Bug #19038] Fix corruption of generic_iv_tbl when compacting

When the generic_iv_tbl is resized up, rebuild_table performs
allocations that can trigger GC. If autocompaction is enabled, then
moved objects are removed from and inserted into the generic_iv_tbl.
This may cause another call to rebuild_table to resize the
generic_iv_tbl. When returning back to the original rebuild_table, some
of the data may be stale, causing the generic_iv_tbl to be corrupted.

This commit changes rebuild_table to only read data from the st_table
after the allocations have completed.

Co-Authored-By: Matt Valentine-House <matt@eightbitraptor.com>
",['st.c'],"Resizing of generic_iv_tbl during allocation triggers GC and if autocompaction is enabled, moved objects manipulation can cause further resizing resulting in stale data and corruption of generic_iv_tbl."
af597321e5feb8937f410b44846c031ac29c700d,1515020702,"compile.c: fix disasm dump

* compile.c (DECL_ANCHOR): initialize as anchor type, which is not
  a valid iseq element.

* compile.c (BADINSN_DUMP): dump from the first element, excluding
  the anchor itself.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61584 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['compile.c'],Issues with disasm dump in compile.c - uninitialized DECL_ANCHOR and incorrect dump from anchor itself in BADINSN_DUMP.
f30d38bdd08d241f8c3c1768069911e627f955f8,1565995639,"Move lib directory to the last of $LOAD_PATH on ruby repository.

  https://github.com/rubygems/rubygems/pull/1868 changes the behavior
  of require when it used with -I options. Therefore, the options of
  ruby repository was different from rubygems/rubygems.
",['test/rubygems/test_require.rb'],Issue with 'require' behaving differently when used with -I option due to $LOAD_PATH order discrepencies between ruby repository and rubygems.
d13879f862a98e718ba7ec40e8d43137efb97a8b,1676973002,"[ruby/bigdecimal] Read version from bigdecimal.c

The dependency of extconf.h on bigdecimal.gemspec does not make sense
as far as no rule is defined for it.  Also, the relationship between
extension library and gemspec file is various in default gems, and
does not work well.

https://github.com/ruby/bigdecimal/commit/7f99b28552
","['ext/bigdecimal/bigdecimal.c', 'ext/bigdecimal/bigdecimal.gemspec', 'ext/bigdecimal/extconf.rb']","The dependency on bigdecimal.gemspec in extconf.h is undefined and ineffective, causing potential issues in version tracking within the bigdecimal library."
391d6ab4f7c3070d0c46dbd7496255d8269f6c1f,1633927854,"[ruby/ipaddr] Fix include? and ipv4_mapped to allow drb tests to pass

include? should return false if comparing an IPv4 address to an IPv6
address.

ipv4_mapped needs to set the correct netmask on the mapped
addresses.

https://github.com/ruby/ipaddr/commit/da22ef8e6c
",['lib/ipaddr.rb'],The 'include?' function returns incorrect results when comparing IPv4 to IPv6 addresses and 'ipv4_mapped' does not properly set the netmask on mapped addresses.
b936115ed6f0f9e2f86a9c000a98abf5552af7e9,1526043696,"fix potential memory leaks

* parse.y (primary, new_args_tail, local_tbl): keep the order;
  allocate an empty imemo first then xmalloc, to get rid of
  potential memory leak when allocation imemo failed.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63397 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],Potential memory leak when allocating an imemo fails due to the order of allocation operations.
54fa33ea491bb1c47400d4534f649efbd47767e3,1474031488,"* ext/openssl/ossl_ssl.c (ssl_npn_select_cb_common): Fix compile error
  with old version of fcc (Fujitsu C Compiler) on Solaris 10.
  [Bug #12769] [ruby-dev:49809]



git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56173 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/openssl/ossl_ssl.c'],Compile error encountered when using older versions of Fujitsu C Compiler (fcc) on Solaris 10 with 'ssl_npn_select_cb_common' in 'ossl_ssl.c'.
290903dba01d97bc6869886eccef0378dcdd5e0c,1572503641,"[ruby/zlib] Remove taint support

Ruby 2.7 deprecates taint and it no longer has an effect.
The lack of taint support should not cause a problem in
previous Ruby versions.

https://github.com/ruby/zlib/commit/21711ed0ce
","['ext/zlib/zlib.c', 'test/zlib/test_zlib.rb']",The zlib library in Ruby still supports taint feature which is deprecated in Ruby 2.7 causing potential incompatibility issues.
4b7f531553100afad272c7078b23e6e32989bc2a,1509924770,"enum.c: check argument first

* enum.c (enum_cycle_size): check an argument before the size of
  the receiver, if it is given.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60668 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['enum.c', 'test/ruby/test_enumerator.rb', 'test/ruby/test_lazy_enumerator.rb']","The enum_cycle_size function fails to check if an argument is given before checking the size of the receiver, causing potential errors."
5bf3657b9f06761a61d2b05e8c1e2904660d10b1,1512135603,"parse.y: Fix locations of NODEs related to for statement

* parse.y: Fix to only include a range of for_var.

  e.g. The locations of the NODE_ARGS and NODE_DVAR are fixed:

  ```
  for a in m do n end
  ```

  * Before

  ```
  NODE_ARGS (line: 1, first_lineno: 1, first_column: 0, last_lineno: 1, last_column: 19)
  NODE_DVAR (line: 1, first_lineno: 1, first_column: 0, last_lineno: 1, last_column: 19)
  ```

  * After

  ```
  NODE_ARGS (line: 1, first_lineno: 1, first_column: 4, last_lineno: 1, last_column: 5)
  NODE_DVAR (line: 1, first_lineno: 1, first_column: 4, last_lineno: 1, last_column: 5)
  ```

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60965 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],"The locations of NODE_ARGS and NODE_DVAR related to the 'for' statement are incorrectly covering the entire range, instead of only including the range of for_var."
0f663b244944c5eb2b6c7d0862c15c377747df05,1436533553,"timeout.rb: removed and use Timeout::Error

* lib/timeout.rb (ExitException): removed internal exception class
  and use Timeout::Error instead, as using throw/catch to isolate
  each timeouts now.  [ruby-dev:49179] [Bug #11344]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51213 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/timeout.rb', 'test/test_timeout.rb']","The internal exception class, ExitException, in lib/timeout.rb is unnecessary and may cause potential issues with the current approach of using throw/catch for timeouts isolation."
e4eb6e33428b91c417169d5273e63af9063837c6,1539439428,"vm_insnhelper.c: finish reverting r63333

That optimization is already reverted and we're not retrying the
optimization soon. Let me simplify the code of vm_getivar.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65061 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['vm_insnhelper.c'],An optimization in vm_getivar resulted in code complexity that needs simplification.
22263722689c7b5a7a1658a65e8ed713aa921e21,1477635540,"complex.c: FINITE_TYPE_P

* complex.c (FINITE_TYPE_P): extract predicate.
* complex.c (rb_complex_finite_p, rb_complex_infinite_p): use
  dedicated predicates instead of switch by TYPE.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56507 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['complex.c'],"Dedicated predicates not being used in `rb_complex_finite_p` and `rb_complex_infinite_p` functions in complex.c file, triggering a switch by TYPE which shouldn't be the case."
ec5184afa7859c282d59c4c3e008d5b06572f953,1494946384,"test_process.rb: compare in UTF-8

* test/ruby/test_process.rb (test_execopts_open_chdir_m17n_path):
  compare directory name in UTF-8.  encoding of `Dir.pwd` is
  affected by filesystem encoding.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58755 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_process.rb'],"The encoding for `Dir.pwd` is affected by filesystem encoding, causing discrepancies when comparing directory names."
d009cebf0faff38a99c7fcb47b08b052303cf3db,1463152617,"random.c: no local copy of the seed

* random.c (make_seed_value): append leading-zero-guard and get
  rid of making a local copy of the seed.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54997 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['random.c'],Local copy of seed being unnecessarily created in make_seed_value function in random.c.
2f12af42f7f26d570219b87a89294532a86a8ae2,1604785665,"Add support for IPv6 link local addresses to resolv

Now that it should work correctly, test that every address returned
by Socket.ip_address_list is resolvable.

Socket works with IPv6 link local addresses, and ipaddr now does
as well, so I think resolv should support them.

Fixes [Bug #17112]
","['lib/resolv.rb', 'test/resolv/test_addr.rb']","Resolv cannot handle IPv6 link local addresses, causing it to return unresolvable addresses."
ad3d210beab9d162b96e2601aa3ad896785b831b,1666023077,"YJIT: call free_block to cleanup block when out of memory

The commented out instance of free_block() is left over from the port.
The addition in gen_single_block() was a place we missed. The new block
is allocated in the same function and could have invariants associated
with it even though there is no space to hold all the code.
","['yjit/src/codegen.rs', 'yjit/src/core.rs']","When running out of memory, the cleanup of the new block in gen_single_block() may not be managed properly, possibly breaking invariants."
428227472fc6563046d8138aab17f07bef6af753,1636441870,"class.c: calculate the length of Class.descendants in advance

GC must not be triggered during callback of rb_class_foreach_subclass.
To prevent GC, we can not use rb_ary_push. Instead, this changeset calls
rb_class_foreach_subclass twice: first counts the subclasses, then
allocates a buffer (which may cause GC and reduce subclasses, but not
increase), and finally stores the subclasses to the buffer.

[Bug #18282] [Feature #14394]
","['class.c', 'test/ruby/test_class.rb']","Triggering GC during callback of rb_class_foreach_subclass leads to issues, due to use of rb_ary_push. Buffer allocation could trigger GC, possibly reducing subclasses count."
181d4bee5e03a30596e78b2d7aa0396887a53881,1670591460,"Use rb_inspect instead of +PRIsVALUE for Object.inspect

In order to preserve the values when TrueClass, FalseClass or NilClass
are stored in ivars
","['object.c', 'test/ruby/test_object.rb']","When TrueClass, FalseClass, or NilClass are stored in instance variables, their values are not preserved correctly."
e6c0a8f19e3f38fdc77906ea545f8d3b0479adf7,1520304497,"resolv.rb: close socket

* lib/resolv.rb (UnconnectedUDP#lazy_initialize): store new
  sockets before binding, so the sockets get closed when the
  requester is closing.

* lib/resolv.rb (ConnectedUDP#lazy_initialize): ditto.

* lib/resolv.rb (UnconnectedUDP#close): synchronize to get rid of
  race condition.

* lib/resolv.rb (ConnectedUDP#close): ditto.

[ruby-core:85901] [Bug #14571]

From: quixoten (Devin Christensen) <quixoten@gmail.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62671 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/resolv.rb', 'test/resolv/test_dns.rb']","Race condition experienced during close of UnconnectedUDP and ConnectedUDP, potentially leaving opened sockets due to asynchronous get rid of in resolv.rb."
487d0c99d53208594702bb3ce1c657130fb8d65f,1587458372,"eval_error.c: revert the ""reversed"" backtrace [Feature #8661]

Now, the order is good, old-fashioned style:

```
$ ./local/bin/ruby -e 'def foo; raise; end
def bar; foo; end
def baz; bar; end
def qux; baz; end
qux
'
-e:1:in `foo': unhandled exception
	from -e:2:in `bar'
	from -e:3:in `baz'
	from -e:4:in `qux'
	from -e:5:in `<main>'
```
",['eval_error.c'],The new backtrace order in eval_error.c is causing confusion due them being displayed in a 'reversed' manner.
d013d8e02e895e08f7feb0977c0ea88e6f00b580,1565885479,"Fix crash on $(PULL_REQUEST) expansion

by directly passing it to Ruby without passing a shell.
Formerly it was broken when $(PULL_REQUEST) included quotes.
",['defs/gmake.mk'],"When $(PULL_REQUEST) includes quotes, it causes a crash during expansion due to its direct passage to Ruby without going through a shell."
dbf67bf02db7afcca46b58e5b48fc7d805818e48,1497420235,"proc.c: skip prepended modules

* proc.c (method_super_method): skip prepended modules and
  continue from the super class of the original class.
  [ruby-core:81666] [Bug #13656]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59080 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['proc.c', 'test/ruby/test_method.rb']","Prepended modules cause method_super_method in proc.c to behave inconsistently, not continuing from the original class's superclass as expected."
b867882a1c2a358bb7a46f84365c86a959d35240,1508599286,"SecureRandom.alphanumeric implemented.

[ruby-core:68098] [Feature #10849] proposed by Andrew Butterfield.

SecureRandom.choose and SecureRandom.graph is not included.
(The implementation has SecureRandom.choose but it is private.)

I feel the method name, SecureRandom.choose, doesn't represent
the behavior well.

The actual use cases of SecureRandom.graph is not obvious.



git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60297 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/securerandom.rb', 'test/test_securerandom.rb']","SecureRandom's 'choose' function is private and misnamed, not clearly representing its behavior. The use cases of SecureRandom.graph are unclear."
4b41ee154f117e18b54c7fb31574f2e314f10f15,1601601283,"Update the thread's self / wrapper address

Threads can move, and if they do, their self pointer may go bad.  We
need to update it.
",['vm.c'],"Thread's self pointer becoming invalid due to movement of threads, causing potential crashes or incorrect thread related data."
5d7953f86b7ae164017e2292dfb3c108e0e02527,1601307244,"Switch conflicting chdir warning to RuntimeError

The documentation already stated this was an error in one case
(when it was previously a warning).  Describe the other case,
where chdir without block is called inside block passed to chdir.

Fixes [Bug #15661]
","['dir.c', 'test/ruby/test_dir.rb']","Calling chdir without block inside a block passed to chdir, contrary to the document stating it as an error, only triggers a warning and not a RuntimeError as intended."
70ae83f8e18a2a3d65ee45dde318027be8b4f3c3,1517791965,"transform_mjit_header.rb: separate macro and code

* tool/transform_mjit_header.rb (separate_macro_and_code): return
  macro and code separately as the name, and concat before output.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62214 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['tool/transform_mjit_header.rb'],Transformation process in transform_mjit_header.rb is not separating macros and code adequately causing issues with the output.
e25c173c97e1e0e538aeb85734cabcbb59cd11ab,1672813966,"[ruby/reline] correct Win32API capitalization for JRuby

JRuby 9.4.0.0 introduced a change in case sensitivity in require statements,
meaning that an inclusion of `win32api` loaded Win32API.rb. With this change,
the require statement needs to be updated to the correct capitalization of the
filename to avoid reline failures in newer versions of JRuby.

https://github.com/ruby/reline/commit/d6e7c9e1d9
",['lib/reline/windows.rb'],Incorrect capitalization in require statement for `win32api` causing reline failures on JRuby version 9.4.0.0 and up.
5f01fba001c478834d97d8abf88b0cb6e235d436,1645029839,"yjit_codegen.c: Prevent a possible out-of-bound access

The code attempts to read `C_ARG_REGS[leaf_builtin->argc + 1]`, and the
size of `C_ARG_REGS` is `NUM_C_ARG_REGS`.  So, the guard condition must
be `leaf_builtin->argc + 1 + 1 <= NUM_C_ARG_REGS`.

This change fixes the off-by-one error. This issue was found by Coverity
Scan.
",['yjit_codegen.c'],"The code is causing a possible out-of-bounds access when attempting to read `C_ARG_REGS[leaf_builtin->argc + 1]`, due to an off-by-one error in the guard condition."
1ac36ecf0048efd1c19fa5c932b8f3a56bc466d6,1487326929,"test_fileutils.rb: cache distinct UIDs

* test/fileutils/test_fileutils.rb: cache distinct UIDs as
  constants at initialization.  assume no UIDs will be
  added/removed during tests.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57645 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/fileutils/test_fileutils.rb'],"Fileutils tests do not handle distinct UIDs efficiently, assumptions made about no UIDs getting added/removed during testing process."
73e42ef856840187966c78e73e6994506677a1cf,1669505993,"MJIT: Remove a duplicated rescue

`#compile` has a catch-call rescue, so compile_insn_entry shouldn't do
that. It was a temporary code needed during the migration.
",['lib/mjit/compiler.rb'],"Duplicate rescue calls in `#compile` and `compile_insn_entry` are redundant, affecting efficient exception handling."
9bd4b2ab14eea3df392f4531887fcc1c59291d02,1645712281,"Add ABI version to RUBY_LIB_VERSION

This commit adds the ABI version as build metadata to
RUBY_LIB_VERSION. This will ensure that gems are installed in a path
with the ABI version.
","['tool/mkconfig.rb', 'version.h']",Gems installation path doesn't adhere to the ABI version due to its absence in RUBY_LIB_VERSION.
84d818678f005383ce6bc727be0ecaf1b5636743,1459907776,"Logger: simple refactoring

* lib/logger.rb (Logger#level=): remove unnecessary local
  variable.
* lib/logger.rb (Logger#initialize, Logger#reopen): [DOC] mention
  the default values.  cherrypicked from [GH-1319].

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54497 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/logger.rb'],Logger's #level= method contains an unnecessary local variable. Logger#initialize and Logger#reopen do not document the default values.
3463e83192215c36bdcebad8be907eaa09593a41,1567218346,"Warn for keyword to last hash parameter when method has no optional/rest parameters

Previously, there was no warning in this case, even though we will
be changing the behavior in Ruby 3.

Fixes [Bug #14130]
","['spec/ruby/language/method_spec.rb', 'test/ruby/test_keyword.rb', 'vm_args.c']","No warning issued when a keyword is passed to the last hash parameter in a method that has no optional/rest parameters, affecting forthcoming behavior alterations in Ruby 3."
c836e8ddd57de7e4f1c02a7ba645e21c5cd4e6d0,1494972339,"test/test_extilibs.rb: do not check the existence of fiddle

libffi is not installed on all systems, and is not needed
for most of the tests.

Tested on a fresh FreeBSD 11.0 VM

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58761 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/test_extlibs.rb'],Fiddle existence check in test/test_extlibs.rb causing test failures on systems where libffi is not installed.
5b3d137b1fd9f9f56fa6f17888ab8038906ed760,1507192321,"Fixed broken `bundle gem` command.

  This patch is provided by @gyugyu (Yusuke Yagyu)

  * Remove README* entry from no_install that there is no README* files except README.md.tt
  * Rename .travis.yml.tt to travis.yml.tt like gitignore.tt

  [Bug #13975][ruby-dev:50278][fix GH-1710]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60122 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/bundler.gemspec', 'lib/bundler/cli/gem.rb', 'tool/rbinstall.rb']",`bundle gem` command is broken due to nonexistent README* files and improper naming of travis.yml.tt.
1f9e66836b71dd77aaef660628eb2455b4f28a3b,1686016373,"[rubygems/rubygems] Fix inline mode with multiple sources

If we're in inline mode, Bundler first resolves using only local gems,
and if some gems are missing, then it re-resolves using remote gems.
However, ""source resolution"" from the initial ""local"" try was being
memoized, resulting in Bundler not looking for some gems remotely in the
second resolution.

This commit forces a proper re-resolve in this case.

https://github.com/rubygems/rubygems/commit/fdc631075e
","['lib/bundler/definition.rb', 'spec/bundler/runtime/inline_spec.rb']","In inline mode, Bundler fails to re-resolve missing gems from remote sources after initial local resolution, leading to some gems not being found."
c06f9e1d24e0e164506c6b5946a02814319485cc,1558689756,"switch UNICODE_BETA to NO (one more try, first try didn't work)

    Unicode version 12.1.0 was officially released on May 7th, 2019.
    There were no changes at all from the ""real"" beta
    published shortly after the new era name ""Reiwa"" was announced.
    So we can switch UNICODE_BETA back to NO.

    common.mk: switch UNICODE_BETA back to NO
    tool/downloader.rb: add additional conditions to avoid an error
                        when moving from beta to final
","['common.mk', 'tool/downloader.rb']",Using UNICODE_BETA flag after official release of Unicode version 12.1.0 causes unnecessary errors due to transition from beta to final stage.
a5bae843ff2b2fe9b46de8766c135489ccda8d9e,1633734323,"[rubygems/rubygems] Let `update_git` work with whatever branch is checkout out

Unless the `:branch` option is passed.

It's more efficient, and it results in less hardcoding of ""master"".

https://github.com/rubygems/rubygems/commit/aa5c3409ab
","['spec/bundler/support/builders.rb', 'spec/bundler/update/git_spec.rb']","When `update_git` is executed without passing the `:branch` option, it fails to work with the checked out branch, leading to inefficiency and hardcoding of ""master""."
c5fe904f6ea24a1f38c6a3b33937067f9390ca70,1543367079,"Fix for coroutine/win32/Context.obj

* coroutine/win32/Context.asm: old ml version 9 needs CPU
  directive before `.model` directive.

* win32/Makefile.sub: specify object directories to separate Win32
  and Win64 targets.  Win32 rule was overridden by Win64 rule and
  just ignored.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@66059 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['coroutine/win32/Context.asm'],"Win32 build rules are being overridden by Win64 rules causing ignored targets, and older ml version 9 requires CPU directive before `.model` directive in coroutine/win32/Context.asm."
034d5ee43c426c8a767fbdc12a9f0fc0ce9af030,1676666679,"YJIT: Use rb_ivar_get at the end of ivar chains (#7334)

* YJIT: Use rb_ivar_get at the end of ivar chains

* Rename the counter to get_ivar_max_depth","['yjit.rb', 'yjit/src/codegen.rs', 'yjit/src/stats.rs']",Chained instance variable retrieval operations in YJIT resulting in an incorrect final data retrieval.
ff4cec3c098db9a2d93df4d38153f1cf58790944,1461305661,"tk: suppress progress indicators

* ext/tk/extconf.rb: hack to disable progress indicators with
  parallel build, not to interleave other messages.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54682 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/tk/extconf.rb'],Parallel builds in ext/tk interference leads to interleaving of other messages due to unsuppressed progress indicators.
9b952670bb4945ea227a72dd9b74ef5972a69757,1692233252,"[ruby/yarp] Less const_get

Right now whenever you go to create a Ruby object from a C struct
we dynamically look up the constants. This is not great for
performance. Now instead we template out a constant for each VALUE
that holds the classes, and then directly reference it.

https://github.com/ruby/yarp/commit/f4756cda77
","['yarp/extension.c', 'yarp/extension.h']","Creating a Ruby object from a C struct dynamically looks up constants, leading to sub-optimal performance."
88aa6abf9c1afa2e14bec5f4bfb64357cb9c1052,1451353040,"* test/mkmf/test_have_func.rb (test_have_func):
  Add assertion to examine the existence of HAVE_RUBY_INIT.

* test/mkmf/test_have_func.rb (test_not_have_func):
  Add assertion to examine the absence of HAVE_RUBY_INIT.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53365 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/mkmf/test_have_func.rb'],There appears to be no method to validate the presence or absence of HAVE_RUBY_INIT in mkmf tests.
24fff7504595dcbc5466d209485b13074fb33a3d,1541653612,"avoid (size_t)--

The decrements overflow and these variables remain ~0 when leaving the
while loops.  They are not fatal by accident, but better replace with
ordinal for loops.

See also: https://travis-ci.org/ruby/ruby/jobs/452218871#L3246


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65624 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['st.c', 'util.c']","Decrementing size_t variables causes an overflow, causing a non-fatal but potentially problematic state of these variables when exiting while loops."
f213f5044ea1f061917b1ac0c73e275c2cfe7897,1442923187,"win32.c: fallback to WCHAR-version in MSVCRT

* win32/win32.c (rb_w32_open): should not fallback to ANSI-version
  in MSVCRT, fallback to WCHAR-version in rb_w32_wopen instead.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51917 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['win32/win32.c'],"ANSI-version fallback in MSVCRT for rb_w32_open function in win32.c leads to undesired outcomes, WCHAR-version fallback is expected."
ce88e2a8aa29559ee4d785ee6d77194bbe1ff83f,1588914809,"[rubygems/rubygems] Suppress warnings coming from `jar-dependencies`

This is a default gem on jruby, which ships with a rubygems plugin,
which prints warnings all over the place during our tests.

This plugin is unnecessary from our tests, so I disable it through the
`JARS_SKIP` environment variable provided by this gem.

https://github.com/rubygems/rubygems/commit/0aabbcf269
",['lib/rubygems/test_case.rb'],Unnecessary warnings are frequently printed during tests due to the 'jar-dependencies' RubyGems plugin default to jRuby.
43e41029bf3594353513375d76ba15ded19b0a63,1519860702,"Revert r61936 ""compile.c: use ALLOCV_N""

* compile.c (ibf_dump_object_list): `dump->obj_list` is not fixed
  yet, as new objects are pushed by lbf_dump_object_object.
  fixes crash by buffer overflow.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62615 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['compile.c', 'test/ruby/test_iseq.rb']",There's a buffer overflow causing crash in compile.c due to new objects being pushed by lbf_dump_object_object onto 'dump->obj_list' which is not fixed yet.
90899c50c2890a70e7ce812a41f88b878ec50adc,1627345555,"[rubygems/rubygems] Remove LoadError message in regards to requiring a relative file

Ruby 1.9.2 removed ""."" from LOAD_PATH for robustness and security reasons.
This code was introduced by https://github.com/rubygems/rubygems/commit/56fc830e19a573a5905eba7f4714ad1f21ed1927 commit
to helping users understand the issue and had a guard condition to include the message for `RUBY_VERSION >= ""1.9""`.
However, the guard condition was removed as part of the ""Ruby version leftover"" cleanup by
https://github.com/rubygems/rubygems/commit/8c9cf76e419fbd8ba83144d701b24ca388813b14

Ruby 1.9 development was ended a long time ago and this message is not useful anymore.

https://github.com/rubygems/rubygems/commit/a23609b15a
","['lib/bundler.rb', 'spec/bundler/runtime/setup_spec.rb']","The LoadError message informing about Ruby 1.9.2's removal of ""."" from LOAD_PATH is outdated and no longer helpful as Ruby 1.9 development has ended."
0cc893d01d1c4a6b36f01a25587a121261601697,1557891691,"Static symbols can't be moved (they are not RValue)

This is my mistake, I thought they were regular objects, but apparently
they are not.  We don't need to pin them.

Revert ""Symbols can move so only cache IDs""

This reverts commit 672ee5f6ed5a6840a3be9150b6721a5ee8f8766b.
",['enumerator.c'],"Static symbols are being inaccurately treated as regular objects, leading to unnecessary pinning operations."
83e9d6b3f40971bf054ba83ba175227b262bcd14,1584001612,"Pass keyword argument by RB_PASS_KEYWORDS

To pass `false` as `freeze:` keyword argument, `kw_splat` argument
should be true.  Also `rb_keyword_given_p()` should return true
here as `false` has been given as a keyword argument.
",['object.c'],"Passing `false` as `freeze:` keyword argument not handled properly, `kw_splat` argument and `rb_keyword_given_p()` method could be incorrectly evaluated."
f62f91313259539e8f0884a0ca99deb3ab8b87d3,1646836725,"[ruby/rdoc] Support crossref of methods with multiple arguments

For example, consider the following markup:

  C1#m(a, b)

Before this patch, it generated this HTML:

  <p><a href=\""C1.html#method-i-m\""><code>C1#m</code></a>(a, b)</p>

Which places the method arguments outside of the link.

Now it generates this HTML:

  <a href=\""C1.html#method-i-m\""><code>C1#m(a, b)</code></a>

https://github.com/ruby/rdoc/commit/05a2b2222b
","['lib/rdoc/cross_reference.rb', 'test/rdoc/test_rdoc_markup_to_html_crossref.rb']","Method cross-referencing in RDoc fails to include arguments into the generated hyperlink, rendering them unlinked separate entries."
92e3ffdf780728719125c64709a6b2fb95185e71,1505437175,"rubyspec: jobserver fd may not be available

* spec/rubyspec/optional/capi/spec_helper.rb (compile_extension):
  rescue possible EBADF as jobserver fd may not be available.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59918 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['spec/rubyspec/optional/capi/spec_helper.rb'],"Jobserver file descriptor might be unavailable, potentially leading to an EBADF error during extension compilation in rubyspec helper."
e1ccb2838b65f23e7a21bdd416160d03dd73e7f8,1686409306,"[ruby/irb] Use `Kernel.warn` to print command alias warning
(https://github.com/ruby/irb/pull/601)

This aligns with other warnings in irb and properly channel the message
to stderr.
",['lib/irb/extend-command.rb'],"Command alias warning in IRB is not properly channeled to stderr, causing inconsistencies with other warnings."
4989bad4387ee2e9a7309d51840bc0705a248460,1539788590,"infect taint flag on Array#pack and String#unpack
with the directives ""B"", ""b"", ""H"" and ""h"".

	* pack.c (pack_pack, pack_unpack_internal): infect taint flag.

	* test/ruby/test_pack.rb: add test for above.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65125 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['pack.c', 'test/ruby/test_pack.rb']","The taint flag is not properly propagated when invoking ""B"", ""b"", ""H"", and ""h"" directives with Array#pack and String#unpack methods."
59faac613f896e9f4287738c96805c96588d78c1,1494921833,"Search SSL libraries by testing various filename patterns

* ext/openssl/extconf.rb (find_openssl_library): should search by more flexible
  method, especially for LibreSSL on Windows.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58742 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/openssl/extconf.rb'],"The OpenSSL extension fails to locate SSL libraries, particularly LibreSSL, on Windows due to inflexible search method."
381e128c135e491689714cb69353d11e782f5994,1670629157,"[ruby/irb] Fix step command (https://github.com/ruby/irb/pull/477)

The current `next` pre-command workaround on IRB source stepping
moves the location by 1 extra line. A better way is to make `debug`
skip IRB frames completely, which is what this commit does.

It also fixes the step command's test. The `|` in regexp was not escaped
so it was always incorrectly matched.","['lib/irb/cmd/debug.rb', 'lib/irb/cmd/step.rb', 'test/irb/test_debug_cmd.rb']","The 'next' pre-command in the IRB source stepping is advancing the location by an unnecessary extra line, and the step command's test is incorrect due to the unescaped '|'."
90d3bbb52bbc4159285cf4437290fc982259ebf0,1678959128,"[Feature #19442] Remove GC_ENABLE_INCREMENTAL_MARK

Ruby doesn't compile when this is disabled, and it's not tested on CI.
We should remove it.

Co-Authored-By: Peter Zhu <peter@peterzhu.ca>
",['gc.c'],Disabling GC_ENABLE_INCREMENTAL_MARK prevents Ruby from compiling and is untested on the CI.
80cb9165fa34185b601970da407a295a78ec9eff,1608324738,"add ""copy: true"" option for Ractor.make_shareable

Ractor.make_shareable(obj) tries to make obj a shareable object
by changing the attribute of obj and traversable objects from obj
(mainly freeze them).

""copy: true"" option is more conservative approach by make deep
copied object and make it sharable. It doesn't affect any existing
objects.
","['bootstraptest/test_ractor.rb', 'ractor.c', 'ractor.rb']","Ractor.make_shareable(obj) changes original object attributes to make it shareable, requiring a safe way to make object shareable without modifying existing properties."
13d62659cecf5434d5d7498d6133b1db8a63d050,1461984918,"thread_sync.c: define global constants always

* thread_sync.c (ALIAS_GLOBAL_CONST): define global constant
  aliases unconditionally.  same constants are not defined at this
  time.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54826 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread_sync.c'],Global constant aliases in thread_sync.c are not unconditionally defined leading to instances where required constants are undefined.
01fcb8f45b28d9b33e04c9b9873e47276faf5581,1626597879,"[ruby/openssl] BN.abs and BN uplus

Adds standard math abs fuction and revises uplus to return a duplicated object due to BN mutability

https://github.com/ruby/openssl/commit/0321b1e945
","['ext/openssl/ossl_bn.c', 'test/openssl/test_bn.rb']",Math abs function is missing in openssl and the unary plus (uplus) does not return a duplicate which can lead to mutability issues with large numbers (BN).
832b601e49fd402ec7f30b36a95473131e93ae94,1527890171,"Initialize condattr_monotonic via pthread_condattr_init

Some operating systems will work without calling
pthread_condattr_init, but some won't (such as OpenBSD). Prior
to r63238, pthread_condattr_init was always called before
calling pthread_condattr_setclock.

From: Jeremy Evans <code@jeremyevans.net>
[ruby-core:87345] [Ruby trunk Bug#14807]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63548 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread_pthread.c'],"""Without calling pthread_condattr_init, some operating systems like OpenBSD don't work correctly; it should always be called before pthread_condattr_setclock."""
ddd83e8462db32b7403470ef92ed73ee0daef02b,1648698736,"test/date/test_date_parse.rb: relax the time limit

The timeout was very strict for weak CI machines like qemu-riscv.
Due to the additional overhead for Regexp.timeout=, it started failing
on such machines.

http://rubyci.s3.amazonaws.com/debian-riscv64/ruby-master/log/20220330T200018Z.fail.html.gz
```
  1) Error:
TestDateParse#test__parse_too_long_year:
Timeout::Error: execution expired
```
",['test/date/test_date_parse.rb'],"On lower powered CI machines such as qemu-riscv, execution time for Regexp.timeout= in the `test__parse_too_long_year` test of date parsing exceeds the set limit, causing a Timeout::Error."
367884c65912b3305d18f74b84b7c9e396d14161,1635346628,"Fix yjit_asm_tests.c as C99 compliant (#5033)

* rb_bug should be variadic

* Prefer ANSI-style prototypes over old K&R-style definitions

* Add missing argument types",['misc/yjit_asm_tests.c'],"'YJIT assembly tests are not C99 compliant - issues found in variadic usage, old K&R-style prototype definitions, and missing argument types.'"
61b9074ca68baab4bc7f082af21ccd2ed43f42be,1456902202,"test/unit: return the cursor

* test/lib/test/unit.rb (update_status): keep the cursor to the
  beginning of the line for each update, so that unexpected output
  like an error message will overwrite but not be concatenated to
  the status.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53982 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/lib/test/unit.rb'],"Unexpected output such as error messages concatenate to the status instead of overwriting it, resulting in misplacement of the cursor."
71b3abeba3230f123598971dc6fc945c046663da,1496494031,"ruby.c: dladdr_path is not used on cygwin

* ruby.c (dladdr_path): dladdr is provided on recent cygwin, but
  GetModuleFileNameW is used instead of it.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59007 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ruby.c'],"On Cygwin, despite the provision of dladdr, GetModuleFileNameW is being used in place of it in ruby.c, resulting in dladdr_path being unused."
c10d5085a247266c6399dc6fb68706d87cbdab05,1623877749,"Enable frozen_string_literal in builtin_iseq_load

Currently this has a fairly minor effect as strings are not used heavily
inside the builtins (outside of warnings, requires, and errors).
Hopefully this allows us to use strings in the future where appropriate.
",['mini_builtin.c'],"Inability to use frozen string literals within built-in ISQ load due to heavy reliance on strings for warnings, requirements, and errors."
4fc6cfbeae3c86e8f3675c70b417356ecd3d4a56,1597257791,"Revert ""Improve performance of partial backtraces""

This reverts commit f2d7461e85053cb084e10999b0b8019b0c29e66e.

Some CI machines are reporting issues with backtrace_mark, so I'm
going to revert this for now.
",['vm_backtrace.c'],Issues reported with backtrace_mark on some CI machines after recent performance-improvement-related changes to partial backtraces.
072ef7a1aad9c2a9296d1df29996da4068c50b94,1682032156,"YJIT: invokesuper: Remove cme mid matching check

This check was introduced to match an assertion in the C YJIT when this
was originally introduced. I don't believe it's necessary for
correctness of the generated code.

Co-authored-by: Adam Hess <HParker@github.com>
Co-authored-by: Daniel Colson <danieljamescolson@gmail.com>
Co-authored-by: Luan Vieira <luanzeba@github.com>
","['test/ruby/test_yjit.rb', 'yjit/src/codegen.rs']",Unnecessary check in YJIT's invokesuper is possibly impacting the correctness of the generated code.
f3cc10b63da840acde0ef7c5843e3ee206a274fa,1518934888,"mjit.c: place DLDFLAGS at last

* mjit.c (compile_c_to_so): place DLDFLAGS at last, as compilers
  other than cl.exee don't care the order of flag arguments,
  usually.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62465 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['mjit.c'],"Order of flag arguments in compile_c_to_so causes issues for compilers other than cl.exe, potentially affecting the compilation process."
fb25833690a4e75bf3eb1d8afa65a2334d7282b1,1438795535,"node.c: NODE_ALLOCA for ALLOCV

* node.c (rb_alloc_tmp_buffer): use NODE_ALLOCA to mark locations
  like as builtin alloca.  [ruby-core:70251] [Bug #11418]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51492 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['node.c', 'string.c', 'test/ruby/test_process.rb']","Usage of rb_alloc_tmp_buffer not marking locations akin to builtin alloca, potentially causing allocation issues. [Bug #11418]"
1895a4885615320ddbf8e610fa89569c0929ef73,1513904870,"webrick: add test for WEBrick::HTTPServlet::ERBHandler

This previously had no coverage.

* test/webrick/test_filehandler.rb (test_erbhandler): new test
* test/webrick/webrick.rhtml: new file for test
  [Misc #14216]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61399 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/webrick/test_filehandler.rb'],WEBrick's HTTPServlet ERBHandler lacks test coverage to ensure its functionality and detect potential issues.
a2f1195bebca468eed7e8bf650027e3d3747c141,1695326483,"[ruby/openssl] Update README and gemspec description

 * Reword the description in README for more clarity.

 * Add a compatibility matrix of our stable branches and explain the
   maintenance policy.

 * Remove the obsolete paragraph for how to use the gem in Ruby 2.3,
   which is no longer supported.

https://github.com/ruby/openssl/commit/7691034fcb
",['ext/openssl/openssl.gemspec'],"The README and gemspec description is outdated, with obsolete information about using the gem in Ruby 2.3 and lacking a compatibility matrix for stable branches."
c076d6009c4f3e979930b6060e35338172ba34e6,1541458617,"thread.c (rb_wait_for_single_fd): no point initializing pollfd.revents

poll(2) and ppoll(2) implementations need to check and write to
.revents on the initial scan, anyways.  So any poll/ppoll call
which returns a positive result can be expected to have an
initialized .revents value.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65553 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread.c'],"The pollfd.revents value is being unnecessarily initialized in rb_wait_for_single_fd of thread.c, despite poll(2) and ppoll(2) being expected to initialize .revents."
7c23609e6057a5cbe8e9c7b39ba565bd75dd2a09,1493014674,"parse.y: rb_parser_fatal

* parse.y (rb_parser_fatal): abort compilation on internal parser
  error.  rb_bug() is generic use but not useful for debugging the
  parser.  this function dumps internal states, and continues with
  enabling yydebug output to stderr for the parser stack dump.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58465 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],"Internal compiler errors in Ruby parser aren't providing useful debugging information or state dumps, making it challenging to identify and debug parser failures."
6157619bb68e4307cdf065cb73d5bfcec30d042d,1637854397,"Add GC.stat_size_pool to get stats for a size pool

GC.stat_size_pool will return stats for a particular size pool. This is
used for the Variable Width Allocation feature.
","['gc.c', 'gc.rb', 'test/ruby/test_gc.rb']","Unable to retrieve statistics for a particular size pool, affecting monitoring and optimization efforts for the Variable Width Allocation feature."
e385c159da9338b14ab7fb67ce8d8398ab069d5a,1554844412,"Add error globals to mark list so they don't move

JSON gem is referencing constants defined in Ruby then keeping a
reference as a global.  We need to register these globals so they stay
pinned.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67483 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/json/generator/generator.c', 'ext/json/parser/parser.c']","JSON gem is keeping reference to Ruby-defined constants as globals, but these are not pinned and can move, potentially leading to unexpected behavior."
5cfda37971da176ceba204d57acb5821c293d555,1498572548,"fix return in toplevel ensure

* compile.c (iseq_compile_each0): adjust stack after return in
  toplevel ensure, when the value is used.
  [ruby-core:81777] [Bug #13682]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59184 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['compile.c', 'test/ruby/test_syntax.rb']","Top-level ensure block handling results in incorrect stack adjustment when returning a value, causing runtime inconsistencies."
1046eae7814930fb326371930715122d647457a2,1511421056,"io.c: read BOM only for reading

* io.c (io_strip_bom): just abandon detecting UTF encoding by BOM
  unless opened for reading.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60884 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['io.c', 'test/ruby/test_io_m17n.rb']",The current implementation is incorrectly detecting UTF encoding by BOM even when files are not opened for reading.
1e3fc7dcfae209ab511eb5194d626de021be69e7,1467401863,"* regcomp.c (noname_disable_map): don't optimize out group 0
  Ruby's Regexp doesn't allow normal numbered groups if the regexp
  has named groups. On such case it optimizes out related NT_ENCLOSE.
  But even on the case it can use \g<0>.
  This fix not to remove NT_ENCLOSE whose regnum is 0.
  [ruby-core:75828] [Bug #12454]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55562 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['regcomp.c', 'test/ruby/test_regexp.rb']","Optimization in Ruby's Regexp incorrectly excludes normal numbered groups when named groups are present, even when \g<0> is usable."
fd7f61cf2133748075f738e5fb171b62190221bc,1629183832,"Take into account data in emoji-variation-sequences.txt in tests.

The emoji data in emoji-variation-sequences.txt was not used for
in test/ruby/enc/test_emoji_breaks.rb, for unknown reasons.
It turned out that the format of each of the emoji data/test files
is slightly different, and that we didn't take into account that
empty fields after a semicolon, as present in
emoji-variation-sequences.txt, led to less fields than expected
when using split.
This addresses issue #18027.
",['test/ruby/enc/test_emoji_breaks.rb'],The tests in test/ruby/enc/test_emoji_breaks.rb fail to incorporate data from emoji-variation-sequences.txt due to an issue with parsing empty fields after a semicolon.
a719e3418eee1dd19ca861188579c2878cf4006a,1675724978,"[ruby/rdoc] Remove duplicate word in RDoc::MarkupReference

The word ""for"" appeared twice in the same sentence in the margins section, and this PR removes the duplicate occurrence.
",['doc/rdoc/markup_reference.rb'],"Duplicate word ""for"" in a sentence in the RDoc::MarkupReference's margins section causing redundancy in the documentation."
9f9add3eb5006473dfabac3e994e904b5c1979fe,1475072061,"PStore: select checksum algorithm

* lib/pstore.rb (PStore::CHECKSUM_ALGO): find available hashing
  algorithm for checksum.  MD5 is not available in FIPS mode.
  [Feature #6943]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56284 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/pstore.rb'],"In FIPS mode, MD5 hashing algorithm for checksum isn't available, leading to problems in PStore functionality."
87784fdeb2340574d11887474f6e2d9b0d5d3bc3,1643052852,"Keep right operand within width when right shifting

NUM_IN_PAGE could return a value much larger than 64. According to the
C11 spec 6.5.7 paragraph 3 this is undefined behavior:

> If the value of the right operand is negative or is greater than or
> equal to the width of the promoted left operand, the behavior is
> undefined.

On most platforms, this is usually not a problem as the architecture
will mask off all out-of-range bits.
",['gc.c'],"Right operand may exceed width when performing right shifting, a situation which falls under undefined behavior as per C11 spec 6.5.7 paragraph 3."
e45c9a40a2ee2ca241565f5953af116cd2b5ab29,1555245644,"Do not execute MJIT copy job when ISeq is GC-ed

I assumed that ISeq is never GC-ed by `in_jit` + `mjit_mark` on copy job
ISeq, but unfortunately I found SEGV on `mjit_copy_job_handler` in which
iseq->body was somehow Qnil. And it seems to be fixed by disabling the
job when `mjit_free_iseq` is called for the ISeq.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67551 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['mjit.c', 'mjit_worker.c']","MJIT copy job causes a Segmentation Fault when ISeq is garbage collected, even though it was assumed to be prevented by in_jit + mjit_mark on copy job ISeq.
"
cd77e71bbac9616a906f6823a8eba4922821e9ad,1664353563,"[ruby/net-http] Remove ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE

This list is out of date.  At least OpenBSD since 2013 does not
allow one user to read the environment variables of a process
run by another user.

While we could try to keep the list updated, I think it's a bad
idea to not use the user/password from the environment, even if
another user on the system could read it.  If http_proxy exists
in the environment, and other users can read it, it doesn't
make it more secure for Ruby to ignore it.  You could argue that
it encourages poor security practices, but net/http should provide
mechanism, not policy.

Fixes [Bug #18908]

https://github.com/ruby/net-http/commit/1e4585153d
","['lib/net/http.rb', 'test/net/http/test_http.rb']","Out of date list of multi-user safe environment variables in net-http, not using user/password from the environment even if another user on the system can read it, possibly compromising security.
"
bed17974a1563852c3d1d2b7b24033ed0beaa33e,1592440674,"test/webrick/test_filehandler.rb: no `.encode(""filesystem"")` if US-ASCII

http://ci.rvm.jp/logfiles/brlog.trunk-theap-asserts.20200618-002305
```
I, [2020-06-18T00:28:11.661066 #31625]  INFO -- :   1) Failure:
I, [2020-06-18T00:28:11.661157 #31625]  INFO -- : WEBrick::TestFileHandler#test_cjk_in_path [/tmp/ruby/v3/src/trunk-theap-asserts/test/webrick/utils.rb:72]:
I, [2020-06-18T00:28:11.661216 #31625]  INFO -- : exceptions on 1 threads:
I, [2020-06-18T00:28:11.661269 #31625]  INFO -- : U+3042 from UTF-8 to US-ASCII
```
",['test/webrick/test_filehandler.rb'],"The US-ASCII encode call fails when dealing with CJK characters in the path for WEBrick's FileHandler, leading to unexpected exceptions."
cf59e1476d01be27dc88cbee5f6c6cf87f007043,1576963792,"fix a thread test.

* Use Queue for synchronization.
* Don't use `sleep 0.2` and use `th.join` because created thread
  can raise an exception after 0.2 seconds.
",['test/ruby/test_thread.rb'],Thread synchronization issue causing raised exceptions in tests due to use of `sleep 0.2` instead of `th.join`.
99073f49bf97e1d2f2caab97045de5011edf04b8,1593396341,"glob_opendir: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['dir.c'],"Goto statement is jumping into a branch during glob_opendir execution, creating a code comprehension and potential execution flow issue."
7f93b7dc88b25328dadbc4637a03d5d7bb3195d1,1648241026,"[DOC] Fix formatting for What's Here in IO (#5719)

* Fix formatting for What's Here in IO

* Repair formatting in What's Heres in numeric.c

* Fix formatting for What's Here in IO","['io.c', 'numeric.c']",'What's Here' section in IO and numeric.c documentation has incorrect formatting.
721e012d42a9fbc5b8484805c880f70cfefa94ef,1655471722,"[ci skip][lldb] Fix array length representation with USING_RVARGC

This commit makes `rp` report the correct array length in lldb.

When USING_RVARGC is set we use 7 bits of the flags to store the array
len rather than the usual 2, so they need to be part of the mask when
calculating the length in lldb.

When calculating whether rvargc is enabled I've used the same approach
that's used by `GC.using_rvargc?` which is to detect whether there is
more than one size pool in the current objspace.
",['misc/lldb_cruby.py'],"`rp` inaccurately reports array length in lldb when USING_RVARGC is set, as it fails to incorporate the 7 bit flags used to store the array length."
94e41822679ebd269564ad10d366596e1514d4ef,1680155783,"`rb_current_ractor_raw(b)`

`rb_current_ractor()` expects it has valid `ec` and `r`.
`rb_current_ractor_raw()` with a parameter `false` allows to return
NULL if `ec` is not available.
","['ractor.c', 'vm_core.h']",`rb_current_ractor()` function breaks when there is an invalid or unavailable execution context (ec).
42166c6266a50f59613c9404e6f790f6d1991cb7,1491085105,"test/ruby/test_optimization.rb: quiet warnings

This quiets an old ""assigned but unused variable"" warning left
over after r56653 as well as two new ""ambiguous first argment""
warnings introduced in r58233.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58234 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_optimization.rb'],Old unused variables and ambiguous first arguments are causing warning messages to be generated in test_optimization.rb.
3b0bcaf2872e5ab6d2475e9cd6dd5c374d93ae0b,1599196728,"check multi_ractor mode at main_p

rb_ractor_main_p() need to access to the ractor pointer in TLS.
However it is slow operation so that we need to skip this check
if it is not multi-ractor mode (!ruby_multi_ractor).

This performance regression is pointed at
https://bugs.ruby-lang.org/issues/17100#note-27
","['ractor.c', 'ractor_pub.h', 'vm_sync.h']","The function rb_ractor_main_p() is experiencing a performance regression due to slow access to the ractor pointer in TLS, particularly notable when not in multi-ractor mode."
83b14c26aaf9d55774320ed65273b9c6d6c3c432,1527749867,"test_rubyoptions.rb: relax timeout

* test/ruby/test_rubyoptions.rb: wait for setting process title
  until the child process dies, in the case of extra heavy loads.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63537 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_rubyoptions.rb'],"Heavy system loads cause extended child process lifetimes, preventing the setting of process titles in 'test_ruby/test_rubyoptions.rb'."
ee2f3c6def27ae7ea069ac8a2472ce2e80bcbb5b,1459048419,"sprintf.c: Rational f by generic Integer functions

* sprintf.c (rb_str_format): convert Rational to floating point
  format by using gereric Integer functions, not by methods which
  can be overwritten.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54302 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['sprintf.c'],"'Rational to floating point conversion in rb_str_format uses methods that can be overwritten, potentially leading to inaccurate conversions.'"
e31d645da58abce67a0fb8b27251ee532adcfab5,1670284710,"fix wrong property information in name2ctype.h

Co-authored-by: Nobuyoshi Nakada [nobu@ruby-lang.org](mailto:nobu@ruby-lang.org)

See https://github.com/ruby/ruby/pull/6451 and
https://bugs.ruby-lang.org/issues/19007.

This keeps the Unicode version at 14.0.0, so this commit
is suited for backporting where applicable.

At the time of this commit, the reason for the wrong properties
which we fix here is still not completely known, so issue 19007
should be kept open.
",['enc/unicode/14.0.0/name2ctype.h'],"Incorrect property information present in the name2ctype.h file, reason for these inaccuracies is currently unknown."
5e635a367806143e450387393a268c444a290db7,1492223841,"signal.c: last tag page condition

* signal.c (check_stack_overflow): drop the last tag when it is
  close to the fault page, not same as sp page.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58363 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['signal.c'],Stack overflow check drops the last tag when it's close to the fault page rather than when it's the same as the sp page.
38e931fa2ceac6d922f3eabedb8f35f211de0bdb,1571903181,"show ""transferred"" attribute on Fiber#to_s

If a fiber is invoked with transfer method (such as ""f.transfer""),
then the invoked fiber (""f"") is labeled as ""transferred"" and this
fiber can not be invoked with Fiber#resume. This patch adds
transferred attribute for ""Fiber#to_s"" (and inspect).
",['cont.c'],"""Fiber#to_s"" and inspect doesn't show if a fiber has been transferred using the ""f.transfer"" method, leading to unexpected Fiber#resume invocation errors."
644f2013d637595d9592ad45714788abd8eb6e0e,1542515692,"vm_trace.c (rb_postponed_job_flush): use rb_atomic_t for mask

ec->interrupt_mask will remain rb_atomic_t and is 32-bit on some
64-bit systems while ""unsigned long"" is 64-bits.  So avoid
mismatching lengths and stick to rb_atomic_t.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65781 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['vm_trace.c'],Mismatch of data types and lengths between ec->interrupt_mask (rb_atomic_t) and unsigned long causing potential issues on 64-bit systems.
5463eff5f6236f89c137c562ee271e1c1ff92a89,1608017745,"Lock only active_units references

556a7285080c1344c75bb93a333c9bfc5d631c61 was not good maybe because it
wasn't using list_for_each_safe. If list_for_each_safe is safe for
list_del for any nodes (is that true?), this should be fine.
",['mjit_worker.c'],"Active units references are not being locked correctly, raising a question about the usage of list_for_each_safe and if it provides adequate protection for list_del operations."
caca9a473fd484aec81798fcb6a07bca25977b1d,1483847177,"driver.rb: extract loop times [ci skip]

* benchmark/driver.rb (BenchmarkDriver.load): extract loop times
  from the loaded results to adjust the results.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57286 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['benchmark/driver.rb'],Loaded results from BenchmarkDriver.load do not have adjusted results due to missing extraction of loop times.
cb7d9fe95f5a521ea5db279e0c1a956a98e4a5cc,1509853942,"Revert ""Introduce rb_code_range_t and replace YYLTYPE with it""

r60655 changed the usage of bison by defining a customized YYLTYPE,
which seemed to cause a random stall at rb_thread_terminate_all.

Kazuki Tsujimoto investigated the issue and pointed out the commit that
caused it.  Thanks!

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60660 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['node.h', 'parse.y']","Customized YYLTYPE definition leads to a random stall at rb_thread_terminate_all, possibly originating from recent changes."
47f1d84215893e32fb536c084cd03542f91bd884,1513122530,"parse.y: Fix the locations of an empty script

* parse.y: Fix the locations of NODE_BEGIN in
  an empty script.

  ```
  ruby --dump=p -e ''
  ```

  * Before

  ```
  NODE_BEGIN (line: 1, code_range: (1,1)-(1,1))
  ```

  * After

  ```
  NODE_BEGIN (line: 1, code_range: (1,0)-(1,0))
  ```

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61196 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],"Incorrect locations of NODE_BEGIN are observed on parsing an empty script, creating discrepancies in the code range."
74812df4963b1ee56a015babf3798d48bae447c6,1693226250,"[ruby/yarp] fix: %W list spanning a heredoc

Primarily this fix is to accept a string node and concatenate it onto
an interpolated string.

https://github.com/ruby/yarp/commit/6df729fe72
",['yarp/yarp.c'],Heredoc spanning across a %W list is not getting included in the interpolated string.
028f3801f806a6aebe7d8d1fb78d0ba3e38d6036,1459343671,"parse.y: get rid of ISASCII on ID

* parse.y (ripper_id2sym): do not call ISASCII() on ID, rb_isascii
  is restricted to int now.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54439 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],The usage of ISASCII() on ID in ripper_id2sym is problematic as rb_isascii is limited to integers only.
3208db7fb3403dfbfd1e81cc4b531f36d5cd5fff,1542010449,"vm_insnhelper.c: avoid nevative sp

space_size can be zero here, under the following script.  We would
better bail out before bptr calculation.

% ./miniruby --dump=i -e '* = nil'
== disasm: #<ISeq:<main>@-e:1 (1,0)-(1,7)> (catch: FALSE)
0000 putnil                                                           (   1)[Li]
0001 dup
0002 expandarray                  0, 0
0005 leave


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65685 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['vm_insnhelper.c'],"Executing a script with zero space_size, leads to negative stack pointer (sp) during bytecode calculation, resulting in a potential crash."
8b2f2a707de54ad24d787ff0bce67ed8c68cdded,1617181508,"[ruby/openssl] Use #ifdef consistently for HAVE_RB_EXT_RACTOR_SAFE

We previously used a mix of both `#if` and `#ifdef`, but the latter is
more reliable because it will still work if the macro is undefined.

https://github.com/ruby/openssl/commit/e4a622e67e
","['ext/openssl/ossl.c', 'ext/openssl/ossl_bn.c']",Inconsistent use of `#if` and `#ifdef` for `HAVE_RB_EXT_RACTOR_SAFE` macro in ruby/openssl can lead to issues if the macro is undefined.
5245e314264ad3297f1203ba0beb40b060b22ed3,1471053142,"parse.y: rescue modifier in rhs of op asgn

* parse.y (stmt, arg): rescue modifier in command op assignment
  should be limited to rhs only.  [ruby-core:75621] [Bug #12402]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55887 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['parse.y', 'test/ruby/test_parse.rb']","The rescue modifier in command operator assignment is not limited to the right-hand side, potentially causing undesired behavior. [ruby-core:75621] [Bug #12402]"
f911e264a1d539b6c99542d07f72af10ed91ae87,1634768382,"Add counted side exit to getblockparamproxy

This is so we know the specific reason we're exiting this instruction.

Co-authored-by: Aaron Patterson tenderlove@ruby-lang.org
","['yjit_codegen.c', 'yjit_iface.h']",Exiting the 'getblockparamproxy' instruction lacks clarity due to absence of specific reason for the exit.
c8e5796f61824bb5a232a9d338ececc6a2487997,1517019260,"insns2vm.rb: make #generate_parser private

which is only used by #router.

To make it private, we need to stop defining them on top-level.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62065 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['tool/insns2vm.rb', 'tool/ruby_vm/scripts/insns2vm.rb']","'#generate_parser function in insns2vm.rb is currently not private and is only used by the #router function, potentially leading to misuse.'"
8b2884c0b51e4733c09ecbb388ca1b236bad738b,1683358764,"[ruby/rdoc] Isolate root dir if specified

This ensures only files from the root directory are chosen, in order to allow a clean build from outside the source directory.

https://github.com/ruby/rdoc/commit/f3b389aa9e
","['lib/rdoc/options.rb', 'lib/rdoc/rdoc.rb']","Files outside the root directory are being selected, preventing clean builds from outside the source directory."
b165bedcbd41d791a85fc1ce90b57a0d0525f319,1558149422,"skip a test to pass CIs.

I'm debugging [Bug #15821] but my patch introduces another issue.
So I simply skip this test and re-enable it later.
",['test/ruby/test_gc.rb'],"Patch for debugging [Bug #15821] introduces new issues causing a specific test to fail, affecting the CI pipeline."
897901283c79e5f5f33656abdd453dc272268748,1558893837,"Refactor IRB color dispatch

The reason why we were checking lexer state in addition to token was
that we do not want to colorize local variable, method call, etc., while
they share the :on_ident token with a name of method definition which
should be colored as blue.

It means that we're concerned about the lexer state only for :on_ident.
Thus we can skip checking lexer state for non-:on_ident tokens. This
refactoring is based on that idea.

Also, now we manage Ripper's lexer state as Integer (use `|` if you
need to check multiple states). It should be faster than using Array of
Integer because #any? block call is not needed.
","['lib/irb/color.rb', 'test/irb/test_color.rb']","The current IRB color dispatch has unnecessary checks for lexer state for non-:on_ident tokens and manages Ripper's lexer state using an Array of Integers, which may have performance implications."
a6104b392ab347c323c93a51fb3b95c3c2cc9e8f,1635346543,"YJIT: Support newhash with values (#5029)

* YJIT: Implement newhash with values

* YJIT: Add test of duphash

* Fix compilation on macos/clang","['bootstraptest/test_yjit.rb', 'test/ruby/test_yjit.rb', 'yjit_codegen.c']","Newhash implementation in YJIT lacks support for values causing compilation issues, particularly on macOS with clang."
e043ae73488e7fa623632ddbbbe51c70f1bae565,1515228257,"string.c: out-of-bounds access

* string.c (rb_str_enumerate_lines): fix out-of-bounds access when
  record separator is longer than the last element.  [Bug #14257]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61636 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['string.c'],Out-of-bounds access error occurs when introducing a record separator longer than the last element in rb_str_enumerate_lines function of string.c.
68f119cbf48259fdd9b83faf1bbe8d703779b633,1463558349,"openssl: fix OpenSSL error queue leak in OpenSSL::PKCS12.new

* ext/openssl/ossl_pkcs12.c (ossl_pkcs12_initialize): pop errors
  leaked by PKCS12_parse(). This is a bug in OpenSSL, which exists
  in the versions before the version 1.0.0t, 1.0.1p, 1.0.2d.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55057 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/openssl/ossl_pkcs12.c'],"Errors are leaking in OpenSSL::PKCS12.new due to an issue with PKCS12_parse() in OpenSSL versions prior to 1.0.0t, 1.0.1p, 1.0.2d."
0ab0229c1162308509b36cafbf6eaafd7ae054d7,1664571479,"Fix frozen object inspect

In the rails/rails CI build for Ruby master we found that some tests
were failing due to inspect on a frozen object being incorrect.

An object's instance variable count was incorrect when frozen causing
the object's inspect to not splat out the object.

This fixes the issue and adds a test for inspecting frozen objects.

Co-Authored-By: Jemma Issroff <jemmaissroff@gmail.com>
Co-Authored-By: Aaron Patterson <tenderlove@ruby-lang.org>
","['shape.c', 'test/ruby/test_object.rb']","Tests are failing in rails/rails CI build for Ruby due to incorrect inspect on a frozen object, caused by incorrect instance variable count when the object is frozen."
4176db205ebd817c4dc8dac2ad59b27a43485338,1463629580,"assertions.rb: leave timeout to invoke_ruby

* test/lib/test/unit/assertions.rb (assert_separately): leave
  timeout to invoke_ruby, which handles outputs and status of the
  target process since r51539.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55070 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/lib/test/unit/assertions.rb', 'test/testunit/test_assertion.rb']",'invoke_ruby is not handling the timeouts on the target process leading to unexpected outputs and status.'
5429deb075beb9a2b67adae269bbac16325876d1,1590506414,"lib/open3.rb: make sure that pipes are closed

Attempting to invoke a non-existent command led to the leak of fds.

http://rubyci.s3.amazonaws.com/graviton2/ruby-master/log/20200526T140004Z.log.html.gz
```
[ 9101/20195] TestGemExtCmakeBuilder#test_self_build = 0.01 sLeaked file descriptor: TestGemExtCmakeBuilder#test_self_build: 7 : #<IO:fd 7>
Leaked file descriptor: TestGemExtCmakeBuilder#test_self_build: 10 : #<IO:fd 10>
Leaked file descriptor: TestGemExtCmakeBuilder#test_self_build: 11 : #<IO:fd 11>
Leaked file descriptor: TestGemExtCmakeBuilder#test_self_build: 12 : #<IO:fd 12>
```
",['lib/open3.rb'],"Invoking a non-existent command results in file descriptor leaks as shown in TestGemExtCmakeBuilder#test_self_build, leading to open pipes not being closed properly."
0e276dc458f94d9d79a0f7c7669bde84abe80f21,1594351421,"vm_push_frame: move assignments around

Struct assignment using a compound literal is more readable than before,
to me at least.  It seems compilers reorder assignments anyways.
Neither speedup nor slowdown is observed on my machine.
",['vm_insnhelper.c'],"Inefficient struct assignment causes confusion and does not affect speed, requiring a more readable method."
71d97a5ef80a23b0bb1005570ed059580981a467,1566755807,"Fix sample/drb/http0serv.rb

Previously, trying to use this would result in:

undefined method `uri' for #<DRb::HTTP0::ServerSide:0x00000aec9f1637f8> (NoMethodError)

Also, use a relative require to load sample/drb/http0.rb.

Fixes [Bug #13431]
",['sample/drb/http0serv.rb'],"Attempting to use DRb::HTTP0::ServerSide in http0serv.rb raises a NoMethodError, due to missing 'uri' method."
cd8f9904427e6db858a4dcc1dabff60a76cad445,1492602603,"Rervert r58304. Because Rubygems have specialized finder for default gems.
We need to list library entries for default gems.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58403 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['tool/rbinstall.rb'],Default gems are not being listed due to the absence of library entries resulting in Rubygems unable to locate them.
325587ee7f76cbcabbc1e6d181cfacb976c39b52,1475145265,"thread_sync.c: Document exception types

* thread_sync.c (rb_queue_pop, rb_szqueue_push, rb_szqueue_pop):
  Document exception types, ThreadError, raised by Queue and
  SizedQueue.  [Fix GH-1451]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56287 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread_sync.c'],Lack of documentation on exception types for Queue and SizedQueue in thread_sync.c is causing confusion.
3a5cc345f8bab6d179f79265ba20234e41494a68,1544484176,"Native coroutine implementation for ppc64le Linux

* configure.ac: enable fiber coroutine for powerpc64le-linux

* coroutine/ppc64le/Context.S: coroutine_transfer implementation

* coroutine/ppc64le/Context.h: coroutine implementation

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@66315 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['coroutine/ppc64le/Context.h'],Ruby language lacks native coroutine implementation for ppc64le Linux architecture resulting in performance issues.
8a9ee00a318d25145b3262277864c5599271bb6a,1634768370,"uJIT: add guards for protected opt_send_without_block calls

These account for about 12% of the time when we were bailing from calls
in railsbench. `ratio_in_ujit` went up 0.1% with this change.
","['ujit_codegen.c', 'ujit_iface.h']","Opt_send_without_block calls in uJIT are not properly safeguarded, leading to frequent bail-outs during railsbench calls and negatively affecting the ratio_in_ujit performance metric."
265bfdfbf5a809a7e22231ae25a551eda23cbf7d,1528352303,"skip write_timeout test on Windows

This test is about write_timeout.
To ensure it really raised Net::WriteTimeout, skip this test on Windows,
whose write returns immediately even for large data.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63598 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/net/http/test_http.rb'],"The write_timeout test fails on Windows as the write returns immediately even for large data, failing to raise Net::WriteTimeout as expected."
8a233ea67b20910c6fc3429d6c30c628c1650255,1542926646,"io.c: revalidate fptr->fd after rb_io_wait_readable

fptr->fd may become -1 while GVL is released in
rb_wait_for_single_fd, so we must check it after reacquiring
GVL.  This should avoid EBADF errors exposed by making pipes
non-blocking by default:

http://ci.rvm.jp/results/trunk-test@ruby-sky3/1473710

[Bug #14968]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65931 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['io.c'],"Releasing GVL in rb_wait_for_single_fd causes fptr->fd to become -1, which leads to EBADF errors when pipes are non-blocking by default."
451e0a6ee1362b4cfc504087f0d3232bbaeb76ca,1481963134,"compile.c: do not emit numeric literal range in void context

A fix-up for r56316. Fix stack consistency error on '1..3; nil'.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57105 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['compile.c'],Stack consistency error is being observed when numeric literal range is emitted in void context with '1..3; nil'.
863e24b2b1a1b946c89d32575c2814b564a1bf95,1526341895,"test_wait_for_single_fd: ensure this works with kqueue

Regardless of future features, this needs to work with
kqueue descriptors across platforms.

Today this will be useful for 3rd-party libraries using
kqueue.  In the future, Ruby may use kqueue natively
and we shall ensure we can wait on it.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63421 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/-test-/wait_for_single_fd/extconf.rb', 'ext/-test-/wait_for_single_fd/wait_for_single_fd.c', 'test/-ext-/wait_for_single_fd/test_wait_for_single_fd.rb']","The function test_wait_for_single_fd does not operate correctly across platforms when used with kqueue descriptors, impacting third-party libraries in use."
8a8f542c4366b5c23e1f607dd77f381e2bcbd5bc,1521207464,"re.c: do not escape terminator in Regexp.union

* re.c (rb_reg_str_with_term): change terminator.

* re.c (rb_reg_s_union): terminator in source string does not need
  to be escaped.  terminators are outside of regexp source itself.
  [ruby-core:86149] [Bug #14608]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62779 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['re.c', 'test/ruby/test_regexp.rb']",Regexp.union function is unnecessarily escaping terminator characters in the source string causing disruption in the regular expression.
8f096226e1b76f95f4d853d3dea2bc75eeeb5244,1567706683,"Stash tmpbuffer inside internal structs

I guess those AST node were actually used for something, so we'd better
not touch them.  Instead this commit just puts the tmpbuffer inside a
different internal struct so that we can mark them.
","['node.c', 'node.h', 'parse.y']","Modifications to AST nodes affect their usage, necessitating an alternative internal structure to store the tmpbuffer."
9d4027b50334ef804f6f138fba1d342fe188826b,1535390233,"process.c: simplify SIGCHLD-based waitpid

Introduce a new rb_thread_sleep_interruptible that does not
execute interrupts before sleeping.  Skipping the interrupt
check before sleep is required for out-of-GVL ruby_waitpid_all
to function properly when setting waitpid_state.ret

Now that ubf_select can be called by the gvl.timer thread
without recursive locking gvl.lock, we can safely use
rb_threadptr_interrupt to deal with waking up sleeping
processes,

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64576 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['process.c', 'thread.c', 'thread_pthread.c']","Out-of-GVL ruby_waitpid_all function malfunctions whenever the interrupts are executed before sleep. It's also unsafe to wake up sleeping processes, risking recursive locking gvl.lock."
16a68369d2c12dd6aae1b902aac5fe72b9ee9ec9,1436236061,"* iseq.c, internal.h (rb_iseq_clone): removed because we don't need to
  clone iseq any more.
* class.c (clone_method): share iseq between cloned methods. All of
  method dependent information are able to refer from method entry.



git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51171 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['class.c', 'internal.h', 'iseq.c']","ISeq gets unnecessarily cloned during method cloning, despite method dependent information being able to refer from method entry."
7cfe93c028fbf7aa0022ca8a4ac6a66d0103337a,1579249238,"hash.c: Add a feature to manipulate ruby2_keywords flag

It was found that a feature to check and add ruby2_keywords flag to an
existing Hash is needed when arguments are serialized and deserialized.
It is possible to do the same without explicit APIs, but it would be
good to provide them as a core feature.

https://github.com/rails/rails/pull/38105#discussion_r361863767

Hash.ruby2_keywords_hash?(hash) checks if hash is flagged or not.
Hash.ruby2_keywords_hash(hash) returns a duplicated hash that has a
ruby2_keywords flag,

[Bug #16486]
","['hash.c', 'test/ruby/test_hash.rb']",Lack of a core feature in Hash to check and add ruby2_keywords flag leads to issues when arguments are serialized and deserialized.
5cffa69c1babb80be17d2544a430dce0f2c22b4e,1678959439,"[DOC] Add missing escape

Before:
```
* + corresponds to $+, which contains last capture group.
```

After:
```
* \+ corresponds to $+, which contains last capture group.
```
",['string.rb'],"Special characters in documentation aren't escaped properly, causing a decrease in the readability and potential misunderstanding of the documentation."
3e49d62bc1696a7943e4407328714e32b539b007,1671198779,"[Feature #18033] Parse more strictly conformant with ISO-8601

* 4-digits or more is required as year
* Minutes and seconds parts are not ommittable
","['test/ruby/test_time.rb', 'time.c']","ISO-8601 parsing lacks strict conformance: years must be a minimum of 4 digits, and minutes/seconds cannot be omitted."
3152d68bf3510b47d2bfb811cb1044e27872b5a9,1511067802,"file.c: fix 64-bit conversion warnings from r60844

* file.c (nogvl_truncate): cast int to VALUE before ""void *""
  (rb_file_s_truncate): cast ""void *"" to VALUE before int

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60846 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['file.c'],"64-bit conversion in file.c causing warnings due to improper casting between int, VALUE, and void pointers."
6d38935605b554a3d6ce571bccbb9f41a548e3a2,1527400063,"jit_support.rb: cahce JIT support check

* Before
make test-all -C .ruby-svn TESTS=""../test/ruby/test_jit.rb""  22.40s user 5.38s system 91% cpu 30.196 total

* After
make test-all -C .ruby-svn TESTS=""../test/ruby/test_jit.rb""  12.91s user 3.33s system 91% cpu 17.648 total

Also, this makes it easier to check if JIT is actually tested, by
showing warning on stderr.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63504 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/lib/jit_support.rb'],JIT support check slows down testing significantly and there's no direct method to confirm if JIT is actually being tested.
36e057e26ef2104bc2349799d6c52d22bb1c7d03,1569925196,"Loop with String#scan without creating substrings

Create the substrings necessary parts only, instead of cutting the
rest of the buffer.  Also removed a useless, probable typo, regexp.
","['lib/webrick/httpauth/digestauth.rb', 'test/webrick/test_httpauth.rb']","The current implementation of String#scan in the loop is creating unnecessary substrings and cutting off rest of the buffer, which seems to be a waste of resources. Additionally, there is a suspicious regular expression present that appears to be a typo."
055ec5254dc79cfa5d9500b8c301751fe594e481,1622019726,"Rescue NotImplementedError for a test of Thread#native_thread_id

http://rubyci.s3.amazonaws.com/solaris10-gcc/ruby-master/log/20210526T070003Z.fail.html.gz
```
  1) Error:
TestThread#test_thread_native_thread_id:
NotImplementedError: native_thread_id() function is unimplemented on this machine
    /export/home/users/chkbuild/cb-gcc/tmp/build/20210526T070003Z/ruby/test/ruby/test_thread.rb:1338:in `native_thread_id'
    /export/home/users/chkbuild/cb-gcc/tmp/build/20210526T070003Z/ruby/test/ruby/test_thread.rb:1338:in `test_thread_native_thread_id'
```
",['test/ruby/test_thread.rb'],"The test for Thread#native_thread_id fails on certain machines due to NotImplementedError, indicating 'native_thread_id()' function is unimplemented."
28695a8fff7c04224a58cdb9cb1adeb5810b719c,1500250298,"parse.y: refine literal error messages

* parse.y (parser_yyerror): strip newline in error source which
  will not be printed, when lex_p has passed it.

* parse.y (parser_tokadd_utf8): unterminated Unicode escape even
  after invalid Unicode escape.

* parse.y (parser_parse_string): show the error source line when
  unterminated literal at end of file.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59349 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['parse.y', 'test/ruby/test_parse.rb']",Newline characters in the error source aren't being correctly displayed and error messages for unterminated literals or Unicode escapes lack clarity and context at the end of a file.
5e262e5277d92dda1275035a2fbbea56377e13ff,1441790327,"* lib/rubygems/stub_specification.rb (Gem::StubSpecification#data):
  should not change the value of $. when `require`ing gems.
  this fixed test failures introduced by r51813.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51814 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/rubygems/stub_specification.rb'],"Value of $. is erroneously altered when requiring gems, leading to test failures."
ed8e552d4d2c825a3f780ac8bd898eaaca7c21e7,1605941274,"Shrink the blocking region for compile_compact_jit_code

Isn't setting `in_compact = true` enough to avoid a race condition
between JIT compaction and unload_units? Now I think it is.

This change will make it easier to spend more time on compile_compact_jit_code.
For now it seems to take only 0.0723ms though.
",['mjit_worker.c'],Possible race condition between JIT compaction and unload_units due to setting `in_compact` might be causing issues with the `compile_compact_jit_code` function.
1fbe0943cc9b54050d9dbdac01d8bef9b2f48202,1461305369,"eval_jump.c: restore previous error info

* eval_jump.c (exec_end_procs_chain): restore previous error info
  for each end procs.  [ruby-core:75038] [Bug #12302]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54681 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['eval_jump.c', 'test/ruby/test_beginendblock.rb']","Error information is not being correctly restored for each end process in eval_jump.c, possibly resulting in misinformed debugging."
d252e224f6b2e2740985304018fe8a31b080e009,1451434803,"test_io.rb: test for rb_io_modestr_fmode

* test/stringio/test_io.rb (test_flag): add assertion for error when
  text and binary mode are mixed.
  [ruby-dev:49465] [Feature #11921]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53379 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_io.rb'],"Mixing text and binary mode in rb_io_modestr_fmode is causing an error, functionality lacks proper testing."
0a521618723e5e602c1288b4185b869e94332172,1608106693,"fix Ractor#receive by other ractors

Ractor#receive can be called by the another Ractors using send,
so making this method completely same as `Ractor.receive` even if
the ractor is specified by the receiver (OO term :p).
",['ractor.rb'],"When Ractor#receive is called by another Ractor using send, it does not function the same as `Ractor.receive`, even when the Ractor is specified by the receiver."
c16523e67b4d8873168f7cb21a1dd35484247d22,1440923557,"encoding.c: fix document [ci skip]

* encoding.c (rb_enc_unicode_p): fix document.  predicate
  functions may return non-zero values other than 1 as true.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51727 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['encoding.c'],"Predicate functions in encoding.c are returning non-zero values other than 1 as true, resulting in inefficiencies and inconsistencies in document encoding."
6599ca44bbaf9d1084638b392a46f1b3277212b9,1693428709,"[ruby/yarp] simplify the calling convention for `unescape`

We don't need to pass in a destination pointer _and_ a write_to_str
boolean flag.

https://github.com/ruby/yarp/commit/347cb29ebb
",['yarp/unescape.c'],"The `unescape` function's calling convention is overly complicated, requiring both a destination pointer and a write_to_str boolean flag."
3df904d1a8dc614589295dfdf30a781114b3a7fc,1665078391,"Add debug output to test_thrashing_for_young_objects

The test is failing only on trunk-repeat50@phosphorus-docker. This
commit adds some debugging output to debug the failure.
",['test/ruby/test_gc.rb'],'Test_thrashing_for_young_objects is consistently failing only on trunk-repeat50@phosphorus-docker but the cause is unclear.'
c8b414b3345564d975445b25d9bcb9e2604f636d,1645096358,"Reuse `-v` option result as `target_platform`

Backticks method invokes `/bin/sh` when the command contains
quotes, and `sh` clears some environment variables set in
runruby.rb to search the built shared library.
",['bootstraptest/runner.rb'],"Backticks method invocation resets certain environment variables in runruby.rb, causing issues with finding the built shared library."
e0bc5e49ffc1a013705e1e287967139425912974,1538960917,"test_jit.rb: skip to test tempdir emptiness

on AppVeyor mswin. It's somehow failing and not reproductive on my
environment.

We're suspecting maybe somebody is still holding module handle, even
while FreeLibrary is finished successfully.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64951 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_jit.rb'],"Intermittent test failure on AppVeyor mswin environment for checking tempdir emptiness, despite successful FreeLibrary execution, possibly due to held module handle."
efa0c31ce518bb26aca80392cce7fc5471ca9fef,1632736965,"Add printf-style format attribute to oniguruma functions

Also make the format string compatible with literal strings which
are const arrays of ""plain"" chars.","['regerror.c', 'regint.h', 'regparse.c']","Oniguruma functions lack printf-style format attribute, and format strings are incompatible with literal strings which are const arrays of ""plain"" chars."
982e27e95d486a9a1558243b1508483ab2908c19,1515835420,"Update dependencies

* common.mk: enc/unicode.$(OBJEXT) depends on onigmo.h via
  oniguruma.h.

* common.mk: dependencies of *prelude.$(OBJEXT) are defined for
  each generated C sources.

* enc/depend: casefold.h and name2ctype.h are located under
  $(UNICODE_HDR_DIR).

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61800 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['common.mk'],"Dependency issues found in common.mk with enc/unicode.$(OBJEXT) and *prelude.$(OBJEXT), and in enc/depend with casefold.h and name2ctype.h."
75307ce858cee411e446139ecec4151a17c9339f,1463885094,"* class.c (rb_scan_args): moved to bottom of the file to make the
  effect of `#undef rb_scan_args` the minimum.

* include/ruby/ruby.h (rb_scan_args): overwrite only if GCC and
  optimized. Visual C++ 14 or later can compile it but make it
  conservative.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55110 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['class.c', 'include/ruby/ruby.h']","The effect of `#undef rb_scan_args` is extensive due to its placement in the file, and rb_scan_args only gets overwritten for GCC when optimized, causing compatibility issues with Visual C++ 14 or later."
876c5fe1b2ba38fd893a81f91769b11f78cf4e92,1569512292,"Check the argument size

Ensure that argument array size does not overflow as `int`, before
cast in thread_do_start after new thread created.
",['thread.c'],"Argument array size overflows as `int` upon casting post thread creation, in thread_do_start."
d8225d9f048e0df232cde5f17941b8e06d621d0b,1438387966,"* ext/openssl/ossl_ssl.c (ossl_sslctx_setup): Implement
  SSLContext#options and options= using SSL_CTX_set_options and
  SSL_CTX_get_options. This reduces the number of ivars we need and
  simplifies `ossl_sslctx_setup`.

* ext/openssl/lib/openssl/ssl.rb (module OpenSSL): Default `options`
  to SSL_OP_ALL

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51462 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/openssl/lib/openssl/ssl.rb', 'ext/openssl/ossl_ssl.c', 'test/openssl/test_ssl.rb']","Excessive instance variables in `ossl_sslctx_setup` in 'ossl_ssl.c', and SSLContext `options` not defaulting to SSL_OP_ALL."
f46b5bcfaf2c7a905f2e625bd9c44b391b5b40ef,1459407087,"* gc.c (gc_page_sweep): return free slots count.

* gc.c (gc_sweep_step): use returned free slots count.

* gc.c (gc_sweep_step): change variable name `next'
  to `next_sweep_page'.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54447 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['gc.c'],Free slot count not returned during `gc_page_sweep` causing issues with `gc_sweep_step`. Variables mislabelled adding to confusion.
87958520f3fd7fdec18c3508888b3d2a4e5c27a4,1570754005,"set real path to __FILE__ and __dir__ in Binding#irb

When reading Binding#irb, the file of the calling source is reflected in __FILE__ and __dir__.
",['lib/irb.rb'],The `__FILE__` and `__dir__` values do not accurately reflect the file of the calling source when using `Binding#irb`.
ed7ea35d7450a5c2b7794f56050eb34c071dd34b,1634376311,"[ruby/openssl] Fixed misspellings

[ This is a backport to the 2.1 branch. ]

Fixed misspellings reported at [Bug #16437], for default gems.

(cherry picked from commit ruby/ruby@e68999c82c4863d33a6f893661fba1b7538c5671)

https://github.com/ruby/openssl/commit/0f43789503
",['test/openssl/test_config.rb'],The OpenSSL default gems contain multiple typos which could potentially lead to confusion or incorrect usage.
ebfb401e777f32dde213b86891708cf7b60e1a66,1462223057,"process.c (disable_child_handler_fork_child): initialize handler for SIGPIPE

This only happens on the !POSIX_SIGNAL case; but one may
test with the following:

    --- a/process.c
    +++ b/process.c
    @@ -3479,6 +3479,7 @@ disable_child_handler_fork_parent(struct child_handler_disabler_state *old)
     #endif
     }

    +#undef POSIX_SIGNAL
     /* This function should be async-signal-safe.  Actually it is. */
     static int
     disable_child_handler_fork_child(struct child_handler_disabler_state *old, char *errmsg, size_t errmsg_buflen)

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54890 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['process.c'],"In non-POSIX_SIGNAL cases, the handler for SIGPIPE is not properly initialized following disable_child_handler_fork_child function, potentially causing unexpected behaviors."
3f7b08d2cbdaa2d8c917e53cfa57210d0d99b0bf,1632667631,"[ruby/reline] Implement vi_kill_line_prev

This operation is mentioned and bound to `^U` in both `vi_command.rb`
and `vi_insert.rb`, but there is no definition of it.

Both Vi and Emacs use the same keystroke to do the same behavior, so
I've chosen to use `alias_method` to make the implementation small,
rather than duplicating the method and re-implementing it.

https://github.com/ruby/reline/commit/fdbfc8669f
",['lib/reline/line_editor.rb'],"The operation vi_kill_line_prev, despite being mentioned and bound to `^U` in both `vi_command.rb` and `vi_insert.rb`, lacks a definition, leading to non-functional key bindings."
d6ac5c53d481b109cb684d818b14ff24afb5b4bb,1564962909,"Revert ""Always evaluate the expression RUBY_ASSERT_MESG_WHEN just once""

It caused a significant benchmark fall.  Some assertions seem to
use expressions with side-effects which cannot be inlined.

This reverts commit b452c03a14f943ae25338547bd680fce67399d85.
",['include/ruby/assert.h'],Expressions with side-effects in assertions are not correctly inlined resulting in a significant performance drop.
dccfff943c3ea9defd91647cfa3fd8714041bb5a,1652688616,"Add `make test-annocheck` to detect security issues.

* Note that as the annocheck binary package is not available on Ubuntu, and it
  is working in progress in Debian, the script uses Fedora container, and
  it requires docker or podman command.
  https://www.debian.org/devel/wnpp/itp.en.html
  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=926470
* .github/workflows/compilers.yml: Add ""gcc-11 annocheck"" case.
  To pass the CI, set `TEST_ANNOCHECK_OPTS: ""--skip-pie --skip-notes""` for now.
  See <https://bugs.ruby-lang.org/issues/18061>.
* Skip MJIT tests in case of annocheck case.
  The MJIT tests fail in the annocheck case.
  See <https://bugs.ruby-lang.org/issues/18781>.
","['common.mk', 'tool/test-annocheck.sh']",There is currently no method to check for security issues using `make test-annocheck`. This can lead to undetected security vulnerabilities in the code.
4b583cff97025394fab4a014a2a8606dfb557475,1574224976,"Method parameters inspect

Example:

    def m(a, b=nil, *c, d:, e: nil, **rest, &block)
    end
    p method(:m)
    #=> #<Method: m(a, b=<default>, *c, d:, e: <default>, **rest, &block) ...>
","['proc.c', 'test/ruby/test_method.rb']",The current method of parameter inspection does not effectively mark default and optional parameters.
7abe47b85a9db7393e8176ee5f0507c549da59bf,1678171138,"Improve robustness of `io_wait` implementation. (#7456)

- Restore correct handling of `duration`.
- Don't delete from `@readable` or `@writable` unless it was added.
- A little more documentation.",['test/fiber/scheduler.rb'],`io_wait` implementation has inconsistent handling of `duration` and attempts to delete elements from `@readable` or `@writable` regardless of whether they were initially added.
58adb1636be32fb95173f01e448673dbae4511b0,1648835361,"[ruby/net-http] Update the content-length heading when decoding bodies

Previously, the content-encoding header was removed and the body
was modified, but the content-length header was not modified,
resulting in the content-length header not matching the body
length.

Fixes [Bug #16672]

https://github.com/ruby/net-http/commit/a7cb30124c
","['lib/net/http/response.rb', 'test/net/http/test_httpresponse.rb']",The content-length header does not match the actual body length after modifying the body and removing content-encoding header.
e8c6254680c2759df5d5e22818608fb84003d6c3,1497019335,"thread_pthread.c: workaround for valgrind on Mac

* thread.c: revert r59053.

* thread_pthread.c (rb_thread_create_timer_thread): needs more
  stack space for valgrind.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59055 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['thread.c', 'thread_pthread.c']","Valgrind on Mac requires larger stack space in the rb_thread_create_timer_thread function, causing crashes or incorrect behavior."
15cacf1f5588e34f1745790f7405bde845b2ac08,1581504010,"Add test_complete_symbol

The previous version of the test method used a symbol, "":abcdefg"" to complete
but longer symbols that can be completed are defined by other test methods of
other libs.
",['test/irb/test_completion.rb'],"The current test method implementation uses a short symbol for completion, causing issues with the completion of longer symbols defined in other test libraries."
d4585e7470163c794025c2d56930c0e5a5fbae3c,1599169318,"Avoid potential for rb_raise() while crashing

rb_obj_raw_info is called while printing out crash messages and
sometimes called during garbage collection. Calling rb_raise() in these
situations is undesirable because it can start executing ensure blocks.
",['gc.c'],"During crash message printing or garbage collection, calling rb_obj_raw_info may undesirably initiate rb_raise(), resulting in the execution of ensure blocks."
9504610b25de8ed8656f169c8a3bf533b6acc7ae,1497496352,"common.mk: tweaked packages order

* common.mk (dist): tweaked packages order by $(DISTPKGS).
  .tar.gz comes first for the hash values in downloads page, then
  popular .zip.

* tool/make-snapshot: ""all"" in -packages means all of the rest
  package types now.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59088 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['common.mk'],"The ordering of packages in `common.mk` is causing hash value discrepancies on the downloads page, with `.tar.gz` files not being prioritized."
fd307c3b60e3151d75b29e26acc5b1f7331eabc0,1463852872,"* ext/zlib/zlib.c: remove hacky macro introduced at r30437.

* ext/zlib/zlib.c (gzfile_make_header): cast as long (instead of int).

* ext/zlib/zlib.c (gzfile_make_footer): ditto.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55105 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/zlib/zlib.c'],"The casting of gzfile_make_header and gzfile_make_footer in ext/zlib/zlib.c is implemented as int, causing potential issues in platforms where long data type expected."
9a7e4bf9ea027f6ac5116743a3006c84c7441f50,1435290521,"transcode.c: fix race condition

* transcode.c (load_transcoder_entry): fix transcoder loading race
  condition, by waiting in require.  [ruby-dev:49106] [Bug #11277]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51037 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/ruby/test_transcode.rb', 'transcode.c']","A race condition occurs during transcoder loading, causing potential wrong sequence of operations which leads to unstable behavior."
3016f30c956413268655dcb25dbe5041684f9528,1681862208,"Return NULL to indicate the next shape isn't found

During compaction we must fix up shapes on objects who were extended but
then became embedded.  `rb_shape_traverse_from_new_root` is supposed to
walk shape trees looking for a matching shape.  When a shape has a
""single child"" we weren't returning NULL when the edge names didn't
match.

In the case of a single outgoing edge, this patch returns NULL when the
child edge name doesn't match (similar to the case when a shape has a
hash of outgoing edges)
",['shape.c'],"'During compaction, shape trees fail to indicate when no matching shapes are found, specifically when shapes have a single child and the edge names do not match.'"
5dd8fdd3f328f741fae4abba00c478e8a51d2a7e,1560564399,"test/net/imap/test_imap.rb: wait for the server thread to start

In some slow CI environments, the invocation of a thread seems very
slow.  This causes a test failure to attempt to connect a server that
does not start yet.

https://rubyci.org/logs/rubyci.s3.amazonaws.com/unstable11x/ruby-master/log/20190615T002420Z.fail.html.gz
https://rubyci.org/logs/rubyci.s3.amazonaws.com/unstable11x/ruby-master/log/20190611T022407Z.fail.html.gz
",['test/net/imap/test_imap.rb'],"In certain slow CI environments, initial invocation of a server thread is delayed, leading to tests failing due to attempting to connect to a non-started server."
9d258137458ddabeeeb99882022b4da5c54e645c,1460516617,"* test/ruby/test_basicinstructions.rb: add a test to check access
  instance variables on special const objects.

  All of such objects are frozen, so that we can not set instance
  variables for them. But we can read instance variables and return
  default value (nil).


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54556 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_basicinstructions.rb'],Accessing instance variables on frozen special const objects fails to return the default value.
9bb3022475a3026353ba6716724486630d10d899,1478933111,"rational.c: optimize Rational#{floor,ceil,round,truncate}

* rational.c (f_{expt10,round_common},nurat_{floor,ceil,round_half_{up,even}}):
  optimize Rational#{floor,ceil,round,truncate}.
  Author: Tadashi Saito <tad.a.digger@gmail.com>

* numeric.c (rb_int_divmod): rename from int_divmod to be exported.

* numeric.c (rb_int_and): rename from int_and to be exported.

* intern.h (rb_int_{divmod,and}): exported.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56742 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['internal.h', 'numeric.c', 'rational.c']","Performance issues are found with Rational#{floor,ceil,round,truncate} methods in rational.c due to inefficiency in the method implementation."
fc6243a6a6ef4fa1a241169342ad786dd148e3c7,1543140765,"deal with ONIGENC_CASE_IS_TITLECASE flag on lowercase characters

In the function onigenc_unicode_case_map() in enc/unicode.c, deal
with the case that the ONIGENC_CASE_IS_TITLECASE flag is set on
lowercase characters. This is in preparation for Georgian Mtavruli,
which are uppercase but not titlecase, in Unicode 11.0.0.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65971 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['enc/unicode.c'],"The ONIGENC_CASE_IS_TITLECASE flag is set on lowercase characters in the onigenc_unicode_case_map() function, creating conflict in dealing with upcoming Unicode standards like Georgian Mtavruli."
19f331f58823dc0ff90ba7806c46380dc4064fa3,1646335407,"Dedup superclass array in leaf sibling classes

Previously, we would build a new `superclasses` array for each class,
even though for all immediate subclasses of a class, the array is
identical.

This avoids duplicating the arrays on leaf classes (those without
subclasses) by calculating and storing a ""superclasses including self""
array on a class when it's first inherited and sharing that among all
superclasses.

An additional trick used is that the ""superclass array including self""
is valid as ""self""'s superclass array. It just has it's own class at the
end. We can use this to avoid an extra pointer of storage and can use
one bit of a flag to track that we've ""upgraded"" the array.
","['class.c', 'gc.c', 'internal/class.h']","Superclass arrays for immediate subclasses of a class are getting duplicated, taking unnecessary storage space."
9580586b63459318664e5309b8d19a626fff46f2,1536978047,"Use opt_{aref,aset} over opt_{aref,aset}_with

* compile.c (iseq_compile_each0): Use `opt_aref`/`opt_aset` over
  `opt_aref_with`/`opt_aset_with` when frozen_string_literal: true,
  not to resurrect the index string on non-Hash receiver.

[Fix GH-1957]

From: chopraanmol1 <chopraanmol1@gmail.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64745 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['compile.c'],"When frozen_string_literal: true, 'opt_aref_with'/'opt_aset_with' causes unwanted resurrection of index string on non-Hash receiver."
fa480488f45d75019004c5774b5ac3e6a4fbaa4c,1498470039,"parse.y: mark error token

* parse.y (parser_yyerror): mark the whole last token which caused
  the error, not only the end.

before:
  ```
  if end
        ^
  ```

after:
  ```
  if end
     ^~~
  ```

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59178 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['parse.y'],"Error marking in the parser only highlights the end of the token causing the error, not the whole token."
f8827cef6af2e242cd99a89a3da64600709c0a16,1452285902,"* gc.c: rename constant names HEAP_* to PAGE_*.

  Keys of GC::INTERNAL_CONSTANTS are also renamed.

* test/ruby/test_gc.rb: catch up this fix.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53468 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['gc.c', 'test/ruby/test_gc.rb']","Naming conflicts and potential errors due to HEAP_* constant names in gc.c. Also, problems tracking changes due to inconsistencies in test/ruby/test_gc.rb."
633243958c1b19e7d934442e23ed3d7cc3d7691b,1692968481,"Add _without_gc functions to darray

These functions manipulate darray without the possibility of triggering
GC, which is used for places that cannot trigger GC. These functions
crash when the allocation fails.
",['darray.h'],"Existing darray functions potentially trigger GC, leading to crashes when used in contexts where triggering GC is not permissible."
f2ea705d68d7e814e68c2df4598b95106e280e49,1553124731,"Add Enumerator::Lazy docs.

  * explanation of the class concept, with examples;
  * docs for all class methods (most of them just say ""Like Enumerable#<methodname>, but chains operation to be lazy-evaluated."", but I believe they are useful this way because now have proper call-sequences and link to corresponding Enumerable's explanations)
  * simplified example for ::new to emphasize the main concept
  * Enumerable#lazy docs are slightly lightened and linked to this class for more in-depth explanations.

  [Misc #15529][ruby-core:91046]

  Co-authored-by: zverok <zverok.offline@gmail.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67320 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['enumerator.c'],"The Enumerator::Lazy class lacks documentation, leaving its concepts, use cases and methods unclear to users."
b661824e75787548d47e1af649727a617a964bd4,1465563265,"forwardable.rb: fix for non-module objects

* lib/forwardable.rb (Forwardable._delegator_method): extract
  method generator and deal with non-module objects.
  [ruby-dev:49656] [Bug #12478]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55366 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/forwardable.rb', 'test/test_forwardable.rb']","Non-module objects cannot be properly handled using the Forwardable._delegator_method, leading to undesirable behaviour."
bd61ccef5769d5b8f3719680c4c4aea379f1d15e,1512718507,"test_file_exhaustive.rb: get rid of failures

* test/ruby/test_file_exhaustive.rb (test_utime_symlinkfile):
  under some condition, symlink file is also affected by utimes()
  on Linux.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61081 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_file_exhaustive.rb'],"The utimes() function affects symlink files under certain conditions on Linux, leading to tests failures in test_file_exhaustive.rb."
64072aa8e199fa0a3af85e3908c0af46f759f1ba,1519119581,"mjit.c: separate call from macro

* mjit.c (convert_unit_to_func): separate a function call from a
  macro, which evaluates the argument multiple times.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62499 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['mjit.c'],"The macro in mjit.c (convert_unit_to_func) is evaluating the argument multiple times when a function call is made, leading to potential redundancy and inefficiency in code execution."
44a659ad976221cfec3355e036daeb4e4942db55,1593318040,"Replace ALT_SEPARATOR with SEPARATOR also in output file name

To suppress warnings by Visual C.
```
./integer.rb(5) : warning C4129: 'i' : unrecognized character escape sequence
./kernel.rb(21) : warning C4129: 'k' : unrecognized character escape sequence
```
",['tool/mk_builtin_loader.rb'],Unrecognized character escape sequence warnings in Visual C caused by 'i' in integer.rb and 'k' in kernel.rb.
68e1dc51720b0f8bb033aac368122dad6c9aa2ed,1624634116,"iseq.c: Make ast_line_count return 0 when syntax error occurred

This broke coverage CI

```
  1) Failure:
TestRequire#test_load_syntax_error [/home/runner/work/actions/actions/ruby/test/ruby/test_require.rb:228]:
Exception(SyntaxError) with message matches to /unexpected/.
[SyntaxError] exception expected, not #<TypeError: no implicit conversion of false into Integer>.
```
https://github.com/ruby/actions/runs/2914743968?check_suite_focus=true
",['iseq.c'],"The ast_line_count method returns TypeError instead of SyntaxError when a syntax error occurs, causing failures in the coverage CI."
107531583c8e8b2d706a6a27f46d429e387efff7,1665593771,"Unwrap shape id as unsigned int

Shape IDs are unsigned.  This commit unwraps the shape id as an unsigned
int, which will automatically raise an argument error and also eliminate
a compilation warning.
",['shape.c'],"Shape ID being handled as a signed integer instead of the intended unsigned integer, leading to unintentional argument errors and compilation warnings."
e3ab525f699b5191db70ef095b3d110890441940,1656544908,"Fix ISeq dump / load in array cases

We need to dump relative offsets for inline storage entries so that
loading iseqs as an array works as well.  This commit also has some
minor refactoring to make computing relative ISE information easier.

This should fix the iseq dump / load as array tests we're seeing fail in
CI.

Co-Authored-By: John Hawthorn <john@hawthorn.email>
","['compile.c', 'iseq.c', 'iseq.h']","Relative offsets for inline storage entries are not dumped, causing issues in loading instruction sequences as arrays, and failing associated tests in CI."
73dd745cf1c742d62d8662ef69ec13ec7c30924f,1461994995,"{Fixnum,Bignum}#div is unified into Integer.

* numeric.c (rb_int_idiv): {Fixnum,Bignum}#div is unified into
  Integer.

* bignum.c (rb_big_idiv): Don't define Bignum#div.



git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54836 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['bignum.c', 'numeric.c']","The methods {Fixnum,Bignum}#div should be unified but currently exist separately causing redundancy and potential inconsistency in behaviors."
655b18e91490f0cd7e2055e8ab0075c6b2278322,1453465831,"common.mk: source dependency for nmake

* common.mk (ext/rbconfig/sizeof/sizes.c): separate the dependency
  with VPATH and the command, get rid of weird VPATH behavior of
  nmake.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53618 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['common.mk'],"VPATH behavior of nmake causing unexpected dependencies in common.mk, specifically in ext/rbconfig/sizeof/sizes.c."
ea631cc184da08a0db7ef5ce3f6ba9df4d02c138,1524806440,"mjit.c: fix cc arguments

* mjit.c (CC_LIBS): MJIT_LIBS is used only on Windows.

* mjit.c (compile_c_to_so): moved source and shared object files
  to simplify indexes.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63272 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['mjit.c'],"Compilation of c to shared object files in MJIT is complex due to involved indexes, and MJIT_LIBS are inappropriately used across all platforms instead of being limited to Windows."
90dad2b12849b9151f62b1f3a9ac6090aadc8cc8,1694212204,"memory_view: Avoid using bit field

Bit field's memory layout is implementation-defined.

See also:
https://wiki.sei.cmu.edu/confluence/display/c/EXP11-C.+Do+not+make+assumptions+regarding+the+layout+of+structures+with+bit-fields

If memory layout is implementation-defined, it's difficult to use from
FFI library such as Ruby-FFI.
",['include/ruby/memory_view.h'],Bit field's memory layout is causing difficulties when used with FFI libraries like Ruby-FFI due to its implementation-defined structure.
217f599a1e1c09618b0ebeffb34be790f70b8c68,1490412223,"class.c: prohibit refinement module

* class.c (ensure_includable): cannot include refinement
  module, or the type and the class do not match.
  [ruby-core:79632] [Bug #13236]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58083 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['class.c', 'test/ruby/test_refinement.rb']",Including a refinement module results in a mismatch between type and class.
7bfeb1c2ae50933cf5fb53f60974358e35448e4e,1458701094,"remove SIGN_EXTEND_CHAR macro

* marshal.c (r_long): cast to `signed char`, which is used
  already, instead of SIGN_EXTEND_CHAR.
* parse.y: SIGN_EXTEND_CHAR is no longer used.  [Fix GH-1302]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54234 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['marshal.c', 'parse.y']","The macro SIGN_EXTEND_CHAR is redundant, being indirectly used via signed char, causing unnecessary complexity in marshal.c and parse.y files."
3a7367ccc319499127ead147e5a08f769e44208e,1675114396,"mkconfig: Map `includedir` only for system ruby

Only when installing to the system path on macOS, prepend '$(SDKROOT)'
and remap `includedir`.
Fix https://github.com/rbenv/ruby-build/discussions/2123
","['test/mkmf/test_config.rb', 'test/test_rbconfig.rb', 'tool/mkconfig.rb']",Installing to the system path on macOS fails to prepend '$(SDKROOT)' and correctly remap `includedir` for system Ruby.
551ae37ba3307fb982272413a02b3b94561bf39b,1447756770,"* method.h (METHOD_ENTRY_COMPLEMENTED(_SET)): introduced to recognize
  complemented method entries or not. There are some cases that callabe
  method entries do not have defined_class.

* vm_method.c (rb_method_entry_complement_defined_class):
  use METHOD_ENTRY_COMPLEMENTED_SET().




git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52617 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['method.h', 'vm_method.c']","There are instances where callable method entries lack a defined class, which causes irregularities in recognizing complemented method entries."
72a4e1d3bbbdfff71ec2c6b2ddb3b9323193cacd,1624067728,"Tweak description of TracePoint :line event

""code"" here is too ambiguous. TracePoint events only occur if there
is a new statement or expression on that line, not if the line
is a continuation of a previous statement or expression and there
is no new statement or expression on the line.

For example:

```
[
 foo,   # start of expression, line event
 bar    # continuation of expression, no line event
]

[
 foo,   # start of expression, line event
 (bar)  # new expression, line event
]

foo(    # start of expression, line event
  bar   # continuation of expression, no line event
)

foo(    # start of expression, line event
  (bar) # new expression, line event
)
```

Fixes [Bug #15634]
",['trace_point.rb'],"TracePoint :line event description is misleading as it suggests events occur for every line, when in fact they only trigger on lines introducing a new statement or expression."
9c9c46e5a30fb47068337932eefde759b2763551,1475331154,"* ext/date/date_parse.c (date_zone_to_diff): it's nonsence and really
  harm that to use unary minus operator with unsigned value.
  get rid of test failures introduced at r56312.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56317 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/date/date_parse.c'],Use of unary minus operator with unsigned value in date_zone_to_diff leads to test failures.
918fe2ed7c6ec12beea3b925501a6782ecccd23d,1577784719,"Fix Object#inspect documentation

Starting from ruby 2.7.0, there's no longer a connection between the hexadecimal
number that #inspect shows and the object's ID.
",['object.c'],The hexadecimal number displayed by Object#inspect no longer corresponds to the object's ID in Ruby 2.7.0.
c03b723f56c9b31fb566d83ebecaeae5860b78dd,1612973827,"Update class documentation for StringScanner

The [] wasn't being displayed, and try to fix formatting for bol?
and << (even if they aren't linked).

Fixes [Bug #17620]
",['ext/strscan/strscan.c'],The class documentation for StringScanner isn't displaying [] and has incorrect formatting for bol? and <<.
2da6b328bb5124793a6420c55325f3106b615bb4,1568359468,"introduce IBF_(MAJOR|MINOR)_VERSION.

RubyVM::InstructionSequence.to_binary generates a bytecode binary
representation. To check compatibility with binary and loading
MRI we prepared major/minor version and compare them at loading
time. However, development version of MRI can change this format
but we can not increment minor version to make them consistent
with Ruby's major/minor versions.

To solve this issue, we introduce new minor version scheme
(binary's minor_version = ruby's minor * 10000 + dev ver)
and we can check incompatibility with older dev version.
",['compile.c'],"Mismatch in bytecode binary format for development versions of MRI due to inconsistent minor version incrementation, leading to compatibility issues with Ruby's major/minor versions."
3e84290213a86eff5e50ddf92a9b136a5034ac05,1665018281,"[ruby/rdoc] Remove unused abbrev require

This library originally used `abbrev` to expand abbreviations into
fully-qualified classes, but that was replaced in
https://github.com/ruby/rdoc/commit/f9ffe6684e2afeac65c62bf1a5a2fce729f21001

`abbrev` is no longer used anywhere, so this commit removes the require.

https://github.com/ruby/rdoc/commit/b76775f27d
",['lib/rdoc/ri/driver.rb'],"The 'abbrev' library, although no longer used in the rdoc project, still remains required leading to unnecessary load time."
e2cb0eded4813acb980b355321c2e56e82755f4c,1505622411,"ext/date/extconf.rb: check for timezone and altzone

Instead of in configure.in. As of r28592 the HAVE_VAR_TIMEZONE and
HAVE_VAR_ALTZONE macros are only used by ext/date. ext/date doesn't care
whether they are int or long, so just check for the existence.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59939 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/date/date_core.c', 'ext/date/extconf.rb']","The HAVE_VAR_TIMEZONE and HAVE_VAR_ALTZONE checks in ext/date/extconf.rb are mislocated in configure.in, leading to possible miscommunications on variable identifiers."
7079db9ec5acef3321e92c32d7ef086d8d16d720,1525833394,"RSTRING_PTR is not guaranteed to be VALUE-aligned

Don't abuse struct RString to hold arbitrary memory region.
use rb_alloc_tmp_buffer for that purpose.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63362 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['iseq.h'],"Struct RString is being used to hold arbitrary memory regions, although RSTRING_PTR doesn't guarantee VALUE-aligning, possibly causing instability or errors."
84dca8eff0cbcb1c23623b47fb78b0daf5c76e35,1567318579,"Revert ""Skip BUGs on Solaris""

This reverts commit 8adefd4cf29288f6e43f20efbdd44b215ae16c7a.

I couldn't see any failure on Solaris if the guard is removed.
Give it a try.
","['test/drb/drbtest.rb', 'test/drb/test_drbssl.rb']",Removing guards causes unexpected behavior and potential failures on Solaris system.
d5282540953a04401303d540e6f8b388e75500ff,1602115274,"Add missing WB for iseq

The write barrier wasn't being called for this object, so add the
missing WB.  Automatic compaction moved the reference because it didn't
know about the relationship (that's how I found the missing WB).
",['compile.c'],"Automatic compaction is mistakenly moving references due to a missing write barrier for a certain object, breaking object relationships."
5ca416bdf6b6785cb20f139c2c514eda005fe42f,1533517581,"process.c: ensure th->interrupt lock is held when migrating

w->cond may be changed without our knowledge in waitpid_nogvl
without th->interrupt_lock

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64201 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['process.c'],"The thread's interrupt lock isn't held consistently in 'waitpid_nogvl' execution, leading to possible unexpected changes in 'w->cond'."
f2552216d43040cd42bbb9fd484eab6c70856fe6,1580746582,"Fix SimpleDelegator respond_to? regression

In 2.6, SimpleDelegator would always use the target `respond_to?`

In 2.7.0 it doesn't if the target does not inherit from Object.

This breaks compatibility for delegated objects that inherit
from BasicObject and redefine `respond_to?`.
","['lib/delegate.rb', 'test/test_delegate.rb']","SimpleDelegator in 2.7.0 version doesn't use target's `respond_to?` for objects not inheriting from Object, breaking compatibility for delegated objects from BasicObject redefining `respond_to?`."
df9a70900a7380bc9b42b12ab90cf182988bcd45,1515983719,"__builtin_alloca_with_align for optimal memory access

ALLOCA_N takes type arugment.  It is natural that the returned
value to be used as an array of type, thus type-aligned.
Luckily GCC has a builtin to tell compiler such alignment info.
This should generate beter instructions.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61830 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['include/ruby/ruby.h'],ALLOCA_N function returning unaligned data memory causing inefficient memory access and poor instruction execution.
ed0f326e88ab695507d66729e3a4441d6888910b,1635780508,"[rubygems/rubygems] Leave "":"" after MANPATH when not set

So that system man pages still work after a gem with man pages overrides
it.

https://github.com/rubygems/rubygems/commit/1031879b87
","['lib/bundler/runtime.rb', 'spec/bundler/runtime/setup_spec.rb', 'spec/bundler/support/filters.rb']",Overriding MANPATH when installing a gem with man pages disrupts access to system man pages.
26ffd6e409fad94b3a24420156ab4b2897732cbc,1580953101,"Increase the frozen_strings table initial size

It was set to 1000 in a4a2b9be7a55bb61d17cf9673ed0d2a93bb52d31.

However on ruby-2.7.0p0, there are much more than 1k frozen string right after boot:

```
$ ruby -robjspace -e 'p ObjectSpace.each_object(String).select { |s| s.frozen? && ObjectSpace.dump(s).include?(%{""fstring"":true})}.uniq.count'
5948
```
",['vm.c'],Initial size of the frozen_strings table is too small and causing performance issues as there are more than 1K frozen strings on ruby-2.7.0p0 after boot.
cb95d834cc19a45a84d8d2c6d0f25d0c44e0d813,1666795469,"[ruby/irb] Don't insert new methods to Test::Unit::TestCase

Ruby CI runs irb and other Ruby core/stdlib tests in the same process.
So adding irb-specific helper to Test::Unit::TestCase could potentially
pollute other components' tests and should be avoided.
","['test/irb/test_cmd.rb', 'test/irb/test_helper.rb', 'test/irb/test_input_method.rb']",Insertion of irb-specific helpers to Test::Unit::TestCase could lead to unintentional pollution of other components' tests when all tests are run in the same process.
4172d08261e649d721c03ee7f368b568abc892a6,1537831394,"test/unit.rb: fix --subprocess-timeout-scale

* test/lib/test/unit.rb (Test::Unit::SubprocessOption#non_options):
  set timeout scale after parsing options.  the option value will be
  set after returning from setup_options.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64827 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/lib/test/unit.rb'],"Option values are not correctly set after returning from setup_options in Test::Unit::SubprocessOption#non_options, affecting timeout scale."
1f64192494e896277a8c72a9d0d53ebc93abe312,1548939513,"Use _NSGetMachExecuteHeader() instead of _mh_execute_header

_mh_execute_header is not accessible from a dylib unless libruby.dylib is
built with -undefined dynamic_lookup. And using -undefined
dynamic_lookup is not good style.

Reported by Jeremy Huddleston Sequoia <jeremyhu@apple.com>
Reviewed-by: Jeremy Huddleston Sequoia <jeremyhu@apple.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@66971 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['addr2line.c'],"'_mh_execute_header not accessible in a dylib without libruby.dylib built with -undefined dynamic_lookup, which isn't good style.'"
07c05b6fe931337e928a89ac5ebf654862dc0eca,1622520768,"Drop JIT_ISEQ_SIZE_THRESHOLD

Compiling everything seems to contributed to improving the final
performance in general. MJIT's compilation is slow anyway, especially
when you need to wait for JIT compaction.

This might make sense for short-time benchmarks like Optcarrot with
default parameters, but it didn't give benefits in my local environment.
","['mjit.c', 'mjit.h']","MJIT's slow compilation time has a negative impact on performance, especially for short-term benchmarks like Optcarrot with default parameters, in some local environments."
d8ef0a98c670449b20436947f5ebbd327ed5ab0d,1673022988,"[Bug #19319] Fix crash in rb_str_casemap

The following code crashes on my machine:

```
GC.stress = true

str = ""testing testing testing""

puts str.capitalize
```

We need to ensure that the object `buffer_anchor` remains on the stack
so it does not get GC'd.
",['string.c'],Garbage Collector stress setting leads to a crash when attempting to capitalize a string.
b3aa256c4d43d3d7e9975ec18eb127f45f623c9b,1533459412,"thread_pthread.c (native_sleep): reduce ppoll sleeps

By holding into sigwait_fd until after we acquire GVL, we can
hit the faster native_cond_sleep path instead of ppoll when
another thread wants to start sleeping.  ppoll-ing on sigwait_fd
isn't really useful in program where GVL is contended

This also allows reducing vm->gvl.lock mutex contention on
waitpid sleep migrations.

                         r64170        this patch
vm_thread_condvar1        0.921        1.356

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64193 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['thread_pthread.c'],Excessive native_sleep ppoll sleeps in thread_pthread.c resulting in significant contention on vm->gvl.lock mutex on waitpid sleep migrations.
7db4ce13ed051bc422c5db594bb41edbaeb1ae35,1696594863,"[ruby/prism] Introduce transparent scopes.

A transparent scope is a scope that cannot have local variables added to
it's local table. When a local is added to it's table, it instead gets
added to the first non-transparent parent scope.

This is used in for loops to ensure the correct depth for local
variables inside the body

https://github.com/ruby/prism/commit/ddb8e82253

Co-Authored-By: Kevin Newton <kddnewton@gmail.com>
","['prism/parser.h', 'prism/prism.c']",Adding local variables to certain scopes in for loops results in incorrect depth allocation.
bc6e55c0846ba668534ad224f516d3fdda16993c,1437589902,"* ext/openssl/ossl_ssl.c: add ALPN support. [Feature #9390]

* ext/openssl/extconf.rb: detect ALPN support in OpenSSL

* test/openssl/test_ssl.rb: test for ALPN

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51347 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/openssl/extconf.rb', 'ext/openssl/ossl_ssl.c', 'test/openssl/test_ssl.rb']","Ruby's OpenSSL extension lacks support for Application-Layer Protocol Negotiation (ALPN), unavailability of this feature is causing compatibility issues with modern protocols."
9873af0b1a343dff6d1a8af4c813aa2c9ecc47d5,1639065385,"`TracePoint.allow_reentry`

In general, while TracePoint callback is running,
other registerred callbacks are not called to avoid
confusion by reentrace.
This method allow the reentrace. This method should be
used carefully, otherwize the callback can be easily called
infinitely.

[Feature #15912]

Co-authored-by: Jean Boussier <jean.boussier@gmail.com>
","['test/ruby/test_settracefunc.rb', 'trace_point.rb', 'vm_trace.c']","TracePoint callbacks currently disallow reentrance, potentially limiting functionality yet preventing infinite loops."
8dd0fb9039bbe6152ea5542e6bc70de152871e23,1553497130,"use cfp->bp more.

cfp->bp was (re-)introduced by Kokubun san, but VM doesn't use it
because I (ko1) want to remove it in a future. But using it make
leave instruction fast because of sp consisntency check.
So now VM uses cfp->bp.

To use cfp->bp, I checked the value and I found that it is not a
""initial value of sp"" but a ""initial value of ep"". Fix this problem
and fix all bp references (this is why bp is renamed to bp_).


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67342 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['mjit_compile.c', 'vm_core.h', 'vm_insnhelper.c']","Current VM usage of 'sp' instead of 'cfp->bp' may potentially slow down leave instruction due to lack of sp consistency check. Additionally, 'cfp->bp' is not correctly referring to the ""initial value of sp""."
1e9896ae314d23ce813d86796ed3f29669c9db9b,1543809115,"use RARRAY_AREF instead of RARRAY_PTR_USE.

* enumerator.c (enum_chain_total_size): use RARRAY_AREF
  instead of RARRAY_PTR_USE because we don't need non-const
  ptr.

* enumerator.c (enum_chain_each): ditto.

* enumerator.c (enum_chain_rewind): ditto.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@66148 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['enumerator.c'],"Non-const pointers unnecessary while accessing array elements in various enumerator methods, potential source of issues."
e1ffafb2855e808fea05e150c28665bb365f1990,1675101008,"YJIT: Inline return address callback (#7198)

This makes it so that the generator and the output code read in the same
order. I think it reads better this way.",['yjit/src/codegen.rs'],There's a lack of synchronization in the reading order between the generator and the output code in YJIT.
73ae3e9b4648b49fb54308048aeea17b7a3582e5,1532791754,"win32.c: limit write size on console

* win32/win32.c (constat_parse): split long buffer and limit write
  size on a console, as well as rb_w32_write.
  [ruby-dev:50597] [Bug #14942]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64092 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['win32/win32.c'],"Writing to a console in Win32 is not handling long buffers properly, resulting in an overlarge write size."
05ae2c11fa0464b258d40ff330839a303fbdfd67,1564530420,"[rubygems/rubygems] Do not replace the cache entry if there is already one

* That way, multiple lookups for the same file always return the same object.

https://github.com/rubygems/rubygems/commit/50a431b6db
",['lib/rubygems/specification.rb'],"Multiple lookups for the same file in cache are returning different objects, leading to inconsistencies in cache management."
5b5d79c88bef88f35b24578873bdc39ef2157f20,1438366831,"* ext/openssl/lib/openssl/ssl.rb (module OpenSSL): convert
  `tmp_dh_callback` to Ruby, and call it when setting up an SSL
  connection.  This allows us to move the ""default"" behavior to the
  reader method.

* ext/openssl/ossl_ssl.c: call the tmp_dh_callback instead of
  accessing the SSLContext's internals.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51455 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/openssl/lib/openssl/ssl.rb', 'ext/openssl/ossl_ssl.c']","The SSLContext's internals are being directly accessed when setting up an SSL connection, which prevents the default behavior from moving to the reader method."
73a0223f952ef40d4986dde65eadb8f0b59521f2,1666797224,"[ruby/irb] Rename test_helper.rb to helper.rb

The name test_helper.rb conflicts with the test_helper.rb in JSON,
causing build failures. This commit renames test_helper.rb to helper.rb.

https://github.com/ruby/irb/commit/b6a92bf6b3

Co-Authored-By: Stan Lo <stan001212@gmail.com>
","['test/irb/helper.rb', 'test/irb/test_cmd.rb', 'test/irb/test_input_method.rb']",Conflict between 'test_helper.rb' in IRB and JSON is causing build failures.
fdcc924fce72b74e1e16881ac3b6e71a9b377b84,1455438735,"mkmf.rb: Do not modify caller strings

* lib/mkmf.rb (with_{cpp,c,ld}flags): copy caller strings not to
  be modified, in append_{cpp,c,ld}flags respectively.
  [Fix GH-1246]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53821 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/mkmf.rb'],"Caller strings are being unintentionally modified through with_{cpp,c,ld}flags in mkmf.rb causing unforeseen side effects."
0aa9eb9eed9e0cb38c7e1c1fcd37061bdfc385b7,1630404374,"[rubygems/rubygems] Move list of exceptions to the `rescue` clause

Instead of having to match classes and re-raise in the exception body.

https://github.com/rubygems/rubygems/commit/5edf74b781
",['lib/rubygems.rb'],"Exception handling in the program results in matching classes and re-raising in the exception body, which seems inefficient.
"
d7812d1949b6315eff5088c6f74eaf9ef6b34119,1670601981,"objspace_dump.c: dump the capacity field for INITIAL_CAPACITY shapes

We forgot about that one, it's quite useful to see which capacity
we started from.
",['ext/objspace/objspace_dump.c'],"The capacity field for INITIAL_CAPACITY shapes is not being dumped, limiting visibility into the capacity we started from."
e0cf80d666d4b5df3229f030a16d10d21323508e,1678975202,"Fix incorrect size of WeakMap buffer

In wmap_final_func, j is the number of elements + 1 (since j also
includes the length at the 0th index), so we should resize the buffer
to size j and the new length is j - 1.
",['weakmap.c'],There's an off-by-one error in the sizing of the WeakMap buffer due to incorrect account of length index.
d8db69e68301594360db3a4bc923b263c9909ff7,1466214649,"Suppress false warnings

* vm_eval.c (rb_eval_cmd): refactor to share common code, and
  suppress false maybe-uninitialized warnings by old gcc.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55436 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['eval_intern.h', 'vm_eval.c']","Older gcc versions falsely warn of possibly uninitialized variables in rb_eval_cmd, leading to unnecessary notifications."
de1219686595c2a3cde16c7dc6ac8643a1d8b340,1456546604,"test/unit: fix for the test

* test/lib/test/unit.rb (_run_parallel): make sure retrying
  message is a separate line.

* test/lib/test/unit.rb (_prepare_run): do not add Output if
  testing.

* test/lib/test/unit.rb (Skipping#failed): defer showing reports
  when showing skips, to be sorted.

* test/testunit/test_hideskip.rb (test_hideskip): fix assertion
  for output misordered by mixing output destinations.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53955 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/lib/test/unit.rb', 'test/testunit/test_hideskip.rb']","Retrying message in parallel run is not on a separate line, outward testing is conducted in ""_prepare_run"", report showing is not deferred when skips are present and output mixed destinations cause output misordering in ""test_hideskip""."
0eb237d99ccd0e89188446418358b56418ab7835,1651180344,"YJIT: replace BLOCKID_NULL with Option<BlockId>, more idiomatic (#5858)

* YJIT: replace BLOCKID_NULL with Option<BlockId>, more idiomatic

* Update yjit/src/core.rs

Co-authored-by: Alan Wu <XrXr@users.noreply.github.com>

* Update yjit/src/core.rs

Co-authored-by: Alan Wu <XrXr@users.noreply.github.com>

Co-authored-by: Alan Wu <XrXr@users.noreply.github.com>","['yjit/src/codegen.rs', 'yjit/src/core.rs']",The current use of BLOCKID_NULL in YJIT is non-idiomatic and could lead to potential issues.
e100fcbdd1e81c23e3b4c87964aff210232903a8,1591901168,"Prohibit setting class variable on frozen module through inheritance

Setting class varibles goes through the ancestor list which can
contain iclasses. Iclasses share a lot of information with the
module they are made from, but not the frozen status.

Check the frozen status of the module instead of the iclass.
","['test/ruby/test_variable.rb', 'variable.c']","Setting class variables on frozen modules via inheritance slip through due to sharing information with iclasses, which do not share the frozen status."
f9d5843fd92d1cbc41eef8f2bcf54ad23326f01d,1501383390,"hash.c: refactor env_enc_str_new

* hash.c (env_enc_str_new): convert to the expected encoding
  without intermediate string, and set econv flags if default
  internal encoding is set too.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59449 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['hash.c'],"'env_enc_str_new' function in hash.c generates intermediate strings while converting to expected encoding, which may result inefficient utilization of resources, issue escalates if default internal encoding is set."
3dec5dc3462286cdbdb53e496e6175a82bdc39b7,1697487830,"[ruby/net-http] Force TLS version to 1.2 when using LibreSSL

This comment previously specified TLS 1.2, but actually set the
version to TLS 1.0.  LibreSSL 3.8.1 (included in OpenBSD 7.4)
dropped support for TLS 1.0/1.1 for security reasons, which
broke this test.  Switch the test to use TLS 1.2 as documented
so it will continue to work on OpenBSD 7.4+.

https://github.com/ruby/net-http/commit/97be4de53a
",['test/net/http/test_https.rb'],"The test in ruby/net-http sets TLS to version 1.0, instead of the documented 1.2 leading to test failures on LibreSSL 3.8.1 (included in OpenBSD 7.4) which no longer supports TLS 1.0/1.1."
8dd2435877fae9b13b107cb306c0f4d723451f20,1459440892,"* thread.c (update_coverage): Do not track coverage in loaded files
  after Coverage.result. Avoids out-of-bounds access. [Bug #12237]
* ext/coverage/coverage.c (coverage_clear_result_i): document.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54465 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/coverage/coverage.c', 'thread.c']",Tracking coverage in loaded files after Coverage.result leads to out-of-bounds access.
a9a94540d68b523ecc4e2181e50b320cd5d176f1,1636656465,"Remove RCLASS(obj)->ptr when RVARGC is enabled

With RVARGC we always store the rb_classext_t in the same slot as the
RClass struct that refers to it. So we don't need to store the pointer
or access through the pointer anymore and can switch the RCLASS_EXT
macro to use an offset
","['class.c', 'gc.c', 'internal/class.h']","With RVARGC enabled, the reference pointer RCLASS(obj)->ptr is redundant since rb_classext_t is stored in the same slot as the referring RClass structure."
a038bf238bd9a24bf1e1622f618a27db261fc91b,1532944481,"thread_pthread.h (native_thread_data): split condvars on some platforms

Maybe some platforms have strange condition variable implementations
which have a ""memory"" of which mutexes they're associated with.

In any case, it makes documentation easier even on GNU/Linux and
FreeBSD.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64124 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['thread_pthread.c', 'thread_pthread.h']","""On certain platforms, condition variables may mistakenly retain a 'memory' of their associated mutexes, potentially causing problems."""
13b106a19c9c819fb0c887beb4787ab894cdba6c,1571334860,"Ignore the input method key sequence from getwch() correctly

The function getwch() returns some key sequences which start from 0 or 0xE0
with a following key code. Alt+` that is on/off key for input methods gives 0
and 41 so Reline was always ignoring 0 and following keys but numeric keypad
keys give 0 and following actual keys. This commit changes the behavior to be
ignoring only the 0 and 41 sequence.
",['lib/reline/windows.rb'],"Input method on/off key (Alt+`) in getwch() conflicts with numeric keypad keys, causing unexpected input behavior."
33a8b277dc6dcc9db72e93d6a3d7735c7f17441e,1540683478,"use Scripting.Dictionary instead of InternetExplorer.Application.

* spec/ruby/library/win32ole/invoke_spec.rb: use Scripting.Dictionary
  instead of InternetExplorer.Application. InternetExplorer.Application
  is not available on some environment. Thanks to MSP-Greg (Greg L).

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65399 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['spec/ruby/library/win32ole/win32ole/invoke_spec.rb'],The use of InternetExplorer.Application in invoke_spec.rb results in availability issues in certain computing environments.
2a26a5e677de61cdba04fc8df63c00d3c3e612a9,1679084158,"YJIT: Add and use Branch::assert_layout()

This assert would've caught a bug I wrote while developing
ruby/ruby#7443 so I figured it would be good to commit it
as it could be helpful in the future.
",['yjit/src/core.rs'],"There's potential for layout issues while developing new branches, requiring an assert function to avoid incorrect setups."
ec74acd1a97e84c27cc899bcf28cc2a6e62ba5a5,1512717184,"test_file_exhaustive.rb: test_utime_symlinkfile

* test_file_exhaustive.rb (test_utime_symlinkfile): investigate
  failures on some platforms.  wait a second to tell if symlink
  atime is changed.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61079 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_file_exhaustive.rb'],Failures are experienced on some platforms during the testing of 'utime_symlinkfile' due to an issue in verifying if symlink 'atime' has changed.
fa3670e6e48a8553ad1f37bbfbd112911da497d1,1605085869,"remove Ractor#close

close_incoming by antoher ractor means there is no other messages
will be sent to the ractor, so Ractor.receive will block forever,
and it should raise and stop.

close_outgoing by antoher ractor means, ... I don't have good idea
to use it. It can be a private method.

Ractor#close calls both, but it does not make sense to call
different purpose methods, so I remove it.
","['bootstraptest/test_ractor.rb', 'ractor.rb']","The method Ractor#close is problematic as it combines two opposing functionalities inside-out, which eventually leads to either the blocking of Ractor.receive indefinitely or unclear use cases."
9cacc53d4a45d5af962d5c6fb9a5406b518641da,1498011927,"Fix Enumerable#uniq with non single yield arguments

* enum.c (uniq_func, uniq_iter): need packed value as the unique
  key.  [ruby-core:81734] [Bug #13669] [Fix GH-1658]

Author:    Kenichi Kamiya <kachick1@gmail.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@59128 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['enum.c', 'test/ruby/test_enum.rb']","Enumerable#uniq fails when used with multiple yield arguments, requiring a unique key for correct value enumeration."
50d85436f8f194aa78cd0e819471fe20767a5993,1562804321,"WEBrick::HTTPResponse create tempfile if required.

WEBrick::HTTPProxyServer implementes HTTP proxy using
WEBrick and Net::HTTP.
WEBrick accepts HTTP/1.0 clients and
Net::HTTP uses always HTTP/1.1.

However HTTP/1.1 supports chunked transfer coding HTTP/1.0 doesn't.

Chunked transfer coding doesn't require that
content-length before the content is sent.
But non-chunked transfer coding require content-length before
the content is sent.

So, when HTTP/1.0 clients connects WEBrick::HTTPProxyServer and
origin server returns chunked response,
WEBrick::HTTPProxyServer needs to store whole content to
know the length of it.

This patch do it using tempfile.
","['lib/webrick/httpresponse.rb', 'test/webrick/test_httpproxy.rb']","When HTTP/1.0 clients connect to WEBrick::HTTPProxyServer and receive a chunked response from the origin server, WEBrick::HTTPProxyServer has to store the entire content to determine its length."
208018fb9d63f5cc6e540208df86c3e890a28e95,1484174330,"random.c (fill_random_bytes_syscall): use ""__NR_"" prefix on Linux

glibc still does not define the SYS_getrandom alias for
__NR_getrandom in the Linux kernel.  However, installing
up-to-date Linux kernel headers (linux-libc-dev >= 3.17 package
on Debian) will get the __NR_getrandom syscall number defined
properly without relying on glibc.

This allows users with a modern kernel+headers to use the getrandom
syscall without waiting on glibc support.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57307 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['random.c'],"The glibc does not define the SYS_getrandom alias for __NR_getrandom in the Linux kernel, requiring reliance on updated Linux kernel headers."
b08a45521e43bc5f6aa63e4b52a713b70df7943a,1473037103,"rbinstall.rb: install just one gemspec [ci skip]

* tool/rbinstall.rb (gem): install gemspec match with the
  directory only.  some gems, (e.g., json) have multiple gemspec
  files.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56070 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['tool/rbinstall.rb'],"The installation process tries to install all gemspec files, causing issues with gems like 'json' which have multiple gemspecs."
b6bae0ec4433bcea6ba94a50de344c2e3b90fee9,1591696637,"Return seconds slept after Thread.scheduler wait_sleep

Kernel#sleep should still return seconds slept, even when using a
Thread.scheduler. The return value of Scheduler#wait_sleep can be
ignored.
","['process.c', 'test/fiber/test_sleep.rb']","When using a Thread.scheduler, Kernel#sleep isn't returning the number of seconds slept."
db2047ebaf4d506420432cf18ca978a1fc63a91f,1596197239,"[rubygems/rubygems] Fix encoding mismatch errors on MinGW

GNU make in MSys is localized to use UTF-8 while Ruby's filesystem
encoding is set to OEM CodePage (e.g., CP932 in Japanese Edition),
the read output from the make has broken encoding and results in
""invalid byte sequence"" errors.  As `DESTDIR` is set to a US-ASCII
7bit clean string, matching as binary encoding should have no
problems.

https://github.com/rubygems/rubygems/commit/96a5e7523b
",['test/rubygems/test_gem_ext_builder.rb'],"Mismatch in encoding between GNU make in MSys and Ruby's filesystem is causing ""invalid byte sequence"" errors on MinGW."
964bbc1686c7dd42d58da504a6968c90d5a428fd,1552913298,"parse.y: numbered parameter in lambda

* parse.y (lambda): support numbered parameters, only when no
  argument list including empty parentheses, like empty vertical
  bars.  [ruby-core:91859] [Bug #15672]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67295 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['parse.y', 'test/ruby/test_syntax.rb']",Lambda function does not support numbered parameters when no argument list is present including empty parentheses and vertical bars.
0d68286be93b2c7e588e42849ead0526ff55126c,1659049966,"Revert ""Try reproducing the MinGW hang on time command (#6168)""

This reverts commit bee5089d6789401f265f87b2f23f1bd7ec63cec8.

Looking at https://github.com/ruby/ruby/runs/7564065637?check_suite_focus=true,
we concluded that the ruby process for test-all is stuck before exit
when this issue reproduces.

However, because of our limited bandwidth to support MinGW, we're not
investigating this, and therefore we need to keep skipping tests that
hang on this environment.
",['test/rinda/test_rinda.rb'],"Tests on MinGW environment frequently hang, causing the ruby process for test-all to become stuck before exit."
3bf9b2f0473550caa73468908ac3e18e0f431b85,1444841841,"* lib/ostruct.rb: Finish defining OpenStruct attributes lazily.
  Patch by @sferik in [GH-1037]: https://github.com/ruby/ruby/pull/1037
  This commit is an addendum to https://github.com/ruby/ruby/pull/1033.
  It:
  1. lazily defines attribute accessors for copied and marshaled objects,
  2. returns nil when an attribute reader is not defined, and
  3. defines respond_to_missing? to maintain the same respond_to? behavior

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52125 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/ostruct.rb'],"OpenStruct attributes aren't defined lazily, causing inefficiency. Behavior inconsistencies present when attribute reader isn't defined or when 'respond_to?' is called."
5ed58b90d188b26e5369397b48edaba287ab09fe,1591325396,"[ruby/psych] Fix gem installation

Current version is not installable because the gemspec is invalid, since
it includes a `.travis.yml` file that no longer exists, so `rake
install` fails like this:

```
$ rake install
rake aborted!
WARNING:  See https://guides.rubygems.org/specification-reference/ for help
ERROR:  While executing gem ... (Gem::InvalidSpecificationException)
    ["".travis.yml""] are not files
```

https://github.com/ruby/psych/commit/32b18ca7ca
",['ext/psych/psych.gemspec'],"Psych gem installation breaks due to an invalid gemspec including a non-existing `.travis.yml` file, causing `rake install` to fail with a `Gem::InvalidSpecificationException`."
844a0edbae6e74293e3d0cb1ceeeb66a4371d06d,1660287498,"[Bug #18962] Do not read again once reached EOF

`Ripper::Lexer#parse` re-parses the source code with syntax errors
when `raise_errors: false`.

Co-Authored-By: tompng <tomoyapenguin@gmail.com>
","['parse.y', 'test/ripper/test_lexer.rb']",Ripper::Lexer#parse is redundantly parsing the source code with syntax errors when raise_errors is set to false.
593505ac6f802d2b5bff469425b7c76b65cc9b10,1551745935,"string.c: respect the actual encoding

* string.c (rb_enc_str_coderange): respect the actual encoding of
  if a BOM presents, and scan for the actual code range.
  [ruby-core:91662] [Bug #15635]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@67167 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['string.c', 'test/ruby/test_m17n.rb']","The string coderange function in string.c is not respecting the actual encoding if a BOM is present, leading to inaccurate scans for the actual code range."
a3b53cd9919ff01567ef04af4057b3dec3192471,1451334670,"Resolv::IPv6.create: avoid modifying frozen string literal

* lib/resolv.rb (Resolv::IPv6.create): avoid modifying frozen
* test/resolv/test_dns.rb (test_ipv6_create): test for above
  [Bug #11910] [ruby-core:72559]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53363 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/resolv.rb', 'test/resolv/test_dns.rb']","""Frozen string literal gets unexpectedly modified when creating an IPv6 address causing misbehavior in Resolv::IPv6.create method."""
853ab8662f4cdde16f28ba775acf1be0725a25f4,1490066156,"stringio.c: check character code

* ext/stringio/stringio.c (strio_ungetc): check if the character
  code is valid in the encoding.  reported by Ahmad Sherif
  (ahmadsherif) at https://hackerone.com/reports/209593.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58040 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['ext/stringio/stringio.c', 'test/stringio/test_stringio.rb']","The StringIO ungetc method doesn't validate the character encoding, potentially causing invalid characters."
5e09125581063b2ae8e72c1597e10e3516c568f1,1518098192,"test_jit.rb: don't force to test --jit-wait

for platforms which can't use JIT. Such platforms can time out with
eval_with_jit.

http://ci.rvm.jp/results/trunk_gcc5@silicon-docker/509911
http://ci.rvm.jp/results/trunk_gcc4@silicon-docker/509904

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62314 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_jit.rb'],"JIT testing is being forcefully conducted on platforms that do not support JIT, leading to time out issues during eval_with_jit."
997133d5959d73663988814704b2e390a75ea718,1592117314,"Make __builtin_cexpr! and __builtin_cstmt! work again

with Ripper.

a3e6f52c17061f012c4e638b3343b57752ed7603 introduced __builtin_cexpr! and
__builtin_cstmt!, but nobody has used them and then they broke on
79292b30884ebcd8be028a7f3c9ccafd7759f2ae by undefined `params`.

This patch fixes the undefined `params`, but still we're not using them
yet.
",['tool/mk_builtin_loader.rb'],"The introduction of __builtin_cexpr! and __builtin_cstmt! in Ripper resulted in broken functionality due to undefined `params`.
"
ecbedf9bf125b158c683dd6f69ce966653cc9a33,1689706357,"Remove assumption about object order

The address of objects can't be assumed since a later object may be
allocate in a swept slot.
",['test/objspace/test_objspace.rb'],"Object allocation order can't be guaranteed, raising problems when a new object is allocated in a previously swept slot."
d0e7329df3ea43cb9e469ad32aafdbf7267ba2d0,1496291883,"improve English for a warning message

On DOSish systems, there is a warning message for \r\n line endings on shebang line.
Improve this message from ""shebang line ends with \r may cause a problem""
to ""shebang line ending with \r may cause problems"".

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58981 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ruby.c'],"Warning message for \r\n line endings on shebang lines on DOSish systems is not clear enough, leading to potential misunderstanding."
0e75b2f2e633ac9579e63e1d4b3bad02e915889c,1669082411,"[ruby/cgi] Prevent CRLF injection

Throw a RuntimeError if the HTTP response header contains CR or LF to
prevent HTTP response splitting.

https://hackerone.com/reports/1204695

https://github.com/ruby/cgi/commit/64c5045c0a
","['lib/cgi/core.rb', 'test/cgi/test_cgi_header.rb']","HTTP response header in Ruby's CGI library is susceptible to CR or LF injection, leading to potential HTTP response splitting."
0df79477bd2cd534ad2d89bfdbf9708c64b59eed,1472536757,"* io.c (nogvl_fsync, nogvl_fdatasync): on Windows, just ignore if the
  fd is associated to non-disk device.  if call fsync and/or fdatasync
  with such fds, it causes Errno::EBADF exception and the behavior is
  incomatible with ruby 2.1 and earlier unintendedly introduced.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56036 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['io.c'],"On Windows, calling fsync or fdatasync with file descriptors associated to non-disk devices raises an Errno::EBADF exception, an incompatible behavior with Ruby 2.1 and earlier versions."
26c179d7e7e7ae0eb21050659c3e8778358230ab,1592299535,"Check argument to ObjectSpace._id2ref

Ensure that the argument is an Integer or implicitly convert to,
before dereferencing as a Bignum.  Addressed a regression in
b99833baec2.

Reported by u75615 at https://hackerone.com/reports/898614
","['gc.c', 'test/ruby/test_objectspace.rb']","Argument to ObjectSpace._id2ref is not ensured to be an Integer or implicitly convertible to one, causing a regression."
f9de8ccf1e26c9774cd1ebdb587b8edbb08b4d7b,1592475255,"Rename hidden templates

Because they don't play nice with ruby-core's gitignore and cause issues
with ruby-core integration.

Also, because it's consistent with other templates such as `gitignore.tt`.
",['lib/bundler/cli/gem.rb'],Hidden templates are causing issues with ruby-core integration due to incompatibility with ruby-core's gitignore.
53b3be5d58a9bf1efce229b3dce723f96e820c79,1565367930,"Fix parsing of mutiple assignment with rescue modifier

Single assignment with rescue modifier applies rescue to the RHS:

  a = raise rescue 1 # a = (raise rescue 1)

Previously, multiple assignment with rescue modifier applied rescue
to the entire expression:

  a, b = raise rescue [1, 2] # (a, b = raise) rescue [1, 2]

This makes multiple assignment with rescue modifier consistent with
single assignment with rescue modifier, applying rescue to the RHS:

  a, b = raise rescue [1, 2] # a, b = (raise rescue [1, 2])

Implements [Feature #8239]
Fixes [Bug #8279]
","['parse.y', 'test/ruby/test_assignment.rb']","Multiple assignment with rescue modifier applies rescue to the entire expression rather than just the RHS, causing inconsistency with single assignments."
e0b40ef5d8173aff304c81f93516e1246e3c042c,1590533270,"Don't convert bundler man pages from mdoc to man

These man pages are already in man format and assuming they are
mdoc format breaks things.

Fixes [Bug #16823]
",['tool/rbinstall.rb'],Assuming Bundler's man pages are in mdoc format causes functionality issues due to incorrect formatting.
f2ba23ace5a3cedf0f0c8b132d62e143afe90808,1452148664,"mkmf.rb: fix for ODE make

* lib/mkmf.rb (create_makefile): get rid of placing @ at the
  beginning of replacement, which is the loop expansion mechanism
  from the OSF Development Environment (ODE) make.  fix failures
  with bmake by r53448.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53450 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/mkmf.rb'],"The '@' at the beginning of replacement in 'create_makefile' causes failures with bmake, due to improper loop expansion in the OSF Development Environment (ODE) make."
4c88107c54b06c1a3e89970eb243c8ac887d84e1,1575537535,"Fix `warning: already initialized constant DidYouMean::VERSION`

```
.../gems/did_you_mean-1.3.1/lib/did_you_mean/version.rb:2: warning: already initialized constant DidYouMean::VERSION
.../lib/did_you_mean/version.rb:2: warning: previous definition of VERSION was here
```
",['lib/did_you_mean/did_you_mean.gemspec'],"The constant `DidYouMean::VERSION` is being initialized multiple times, resulting in warning messages."
ea8f7d4a81fa9e1696930c63b106cc91be14c29d,1596197239,"[rubygems/rubygems] Gem::Specification#to_ruby doesn't need `openssl`

The `openssl` require when openssl not present was having the
side-effect the our custom require fallbacks would end up loading `Gem::Specification.stubs`.

Co-authored-by: Alyssa Ross <hi@alyssa.is>

https://github.com/rubygems/rubygems/commit/22c4ded4ad
",['lib/rubygems/specification.rb'],The `openssl` requirement in `Gem::Specification#to_ruby` is causing our custom require fallbacks to load `Gem::Specification.stubs` even when `openssl` is not present.
21f7cca2c6394aaaec9189a7cb08a9ad8a2196e3,1573261444,"initialize kw special local var.

A method which has keyword parameters has an implicit local variable
to specify which keywords are (un)specified.

vm_call_iseq_setup_kwparm_nokwarg() is special function to invoke
a ISeq method without any keyword arguments. However, it should
also initialize the special local var. Without this initialization,
the implicit lvar can points a freed (T_NONE) object.
",['vm_insnhelper.c'],Initialization of local variable in the method with keyword parameters is missing in vm_call_iseq_setup_kwparm_nokwarg() causing it to possibly point to a freed (T_NONE) object.
7348db866a4120b701bf28918d6fcbd4d6f07121,1647251452,"[DOC] Remove outdated note from WeakRef#initialize

The note

> Raises an ArgumentError if the given +orig+ is immutable, such as Symbol,
> Integer, or Float.

has not been true since #2313 (GH-2313, Feature #16035) when
@casperisfine enabled storing non-finalizable objects in the underlying
`ObjectSpace::WeakMap`.

On Ruby 2.7+, `WeakRef.new(1) + 1` works fine and the result is the
expected 2.
",['lib/weakref.rb'],"The documentation for WeakRef#initialize contains outdated information regarding immutable arguments, which may cause user confusion or misuse."
f7fb4e00f721a9d0520b0bbeab687d122f6759ff,1449120138,"range.c: infected by the receiver

* range.c (range_to_s): should be infected by the receiver.
  str2 infects by appending.  [ruby-core:71811] [Bug #11767]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52868 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['range.c', 'test/ruby/test_range.rb']","The 'range_to_s' function in 'range.c' incorrectly appends instead of being infected by the receiver, causing unexpected behavior."
b12bc3b0461f7331db6e27865fa7a8ef29a0f652,1576521068,"thread.c: avoid needless read after select|ppoll

We do not need to issue pipe|eventfd read(2) syscall
unless select, ppoll|poll declares the FD needs reading.
",['thread.c'],Unnecessary read system calls are being issued to pipe or eventfd after select or ppoll operation even when the file descriptor doesn't require reading.
0b1b73451528d946060f4876aa38fc3278899deb,1593396341,"rb_class_modify_check: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['eval.c'],"Goto is causing control flow to jump into a branch creating potential issues with code execution, suggesting a need for refactoring."
8de53fb31cd7491c31c56db6a01c5cab40d25e4b,1631477747,"[ruby/reline] Use expanded method definitions instead of refinements

@jhawthorn said, ""this will make Ruby's integer comparisons slower
globally."" It looks like ""binding.irb"" is going to cause serious
problems in Rails applications.

https://github.com/ruby/reline/commit/ee8d6c6a82
",['lib/reline/key_stroke.rb'],"The use of ""binding.irb"" in Ruby's integer comparisons could potentially cause serious performance issues in Rails applications."
4dfc2f2e3d95b4b9a3b79c1fdf2eb721beacdc0c,1593396341,"bary_mul_karatsuba_branch: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['bignum.c'],The use of 'goto' to jump into a branch in 'bary_mul_karatsuba_branch' is creating complications in the flow of execution.
ac8cf010bc2cad78f4e2cf182c475effdb12b181,1673446594,"Remove check for RCLASS_EXT in variable.c

A class/module should always have a RCLASS_EXT, so we shouldn't need to
check that it exists.
",['variable.c'],Unnecessary checks for existence of RCLASS_EXT in class/module can potentially cause performance issues.
013cca1f9a87eebba61e11ebcf97109dde009d37,1595179972,"[ruby/csv] doc: fix return value of open {} and use File.open {} (#139)

* Enhanced RDoc for CSV

* Repair example code for foreach
https://github.com/ruby/csv/commit/16b425eb37
",['lib/csv.rb'],Discrepancies in CSV RDoc information and example code about the return value of `open {}` and the use of `File.open {}`.
927ead9f7510ff536eea2010e007a92a2bba61c8,1634768372,"YJIT: unify exits. Patch iseqs only when necessary

* YJIT: unify exits. Patch iseqs only when necessary

This fixes the gotcha that returning YJIT_CANT_COPMILE for an
instruction at entry position leading to infinite loop.

Also, iseq patching is only done only when necessary, which should make
most exits faster.

* Now that exits are the same, return YJIT_CANT_COMPILE",['yjit_codegen.c'],"YJIT enters an infinite loop when returning YJIT_CANT_COMPILE for an instruction at entry position. Additionally, iseq patching even if it's unnecessary, potentially leading to slower exits."
75687e0affefe4c8ff2e6d356abe29062899074c,1453880134,"Fix doc with default value with GH-523

* lib/tempfile.rb (Tempfile#initialize): [DOC] the first parameter
  `basename` is optional and defaulted to an empty string since
  [GH-523].  [Fix GH-1225]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53668 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/tempfile.rb'],"Tempfile#initialize documentation incorrectly states that the 'basename' parameter is required, while it has been optional since GH-523."
befcbc2cb98c05b16e4b99de3f6386d277aceb56,1457085183,"* gc.c: rename ""enum gc_stat"" to ""enum gc_mode""
  because there is a same name (no related) function gc_stat().

  Also gc_stat_* are renamed to gc_mode_*,
  gc_stat_transition() to gc_mode_transition(),
  rb_objspace::flags::stat is renamed to rb_objspace::flags::mode.

  Change rb_objspace::flags::mode from 2 bits to 3 bits because VC++
  returns negative enum value with 2 bits.

* gc.c (gc_mode): add a macro to access rb_objspace::flags::mode
  with verification code (verification is enabled only on
  RGENGC_CHECK_MODE > 0).

* gc.c (gc_mode_set): same macro for setter.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53996 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['gc.c'],Enumeration gc_stat and function gc_stat() share the same name causing confusion; using VC++ with the current configuration yields negative enum values.
93f364d65e25187ce3c1dd5172a00264804e9380,1667566978,"Use RTEST to to check return value

rb_obj_is_kind_of returns a Ruby Qtrue or Qfalse. We should use RTEST
rather than assuming that Qfalse is 0.
",['proc.c'],Assumptions on rb_obj_is_kind_of to return Qfalse as 0 leads to errors when checking return values.
21994b7fd686f263544fcac1616ecf3189fb78b3,1568236991,"Avoid rehashing keys in transform_values

Previously, calling transform_values would call rb_hash_aset for each
key, needing to rehash it and look up its location.

Instead, we can use rb_hash_stlike_foreach_with_replace to replace the
values as we iterate without rehashing the keys.
",['hash.c'],"The current implementation of transform_values forces rehashing of keys with each function call, causing significant performance issues."
3b147c421368825ab3ff69dd78d10d7f7db0765e,1588864501,"test/irb/test_cmd.rb: clear IRB.@CONF on setup

It caches a path to .irbrc file, which has caused random failure:

```
  1) Failure:
TestIRB::ExtendCommand#test_irb_info_multiline [/home/mame/work/ruby/test/irb/test_cmd.rb:49]:
Expected /
        Ruby\sversion: .+\n
        IRB\sversion:\sirb .+\n
        InputMethod:\sReidlineInputMethod\swith\sReline .+ and .+\n
        \.irbrc\spath: .+
      /x to match ""Ruby version: 2.8.0\n"" +
""IRB version: irb 1.2.3 (2020-02-15)\n"" +
""InputMethod: ReidlineInputMethod with Reline 0.1.4 and /tmp/test_reline_config_155659/.inputrc\n"".
```
",['test/irb/test_cmd.rb'],Cached path to .irbrc file leads to random failure in TestIRB::ExtendCommand#test_irb_info_multiline.
0701e5ff4641f364e39b9b6036afeecb3a816a5a,1447727128,"update rdoc of dig methods [ci skip]

* array.c (rb_ary_dig), hash.c (rb_hash_dig): [DOC] Update
  comments describing dig methods.  [Fix GH-1103]
* struct.c (rb_struct_dig): [DOC] add rdoc.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52607 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['array.c', 'hash.c', 'struct.c']","Comments and rdocs for `dig` method across array.c, hash.c, and struct.c are inconsistent or incomplete."
05f891cbbb4ee3b09e83e50924d96bddb8f67b91,1481177946,"vm.c: check type of hash to merge

* vm.c (core_hash_merge): check the type of the target hash to
  merge.  [ruby-core:78536] [Bug #13015]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57024 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/ruby/test_keyword.rb', 'vm.c']","The core_hash_merge function in vm.c is not correctly checking the type of the target hash to merge, potentially leading to errors. [ruby-core:78536] [Bug #13015]"
efd36678e6041593a6b9cd64bdbe4318f1e7ad0e,1494850735,"[DOC] File#path result can be inaccurate

* file.c(rb_file_path): [DOC] Note that the pathname returned by this
  method can be inaccurate, for instance file gets moved, renamed,
  deleted or is created with File::TMPFILE option.

  Relates to [Feature #13568]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58734 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['file.c'],"The File#path method can return inaccurate results if the file is moved, renamed, deleted or created with the File::TMPFILE option."
4fbe86d0e22e06ecd4f79282fc66ddc40d963d60,1591663966,"vm_call_method: use struct assignment

This further reduces the generated binary of vm_call_method from 566
bytes to 545 bytes on my machine, according to nm(1).
",['vm_insnhelper.c'],"The current binary generation of vm_call_method is suboptimal, resulting in a larger than necessary binary size as reported by nm(1)."
7fbf6d4019cfb738095e06c3b017725a0eb1baf0,1634768364,"Move registers into header and make them static

We were leaking these as global symbols and were having linking errors
with Clang 12.
","['ujit_asm.c', 'ujit_asm.h']",Global registers were causing linking errors with Clang 12 due to symbol leakage.
74fdf5232d3039f107ebaf98486e5d3c79087478,1525208139,"cont.c: cleanup needless cast

It seems like leftover development step from r59557
(""refactoring Fiber status"").

I will make fiber_status use BITFIELD macro in a future
commit.

* cont.c (struct rb_fiber_struct): drop const from fiber_status
  (fiber_status_set): remove cast
  [ruby-core:86788] [Misc #14720]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63315 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['cont.c'],Unnecessary cast present in fiber_status_set method potentially impacting the fiber status in the continuation module.
0c579b0a97bdec40ed58e15ab611ec00bb83d48d,1572041013,"[ruby/dbm] Remove taint support

Ruby 2.7 deprecates taint and it no longer has an effect.
The lack of taint support should not cause a problem in
previous Ruby versions.

https://github.com/ruby/dbm/commit/1f0ff0bce1
","['ext/dbm/dbm.c', 'test/dbm/test_dbm.rb']","Taint support in Ruby DBM is deprecated in Ruby 2.7 and no longer has any effect, potentially causing issues in previous versions of Ruby."
119697f61e2b2b157816a8aa33aada5863959900,1626364132,"[Bug #18014] Fix rb_gc_force_recycle unmark before sweep

If we force recycle an object before the page is swept, we should clear
it in the mark bitmap. If we don't clear it in the bitmap, then during
sweeping we won't account for this free slot so the `free_slots` count
of the page will be incorrect.
",['gc.c'],"Forcing recycle of an object before the page sweep doesn't clear it in the mark bitmap, causing the `free_slots` count of the page to become incorrect during sweeping."
7f64989e5c913ef7624e084badd1a43ce65b3ccc,1657199453,"do not define our own version of memcpy

The (sole) use of memcpy in our public header is now replaced to
directly call ruby_nonempty_memcpy, and the previous definition of
memcpy is now internal-only.  [Bug#18893]
","['include/ruby/internal/memory.h', 'internal.h']","The definition of memcpy in the public header is conflicting with internal uses, causing potential functionality issues. [Bug#18893]"
b6d7e98f2540500f072c5cc0f136cae69f80055c,1667544209,"sync_default_gems.rb: fix the position to insert the original URL

Since the regexp had expected an empty line before `Co-Authored-By:`
trailer lines, it failed to match when the body has the trailer only.
",['tool/sync_default_gems.rb'],"The sync_default_gems.rb script fails to match the original URL position when the body contains only the `Co-Authored-By:` trailer, expecting an empty line before it."
50db992a6ad43e98a5cdf5fda757f614f6c5156f,1484807106,"Change Kernel#warn to call Warning.warn

This allows Warning.warn to filter/process warning messages
generated by Kernel#warn.  Currently, Warning.warn can only handle
messages generated by the rb_warn/rb_warning C functions.

The Kernel#warn API is different than the Warning.warn API, this
tries to get similar behavior, but there are probably corner cases
where the behavior is different.

This makes str_end_with_asciichar in io.c no longer static so it
can be called from error.c.

[Feature #12944]
Author:    Jeremy Evans <code@jeremyevans.net>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57370 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['error.c', 'io.c']","Kernel#warn isn't currently able to filter/process warnings, limiting Warning.warn's capacity to handle only messages generated by rb_warn/rb_warning C functions. Also, potential corner cases where Kernel#warn and Warning.warn may behave differently."
38cefac7ce277d8ea41c600e67a2046da3715ac3,1613857421,"[ruby/reline] We still need support new and legacy behavior.
Revert ""Support for change in Windows-specific behavior at eol""

This reverts commit cad4de6ee841b43f3f0e441626f9415c3eda0f82.

https://github.com/ruby/reline/commit/646587fc2c
",['lib/reline/line_editor.rb'],The latest changes in Windows-specific end-of-line behavior are not compatible with both legacy and new expected functionalities.
02d7ad9722f4a32085e4a7f6d59b27ecaadb486c,1517569403,"Fix call-seq of NameError.new

`NameError.new(1,2,3)` raises
`wrong number of arguments (given 2, expected 0..1) (ArgumentError)`
in `StrandardError#initialize`, so NameError can't accept 3 or more arguments.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62159 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['error.c'],"`NameError.new` method throws an error when provided with three or more arguments, as it is expected to accept zero to one arguments only."
7954bb056be30e86c419fe3792064d28990a4999,1616240775,"Some Hash destructive methods ensure the receiver modifiable [Bug #17736]

refs:

* https://bugs.ruby-lang.org/issues/17736
* https://github.com/ruby/ruby/pull/4296

This commit aims to cover following methods

* Hash#select!
* Hash#filter!
* Hash#keep_if
* Hash#reject!
* Hash#delete_if

I think these are not all.

---

* Ensure the receiver is modifiable or not
* Assert the receiver is not modified
","['hash.c', 'test/ruby/test_hash.rb']","Destructive methods on Hash instances do not correctly check the modifiability of receiver, potentially leading to unexpected behaviour or modification errors."
66ffa15ce01e1b8d46738032e714be18194af3ca,1694720601,"[rubygems/rubygems] Gemfile ruby file: covers more version formats

Increase test coverage and be explicit about what is and is not supported.

https://github.com/rubygems/rubygems/commit/a096397a00
","['lib/bundler/ruby_dsl.rb', 'spec/bundler/bundler/ruby_dsl_spec.rb']","The Gemfile ruby file does not support certain ruby version formats, causing insufficient test coverage."
4592e15e3500e7de8d6d00cfb66af53971735c59,1436923777,"string.c: remove redundant calls

* string.c (rb_str_enumerate_bytes, rb_str_enumerate_codepoints):
  do not check if a block is given twice.  RETURN_SIZED_ENUMERATOR
  includes rb_block_given_p() check which is redundant here.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@51248 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['string.c'],"Redundant block checks in rb_str_enumerate_bytes and rb_str_enumerate_codepoints functions, resulting in unnecessary performance overhead."
fde136152eacca454bfb978347abfa67bd73ac4d,1601005973,"should not check taint flag on rubyspec.

Now taint flag is obsolete and it is used fro shareaable flag.
So we should not check this flag.
","['include/ruby/internal/fl_type.h', 'spec/ruby/optional/capi/ext/rbasic_spec.c', 'spec/ruby/optional/capi/shared/rbasic.rb']","Obsolete taint flag being incorrectly checked in rubyspec, failing due to its use for the shareable flag instead."
b3b57f70cc1ee6f40ff10b2abaa51889abce2331,1694013530,"Fix missing write barrier in iseq instruction list

There's a missing write barrier for operands in the iseq instruction
list, which can cause crashes.

It can be reproduced when Ruby is compiled with `-DRUBY_DEBUG_ENV=1`.
Using the following command:

```
RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=0 RUBY_DEBUG=gc_stress ruby -w --disable=gems -Itool/lib -W0 test.rb
```

The following script crashes:

```
require ""test/unit""
```
",['compile.c'],A missing write barrier in the iseq instruction list causes crashes when Ruby is compiled with `-DRUBY_DEBUG_ENV=1`. This can be reproduced with a specific command and script.
bd789fa5909a64eede6dbf33798a41849e96722c,1534084945,"mjit_worker.c: allow showing line number

on addr2line.c, if --jit-save-temps is specified.

I'm going to use the line number to lazily create program counter to
improve the performance degraded in r64283.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64322 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['mjit_worker.c'],Performance degradation in mjit_worker.c due to lack of line number for lazily creating program counter when --jit-save-temps is specified.
429e2abfad7770c90b9f1bed70e5e49c19e37a60,1516844921,"optparse.rb: literal newline

* lib/optparse.rb (OptionParser#summarize): use literal newline to
  join option summaries as IO#puts does, not the special gloval
  variable $/.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62035 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/optparse.rb'],"Option summaries in OptionParser#summarize are joined using global variable $/ instead of literal newline, leading to inconsistent newline representation."
e8c710b11a02c6ab82b358fc671a14f378cb1974,1559266485,"Fix visibility of some methods when using DelegateClass

Public instance methods added to a delegated class after the
creation of the delegate class were not returned by the
public_instance_methods class method of the delegate class.

Protected instance methods in the delegated class when the
delegate class is created were returned by the public_methods
instance method of the delegate class.

Patch mostly from Kenichi Kamiya <kachick1@gmail.com> in
GitHub pull request 926.  Minor changes to get it to apply,
and to fix tests after applying by me.

Fixes [Bug #11512]
","['lib/delegate.rb', 'test/test_delegate.rb']","Public instance methods added post creation in a delegated class are not returned by the `public_instance_methods` class method. Also, protected instance methods are returned by `public_methods` instance method inappropriately."
81ac73c04d9ebe2d29d890381fe6fbc6725e490d,1475497274,"[DOC] Fix default value of shift_age [ci skip]

`LogDevice#initialize` treats shift_age: nil as 7, but
Logger#initialize has the default value of shift_age as 0.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56328 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/logger.rb'],"Discrepancy between the default values of shift_age in LogDevice#initialize and Logger#initialize, could potentially lead to unexpected behaviour."
2e37c1960a0b84a9018dc0202a36daf4e692ed46,1571909944,"[ruby/date] Remove taint support

Ruby 2.7 deprecates taint and it no longer has an effect.
The lack of taint support should not cause a problem in
previous versions.

https://github.com/ruby/date/commit/519470dc3b
","['ext/date/date_core.c', 'test/date/test_date_parse.rb', 'test/date/test_switch_hitter.rb']",Ruby 2.7's deprecation of taint is causing compatibility issues with the date module.
682a661e1c4d536f38c12e5f4613e4107e10c75b,1534858764,"Re-Revert ""Temporary revert ""process.c: dead code when no SIGCHLD""""

This re-reverts commit r64447.
The issue was machine side problem.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64493 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['process.c', 'signal.c']","Commit r64447, previously reverted due to a machine-side issue, removed code from process.c that was only executable when there's no SIGCHLD signal."
5cc2ac98a93c74a75d7fc3a773193d288906cdc4,1526053581,"mkmf.rb: set cppflags

* ext/mkmf.rb (configuration): set the default cppflags, which is
  referred from the default CPPFLAGS, for extension libraries.
  This fixes build failure of ext/zlib on Solaris 10.
  [Bug #14746] [ruby-dev:50539]


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63398 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/mkmf.rb'],Build failure for extension libraries such as ext/zlib on Solaris 10 possibly due to improper setting of default cppflags.
53ad55e4caf90172cc44f9c9cc9930235bb22116,1542083369,"date_core.c: set/reset COMPLEX_DAT

* ext/date/date_core.c (set_to_simple, set_to_complex): always
  set/reset COMPLEX_DAT bit, which is very tightly bound to the
  structure.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65696 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['ext/date/date_core.c'],"COMPLEX_DAT bit, crucial to the structure in ext/date/date_core.c, does not reset consistently."
086015a5cb48f58a90d33df8d0494520e2e9c34c,1510085429,"file.c: improve docs for File#path

* file.c: [DOC] fix grammar in docs for File#path
  and use a stronger description than ""inaccurate"".

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60706 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['file.c'],The existing documentation for File#path contains grammatical errors and inaccurate descriptions.
d8cee4ff0a851037e96fe76d951a1549284c875a,1488497586,"refine a warning message.

The ""n"" option for regexp, /.../n, is historical.
It doesn't mean the regexp works as binary match since Ruby 1.9.



git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57759 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['re.c', 'test/ruby/test_m17n.rb']","Using the ""n"" option for regular expressions results in a misleading warning message due to its deprecated functionality in Ruby versions 1.9 and later."
7d92e5cf730596429fd33ce7a580112b28528662,1448454222,"io.c: try to_io first

* io.c (copy_stream_body): try to_io conversion before read,
  readpartial, and write methods.  [ruby-dev:49008] [Bug #11199]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52750 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['io.c', 'test/ruby/test_io.rb']","Inability to convert an IO object using to_io method before using read, readpartial, write methods, causing occurrence of a bug."
6e67b30503f2931d9538d439545c3b1cff51fc80,1593396341,"method_missing: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['vm_eval.c'],"""Goto statement used in the method_missing function causing incorrect jumps into a branch, leading to potential malfunctioning of the program."""
5b5c627d37c1773dd280e0f14d9510f8fa8db04f,1662763279,"YJIT: eliminate redundant mov in csel/cmov on x86 (#6348)

* Eliminate redundant mov in csel/cmov. Translate mov reg,0 into xor

* Fix x86 asm test

* Remove dbg!()

* xor optimization unsound because it resets flags",['yjit/src/backend/x86_64/mod.rs'],"Redundant 'mov' operation in 'csel/cmov' on x86 causing inefficiencies, and the implemented 'xor' optimization is leading to flag resets."
bebb62e01b6d752756c8cb51794119c490cde77c,1468387152,"* vm_method.c (method_entry_get_without_cache): check
  undefined method even if ruby_running is FALSE.

  We haven't call ""undef""ed methods before ruby_running.
  So that this issue does not make troubles.


git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55655 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['vm_method.c'],"Undefined methods aren't checked if ruby_running is FALSE, leading to potential issues when calling these methods before the operation of ruby_running."
bb8afd7265af41a75e8889774aa26f157f146380,1670533106,"Freeze singleton class, not its origin

Previously, when we froze an object, we froze
`RCLASS_ORIGIN(object.singleton_class)`, which didn't freeze
`object.singleton_class` when it has some prepended modules.

Origin iclass are internal objects and users can't interact with
them through Kernel#freeze?, Kernel#freeze, or any mutation method
that checks the frozen status. So we shouldn't touch the origin
iclasses when the frozen status should be visible.

[Bug #19169]
","['class.c', 'test/ruby/test_object.rb']","Freezing an object does not effectively freeze its singleton class when that class has prepended modules, leading to problems with the frozen status visibility."
84b1f48891f36ae25365181d054a208438bfa1a9,1673641948,"YJIT: Factor out VALUE_BITS = (8 * SIZE_OF_VALUE as u8)

Using a constant shows intention better and is less noisy. It always
took me a second to parse the long expression.
","['yjit/src/codegen.rs', 'yjit/src/cruby.rs']","The expression '(8 * SIZE_OF_VALUE as u8)' in YJIT is hard to understand and interpret, reducing code readability and maintainability."
fbb38d6d6afe264da33bbff0156dc21eb7cd6b36,1493598776,"rational.c: canonicalization case

* rational.c (float_numerator, float_denominator): fix for
  canonicalization case where `Float#to_r` could return an Integer
  not a Rational.  although mathn.rb has been removed in the
  trunk, fix for the backport purpose.
  [ruby-core:80942] [Bug #13528]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@58523 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['rational.c'],`Float#to_r` method incorrectly returns an Integer instead of a Rational in some canonicalization cases.
3e92785fd6ec4bf584128fcd255b01ff4448ea2b,1586503050,"RUBY3_ASSUME: suppress warnings on icc

icc warns side effects for RUBY3_ASSUME like this:

> ./include/ruby/3/value_type.h(202): warning #2261: __assume expression with side effects discarded
>           RUBY3_ASSUME(RB_FLONUM_P(obj));
>                        ^

Which is a false positive (RB_FLONUM_P has no side effect).  It seems
there is no way for us to tell icc that a functin is safe inside of
__assume.   Just suppress the warning instead.
",['include/ruby/3/assume.h'],"Intel compiler (icc) gives false positive warnings about side effects for RUBY3_ASSUME, with no clear way to indicate that function is safe within __assume."
86caaefc1ff89e8d0c97572661f70f55052bc0ce,1448915272,"* include/ruby/util.h: remove a warning suppression C4723
  (potential divide by zero) for VisualC++. It's meaningless.
  Before r26197, there is ruby_div0() in this place and it
  actually made divide by zero. But now it's just garbage.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@52809 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['include/ruby/util.h'],VisualC++ displays a potential divide by zero warning (C4723) which is no longer relevant due to previous changes involving ruby_div0().
65920cfc40b47e9e037e0536b2b7de8f0cf30fc3,1671806898,"addr2line.c: Strip pointer authentication

We need to manually strip pointer authentication bits on M1 mac because
libunwind leaks them out.

Co-Authored-By: NARUSE, Yui <naruse@airemix.jp>
Co-Authored-By: Yuta Saito <kateinoigakukun@gmail.com>
",['addr2line.c'],'Pointer authentication bits are not getting stripped on M1 macs due to a leak in libunwind.'
d020334e9ee6d978bbed09ce96a03a6d6d2490a6,1653428068,"[ruby/reline] Workaround libncurses.so as a linker script

This maybe isn't probably isn't the best approach, but it will allow
`Fiddle::Terminfo.curses_dl` to work.  I documented more details about
this in an issue on fiddle: https://github.com/ruby/fiddle/issues/107

It is probably better to deal with it there.  But this is workaround is
simpler.

FYI: `reline` itself seems to be working just fine for me _without_
loading ncurses.  But I wanted to be able to use `Reline::Terminfo` for
my own projects. :)

https://github.com/ruby/reline/commit/fd4bdb35e2
",['lib/reline/terminfo.rb'],"Fiddle::Terminfo.curses_dl fails to work due to libncurses.so being treated as a linker script, impacting the usability of Reline::Terminfo in various projects."
7ab8dcebbf93aef02602f70eb835b030702c0f4f,1479014754,"error.c: redefined backtrace

* error.c (rb_get_backtrace): honor redefined Exception#backtrace
  method.  [ruby-core:78097] [Bug #12925]

* eval.c (setup_exception): rescue exceptions during backtrace
  setup.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56767 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['error.c', 'eval.c', 'test/ruby/test_exception.rb']","The redefined Exception#backtrace method is not properly recognized by rb_get_backtrace function causing application errors. Also, exceptions during backtrace setup aren't being rescued properly."
a2b4c6d1b1c4bc0176b94563bfd77c7930eeee7f,1458416906,"* bignum.c (rb_big_cmp): reduce the code.

* bignum.c (rb_big_eq): If normalized bignum is still bignum,
  it must be larger than fixnum.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54199 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['bignum.c'],Bignum normalization issues creating an incorrect comparison between bignum and fixnum.
879b42b043806a88c3f61e33ed4b9468b7b156e7,1540152082,"check VLIW case

If maximum_operations_per_instruction != 1, it is VLIW.
But there seems no need to support such architecture now.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@65289 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['addr2line.c'],"When maximum_operations_per_instruction != 1, it is wrongly identified as VLIW architecture, though there's no requirement to support such architecture."
131c31a9209c61f84d318aa18b61f468f48b8219,1666780994,"[Bug #19081] Show the caller location in warning for Ractor

The internal location in ractor.rb is not usefull at all.
```
$ ruby -e 'Ractor.new {}'
<internal:ractor>:267: warning: Ractor is experimental, ...
```","['bootstraptest/test_ractor.rb', 'ractor.c', 'ractor.rb']","Warnings for Ractor display the internal location in ractor.rb, which is not useful for identifying the source of the issue."
0785b3e1b78412499d553522c98ea4d1e5ade324,1478223349,"fileutils.rb: fix error for non-existent entry

* lib/fileutils.rb (FileUtils::Entry_#copy): ensure that the
  source entry exists first, to fix error for non-existent entry.
  [ruby-core:77885] [Bug #12892]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@56551 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['lib/fileutils.rb', 'test/fileutils/test_fileutils.rb']",Error occurs when attempting to copy a non-existent source entry in FileUtils::Entry_.
217df51f0e5d9824ed712a4d175f555d932e44d8,1633646387,"Dump outer variables tables when dumping an iseq to binary

This commit dumps the outer variables table when dumping an iseq to
binary.  This fixes a case where Ractors aren't able to tell what outer
variables belong to a lambda after the lambda is loaded via ISeq.load_from_binary

[Bug #18232] [ruby-core:105504]
","['compile.c', 'test/ruby/test_iseq.rb']",Ractors unable to determine what outer variables belong to a lambda after lambda is loaded through ISeq.load_from_binary.
9d389d6510d8dadfa2ee1e246b5e205d2eeb7de4,1506426607,"erb.rb: drop unreachable method

This seems to be unreachable from first introduction at r21286.

In ERB implementation, `#empty?` is only called for each member of
return value of `String#scan`, and `ERB::Compiler::PercentLine` is never
returned from `String#scan`.

Also, in `ERB::Compiler#compile`, as it's yielded only when stag is nil,
methods called to `ERB::Compiler::PercentLine` object yielded from
`ERB::Compiler::TrimScanner#scan` are only: `#nil?`, `#==`, `to_s`.

Thus `ERB::Compiler::PercentLine#empty?` is never used.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60032 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/erb.rb'],"The method `ERB::Compiler::PercentLine#empty?` in erb.rb is never utilized, leading to dead code in the codebase."
6e4b97f1daf2a6e60dcfb5df4136ce5681095849,1667576470,"Increment max_iv_count on class in gc marking, not gc freeing

We were previously incrementing the max_iv_count on a class in gc
freeing. By the time we free an object though, we're not guaranteed its
class is still valid. Instead, we can do this when marking and we're
guaranteed the object still knows its class.
",['gc.c'],"During garbage collection, incrementing max_iv_count in the object freeing process may lead to invalid references as the class of the object may no longer be valid."
4a3972c2612c3e3695d7f67b096b2ef8cbb6649a,1567535449,"Remove bad expectation in spec

This spec should not be checking where methods are defined, only
that the method works as expected (returns a Lazy instance).
",['spec/ruby/core/enumerator/lazy/shared/to_enum.rb'],"The spec incorrectly checks where methods are defined, rather than the functionality of the method itself."
c95467e597963a3016ba918235c4400c6e00adb5,1532859311,"thread_pthread.c: clear altstacks in thread cache at GVL destruction

Otherwise, an altstack may live past ObjectSpace destruction
and xfree-ing the altstack will segfault.

[ruby-core:85621] [Feature #14487]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64102 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['thread_pthread.c', 'vm_core.h']",Altstacks in thread cache persisting beyond ObjectSpace destruction causes segmentation faults when xfree is utilized.
71120953d75abb6b7203850799b869347b805b82,1531788439,"dir.c: fix glob with base when no DT_UNKNOWN

* dir.c (do_stat, do_lstat): need the length of the base path for
  fstatat() when fd is valid.

* dir.c (glob_helper): fix for platforms where DT_UNKNOWN is not
  available, e.g. Solaris.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@63982 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['dir.c'],"The glob function in dir.c fails on platforms like Solaris where DT_UNKNOWN is not available, and when the length of the base path is required for fstatat()."
f8000e293141a9af9f51effc76007aab21b0dede,1632723805,"[ruby/base64] Avoid unnecessary string duplication

String#ljust returns a new string, so whenever we need to add
padding, we can replace ""-/"" in place with String#tr! and avoid creating
yet another copy of the string.

https://github.com/ruby/base64/commit/6401ef5824
",['lib/base64.rb'],Base64 encoding is generating unnecessary string copies due to String#ljust method when adding padding.
3d718d211979346c96e0b6d331d27f40ee5c9eeb,1488256395,"disable critical-error-handler

* win32/win32.c (rb_w32_sysinit): disable critical-error-handler
  message box even on mswin, regardless of runtime DLL version.
  [ruby-dev:49988] [Bug #13254]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57741 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['win32/win32.c'],"The critical-error-handler message box appears consistently on mswin, despite the runtime DLL version, causing unwanted pop ups. [Bug #13254]"
1b83975a8ab7bf0ef634849d4b4190936b69c16a,1518093633,"test_jit.rb: try to test JIT again

This commit reverts r62297, revising the check if JIT is supported or
not.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@62307 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_jit.rb'],The JIT compiler support check is failing and causing issues in the 'test_jit.rb' file.
a2592702ae4c18662a162805aa06d88046742f05,1624562529,"Actually ignore FNM_CASEFOLD flag in Dir.glob

This was already documented as being ignored, but it wasn't being
ignored, causing an issue in a particular case where a UTF-8
pattern was provided and a filename was tested that wasn't valid
UTF-8.

Fixes [Bug #14456]
","['dir.c', 'test/ruby/test_dir.rb']","Dir.glob fails to ignore FNM_CASEFOLD flag as documented, causing an issue when a UTF-8 pattern encounters an invalid UTF-8 filename."
8d0f5f1bfa7bf9cd257f381fd6cc80b99a2edcd7,1532143598,"thread.c (do_select): fix leak on exception

When do_select is interrupted and raise happens from
RUBY_VM_CHECK_INTS_BLOCKING, the original FD sets we copied
do not get freed, leading to a memory leak.  Wrap up all the
FD sets into a Ruby object to ensure the GC can release an
allocations made for rb_fdset_t.

This leak existed since Ruby 2.0.0 (r36430)

[Bug #14929]

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64007 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/ruby/test_io.rb', 'thread.c']",Interrupted do_select operation leads to a memory leak due to FD sets not being released when an exception is raised from RUBY_VM_CHECK_INTS_BLOCKING.
fb112a8c4debb4220eaa5a75fbb10afb39672b20,1514678794,"fix reset order.

* lib/rdoc/test_case.rb (setup): call `RDoc::Markup::PreProcess.reset`
  at the end of `setup` method.
  `RDoc::RDoc.new` requires `rdoc/generator/darkfish`
  and requires `rdoc/tom_doc.rb` at last. It add post_proecssor
  (at `add_post_processor`) and it fails
  `TestRDocMarkupPreProcess#test_class_post_process`.
  This issue occured only with sorted tests by alphabetical order.
  `make test-all TESTS='rdoc/test_rdoc_markup_pre_process.rb --test-order=alpha`)
  We can observe this failure with parallel test only a few times.



git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@61521 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['lib/rdoc/test_case.rb'],"Running tests in alphabetical order with post_processor added leads to the failure of TestRDocMarkupPreProcess#test_class_post_process, especially in parallel testing."
79406e3600862bbb6dcdd7c5ef8de1978e6f916c,1658421825,"objspace_dump.c: skip dumping method name if not pure ASCII

Sidekiq has a method named `❨╯°□°❩╯︵┻━┻`which corrupts
heap dumps.

Normally we could just dump is as is since it's valid UTF-8 and need
no escaping. But our code to escape control characters isn't UTF-8
aware so it's more complicated than it seems.

Ultimately since the overwhelming majority of method names are
pure ASCII, it's not a big loss to just skip it.
","['ext/objspace/objspace_dump.c', 'test/objspace/test_objspace.rb']","Non-ASCII method names, like `❨╯°□°❩╯︵┻━┻` in Sidekiq, are causing heap dump corruption as the escape control characters function is not UTF-8 aware."
94ab244b43e1aa59dfef9f200b1c253f70975c7e,1593398628,"rb_class_modify_check: add UNREACHABLE

(I was not aware of this because I use clang, but) it seems gcc cannot
detect reachablility of this point.  It renders an unused variable
warning, which is a false positive.  Let us suppress the compiler.

https://github.com/ruby/ruby/runs/816997191#step:9:62
",['eval.c'],"GCC is rendering an unused variable warning (a false positive) at a certain point in the code, which it shouldn't be able to reach."
19504d115dc09558255fcb5213f80dd8454ab189,1619714164,"test/net/smtp/test_smtp.rb: wait a moment before socket is closed

On Solaris, Socket.tcp seems to fail with EINVAL if the server closes
the connection immediately after accpeted. I think this is a bug of
Socket.tcp, but seems difficult to fix soon.

http://rubyci.s3.amazonaws.com/solaris11-sunc/ruby-master/log/20210429T100007Z.fail.html.gz
```
  1) Failure:
Net::TestSMTP#test_eof_error_backtrace [/export/home/chkbuild/chkbuild-sunc/tmp/build/20210429T100007Z/ruby/test/net/smtp/test_smtp.rb:193]:
[ruby-core:78550] [Bug #13018].
[EOFError] exception expected, not #<Net::ReadTimeout: Net::ReadTimeout>.
```
",['test/net/smtp/test_smtp.rb'],"On Solaris, immediate connection close post-acceptance in Socket.tcp is causing unexpected errors (Net::ReadTimeout instead of EOFError) in test_eof_error_backtrace."
559bef4228eaab3d5493948a87cd84d83e115174,1485487483,"Enumerable#{min,min_by,max,max_by} [ci skip]

* enum.c: [DOC] Enumerable#{min,min_by,max,max_by} return a sorted
  array when +n+ argument is used.

* enum.c: Small typo : minimum -> maximum

[Bug #13161]
Author:    Eric Duminil <eric.duminil@gmail.com>

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57434 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['enum.c'],"Enumerable#{min,min_by,max,max_by} return an unsorted array when +n+ argument is used, leading to potential issues in data handling."
62327bb6ff38699f8f4b83aad1cfe9244902f787,1537274908,"vm_insnhelper.h: rename CI_SET_FASTPATH to CC_SET_FASTPATH

because it's actually setting fastpath to cc instead of ci since r51903.

vm_insnhelper.c: ditto
mjit_compile.c: ditto
tool/ruby_vm/views/_mjit_compile_send.erb: ditto

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@64772 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['mjit_compile.c', 'vm_insnhelper.c', 'vm_insnhelper.h']","Mislabeling of CC_SET_FASTPATH as CI_SET_FASTPATH causing confusion, as it sets fastpath to cc, not ci."
7128849c8c5fce8df450379db54136fd21fab6ad,1511527027,"test_workspace.rb: skip test failing on windows

> Note that all files are always readable
> https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/chmod-wchmod
It seems that we can't make a file unreadable with `File.chmod` on
Windows.

When file can't be read, File::EACCES is raised on Windows too. So
r60900 should work anyway, but I don't know how to let it happen by
Ruby code. I tried to open file before reading it, but I couldn't
reproduce File::EACCES too.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@60901 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/irb/test_workspace.rb'],"`File.chmod` cannot set a file to be unreadable on Windows, meaning tests that rely on this cause failures."
5ce9b42545f49cc45757f2b73085590c465381c9,1457282630,"* test/ruby/test_process.rb (test_execopts_gid): Skip a test
  that is known to fail on AIX. AIX allows setgid to
  a supplementary group, but Ruby does not allow the ""-e""
  option when setgid'ed, so the test does not work as intended.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@54010 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
",['test/ruby/test_process.rb'],"Test for `test_execopts_gid` fails in AIX system as Ruby prohibits option '-e' when setgid'ed, which AIX permits as a supplementary group."
0c0d0752f1fefd9b085f191b62946a811763ef1b,1603295024,"allow to access ivars of frozen shareable objects

Accessing a shareable object is prohibitted because it can cause
race condition, but if the shareable object is frozen, there is no
problem to access ivars.
","['bootstraptest/test_ractor.rb', 'variable.c']","Cannot access instance variables of frozen shareable objects, potentially leading to race conditions."
01be881f35e6dafbd8498f2ca9a02eedb1f40319,1629884864,"Use `empty` instead of NOOP in mk file to make it safer

This would avoid unintentional use of the `NOOP` environment variable

Co-authored-by: Nobuyoshi Nakada <nobu@ruby-lang.org>",['defs/gmake.mk'],Unintentional use of the `NOOP` environment variable in mk file may cause safety issues.
954970162c4b912dde9d0cca68f10e2ff0b12936,1620641975,"[ruby/psych] docs: fix simple typo, expessed -> expressed

There is a small typo in ext/psych/yaml/yaml.h.

Should read `expressed` rather than `expessed`.

https://github.com/ruby/psych/commit/1150d669cb
",['ext/psych/yaml/yaml.h'],"There's a minor typo in the documentation in ext/psych/yaml/yaml.h, causing a misrepresentation of the word 'expressed'."
023aaa51a20cb4e0dc92daa4d2197741bcf8bd6c,1467097010,"Skip unavailable tests

* test/ruby/enc/test_case_comprehensive.rb: noting to test if
  Unicode data files are available.
  [ruby-core:76160] [Bug #12433]
* test/test_unicode_normalize.rb: ditto.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55521 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['test/ruby/enc/test_case_comprehensive.rb', 'test/test_unicode_normalize.rb']",Tests in test/ruby/enc/test_case_comprehensive.rb and test/test_unicode_normalize.rb fail or have no effect when Unicode data files are not available.
8a2b497e3b8d9c9be27278081526cace50490140,1559026640,"remove obsolete rb_gc_finalize_deferred().

rb_gc_finalize_deferred() is remained for compatibility with
C-extensions. However, this function is no longer working
from Ruby 2.4 (crash with SEGV immediately).
So remove it completely.
","['gc.c', 'include/ruby/intern.h']",The function rb_gc_finalize_deferred() causes immediate segmentation faults due to incompatibility with Ruby 2.4 and onwards.
2bfac015d3742408d0c4d9f2220413992d0e49c6,1593396341,"proc_binding: do not goto into a branch

I'm not necessarily against every goto in general, but jumping into a
branch is definitely a bad idea.  Better refactor.
",['proc.c'],The use of 'goto' statement to jump into a branch in proc_binding is leading to adverse effects on the control flow of the program.
92b710e64bf194266e3354c06fdb16dc7de0196d,1486707142,"MFLAGS for nmake

* common.mk (mflags): pass make flags to sub-makes, for nmake
  which cannot pass them by the environment variable.

* defs/gmake.mk (mflags): filter out -j option for sub-makes.

* template/exts.mk.tmpl (MFLAGS): extract MFLAGS from sub extmk
  files for nmake.

git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@57594 b2dd03c8-39d4-4d8f-98ff-823fe69b080e
","['common.mk', 'defs/gmake.mk']","nmake cannot pass make flags to sub-makes through the environment variable, and the -j option is being incorrectly passed to sub-makes. MFLAGS is not effectively extracted from sub extmk files for nmake."
88b8b3ac15223d65cf4b40cfc7d193b54b6e2f09,1615889771,"[ruby/openssl] x509store: let X509::Store#add_file raise TypeError if nil is given

Undo special treatment of nil and simply pass the value to
StringValueCStr().

nil was never a valid argument for the method; OpenSSL::X509::StoreError
with an unhelpful error message ""system lib"" was raised in that case.

https://github.com/ruby/openssl/commit/fb2fcbb137
","['ext/openssl/ossl_x509store.c', 'test/openssl/test_x509store.rb']","Passing 'nil' as an argument to X509::Store#add_file method is resulting in an unhelpful OpenSSL::X509::StoreError with the message ""system lib""."
f29c9d6d36ebeb3e768a514cbfa00cd2ab35fcbc,1679014241,"compile branch body if needed

```ruby
if true
  THEN
else
  ELSE
end
```

On this case, ELSE is not needed so that only compile THEN part.
",['compile.c'],"Unnecessary compilation of ELSE part in an IF/ELSE statement, even when the IF condition is set as true."

commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
f47fec31f8b51ad8fdc0a5d6805d0130f8700ca8,1667279962,"Refs #33768 -- Fixed ordering compound queries by NULLs on SQLite < 3.30.

The lack of support for native nulls last/first on SQLite 3.28 and 3.29
requires the compound query to be wrapped for emulation layer to work
properly.
",['django/db/backends/sqlite3/features.py'],"Compound queries on SQLite versions 3.28 and 3.29 face issues due to the lack of support for ordering by NULLs, requiring an emulation layer.
"
40fb6a560139150daa8f231f65b4044d45a97a8d,1407092904,"Revert ""Fixed #23088 -- Used `six` `range` type in `Paginator.page_range`.""

This reverts commit 6508db2ff9fc5be95fec903b3fa7ab8204fe316a.

Refs #23088.
","['django/core/paginator.py', 'tests/pagination/tests.py']",Use of `six` `range` type in `Paginator.page_range` has introduced an unidentified issue leading to the need for a revert.
e9d12bae1e59e51738c11c492c620f56f96106bf,1391035271,"Made Oracle introspect FloatFields correctly

Broke InspectDBTestCase.test_field_types in two:
- a test_number_field_types, which now passes on Oracle too
- a test_field_types, for all non-numeric fields, which is still expected to fail

Also made some pep8 fixes in the tests file. Refs #19884

Thanks Tim Graham for review.
","['django/db/backends/oracle/introspection.py', 'tests/inspectdb/tests.py']","Oracle's introspection of FloatFields is incorrect, causing failure in InspectDBTestCase.test_field_types and breaking it into two tests."
a93ee5112d42d37187e30aa4edcc1864a79d384a,1404347813,"Fixed #22941 - Added support for domain-only links with chars after the TLD to urlize.

It now works with something like google.com/foo/bar
","['django/utils/html.py', 'tests/defaultfilters/tests.py']",The `urlize` function is not properly recognizing and converting domain-only links that have characters following the Top-Level Domain (TLD) into clickable links.
f90be0a83ef5aa333b19e259faab73ee117d5339,1507823420,"Fixed #28688 -- Made admin's URLify.js skip removal of English words if non-ASCII chars are present.
","['django/contrib/admin/static/admin/js/urlify.js', 'js_tests/admin/URLify.test.js']",'URLify.js in admin interface is incorrectly removing English words when non-ASCII characters are present.'
32ca159c96339b4856837d7abec376a575ec44ab,1420032249,"Ignored warnings correctly in test_get_formsets_with_inlines_returns_tuples().

The subclass check in ModelAdmin.get_formsets_with_inlines() wasn't
tested correctly because of the super() call in
EpisodeAdmin.get_formsets().
","['django/contrib/admin/options.py', 'tests/generic_inline_admin/tests.py']",The subclass check in ModelAdmin.get_formsets_with_inlines() is not functioning properly due to super() call in EpisodeAdmin.get_formsets().
a41b09266dcdd01036d59d76fe926fe0386aaade,1555698860,"Fixed #30380 -- Handled bytes in MySQL backend for PyMySQL support.

This commit partly reverts efd8a82e268a82b3ad0be77bd5b4548c30bcb4d7.","['django/db/backends/mysql/operations.py', 'django/db/backends/mysql/schema.py']",MySQL backend is not properly handling bytes data when used with PyMySQL support.
3fb7c12158a2402f0f80824f6778112071235803,1575973070,"Refs #23433 -- Fixed test_django_admin_py.DeprecationTest tests failures on Windows and Python < 3.8.

subprocess.run()'s args parameter accepts a path-like object on Windows
since Python 3.8.",['tests/admin_scripts/test_django_admin_py.py'],"On Windows and Python < 3.8, test_django_admin_py.DeprecationTest fails due to subprocess.run() args parameter not accepting a path-like object."
6ab67919ac25143444a57f14f6aed76ffe8a6960,1400761431,"Made nested deconstruction support both forms of deconstruct()

Nested deconstruction should (silently) handle Field.deconstruct() as
well as other arbitrary deconstructable objects. This allows having a
field in the deconstruction of another field.
","['django/db/migrations/autodetector.py', 'tests/migrations/test_autodetector.py']","Nested deconstruction doesn't handle both Field.deconstruct() and other arbitrary deconstructable objects, causing problems when a field is in the deconstruction of another field."
18c5ba07cc81be993941ecc2ecc17923b401b66f,1656998358,"Fixed #33822 -- Fixed save() crash on model formsets when not created by modelformset_factory().

Thanks Claude Paroz for the report.

Regression in e87f57fdb8dcdabc452bd15abd015bf6c9b1f7a8.
","['django/forms/models.py', 'tests/model_formsets/tests.py']",Model formsets not created by modelformset_factory() are causing a crash on save() operation.
13023ba86746980aace2341ba32a9419e7567751,1453809381,"Fixed #26122 -- Fixed copying a LazyObject

Shallow copying of `django.utils.functional.LazyObject` or its subclasses has
been broken in a couple of different ways in the past, most recently due to
35355a4.
","['django/utils/functional.py', 'tests/utils_tests/test_lazyobject.py']","Shallow copying of `django.utils.functional.LazyObject` and its subclasses is broken, causing issues when duplication is needed."
664c98f1f8c63a932a9c767a7364a6a1826799bb,1574362224,"Fixed #30413 -- Fixed test database signature on SQLite when test database name is provided.

Previously, the same signature was created for multiple in-memory
databases on SQLite when they had tests databases names
DATABASES['TEST']['NAME'].
","['django/db/backends/sqlite3/creation.py', 'tests/backends/sqlite/test_creation.py']","Multiple in-memory databases on SQLite with test database names are creating the same signature, causing confusion and potential errors."
3f1ba76851e1dc140d4544fa50a463425be197b2,1492884624,"Fixed #28115 -- Fixed IP address validation in geoip2 module

Regression in 277a4dd4b4cc2a2cad77139882f084480751a95a.
Thanks Tim Graham for the test.
","['django/contrib/gis/geoip2/base.py', 'tests/gis_tests/test_geoip2.py']","The geoip2 module is incorrectly validating IP addresses, a regression possibly from a recent merge."
6e8d614acd1b65a1ae472da7db88a7b2751dc388,1402535254,"Made the vendored NamedTemporaryFile work as a context manager. Refs #22680.

This fixes a regression on Windows introduced by b7de5f5.

Thanks Tim Graham for the report and review.
",['django/core/files/temp.py'],Regression on Windows causing the vendored NamedTemporaryFile not to function as a context manager.
491419b5ffac3752a1c1804a763c017a2ed82e16,1395513797,"Made m2m fields form help_text munging specific to admin widgets.

Refs #9321 and follow-up to e80de93af6a0a21a9063a55c4d6d20e3927243e9.
","['django/contrib/admin/options.py', 'tests/admin_widgets/tests.py']","Many-to-many(m2m) field's form help_text alteration is not restricted to admin widgets, violating specifications."
f283ffaa84ef0a558eb466b8fc3fae7e6fbb547c,1582734320,"Fixed #28699 -- Fixed CSRF validation with remote user middleware.

Ensured process_view() always accesses the CSRF token from the session
or cookie, rather than the request, as rotate_token() may have been called
by an authentication middleware during the process_request() phase.
","['django/middleware/csrf.py', 'tests/auth_tests/test_remote_user.py']","The CSRF validation fails when remote user middleware is used, because process_view() accesses the token from the request instead of from the session or cookie."
76ccce64cc3d66cfec075651c3d2239fda747dc2,1639552459,"Fixed #16063 -- Adjusted admin changelist searches spanning multi-valued relationships.

This reduces the likelihood of admin searches issuing queries with
excessive joins.
","['django/contrib/admin/options.py', 'tests/admin_changelist/admin.py', 'tests/admin_changelist/tests.py']",Admin changelist searches spanning multi-valued relationships are issuing queries with excessive joins.
7c3732a1b47bb736ccfd8302aa55e6cf41edff7e,1557482647,"Fixed #30470 -- Added assertHTMLEqual() support for all self closing tags.

Support for the following tags was added: area, embed, param, track, and
wbr.

The full list of self closing tags is documented at:

https://html.spec.whatwg.org/#void-elements","['django/test/html.py', 'tests/test_utils/tests.py']","assertHTMLEqual() method does not support all self-closing HTML tags, specifically area, embed, param, track, and wbr."
b915b9f10f1110bf6b8468060ce9753ff78ffb07,1557295259,"Refs #27753 -- Deprecated django.utils.text.unescape_entities().

The function was undocumented and only required for compatibility with
Python 2.

Code should use Python's html.unescape() that was added in Python 3.4.
","['django/http/multipartparser.py', 'django/utils/text.py', 'tests/utils_tests/test_text.py']","The function django.utils.text.unescape_entities() is undocumented and only necessary for compatibility with Python 2, which is a deprecated version."
62e8f369c3bdb7dbfe76d128437c0a9c0715a067,1622703577,"Fixed #32808 -- Prevented DiscoverRunner.build_suite() from mutating test loader patterns.

Thanks Chris Jerdonek for the report and reviews.","['django/test/runner.py', 'tests/test_runner/test_discover_runner.py']",Mutation occurring in 'DiscoverRunner.build_suite()' method affecting the test loader patterns.
390f888745803a2f6c75c5a22402daf1221f8e29,1398778988,"Fixed #22447 -- Make sure custom model bases can be migrated.

Thanks to cdestigter for the report.
","['tests/migrations/models.py', 'tests/migrations/test_state.py']","Custom model bases are not being migrated properly, resulting in potential data integrity issues."
b5a9166f7e0e21ae0f2cc8f218b422bc2c116fb0,1397150137,"Fixed #22364 -- Sanitized getpass input in changepassword.

Python 2 getpass on Windows does not accept unicode, even
when containing on ASCII characters. Related #190807.
",['django/contrib/auth/management/commands/changepassword.py'],"Using getpass on Windows with Python 2 causes errors when it encounters unicode input, even if it only contains ASCII characters."
d02b2aa11e5b6c351a9a2c0673c23569889f90d6,1548109786,"Made assertOptimizesTo() more strict in migrations tests.

A recursive deconstruction is needed because comparing deconstructed
operations doesn't check field attributes. Fixed typo in failing test.",['tests/migrations/test_optimizer.py'],Field attributes not being checked during comparison of deconstructed operations in migrations tests.
3db3ab71e97d34260057a6f51d4b2f72da30dc8d,1445299892,"Fixed #25563 -- Cached deferred models in their proxied model's _meta.apps.

Thanks to Andriy Sokolovskiy for the report and Tim Graham for the review.
","['django/db/models/query_utils.py', 'tests/defer_regress/tests.py']","Deferred models are not being cached properly in their proxied model's _meta.apps, leading to performance issues."
7724879b524711d61b7491a4a9c104d9cff2e1e3,1501723292,"Removed unused _combine() node argument from various combinable classes.

Unused since f59fd15c4928caf3dfcbd50f6ab47be409a43b01 (Combinable) and
since its introduction in 2d877da85526bad0dad7fd6b1d56b1f924c0116a
(SearchVectorCombinable/SearchQueryCombinable/SearchQuery).","['django/contrib/postgres/search.py', 'django/db/models/expressions.py']","The _combine() node argument in various combinable classes is currently unused and possibly outdated, leading to potential redundancy in the code."
73f51e411372ba3e74ccf5a2c2be88927ac2c6dd,1392215666,"Fixed #22025 -- Listing app followed by app.Model in dumpdata command

When invoked as follows:

  $ python manage.py dumpdata blogapp blogapp.Tag

Django would throw a TypeError. This commit fixes the problem and provides
a test.
","['django/core/management/commands/dumpdata.py', 'tests/fixtures/tests.py']",Invoking the 'dumpdata' command with application name followed by application.Model (like 'blogapp blogapp.Tag') leads to Django throwing TypeError.
fd8a7a5313f5e223212085b2e470e43c0047e066,1535620970,"Fixed #29723 -- Fixed crash if InlineModelAdmin.has_add_permission() doesn't accept the obj argument.

* Refs #27991 -- Added testing for ModelAdmin.get_inline_instances() if the inline's has_add_permission() doesn't accept 'obj'.

* Fixed #29723 -- Fixed crash if InlineModelAdmin.has_add_permission() doesn't accept the obj argument.
","['django/contrib/admin/options.py', 'tests/modeladmin/test_has_add_permission_obj_deprecation.py']",Crash occurring if InlineModelAdmin.has_add_permission() function does not accept 'obj' argument. Issue impacts ModelAdmin.get_inline_instances().
204e00c0c57c34528157a739389b6935e4af2f36,1457975293,"Fixed #26140 -- Suppressed MySQL warning when inserting binary content

Thanks Tim Graham for the review.
","['django/db/backends/base/operations.py', 'django/db/backends/mysql/operations.py', 'django/db/models/fields/__init__.py']",MySQL throws a warning when inserting binary content.
edcecaf0dea718a8fb216df478df0d151a9ba04d,1459341281,"Fixed #19670 -- Applied CachedFilesMixin patterns to specific extensions

Thanks Simon Meers for the initial patch, and Tim Graham for the review.
","['django/contrib/staticfiles/storage.py', 'tests/staticfiles_tests/project/documents/cached/test.js', 'tests/staticfiles_tests/storage.py', 'tests/staticfiles_tests/test_storage.py']",CachedFilesMixin patterns are not being applied to specific file extensions.
59b57e672c2f5a685804cce253d2c5314c45c5fa,1449517522,"Fixed #25867 -- Fixed a system check crash with nested ArrayFields.

Thanks to Jean Gourds for the report, Tim and Claude for the review.
","['django/contrib/postgres/fields/array.py', 'tests/postgres_tests/test_array.py']",System check is crashing when dealing with nested ArrayFields.
06b11b617e7d3439bb36b65d1cacd4cc75f36c69,1412957432,"Fixed #23616 - Fixed generic relations in ModelAdmin.list_filter.

Thanks ranjur for reporting bug, timgraham for review,
and collinanderson for contributing tips.
","['django/contrib/admin/options.py', 'tests/admin_filters/models.py', 'tests/admin_filters/tests.py']",Generic relations in ModelAdmin.list_filter are not functioning as expected.
b92c6b7d5641e927145318adaaca1156ce26ddd2,1470162101,"Refs #26709 -- Replaced Index.get_name() with set_name_with_model().

This removes the dependency of the Index class on its 'model'
attribute.
","['django/db/migrations/operations/models.py', 'django/db/models/indexes.py', 'tests/model_indexes/tests.py']",Dependency on 'model' attribute in Index class causing issues in Index.getName() functionality.
720de4d0441fcfdb543051389c70efbe66ed962a,1577089443,"Fixed #31109 -- Disabled grouping by aliases on QuerySet.exists().

Clearing the SELECT clause in Query.has_results was orphaning GROUP BY
references to it.

Thanks Thierry Bastian for the report and Baptiste Mispelon for the
bisect.

Regression in fb3f034f1c63160c0ff13c609acd01c18be12f80.
","['django/db/models/sql/query.py', 'tests/aggregation/tests.py']","When calling QuerySet.exists(), aliases in the SELECT clause are being orphaned due to GROUP BY references, resulting in invalid SQL query generation."
d39073b8aea04dc5fe6b58bcb868067da08425fa,1423223813,"Hid Django installation message when verbosity is 0.

This message was introduced to help people figure out quickly when they
aren't running the tests against the copy of Django they're editing.
There's no reason to display it when verbosity is set to 0. It defaults
to 1.
",['tests/runtests.py'],"Django installation message is still displayed even when verbosity level is set to 0, causing unwanted noise in the console output."
e3d55eeb14936e82257ac6a005e9f9a06def3d00,1625030512,"Refs #32880 -- Moved logging reference to new document.

Completed a first step in moving reference and how-to material out of
the topic document.
",['django/utils/log.py'],"Logging reference and how-to material incorrectly placed in topic document, causing inconsistencies."
53aee470d5b35e2708864d5221d2b5655e10c091,1681459893,"Fixed #34486 -- Fixed DatabaseOperations.compose_sql() crash with no existing database connection on PostgreSQL.

Regression in 09ffc5c1212d4ced58b708cbbf3dfbfb77b782ca.
","['django/db/backends/postgresql/psycopg_any.py', 'tests/backends/postgresql/tests.py']",No existing database connection on PostgreSQL causes DatabaseOperations.compose_sql() to crash due to a regression.
fc9c90d9c4611d441d2617a7d74f622b1f520f7c,1684839393,"Refs #34118 -- Fixed FunctionalTests.test_cached_property_reuse_different_names() on Python 3.12+.

Python 3.12+ no longer wraps exceptions in __set_name__, see
https://github.com/python/cpython/commit/55c99d97e14618dfce41472dd4446f763b0da13f",['tests/utils_tests/test_functional.py'],Python 3.12+ changes cause FunctionalTests.test_cached_property_reuse_different_names() to fail due to no longer wrapping exceptions in __set_name__.
fac662f4798f7e4e0ed9be6b4fb4a87a80810a68,1648618316,"Fixed #33598 -- Reverted ""Removed unnecessary reuse_with_filtered_relation argument from Query methods.""

Thanks lind-marcus for the report.

This reverts commit 0c71e0f9cfa714a22297ad31dd5613ee548db379.

Regression in 0c71e0f9cfa714a22297ad31dd5613ee548db379.","['django/db/models/sql/query.py', 'tests/filtered_relation/tests.py']",Regression due to commit 0c71e0f9cfa714a22297ad31dd5613ee548db379 causes unexpected behavior in Query methods by removing the 'reuse_with_filtered_relation' argument.
a56586eafeb6d1212bc291d1a2e7d33c87edbc33,1603468891,"Fixed #32134 -- Fixed crash of __range lookup with namedtuple.

Regression in 8be79984dce7d819879a6e594ca69c5f95a08378.

Thanks Gordon Wrigley for the report.
","['django/db/models/sql/query.py', 'tests/expressions/tests.py']",Using __range lookup with namedtuple results in the application unexpectedly crashing. Appears to be a regression.
19e6efa50b603af325e7f62058364f278596758f,1664450414,"Fixed #34058 -- Changed sequence types when altering pre-Django 4.1 auto fields on PostgreSQL.

Thanks Anders Kaseorg for the report.

Thanks Florian Apolloner for pair programming.

Regression in 2eea361eff58dd98c409c5227064b901f41bd0d6.","['django/db/backends/postgresql/schema.py', 'tests/schema/tests.py']","Alteration of pre-Django 4.1 auto fields on PostgreSQL results in incorrect sequence types, potentially leading to data inconsistency."
998894e1b9f5a8715f4cac5f6201b5e9ac80510c,1447971672,"Fixed #25764 -- Added support for serialization of enum.Enum in migrations.

Thanks Tim Graham for the review.
","['django/db/migrations/writer.py', 'tests/migrations/test_writer.py']",`enum.Enum` values are not being serialized properly in migrations which could lead to incorrect data transformations.
0aacbdcf27b258387643b033352e99e6103abda8,1619188373,"Refs #32673 -- Fixed lookups crash when comparing against lookups on Oracle.

Follow up to 170b006ce82b0ecf26dc088f832538b747ca0115.","['django/db/backends/oracle/features.py', 'django/db/models/lookups.py']",Comparing lookups on Oracle causes the application to crash due to unexpected lookups behavior.
2867b7eb4b8477710f11707d4b975db10e5f91a7,1490023261,"Refs #27935 -- Fixed BrinIndex.max_name_length if a project's default database isn't PostgreSQL.

Thanks Florian Apolloner for the report.",['django/contrib/postgres/indexes.py'],BrinIndex.max_name_length is erroneous when the project's default database isn't PostgreSQL.
0ca647357ecb0e3fe507d90a9518198751b2d408,1390936117,"Fixed #21883 -- Added six.moves.xrange import

When moving code around from sql.where to lookups six.moves.xrange
import was forgotten. The xrange import is needed on Python 3.
",['django/db/models/lookups.py'],"Moving code from sql.where to lookups resulted in missing six.moves.xrange import, causing failure in Python 3."
7bb373e3097fe8e000e0bba005ff2dcfc18ab9a5,1452128407,"Refs #25746 -- Added a test utility to isolate inlined model registration.

Thanks to Tim for the review.
","['django/db/models/options.py', 'django/test/utils.py', 'tests/test_utils/tests.py']","The registration of inlined models is not properly isolated, leading to inconsistencies in model testing."
b9e872b59329393f615c440c54f632a49ab05b78,1624352369,"Refs #32338 -- Removed 'for =""...""' from RadioSelect's <label>.

This improves accessibility for screen reader users.

Co-authored-by: Thibaud Colas <thibaudcolas@gmail.com>
","['django/forms/widgets.py', 'tests/forms_tests/tests/test_forms.py', 'tests/forms_tests/tests/test_i18n.py']","'for=""...""' attribute in RadioSelect's <label> is causing accessibility issues for screen reader users."
b5c7cb4d3306a7b4e8f87bcf365ff30ae53018ed,1533917846,"Fixed #29653 -- Fixed missing related_query_name reverse accessor if GenericRelation is declared on an abstract base model.

Regression in 4ab027b94409e6415b774797bf9d3593da9d9ea8.

Thanks Lauri Kainulainen for the report.
","['django/db/models/base.py', 'tests/generic_relations_regress/models.py', 'tests/generic_relations_regress/tests.py']",Missing related_query_name reverse accessor when GenericRelation is declared on an abstract base model results in regression.
f0425c72601f466c6a71518749c6d15b94945514,1455722767,"Refs #19353 -- Added tests for using custom user models with built-in auth forms.

Also updated topics/auth/customizing.txt to reflect that subclasses of
UserCreationForm and UserChangeForm can be used with custom user models.

Thanks Baptiste Mispelon for the initial documentation.
",['tests/auth_tests/test_forms.py'],"Custom user models with built-in authentication forms do not have sufficient tests, leading to potential uncaught issues. The documentation also lacks info about subclasses of UserCreationForm and UserChangeForm in the context of custom user models."
40bfd8561d016f6632c95d03e46a720571ad1a8a,1402342690,"Fixed #20420 -- Normalized query counts on Oracle.

This is achieved by inserting a fake entry in connection.queries when
not releasing a savepoint (since Oracle doesn't support that operation.)

Also removed the can_release_savepoints feature that was recently added,
but is superseded by this solution.
","['django/db/backends/__init__.py', 'django/db/backends/oracle/base.py', 'tests/admin_views/tests.py']",Oracle not supporting savepoint release operation is causing abnormal query counts while interacting with the database.
95ca01f9995ef72c6bbe9bba477781b46cf573b4,1457347691,"Fixed #26271 -- Fixed i18n_patterns resolution when no language is active

Thanks Marten Kenbeek for the report.
","['django/urls/resolvers.py', 'tests/i18n/patterns/tests.py']","When no language is active, URL resolution fails with `i18n_patterns`."
4771a1694b3b54c7309602820881d3ec9cc2c809,1664864374,"Fixed #34012 -- Made QuerySet.order_by() apply transforms on related fields for models with Meta.ordering.

This makes QuerySet.order_by() no longer ignore trailing transforms for
models with Meta.ordering. As a consequence, FieldError is raised in
such cases for non-existent fields.

Thanks to Klaas van Schelven for the report and Mariusz Felisiak for the
review and advice.
","['django/db/models/sql/compiler.py', 'django/db/models/sql/query.py', 'tests/ordering/tests.py', 'tests/queries/models.py']","QuerySet.order_by() ignores trailing transforms on related fields for models with Meta.ordering, triggering FieldError for non-existent fields."
8099d33b6553c9ee7de779ae9d191a1bf22adbda,1423425763,"Simplified the lazy CSRF token implementation in csrf context processor.

This significantly improves performance on PyPy. The previous
implementation would generate a new class on every single request,
which is relatively slow.
",['django/template/context_processors.py'],"The existing CSRF token implementation in the CSRF context processor generates a new class on every request, leading to significant performance issues, especially on PyPy."
4c4536f7442a3ed1218f5b1dc791295d65c24f4c,1693462904,"Refs #34712 -- Added system check for staticfiles storage in STORAGES setting.

Co-authored-by: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Co-authored-by: Natalia Bidart <124304+nessita@users.noreply.github.com>
","['django/contrib/staticfiles/apps.py', 'django/contrib/staticfiles/checks.py', 'tests/staticfiles_tests/test_checks.py']",Missing system check for Staticfiles storage in STORAGES setting results in unexpected behavior.
3df3c5e67070949887e08282a332cc34c1f05184,1575966990,"Fixed #26480 -- Fixed crash of contrib.auth.authenticate() on decorated authenticate() methods of authentication backends.

The Signature API (PEP 362) has better support for decorated functions
(by default, it follows the __wrapped__ attribute set by
functools.wraps for example).
","['django/contrib/auth/__init__.py', 'tests/auth_tests/test_auth_backends.py']",The contrib.auth.authenticate() method crashes when it encounters decorated authenticate() methods in authentication backends due to insufficient support for decorated functions.
2928019e0ccd8e9c7d3a3fba7722a7af87018e5d,1591950366,"Fixed #31645 -- Enhanced the migration warning for migrate commmand.

Added the list of apps with changes not reflected in migrations.
","['django/core/management/commands/migrate.py', 'tests/migrations/test_commands.py']",Migration warning for 'migrate' command doesn't list applications with changes that are not reflected in migrations.
bc9be72bdc9bb4dfc7f967ac3856115f0a6166b8,1396156380,"Fixed transaction handling for a number of operations on related objects.

Thanks Anssi and Aymeric for the reviews. Refs #21174.
","['django/contrib/contenttypes/fields.py', 'django/db/models/fields/related.py', 'tests/many_to_many/tests.py', 'tests/multiple_database/tests.py']",Operations on related objects exhibit improper transaction handling causing possible data inconsistencies.
9aaeec337e217109208672d8fe47eeb49ca492b5,1472055497,"Fixed #26866 -- Added format_lazy function

Added format_lazy function to django.utils.text module.
Useful when dealing with relative complex lazy string concatenations
(e.g. in urls.py when translating urls in regular expressions).","['django/utils/text.py', 'tests/utils_tests/test_text.py']","Complex lazy string concatenations, such as when translating urls in regular expressions, lack a dedicated formatting function, leading to inefficient operations."
88b6cf4ae41a983bda735a5f61f69f6b1482e2ca,1412806247,"Fixed #23600 -- Made default_storage aware of more settings changes.

Added MEDIA_URL, FILE_UPLOAD_PERMISSIONS, and
FILE_UPLOAD_DIRECTORY_PERMISSIONS to the list of settings.
","['django/test/signals.py', 'tests/test_utils/tests.py']","Default_storage is unaware of certain settings changes, specifically that of MEDIA_URL, FILE_UPLOAD_PERMISSIONS, and FILE_UPLOAD_DIRECTORY_PERMISSIONS."
8d7271578d7b153435b40fe40236ebec43cbf1b9,1598944643,"Fixed CVE-2020-24583, #31921 -- Fixed permissions on intermediate-level static and storage directories on Python 3.7+.

Thanks WhiteSage for the report.
","['django/core/files/storage.py', 'tests/file_storage/tests.py', 'tests/staticfiles_tests/test_storage.py']","Intermediate-level static and storage directories have incorrect permissions on Python 3.7+, potentially causing a security vulnerability (CVE-2020-24583)."
73be11a266f15c3211cdd6194586705fd3f5e4d0,1603776686,"Removed an obsolete query test that assumes serial pks.

The code from the original fix (922aba3def68e57c405a0e50d353a790af85b00a)
was removed in 419de7b00daabf5e9be064198d370cdbf19b5f2d.",['tests/queries/tests.py'],"An old query test present in the codebase assumes primary keys to be serial, which is no longer a valid assumption."
0dd29209091280ccf34e07c9468746c396b7778e,1653025985,"Fixed #33653 -- Fixed template crash when calling methods for built-in types without required arguments.

Regression in 09341856ed9008875c1cc883dc0c287670131458.
","['django/template/base.py', 'tests/template_tests/tests.py']","Template crashes when calling methods for built-in types without supplying required arguments, evident as a regression problem."
63e6ee1f996e16a1a6238fed16fdb28bce156bc6,1579073310,"Fixed #29871 -- Allowed setting pk=None on a child model to create a copy.

Thanks Simon Charette and Tim Graham for the initial patch.
","['django/db/models/base.py', 'tests/model_inheritance_regress/tests.py']",Unable to create a copy of a child model by setting primary key (pk) to None.
1e5aa8e1c79252cc810af21294a6e945d11d37b3,1624444349,"Fixed #32790 -- Ensured test Client handles redirects to domain indexes without a specified trailing slash.
","['django/test/client.py', 'tests/test_client/tests.py', 'tests/test_client/urls.py', 'tests/test_client/views.py']",Test Client doesn't correctly handle redirects to domain indexes when trailing slash is not explicitly specified.
a54828085732d5d2f020c2fb52fe1cbe1a20a6c9,1587451060,"Fixed #31064 -- Recreated auto-created many-to-many tables on primary key data type change on SQLite.

Both local and remote auto-created many-to-many relationships were
affected.
","['django/db/backends/sqlite3/schema.py', 'tests/migrations/test_operations.py']",Changing the primary key data type in SQLite leads to issues in both local and remote auto-created many-to-many relationships.
aed89adad54a977829c4f180b036033e031ebcc7,1555591275,"Fixed #30367 -- Changed ""pip install"" to ""python -m pip install"" in docs, comments and hints.
","['django/db/models/fields/files.py', 'django/test/runner.py', 'tests/invalid_models_tests/test_ordinary_fields.py']","The documentation and comments incorrectly suggest using ""pip install"" which can lead to discrepancies in environments where multiple Python versions exist."
11920e77959deaa65eb86ccc5d39da903fd3dd41,1692991642,"Fixed #34709 -- Raised BadRequest for non-UTF-8 requests with the application/x-www-form-urlencoded content type.

Thanks Eki Xu for the report.","['django/http/request.py', 'tests/requests_tests/tests.py']",Requests with 'application/x-www-form-urlencoded' content type that are not in UTF-8 format are not correctly raising a 'BadRequest'.
f997b5e6ae85e2df2342b1a7812fe8130206c957,1591264787,"Refs #5086 -- Removed unused only_django argument from sql_flush().

Unused (always True) since its introduction in 132605d889db8767a40243259066b8450428714c.","['django/core/management/commands/flush.py', 'django/core/management/commands/sqlflush.py', 'django/core/management/sql.py']",The sql_flush() function contains an unused argument 'only_django' that was always set to True since its introduction.
96f55ccf798c7592a1203f798a4dffaf173a9263,1620197037,"Fixed #32714 -- Prevented recreation of migration for Meta.ordering with OrderBy expressions.

Regression in c8b659430556dca0b2fe27cf2ea0f8290dbafecd.

Thanks Kevin Marsh for the report.
","['django/db/models/expressions.py', 'tests/expressions/tests.py']","Meta.ordering with OrderBy expressions causes repeating migrations, leading to potential inconsistency in the database state."
dd2e4d7b5d6f24f33c2805b0bfb97a08e27b2125,1480616748,"Refs #27558 -- Added test for no index on InnoDB ForeignKey.

The refactor in 3f76d1402dac9c2993d588f996dc1c331edbc9a7 fixed the creation
of redundant indexes.

Forwardport of 82ce55dbbe2d96e8b5d1fcb4a1d52b73e08e7929 from stable/1.10.x
",['tests/indexes/tests.py'],"The InnoDB ForeignKey does not create an index, potentially creating redundant indexes or even causing compatibility issues with certain database operations."
e13b71403bd1568abed237858127677144d43d23,1609417137,"Fixed #32304 -- Fixed prefixing STATIC_URL and MEDIA_URL by SCRIPT_NAME for absolute URLs with no domain.

Thanks Adam Hooper for the report.

Regression in c574bec0929cd2527268c96a492d25223a9fd576.","['django/conf/__init__.py', 'tests/settings_tests/tests.py']","Absolute URLs with no domain are incorrectly prefixed by SCRIPT_NAME for STATIC_URL and MEDIA_URL, causing misplacement of static and media files. Regression detected."
8533a6af8d937d487dd4a9f5c40ac98e111915a8,1660204390,"Optimized ExclusionConstraint.validate() a bit.

References to excluded fields are omitted in the replacement_map, so
there is no need to replace references before checking for exclusions.
",['django/contrib/postgres/constraints.py'],"Unnecessary replacements are being performed in ExclusionConstraint.validate() before checks for exclusions, resulting in potential inefficiencies."
58da81a5a372a69f0bac801c412b57f3cce5f188,1501529647,"Fixed #27985 -- Fixed query for __exact=value when get_prep_value() converts value to None.

Also fixed crash of .filter(field__transform=None).
","['django/db/models/fields/related_lookups.py', 'django/db/models/sql/query.py', 'tests/lookup/models.py', 'tests/lookup/tests.py']","Exact query fails when get_prep_value() converts the input value to None. Also, it triggers a crash when .filter is used with field__transform set to None."
12576bd371c96fcc92f47a3df806531ff10450c6,1650441869,"Refactored out RedirectURLMixin.get_redirect_url().

This also renames SuccessURLAllowedHostsMixin to RedirectURLMixin.

This doesn't change the behavior of LogoutView.get_next_page() because
next_page == """" implies url_is_safe == False before the refactoring.
",['django/contrib/auth/views.py'],"LogoutView.get_next_page() can potentially fail if `next_page == """"` due to an incorrect assumption from `url_is_safe`. Additionally, mixin nomenclature is unclear and could benefit from more direct terminology."
0ae94d0d3127adabcb0afaf32fd5dbe47d74cd57,1421747543,"Fixes #24169 -- More arrayfield specific lookups.

varchar()[] cannot compare itself to text[]

Thanks to joelburton for the patch.
","['django/contrib/postgres/fields/array.py', 'tests/postgres_tests/test_array.py']",'ArrayField specific lookups failing due to inability of varchar()[] to compare itself to text[]'
f9c4e14aeca7df79991bca8ac2d743953cbd095c,1416940010,"Fixed #23754 -- Always allowed reference to the primary key in the admin

This change allows dynamically created inlines ""Add related"" button to work
correcly as long as their associated foreign key is pointing to the primary
key of the related model.

Thanks to amorce for the report, Julien Phalip for the initial patch,
and Collin Anderson for the review.
","['django/contrib/admin/options.py', 'tests/admin_views/admin.py', 'tests/admin_views/models.py', 'tests/admin_views/tests.py']","""Dynamically created inline 'Add related' button in admin is not working correctly when their associated foreign key is pointing to the primary key of the related model."""
7fc13178d6b0e4b365c43991a6661c6b2118a3a9,1411058575,"Removed unnecessary order_by() from a GIS test that crashed Oracle.

Oracle cannot order_by() a TextField; refs #23504.
",['django/contrib/gis/tests/layermap/tests.py'],GIS test causing crash in Oracle due to unnecessary use of order_by() on a TextField.
308fab924195bdea2fc481e1466c3c3894c03400,1582874801,"Refs #31310 -- Added test for check for using intermediate model with ambiguous foreign key from model.
",['tests/invalid_models_tests/test_relative_fields.py'],"There is an unclear behavior concerning the usage of intermediate models with ambiguous foreign keys from the model, and the project lacks testing to verify this."
a1be12fe193c8f3de8a0b0820f460a302472375f,1498863468,"Fixed #28345 -- Applied limit_choices_to during ModelForm.__init__().

field_for_model() now has an additional keyword argument,
apply_limit_choices_to, allowing it to continue to be used to create
form fields dynamically after ModelForm.__init__() is called.

Thanks Tim Graham for the review.
","['django/forms/models.py', 'tests/model_forms/tests.py']","ModelForm.__init__() does not apply limit_choices_to, causing issues when form fields are created dynamically after it's called."
7c4289d0b974c9b33bdc569308d8c99d7cac45d4,1486421601,"Fixed #27783 -- Switched VariableDoesNotExist.__str__() to repr() context.

Using __str__() and then repr'ing the result looks strange and can lead
to recursive rendering of forms.
","['django/template/base.py', 'tests/template_tests/test_base.py', 'tests/template_tests/test_logging.py']",Using `__str__()` in `VariableDoesNotExist` is causing strange behavior and potential recursive rendering when handling forms.
86573861a95e5a47dc7ff906443117d75b73dca1,1461883732,"Refs #15667 -- Removed choices argument from some RendererMixin methods.

RendererMixin will soon be removed but this removal and the corresponding
test changes stand on their own.","['django/forms/widgets.py', 'tests/forms_tests/tests/test_widgets.py', 'tests/forms_tests/widget_tests/test_checkboxselectmultiple.py', 'tests/forms_tests/widget_tests/test_radioselect.py']",The choices argument in some RendererMixin methods is causing issues and is slated for removal alongside RendererMixin itself.
6ea3aadd17f937e69d121e3ae1a415a435e3267d,1572002888,"Refs #29087 -- Refactored admin inlines.js.

Split logic into separate functions to clarify and allow reuse.
","['django/contrib/admin/static/admin/js/inlines.js', 'django/contrib/admin/static/admin/js/inlines.min.js']","Admin inlines.js has complex, unclear logic that isn't reusable due to it not being segmented into separate functions."
7b05d2fdaed582662d8f79130932f600f4f966a0,1430840292,"Fixed #24752 -- query crash when reusing Case expressions

Case expressions weren't copied deep enough (self.cases list was
reused resulting in an error).
","['django/db/models/expressions.py', 'tests/expressions_case/tests.py']",Reusing Case expressions in queries leads to a crash because Case expressions were not being copied deeply enough.
c1b6a8a98b08fedfa3f3c69bc7add94c5841ba57,1445019735,"Fixed #25560 -- Made empty string related_name invalid.

Thanks to Ali Lotfi for the initial report and patch
and Tim Graham for the review.
","['django/db/models/fields/related.py', 'django/db/models/fields/reverse_related.py', 'tests/invalid_models_tests/test_relative_fields.py']",Empty string for related_name parameter in Django's model system is accepted but it leads to ambiguous and incorrect behaviors.
b66e85342b6ab28b7f48b47fe3fcfbccd5d9943f,1395520546,"Fixed #22308 -- Regression from 0f956085.

Rewrote the test for #9479 according to the original ticket.
",['tests/delete_regress/tests.py'],"The test for issue #9479 is showing a regression, possibly due to changes in commit 0f956085."
c8a85e3e91bf829671b4a8cbd105fbabce945174,1513788951,"Fixed #28932 -- Prevented Oracle from truncating trailing zeros in the fractional part of DecimalField.

Fixes the test added in 6fd6d8383f48ea2fe4e058725fa30529a083e9a5.
Regression in 7c1f3901bcdabb1340a621e7df9b24f3acd0d6f3.",['django/db/backends/oracle/base.py'],"Oracle is truncating trailing zeros in the fractional part of DecimalFields, causing inaccurate results."
6015bab80e28aef2669f6fac53423aa65f70cb08,1677672177,"Refs #34140 -- Added configurations to run blacken-docs linter and adjusted docs.

This adds:
- GitHub actions,
- tox configuration,
- pre-commit hook, and
- makefile rules
to run blacken-docs linter.

Co-authored-by: David Smith <smithdc@gmail.com>
",['docs/make.bat'],"Lack of configurations and rules to run blacken-docs linter, resulting in possible documentation inconsistencies and syntax errors."
dacef9137f43fff88b527d1c02f6fe6a81e975aa,1478642032,"Refs #27420 -- Removed exception hiding in Oracle test user creation during --keepdb.

If the test user creation fails here, _create_test_db() would return without
switching to the test user which caused the tests to run using the main
connection instead of the test user.",['django/db/backends/oracle/creation.py'],"If Oracle test user creation fails during --keepdb, testing procedures continue to run using the main connection, rather than the intended test user."
efb257a01764855a71051d5bcc7fd66c5ad6d210,1554474901,"Fixed #30324 -- Forced utf-8 encoding when loading the template for the technical 500 debug page.

Regression in 50b8493.
Related to ea542a9.
","['django/views/debug.py', 'tests/view_tests/tests/test_debug.py']",Technical 500 debug page fails to load correctly due to issues with template encoding.
fdf20093e0f8cd064673aa1597c20727ed4dd2a0,1423838569,"Fixed #24334 -- Allowed admin password reset to work with non-digit custom user model primary key.

Thanks Loic for help and Simon for review.
","['django/contrib/auth/admin.py', 'tests/auth_tests/test_views.py', 'tests/auth_tests/urls_custom_user_admin.py']",Admin password reset fails when a custom user model's primary key does not contain digits.
47182965465f47657cbab6858a6a8637cc32b2df,1419654447,"Fixed #23753 -- Added a suite of SQL Functions

Added functions and tests
Added docs and more tests
Added TextField converter to mysql backend
Aliased Value as V in example docs and tests
Removed unicode_compatible in example
Fixed console emulation in examples
","['django/db/backends/mysql/base.py', 'django/db/models/functions.py', 'tests/db_functions/models.py', 'tests/db_functions/tests.py']","The application lacks a range of SQL functions which might be limiting its efficiency and effectiveness, and there is also a deficiency in converters for the MySQL backend."
75bbcfa332397a39e95bb267100cd1524314105c,1419637946,"Replaced sqlall in some bash_completion/admin_scripts tests.

sqlall will be removed in Django 1.9, so now's a good time to remove
its usage where it's not important.
","['django/core/management/__init__.py', 'tests/admin_scripts/tests.py', 'tests/bash_completion/tests.py']",The use of 'sqlall' in certain bash_completion/admin_scripts tests could lead to issues as it's being removed in Django 1.9.
ab4c96cff08b7a196807c0faaeca1b8b7ad1e8ea,1395820329,"Merge pull request #2481 from zsiciarz/ticket-22335

Fixed #22335 -- Fixed popen_wrapper error on non-English Windows systems.",['django/core/management/utils.py'],"Non-English Windows systems encounter errors when using popen_wrapper, affecting the operation of certain functionalities."
bb51dc902dc760b6fd03b860335fd99f47e2e13d,1455030294,"Refs #26112 -- Fixed aggregate GIS test on Oracle.

Made sure the test doesn't try to aggregate over MultiPolygonField and made
AreaField turn decimals into floats on the way from the DB.

Thanks Daniel Wiesmann, Jani Tiainen, and Tim Graham for review and discussion.
","['django/contrib/gis/db/models/sql/conversion.py', 'tests/gis_tests/geoapp/test_functions.py']",Issue with aggregate GIS test on Oracle - Attempts to aggregate over MultiPolygonField and AreaField returns decimals instead of floats from the database.
f84ad16ba4bcf5fce6fc76593e0606573dec4697,1547738534,"Refs #17198 -- Detected existing total ordering in admin changelist.

Appending pk is not necessary when a subset of the ordering expressions is
contained in a non-nullable unique contraint.

Related field ordering through lookups and related ordering introspection is
omitted for simplicitly purpose.","['django/contrib/admin/views/main.py', 'tests/admin_changelist/tests.py']",Appending primary key for ordering in admin changelist is being executed unnecessarily when a subset of the ordering expressions exists in a non-nullable unique constraint. Related field ordering through lookups and related ordering introspection is also not considered.
a354c69055fd818e612ce22eaa2da0576a4b89ee,1491598072,"Fixed #28038 -- Restored casting to text of builtin lookups on PostgreSQL.

Reverted 658f1e8 which broke code using __icontains's implicit cast to ::text
on ArrayField.

Thanks Peter J. Farrell for the report.
","['django/db/backends/postgresql/operations.py', 'tests/postgres_tests/test_array.py']","Implicit cast to ::text in PostgreSQL using __icontains on ArrayField is broken, causing malfunction in builtin lookups."
d3cf75ec6fbdd2c1f1bb1e6ccb48d4de1da2952b,1491580073,"Fixed #28051 -- Made migrations respect Index's name argument.

Thanks Marc Tamlyn for the report and Tim Graham for the review.","['django/db/migrations/state.py', 'tests/migrations/test_state.py']","Migrations are currently not respecting the 'name' argument in Index, causing index naming issues in the database schema."
b38637d5813f014fbe3e031253a166c208c387e1,1416662617,"Fixed #23887 -- Returned Bad Request for multipart parsing fails

Thanks Antti Häyrynen and Tim Graham for the report, and Aymeric
Augustin for the review.
","['django/core/handlers/base.py', 'tests/handlers/tests.py', 'tests/handlers/urls.py', 'tests/handlers/views.py']",Multipart parsing fails does not return the appropriate HTTP 'Bad Request' response.
82175ead723f8fa3f9271fbd4b24275097029aab,1497334576,"Fixed #28293 -- Fixed union(), intersection(), and difference() when combining with an EmptyQuerySet.

Thanks Jon Dufresne for the report and Tim Graham for the review.","['django/db/models/query.py', 'django/db/models/sql/compiler.py', 'tests/queries/test_qs_combinators.py']","Combining union(), intersection(), and difference() with an EmptyQuerySet results in incorrect outcomes."
69db1c745506bf63026def25d6854755179feaa8,1438984758,"Fixed #25231 -- Added recording of squashed migrations in the migrate command.

Ensured squashed migrations are recorded as applied when the
migrate command is run and all of the original migrations
have been previously applied.
","['django/core/management/commands/migrate.py', 'tests/migrations/test_commands.py']","The migrate command is not recording squashed migrations as applied, even when all of the original migrations have been previously applied."
289d0ec6fd4c7e3d68b8a8e4f833e719e3dbe205,1585820133,"Refs #31051 -- Fixed reloading the database with circular related objects and natural keys for tests.

Made deserialize_db_from_string() do not sort dependencies.

deserialize_db_from_string() doesn't use natural keys, so there is no
need to sort dependencies in serialize_db_to_string(). Moreover,
sorting models cause issues for circular dependencies.
","['django/db/backends/base/creation.py', 'tests/backends/base/test_creation.py', 'tests/backends/models.py']","For testing, reloading the database with circular related objects and natural keys triggers issues due to unnecessary sorting of dependencies in serialize_db_to_string()."
acfc650f2a6e4a79e80237eabfa923ea3a05d709,1520964400,"Fixed #29199 -- Fixed crash when database user password contains @ sign on Oracle.

Thanks Shane Allgeier for the report and Tim Graham for the review.","['django/db/backends/oracle/base.py', 'tests/backends/oracle/tests.py']",Crash observed when Oracle database user password contains '@' sign.
dc738a0c76f5a15d8a81c3436ca1c4532d82a62f,1500404469,"Removed redundant lookup values in RasterFieldTest.test_all_gis_lookups_with_rasters.

These values produce already tested lookups and prevent another one from
being tested.",['tests/gis_tests/rasterapp/test_rasterfield.py'],"Redundant lookup values in RasterFieldTest.test_all_gis_lookups_with_rasters cause some lookups to be over-tested, while others are not tested at all."
1c7c782d6e7cdce09a982f05d468d538698c3004,1438348767,"Fixed #25188 -- Improved message raised by SimpleTestCase.assertRaisesMessage().

Thanks Chris Jerdonek for the suggestion and help with the patch.
","['django/test/testcases.py', 'tests/test_utils/tests.py']",The message raised by SimpleTestCase.assertRaisesMessage() is not clear or informative enough.
24959e48d949a20be969f649ece3576dbc7ce422,1529515572,"Fixed #27398 -- Added an assertion to compare URLs, ignoring the order of their query strings.
","['django/test/testcases.py', 'tests/auth_tests/test_views.py', 'tests/test_client/tests.py', 'tests/test_utils/tests.py']","Comparing URLs fails to consider the order of query strings, resulting in incorrect assertions."
517d3bb4dd17e9c51690c98d747b86a0ed8b2fbf,1692433783,"Fixed #34779 -- Avoided unnecessary selection of non-nullable m2m fields without natural keys during serialization.

By using `select_related(None)` instead of `select_related()`, the
unnecessary joins are completely avoided. Note that the current tests
already covers the change, when the field is not `null=True`.

Regression in f9936deed1ff13b20e18bd9ca2b0750b52706b6c.
","['django/core/serializers/python.py', 'django/core/serializers/xml_serializer.py', 'tests/serializers/models/base.py']","The serialization of non-nullable many-to-many fields without natural keys leads to unnecessary joins, resulting in performance issues."
b45852c2631d4f291fb22ef3348065f2a3c2e5e3,1466262416,"Refs #26772 -- Added a test for FileField reopening closed files.

Thanks Simon Charette for review.
",['tests/file_storage/tests.py'],"FileField appears to improperly handle reopening closed files, leading to potential errors in file operations."
74670498e902a0506e667cd21084c5e2eb71edfa,1457446902,"Fixed #25971 -- Made BrokenLinkEmailsMiddleware ignore APPEND_SLASH redirects.

If APPEND_SLASH=True and the referer is the URL without a trailing '/', then
BrokenLinkEmailsMiddleware shouldn't send an email.
","['django/middleware/common.py', 'tests/middleware/tests.py']","The BrokenLinkEmailsMiddleware sends unnecessary emails when APPEND_SLASH=True and the referer is the same URL without trailing '/', leading to excess notifications.
"
ca9872905559026af82000e46cde6f7dedc897b6,1618427477,"Fixed #32645 -- Fixed QuerySet.update() crash when ordered by joined fields on MySQL/MariaDB.

Thanks Matt Westcott for the report.

Regression in 779e615e362108862f1681f965ee9e4f1d0ae6d2.","['django/db/backends/mysql/compiler.py', 'tests/update/models.py', 'tests/update/tests.py']",QuerySet.update() function crashes when ordered by joined fields in MySQL/MariaDB due to an occurred regression.
c5517b9e7439e542b381a0054bbdab9b5d2bc34b,1456326646,"Fixed #26266 -- Output the primary key in the GeoJSON serializer properties

Thanks Tim Graham for the review.
","['django/contrib/gis/serializers/geojson.py', 'tests/gis_tests/geoapp/test_serializers.py']",The GeoJSON serializer properties is not outputting the primary key as expected.
f79d9a322c6008e5fada1453aebfb56afc316cc8,1512504310,"Refs #28876 -- Fixed incorrect class-based model index name generation for models with quoted db_table.

Thanks Simon Charette and Tim Graham for the review and Carlos E. C.
Leite for the report.
","['django/db/models/indexes.py', 'tests/model_indexes/tests.py']",Class-based model index is generating incorrect names for models with quoted db_table.
f68fa8b45dfac545cfc4111d4e52804c86db68d3,1644262564,"Refs #33476 -- Changed quotation marks in DebugViewTests.test_template_exceptions().

This prevents a failure after reformatting the code with Black.
","['tests/view_tests/templatetags/debugtags.py', 'tests/view_tests/tests/test_debug.py']",Reformatting the code with Black is leading to a failure in DebugViewTests.test_template_exceptions() method.
c5cc332bf2a0b3ebfa3ad5d26c5b308de5e505be,1427725880,"Fixed #24550 -- Added migration operation description to sqlmigrate output

Thanks Tim Graham for the review.
","['django/db/migrations/migration.py', 'tests/migrations/test_commands.py']",The sqlmigrate output does not display the description of the migration operations.
9db4271bd11ac23a5a5652bbcdf8fb6d4b997651,1392501483,"Fixed bad comparison logic introduced in d97bf2e9c8971764690caaf81a0914bc368d6b02.

Refs #21765.

Thanks to kezabelle for the quick report and to onjin
for providing the patch.
","['django/template/context.py', 'tests/template_tests/test_context.py']",The comparison logic introduced in a previous commit (d97bf2e9c8971764690caaf81a0914bc368d6b02) is leading to incorrect operational behavior.
7af8f4127397279d19ef7c7899e93018274e2f9b,1594028842,"Refs #26445 -- Allowed using UserManager.create_user()/create_superuser() in migrations.

Used app config to lookup user model in _create_user().

Thanks Markus Holtermann for the review and initial patch.
Thanks Simon Charette for the implementation idea.
","['django/contrib/auth/models.py', 'tests/auth_tests/test_models.py']",Unable to use UserManager.create_user()/create_superuser() methods in database migrations due to User model lookup issue.
e3877c53edb33271b0f31d20e60a924848692026,1464710436,"Fixed #26687 -- Made an i18n test not use a hardcoded path separator.

Fixed a failure on Windows.",['tests/i18n/test_extraction.py'],Failure in i18n test due to hardcoded path separator not being compatible with Windows platform.
283b468462a586fd9bf7a2794e9b9a20a7e8a2d9,1469116494,"Fixed #25454 -- Ensured register_hstore_handler is called for all connections

Thanks Simon Charette for help with the patch.
","['django/contrib/postgres/apps.py', 'tests/postgres_tests/__init__.py', 'tests/postgres_tests/test_hstore.py']","The function register_hstore_handler is not being called for all connections, resulting in inconsistent handling of hstore data across different connections."
9ab798a8d8911a431bcb28b0bd82e391e879077a,1391367935,"Fixed #21930 -- Only import add_srs_entry if GDAL is installed

Fixed regression introduced by fabc678f93. Thanks Michael Manfre
for the report.
",['django/contrib/gis/tests/test_spatialrefsys.py'],"Import error occurs when trying to use add_srs_entry function in the absence of GDAL installation, leading to a regression."
531f557f9238b8f2e5032e569cf36f0c05bb4043,1686305897,"Fixed #23049 -- Added %a and %A support to Date.strftime.

This enables the admin to display the day as locale's abbreviated/full
name if %a/%A is used in the date format.
","['django/contrib/admin/static/admin/js/calendar.js', 'django/contrib/admin/static/admin/js/core.js', 'js_tests/admin/core.test.js']","The Date.strftime function does not support %a and %A, preventing the display of the day as locale's abbreviated/full name in the date format."
d72f8862cb1a39934952e708c3c869be1399846e,1436550977,"Fixed #25072 -- Prevented GDALRaster memory to be uncollectable

Setting GDALRaster.bands as a cached property was creating a circular
reference with objects having __del__ methods, which means the memory
could never be freed.
Thanks Daniel Wiesmann for the report and test, and Tim Graham for the review.
","['django/contrib/gis/gdal/raster/band.py', 'django/contrib/gis/gdal/raster/source.py', 'tests/gis_tests/rasterapp/test_rasterfield.py']","GDALRaster.bands property caching creating circular references for objects with __del__ methods, leading to persistent, uncollectable memory."
170b0a47b09d735132bcfdcc9b303397eb03b34b,1694586165,"Refs #34233 -- Used @staticmethod with TextChoices._generate_next_value_().

Now that Python 3.10 is the minimum supported version, we can decorate
_generate_next_value_() with @staticmethod. It wasn't possible before
as Python < 3.10 does not support calling static methods direct from
the class body.

https://docs.python.org/3/library/enum.html#enum.Enum._generate_next_value_
",['django/db/models/enums.py'],Unable to use @staticmethod with TextChoices._generate_next_value_() which results in python versions less than 3.10 not supporting direct calls to static methods from the class body.
962bb9b6bd1deb042e139316108ec0da44cb22a9,1419331302,"Refs #2443 -- Move the durationfield converter logic.

This reduces how frequently this logic is run significantly.

Thanks to Anssi for the suggestion.
","['django/db/backends/__init__.py', 'django/db/models/fields/__init__.py']",The durationfield converter logic is being executed too frequently leading to unnecessary overhead in the software.
fa89acf1d0a4adbf0802c1275494f5159a912c9e,1400273530,"Fixed #22625 -- Normalized make_aware/naive errors.

Also added tests for is/make_aware/naive.

Thanks Tom Michaelis for the report.
","['django/utils/timezone.py', 'tests/utils_tests/test_timezone.py']","Inconsistencies in make_aware/naive errors, requiring normalization and additional tests for is/make_aware/naive."
cecef94275118dc49a1b0d89d3ca9734e2ec9776,1474597177,"Fixed #27257 -- Fixed builtin text lookups on JSONField keys.

Thanks Nick Stefan for the report and Tim for the review.
","['django/contrib/postgres/fields/jsonb.py', 'tests/postgres_tests/test_json.py']",Built-in text lookups on JSONField keys are not functioning correctly.
666990a2a09593d33d8e445398b3b322350ea993,1396457142,"Revert ""Merge pull request #2508 from tomwys/patch-1""

This reverts commit c45607e9395ffd05c2cff454fdb55b3ab05dc0e3, reversing
changes made to 9769337ca855f4831c855d6663ff3f688ee1652d.
",['django/utils/autoreload.py'],"Reverted changes resulted in issues, causing recent commit c45607e9395ffd05c2cff454fdb55b3ab05dc0e3 to conflict with desired repository state."
2be621e44c1b5b68c895383f3e20b1f17ddb447a,1423058723,"Fixed #14497 -- Improved admin widget for ""read only"" FileFields

Based on patch by Adam J Forster, Paul Collins, and Julien.
","['django/contrib/admin/utils.py', 'tests/admin_widgets/tests.py', 'tests/admin_widgets/widgetadmin.py']","Admin widget for ""read only"" FileFields is not adequately functional, leading to ineffective file field management in the admin interface."
7c18b22e2fa70aa8dcfadb33beb17933abdf7ee4,1613729941,"Fixed #32256 -- Fixed migration optimization crash when swapping field names.

This disables optimization of RenameField operation when an old field
name is referenced in subsequent operations.

Co-authored-by: InvalidInterrupt <InvalidInterrupt@users.noreply.github.com>
","['django/db/migrations/operations/fields.py', 'tests/migrations/test_optimizer.py']",Migration optimization crashes when field names are swapped and old field name is referenced in subsequent operations.
04ecc26223e4c574067e827320a7f26a86477c88,1444052819,"Removed SimpleLazyObject workaround for a Python 3 bug.

The workaround added in fe8484efda257e151d9c1ca5151e546c9262bf0f
seems unnecessary as the Python bug is fixed in Python 3.4.
",['django/utils/functional.py'],The SimpleLazyObject workaround persists even though the bug it addressed has been fixed in Python 3.4.
84b7cb7df00192b2f804e2c6fd98b78b5bfd1ffa,1504186505,"Fixed #28549 -- Fixed QuerySet.defer() with super and subclass fields.

Previously, deferring fields in different classes didn't omit the
superclass' deferred field.

Thanks Simon Charette for the suggested fix.
","['django/db/models/sql/query.py', 'tests/defer/tests.py']","The deferring of fields in superclass and subclass using QuerySet.defer() is not functioning as expected, resulting in superclass' deferred fields being included."
f356b6ecc3fe15634d504690c1793460e5fe9bee,1396118835,"Increased memoization cache size for language codes.

There may be more than 100 (default maxsize) commonly seen xx-yy values
on some sites. The additional memory consumption isn't significant.

Also added a comment explaining why this cache must have a maxsize.
",['django/utils/translation/trans_real.py'],The memoization cache for language codes has a default max size of 100 which is causing problems on websites with a higher number of commonly seen language codes.
28e8c54d7d2800a8ac98cf646a9e074055bc1b1b,1426119539,"Fixed #24467 -- Removed conditional inclusion of actions.js & prepopulate.js.

The JavaScript may be required when using ModelAdmin.get_actions() or
get_prepopulated_fields(). Always including them is the easiest solution.
",['django/contrib/admin/options.py'],Conditional inclusion of actions.js and prepopulate.js fails to provide required JavaScript when using ModelAdmin.get_actions() or get_prepopulated_fields().
fcd42a48190d395b8daea82acfc0609549a78705,1407239393,"Removed code that assumed BooleanField could be null.

Such a field will no longer pass model validation.
","['django/db/models/fields/__init__.py', 'tests/model_fields/tests.py']","Code falsely assumes that a BooleanField can be null, leading to failure in model validation."
be9bd3348d3c4b060b6eea53ef23d0651c122c77,1454169887,"Fixed #25758 -- Defaulted to current language FORMATs in date/time filters

Thanks Ali Lozano for the report and the initial patch, and Tim Graham for
the review.
","['django/template/defaultfilters.py', 'tests/template_tests/filter_tests/test_date.py', 'tests/template_tests/filter_tests/test_time.py']","Date/time filters in current language are not defaulting to current language FORMATs, causing inconsistency and potential misinterpretations."
89559bcfb096ccc625e0e9ab41e2136fcb32a514,1409768711,"Fixed #23409 -- Extract PasswordResetForm.get_users method.

Allows easier customization of policies regarding which users are allowed to
reset their password.

Thanks Aymeric for review.
",['django/contrib/auth/forms.py'],Current PasswordResetForm implementation lacks flexibility in customization of policies for users who are allowed to reset their password.
f742c653e029a2baf69a0bc85806f05affa63915,1415823991,"Removed return from __init__.

__init__ isn't allowed to return anything other than None and it isn't
common practice to include a return statement.
",['django/core/checks/messages.py'],The __init__ function is incorrectly returning a value other than None.
cb68eb3e6dd740185734ffcbc4e287860fcc118d,1397757762,"Use the stdlib's PBKDF2 implementation when available.

This is a bit faster than ours, which is good, because it lets you increase
the iteration counts.

This will be used on Python 3.4+, and, pending the acceptance of PEP466, on
newer Python 2.7s.
","['django/db/models/expressions.py', 'django/utils/crypto.py']",Slow PBKDF2 implementation in Python versions before 3.4 is leading to lower iteration counts.
e118e3af371ae58cee7420d2ea2020c8bdeb461e,1415873219,"Fixed #23761 -- Added test for MySQL validator and db_type is None.

The issue was fixed on master in e9103402c0fa873aea58a6a11dba510cd308cb84
so this just forwardports the test and release notes from stable/1.7.x.

Forwardport of 2d12a59938 from stable/1.7.x
",['tests/invalid_models_tests/test_custom_fields.py'],"MySQL validator fails when db_type is None, requiring a test for this scenario."
e62ea0bb9cbb54c1eef848871fe3eab2bad268dc,1493326688,"Refs #20939 -- Moved subquery ordering clearing optimization to the __in lookup.

Queries could potentially be resolved in cases where ordering matter.
","['django/db/models/lookups.py', 'django/db/models/sql/query.py']",Subquery ordering optimizations for __in lookup causing resolution of queries where correct ordering is crucial.
2faeb21d2f618d5bfe9f8f6c574730d3f9407b2a,1514663443,"Moved _get_model_tuple() to the base Operation class.

This allows field and special operations to use this logic.
","['django/db/migrations/operations/base.py', 'django/db/migrations/operations/models.py']","`_get_model_tuple()` is only available to specific operations, limiting the use of this logic for field and special operations."
e084ff01f27a28717eef471ff8e86b074d452f44,1421166431,"Fixed #24136 -- Prevented crash when convert_extent input is None

Thanks Max Demars for the report.
","['django/contrib/gis/db/backends/postgis/operations.py', 'django/contrib/gis/db/backends/spatialite/operations.py', 'django/contrib/gis/tests/geo3d/tests.py', 'django/contrib/gis/tests/geoapp/tests.py']",Crash occurs when the convert_extent function receives 'None' as input.
f3112fde981052801e0c2121027424496c03efdf,1625200854,"Fixed #26430 -- Fixed coalesced aggregation of empty result sets.

Disable the EmptyResultSet optimization when performing aggregation as
it might interfere with coalescence.
","['django/db/models/sql/compiler.py', 'django/db/models/sql/query.py', 'tests/aggregation/tests.py']","Coalesced aggregation operations are being affected by an EmptyResultSet optimization, which may lead to incorrect results."
7ec330eeb96d0874949eacb8ed1bbb97e11807e1,1462282111,"Refs #26565 -- Errored nicely when using Prefetch with a values() queryset.

Thanks Maxime Lorant for the report and Anssi for the suggestion.","['django/db/models/query.py', 'tests/prefetch_related/tests.py']","Using Prefetch with a values() queryset is causing unhandled exceptions or crashes, instead of providing a meaningful error message."
df30ae07fc7d7500bbbe51ed3361982f645169f2,1418411287,"Fixed postgis test database initialization

Refs #20968. Allow querying template_postgis presence without
existing test database.
Thanks Tim Graham for the review.
","['django/contrib/gis/db/backends/postgis/base.py', 'django/contrib/gis/tests/geoapp/tests.py', 'django/db/backends/__init__.py', 'django/db/backends/creation.py']",Initialization of the PostGIS test database fails when trying to query the presence of template_postgis without an existing test database.
9dff5ce7c70780f4ee91567d98dba227093b49e2,1412631353,"Fixed #23593 -- Fixed crash in AdminEmailHandler with non-ASCII characters in request.

Thanks edevil for the report and Simon Charette for review.
","['django/utils/log.py', 'tests/logging_tests/tests.py']",AdminEmailHandler crashes when handling requests containing non-ASCII characters.
7353e26d5d41563ca51520fb38b5950530cb6b9c,1410004076,"Fixed #23340 -- Corrected naturaltime docs to match behavior.

Thanks zachborboa for the report and blackguest for the patch.
",['django/contrib/humanize/tests.py'],"Naturaltime documentation does not match actual behavior, leading to potential inaccuracies and confusion for users."
d2b9a9fdbbc9b5e19b22b144d3e305b87c03b6c8,1588659565,"Refs #28622 -- Corrected PASSWORD_RESET_TIMEOUT/PASSWORD_RESET_TIMEOUT_DAYS docs.

Removed outdated note about an extra day in PASSWORD_RESET_TIMEOUT
docs and incorrect ""minimum"" phrase.
",['django/conf/global_settings.py'],The documentation for PASSWORD_RESET_TIMEOUT and PASSWORD_RESET_TIMEOUT_DAYS is outdated and contains incorrect information about an extra day and minimum usage.
f179113e6cbc8ba0a8d4e87e1d4410fb61d63e75,1463501698,"Fixed #24067 -- Renamed content types upon model renaming.

Thanks to Tim for the extensive review.
","['django/contrib/contenttypes/apps.py', 'django/contrib/contenttypes/management.py', 'tests/contenttypes_tests/operations_migrations/0001_initial.py', 'tests/contenttypes_tests/tests.py']",Content type names are not being updated when the corresponding model is renamed.
3bba4b420ed5e89608d9d71ad328fbaed026b232,1421092894,"Avoided exceptions in a non-critical check in the admin.

This change makes it possible to configure several Django template
engines in a project and still use the admin. On the flip side the
check is silently skipped when no Django template engine is configured.
",['django/contrib/admin/sites.py'],"When multiple Django template engines are configured in a project, a non-critical check in the admin causes exceptions, making the admin unusable."
c4329271607637373e42f081bd632e653aa99ea3,1498493480,"Fixed #26362 -- Fixed update of the inherited id field of an object when its parent changes.

","['django/db/models/fields/related_descriptors.py', 'tests/model_inheritance_regress/tests.py']",'Inherited object id field does not update correctly when parent object changes.'
1251772cb83aa4106f526fe00738e51c0eb59122,1598472817,"Fixed #31936 -- Fixed __in lookup on key transforms for JSONField.

This resolves an issue on databases without a native JSONField
(MariaDB, MySQL, SQLite, Oracle), where values must be wrapped.

Thanks Sébastien Pattyn for the report.","['django/db/models/fields/json.py', 'tests/model_fields/test_jsonfield.py']","Databases without native JSONField (MariaDB, MySQL, SQLite, Oracle) are having issues with the __in lookup on key transforms leading to improper value wrapping."
5a976b4bec79cdb6b75581be6478356fb13fda77,1394726294,"Fixed #22245 -- Avoided widget overwrite in forms.IntegerField subclasses

Thanks Jeroen Pulles for the report and Simon Charette for the review.
","['django/forms/fields.py', 'tests/forms_tests/tests/test_fields.py']",Subclasses of forms.IntegerField are overwriting widgets leading to improper form functioning.
dfcdc8992f8bbbf072cefa4d325fe5cac5316f3d,1541085274,"Fixed #29886 -- Fixed unaccent lookup when PostgreSQL's standard_conforming_strings option is off.

Thanks Tom McClure for the patch.","['django/db/backends/postgresql/base.py', 'tests/postgres_tests/test_unaccent.py']",Unaccent lookup in PostgreSQL fails when the 'standard_conforming_strings' option is turned off.
3938b3ccaa85f1c366909a4839696007726a09da,1456521496,"Fixed #26286 -- Prevented content type managers from sharing their cache.

This should prevent managers methods from returning content type instances
registered to foreign apps now that these managers are also attached to models
created during migration phases.

Thanks Tim for the review.

Refs #23822.
","['django/contrib/contenttypes/models.py', 'tests/contenttypes_tests/test_models.py']","Content type managers are sharing cache, causing them to return instances registered to foreign apps, particularly when attached to models created during migration phases."
3a36c8079544c83dcdea4e52181efcd2d1e86b9c,1449781971,"Fixed #25412 -- Fixed missing PostgreSQL index on Char/TextField when using AlterField.

Thanks to Emanuele Palazzetti for the help.
","['django/db/backends/postgresql/schema.py', 'tests/schema/tests.py']",Missing PostgreSQL index on Char/TextField while using AlterField operation.
e8e4f978dd4b7a3d0c689c6e3301e3c6f9e50003,1428258381,"Fixed #24278 -- Fixed serialization of migration operations.

Fixed MigrationWriter.serialize() to correctly handle migration
operations by utilizing OperationWriter.

Thanks Piotr Maliński for the report.
","['django/db/migrations/writer.py', 'tests/migrations/test_writer.py']","The serialization of migration operations in MigrationWriter.serialize() is not functioning as intended, leading to incorrect handling of these operations.
"
c078021555dcda6b12363b5b0646eac5332a0d86,1435163482,"Refs #24840 -- Added GDALRaster Warp and transform methods

Thanks to Tim Graham for the review.
","['django/contrib/gis/gdal/prototypes/raster.py', 'django/contrib/gis/gdal/raster/const.py', 'django/contrib/gis/gdal/raster/source.py', 'tests/gis_tests/gdal_tests/test_raster.py']",Missing warp and transform methods in GDALRaster limit its functionality and interoperability with GIS software.
11f10b70f3cb21c7a7f859e417adee104758221b,1448569632,"Fixed #25302 (again) -- Ignored scheme when checking for bad referers.

The check introduced in 4ce433e was too strict in real life. The poorly
implemented bots this patch attempted to ignore are sloppy when it comes
to http vs. https.
","['django/middleware/common.py', 'tests/middleware/tests.py']","The referer check is excessively strict, causing the discrepancy between http and https to mistakenly identify certain bots as malicious."
c0cf73a57d7f77af348aeb854e7b4f670dc3cee7,1435626937,"Refs #20203 -- Allowed adding custom default manager to the model state

If the only manager on the model is the default manager defined
by Django (`objects = models.Manager()`), this manager will not
be added to the model state. If it is custom, it needs to be
passed to the model state.
","['django/db/migrations/state.py', 'tests/migrations/test_state.py']",Custom default manager on models not being correctly passed to the model state when it's the only manager defined.
80be597a7b2530ec0893e1d9ee8275e281f026dc,1425323184,"Fixed #24360 -- Delayed internal LocaleMiddleware variable initialization

Failing in a middleware `__init__` is preventing proper debug view.
",['django/middleware/locale.py'],Middleware `__init__` failure is inhibiting the rendering of the correct debug view due to early internal LocaleMiddleware variable initialization.
ed297061a676e629983664031d77da1d0a70af7d,1411496011,"Fixed #18782 -- Prevented sql_flush to flush views

Thanks rodolfo_3 for the report and the initial patch, and
Josh Smeaton, Shai Berger and Tim Graham for the reviews.
","['django/core/management/sql.py', 'django/db/backends/__init__.py', 'tests/introspection/tests.py']",Issue with sql_flush inadvertently flushing views along with tables.
c679cb7f600b13646a1a2b5fc8a03dfcc2e413f2,1393677945,"Fixed #22168 -- Fixed migrations failing on sqlite when column names are SQL keywords

Thanks to trac user fallen_flint for the report and initial patch.
","['django/db/backends/sqlite3/schema.py', 'tests/migrations/test_operations.py']",Migrations fail on SQLite when column names are SQL keywords.
a24cf217220dca44b7bd5b36ad9c14a96bca486e,1412598916,"Fixed #23604 -- Allowed related m2m fields to be references in the admin.

Thanks Simon Charette for review.
","['django/contrib/admin/options.py', 'tests/admin_views/admin.py', 'tests/admin_views/models.py', 'tests/admin_views/tests.py']","Related many-to-many fields cannot be referenced in the admin interface, hindering effective database management."
3841feee86cae65165f120db7a5d80ffc76dd520,1392920005,"Fixed #22107 -- Fixed django.core.files.File object iteration.

Due to a mixup between text and bytes, iteration over
a File instance was broken under Python 3.

Thanks to trac user pdewacht for the report and patch.
","['django/core/files/base.py', 'tests/files/tests.py']",Iteration over a File instance in Python 3 is broken due to a mixup between text and bytes.
30eb92fc1199931d3743cd20b39f38eff7d30489,1503344060,"Removed need for hasattr(check, 'tags') in CheckRegistry.

It was needed to pass tests because registered checks weren't properly mocked.","['django/core/checks/registry.py', 'django/test/utils.py']","Registered checks in CheckRegistry are not being correctly mocked in tests, resulting in tests failure without hasattr(check, 'tags')."
0b63124c841572f76732feb6e04579295f4628fb,1649837834,"Improved ExplainTests.test_basic().

QuerySet.select_for_update() is not supported by all databases.
Moreover it cannot be used outside of a transaction.",['tests/queries/test_explain.py'],QuerySet.select_for_update() function in ExplainTests.test_basic() test is causing issues as it is not supported by all databases and cannot be used outside of a transaction.
e15174983adf0ee5caa1b678c94bb1c6fbd40402,1694512261,"Renamed ChoicesMeta to ChoicesType.

This also uses enum.EnumType for Python 3.11+ as Python 3.11 renamed
EnumMeta to EnumType. While the former is still available as an alias
of the latter for now, let's prefer the canonical name for this.

Check out https://docs.python.org/3/library/enum.html#enum.EnumType
","['django/db/models/enums.py', 'django/utils/choices.py', 'tests/model_enums/tests.py']","Python 3.11's renaming of 'EnumMeta' to 'EnumType' affects our use of 'ChoicesMeta', potentially causing future compatibility issues."
237c229b91ae852ac5f4f0a52b37de3e243ee61f,1401981070,"Avoided using BinaryField unecessarily in tests.

Several database backends struggle with binary data. This change
minimizes the risk of unrelated tests failures when binary fields
trigger errors.

Forward-port of 2e4bcb9b from stable/1.7.x.
","['tests/backends/models.py', 'tests/backends/tests.py']",Unrelated tests fail when binary data fields are used because several database backends cannot effectively handle binary data.
5e2c4a4bd1f86962842783e0b42ada7b9c14c247,1404907160,"Fixed #13794 -- Fixed to_field usage in BaseInlineFormSet.

Thanks sebastien at clarisys.fr for the report and gautier
for the patch.
","['django/forms/models.py', 'tests/model_formsets_regress/models.py', 'tests/model_formsets_regress/tests.py']","The usage of `to_field` in `BaseInlineFormSet` is causing unintended functionality, as reported in issue #13794."
f5817c24f44aa90188757ddca1e5e63ba6f5df75,1686199091,"Refs #34445 -- Fixed string-casting of non-string lazy objects when value may be bytes.

If the result type is bytes, then calling bytes() on it does nothing.

If the result type is not bytes, we should not cast to bytes, just
because the return value may be bytes.
","['django/utils/functional.py', 'tests/utils_tests/test_functional.py']",String-casting of non-string lazy objects incorrectly casts to bytes even when the result type is not bytes.
f0ad641628a3ddc4e1c208e481b9cd0e9304dc3d,1451735653,"Fixed #26016 -- Restored contrib.auth hashers compatibility with py-bcrypt.

Reverted ""Explicitly passed rounds as rounds to bcrypt.gensalt()""

This reverts commit 23529fb19594ffcc6ba6d716356b828157200288.
",['django/contrib/auth/hashers.py'],The contrib.auth hashers are incompatible with py-bcrypt due to incorrect passing of rounds to bcrypt.gensalt().
a81af7f49de7ff3f51f111de28ed3a682f67ea89,1409142893,"Fixed #13749 -- Added link from admin site to front-end site.

Thanks romankrv for the suggestion.
","['django/contrib/admin/sites.py', 'tests/admin_views/admin.py', 'tests/admin_views/tests.py']",Admin site lacks a feature to link to the front-end site which makes navigation inconvenient.
16218c20606d8cd89c5393970c83da04598a3e04,1596016109,"Fixed #27395 -- Added sitemap 'alternates' generation.

Updated the sitemap generator and default template to optionally
include link elements with hreflang attribute to alternate language
URLs.
","['django/contrib/sitemaps/__init__.py', 'tests/sitemaps_tests/test_http.py', 'tests/sitemaps_tests/urls/http.py']",The sitemap generator and default template are missing the functionality to optionally generate 'alternates' with hreflang attributes for multi-language sites.
293608a2e0c7968538597200b72c9b5e9df4184a,1501701382,"Refs #7697 -- Removed unnecessary force_escape of technical 500 debug view ""unicode hint"".

The test passes before and after the removal. unicode_hint will never
be SafeText, so normal autoescaping is sufficient.
",['tests/view_tests/tests/test_debug.py'],"Technical 500 debug view ""unicode hint"" is being force_escaped unnecessarily. Autoescaping is sufficient as unicode_hint will never be SafeText."
e2be307b3ab6ebf339b3a765fe64967c9602266f,1632165781,"Refs #31235 -- Made assertQuerysetEqual() not call repr() on a queryset when compared to string values.

Per deprecation timeline.
","['django/test/testcases.py', 'tests/test_utils/tests.py']",The method assertQuerysetEqual() is inadvertently invoking repr() on a queryset when being compared with string values.
a142edcc4981bb27f4356acad0c7fdfb2d5f9849,1664879377,"Avoided unnecessary call to .get_source_expressions().

The SQLCompiler._order_by_pairs() generator method yields instances of
OrderBy and not Expression.
",['django/db/models/sql/compiler.py'],"The SQLCompiler._order_by_pairs() method is incorrectly yielding instances of OrderBy, which should be instances of Expression instead, leading to unnecessary calls to .get_source_expressions()."
755673e1bca7edb6bee7a958f40d9ae54d85d44c,1554359608,"Fixed #30307 -- Fixed incorrect quoting of database user password when using dbshell on Oracle.

Regression in acfc650f2a6e4a79e80237eabfa923ea3a05d709.
","['django/db/backends/oracle/base.py', 'tests/backends/oracle/tests.py']","The database user password is not correctly quoted when using dbshell with Oracle, causing problems in access and authentication."
31e0314979f6aa1c66828b55dd222c32aad94e9e,1462893891,"Fixed #26580 -- Updated references to obsolete RFC 2822.

Didn't rename django.utils.feedgenerator.rfc2822_date()
as some external code may rely on it.
","['django/core/mail/message.py', 'django/utils/dateformat.py']","Obsoleted RFC 2822 references persist across the code, which could lead to inconsistencies or deprecated function utilization."
eaf9764d3bb25970da89de5799d8d308715628ba,1600162859,"Fixed #32007 -- Fixed queryset crash with Q() annotation and aggregation.

Thanks Gordon Wrigley for the report.

Regression in 8a6df55f2dd5131282084a4edfd48f63fbf8c69a.","['django/db/models/sql/where.py', 'tests/annotations/tests.py']","The application crashes when using Q() annotations and aggregation together in a queryset, due to a regression."
b667ac24ead73300c49e265201b6c0b913ee36a3,1630400642,"Fixed #25264 -- Allowed suppressing base command options in --help output.

This also suppresses -verbosity and --trackback options in the
runserver's help.
","['django/core/management/base.py', 'django/core/management/commands/runserver.py', 'tests/admin_scripts/management/commands/suppress_base_options_command.py', 'tests/admin_scripts/tests.py']",Base command options such as --verbosity and --traceback are mistakenly showing up in runserver's --help output.
9d0c878abf9249da6e16f1acfec311498dc9f368,1679901294,"Refs #28948 -- Precomputed once serialized cookie messages.

When the cookie size is too long, the same messages were serialized
over and over again.
","['django/contrib/messages/storage/cookie.py', 'tests/messages_tests/test_cookie.py']",Repeated serialization of messages when cookie size is excessively long.
b4dce7c37ab7666b023ac791d2c46dad6c8aa637,1408130344,"Fixed #23298 -- Made makemessages actually ignore specified dirs on Windows.

This was detected by two failures in the i18n.test_extraction of our
test suite.

Refs #20422, refs #22336
",['django/core/management/commands/makemessages.py'],"The `makemessages` command on Windows fails to ignore specified directories during extraction, causing failures in the `i18n.test_extraction` suite."
82dad11bfe45f96f15e2330f58f62919cab9f14c,1674851290,"Refs #34255 -- Skipped test_group_by_nested_expression_with_params test on PostgreSQL when server-side binding cursors are used.

Thanks Tim Graham for the review.",['django/db/backends/postgresql/features.py'],The test_group_by_nested_expression_with_params test fails specifically on PostgreSQL when server-side binding cursors are utilized.
a2e580acf62a3de4f9108cc1af061a02b94b1064,1662544928,"Refs #24179 -- Fixed selenium tests for offset of admin selector boxes in fieldset.

Regression in be63c78760924e1335603c36babd0ad6cfaea3c4.",['tests/admin_views/tests.py'],"Admin selector boxes in fieldset are showing incorrect offsets in selenium tests, potentially due to a regression."
b962653060f1968f5a2647b8a20259dc30a3433f,1413461784,"Fixed #23664 -- Provided a consistent definition for OrderedSet.__bool__

This also defines QuerySet.__bool__ for consistency though this should not have any consequence as bool(qs) used to fallback on QuerySet.__len__ in Py3.
","['django/db/models/query.py', 'django/utils/datastructures.py', 'tests/utils_tests/test_datastructures.py']",Inconsistent definitions in OrderedSet.__bool__ and QuerySet.__bool__ causing bool(qs) to unnecessarily fallback on QuerySet.__len__.
e07def14b82b065f010a251cfbc8b3881f3c4d85,1448296393,"Refs #25786 -- Added tests/release notes for set_FOO_order() crash with order_with_respect_to referencing OneToOneField pk.

Forwardport of 6d9f061b07ce7aa1a9da6799b3104971ee73998b from stable/1.8.x
The issue was fixed by 7bec480fe2ace94c8e7f0c88485442bfa74436b4.
","['tests/order_with_respect_to/models.py', 'tests/order_with_respect_to/tests.py']",set_FOO_order() method crashes when order_with_respect_to references OneToOneField primary key.
b86abbceb9a96d7a0fe18047c8fcd6fca90a2f3e,1427755979,"Fixed #24115 -- Allowed bcrypt hashers to upgrade passwords on rounds change.

Thanks Florian Apolloner for the review.
","['django/contrib/auth/hashers.py', 'tests/auth_tests/test_hashers.py']","Bcrypt hashers aren't upgrading passwords when the number of rounds change, leading to potentially weaker encryption."
9415fcfef64b42fbd8c5cb7fff57911a4cda2300,1500555945,"Tested the case when the lhs of a raster lookup has an index specified and the rhs doesn't.
",['tests/gis_tests/rasterapp/test_rasterfield.py'],"Raster lookup fails when an index is specified on the left-hand-side (lhs), but not on the right-hand-side (rhs)."
c7c7615d005b1454e6958a4ee35a3a976d12319e,1603089367,"Fixed #32116 -- Fixed QuerySet.order_by() crash on EmptyQuerySet with union() on a single non-empty ordered queryset.
","['django/db/models/query.py', 'tests/queries/test_qs_combinators.py']",Using QuerySet.order_by() on an EmptyQuerySet combined with union() on a single non-empty ordered queryset is causing the application to crash.
71e7c8e73712419626f1c2b6ec036e8559a2d667,1643625204,"Fixed #33468 -- Fixed QuerySet.aggregate() after annotate() crash on aggregates with default.

Thanks Adam Johnson for the report.","['django/db/models/aggregates.py', 'tests/aggregation/tests.py']",The QuerySet.aggregate() function crashes after using annotate() on aggregates with a default value.
9390533951efa2c5d0113f82850192113afda543,1483715099,"Fixed #27696 -- Measured email long lines on encoded content

Thanks Pavel Pokrovskiy for the report and Tim Graham for the review.
","['django/core/mail/message.py', 'tests/mail/tests.py']","Email encoding results in incorrectly measured long lines, leading to problems with line lengths in encoded email content."
a6d30f50125782db6643d4b24ff30d88adf13cbe,1687866642,"Fixed #34671 -- Fixed collation introspection for views and materialized views on Oracle.

Thanks Philipp Maino for the report.","['django/db/backends/oracle/introspection.py', 'tests/backends/oracle/test_introspection.py']",Collation introspection for views and materialized views on Oracle is not functioning correctly.
8008795a3899d979d65832ca7c4946903de206f7,1574676309,"Refs #23950 --- Moved test DeconstructibleInstances class to a module level.

DeconstructibleInstances was not importable from the asserted path.
",['tests/migrations/test_writer.py'],"DeconstructibleInstances class is not accessible from the asserted path when importing, causing tests to fail."
162765d6c3182e36095d29543e21b44b908625fc,1592983585,"Fixed #9061 -- Allowed FormSets to disable deleting extra forms.

Thanks to Dan Ward for the initial patch.
","['django/forms/formsets.py', 'django/forms/models.py', 'tests/forms_tests/tests/test_formsets.py', 'tests/model_formsets/tests.py']","FormSets currently lack ability to disable deletion of extra forms, potentially leading to data loss."
5399ccc0f4257676981ef7937ea84be36f7058a6,1450723806,"Fixed #494 -- Added ability to specify classes on admin inline fieldsets.

This includes the ability to collapse inlines by specifying a class named
'collapse'.
","['django/contrib/admin/helpers.py', 'django/contrib/admin/options.py', 'tests/admin_inlines/admin.py', 'tests/admin_inlines/tests.py']","Admin inline fieldsets lack the functionality to specify classes, impacting user interface behaviors such as collapsing inlines."
32ade4d73b50aed77efdb9dd7371c17f89061afc,1513985105,"Fixed #28878 -- Added python_requires in setup.py and a warning for older pips that don't recognize it.
",['setup.py'],"The project lacks `python_requires` in setup.py, leading to potential issues with backwards compatibility for users on older versions of pip that do not recognize this argument."
356f064c49f926dd771e6ee590b43c8ac5dc4efc,1395288084,"Merge pull request #2221 from bmispelon/LazyObject-refactor

Fixed #21840 -- Moved dunder methods from SimpleLazyObject to LazyObject...","['django/contrib/staticfiles/management/commands/collectstatic.py', 'django/utils/functional.py', 'tests/utils_tests/test_lazyobject.py', 'tests/utils_tests/test_simplelazyobject.py']","Issue with Dunder methods in SimpleLazyObject causing it to function improperly, needs relocation to LazyObject."
1a7d75cf77639e450854d9bcf9518664f755eb04,1649140648,"Moved remaining SimpleTestCase.assertFormError()/assertFormsetErrors() tests to test_utils.

This also removes redundant tests in test_client_regress.

Follow up to 68144f40490b2572c8da4341742b9e387e3f6bdd.","['tests/test_client/urls.py', 'tests/test_client/views.py', 'tests/test_client_regress/tests.py', 'tests/test_utils/tests.py']",Some tests for SimpleTestCase.assertFormError() and assertFormsetErrors() are in the wrong location and there are redundancies in test_client_regress tests.
2085d8d5bc2625076983d3be14b30ea684c3f0d5,1447102410,"Fixed #25170 -- Made assertXMLEqual()/assertXMLNotEqual() ignore leading and trailing whitespace.

Thanks Jacek Bzdak for indepdently contributing a similar fix.
","['django/test/utils.py', 'tests/test_utils/tests.py']","The assertXMLEqual()/assertXMLNotEqual() methods are not correctly ignoring leading and trailing whitespaces, leading to inaccurate equality assertions."
90cf96326432df56a1cf981df215b83f4e993bfd,1642015422,"Changed django.utils.log.log_response() to take exception instance.

There's little point retrieving a fresh reference to the exception in
the legacy tuple format, when it's all available via the exception
instance we already have.
","['django/core/handlers/exception.py', 'django/utils/log.py']","The function django.utils.log.log_response() is redundantly retrieving references to exceptions, which are already available through the existing exception instance."
5acf203db2e9562dbe4073bf85d5043ef3121ea9,1445948302,"Fixed #25596 -- Fixed regression in password change view with custom user model.

The reverse() added in 50aa1a790ca66c2a93e0a52e00c53375b269ff49
crashed on a custom user model.
","['django/contrib/auth/admin.py', 'tests/auth_tests/models/uuid_pk.py', 'tests/auth_tests/test_auth_backends.py', 'tests/auth_tests/test_views.py']",Regression in password change view crashes when used with a custom user model due to the reverse() function.
447980e72ac01da1594dd3373a03ba40b7ee6f80,1587622028,"Fixed #31500 -- Fixed detecting of unique fields in QuerySet.in_bulk() when using Meta.constraints.

Detection of unique fields now takes into account non-partial unique
constraints.
","['django/db/models/query.py', 'tests/lookup/models.py', 'tests/lookup/tests.py']","Unique fields in QuerySet.in_bulk() aren't accurately detected when using Meta.constraints, specifically not considering non-partial unique constraints."
8bbdcc76e4a84cde92b8dbfd01581d098bd2187d,1392475652,"Fixed #19299 -- Fixed Nullification of Foreign Keys To CharFields

Thanks tunixman for the report and Baptiste Mispelon and
Shai Berger for reviews.
","['django/db/models/fields/related.py', 'django/db/models/query.py', 'tests/model_fields/models.py', 'tests/model_fields/tests.py']","Foreign Keys referencing CharFields get incorrectly nullified, disrupting established relationships."
89f17e7caf0d1e70417253d135607c9fd6ebac56,1471285390,"Fixed #27014 -- Fixed annotations with database functions on PostGIS.

Thanks Sean Mc Allister for providing a test.
","['django/contrib/gis/db/backends/postgis/adapter.py', 'tests/gis_tests/geogapp/tests.py']","Annotations functioning incorrectly with database functions on PostGIS, thereby hindering accurate data processing."
79c3f226dd6e6a4dd27173d08b024bf756ea6e39,1441523882,"Fixed #25357 -- Database deduplication on Oracle.

In order to reuse another database, Django must use set_as_test_mirror.
",['django/test/runner.py'],Django is unable to reuse another database on Oracle due to an issue with database deduplication.
1939dd49d142b65fa22eb5f85cee0d20864d3730,1545041024,"Fixed #29928 -- Enabled deferred constraint checks on SQLite 3.20+.

Refs #11665, #14204.

Thanks Michel Samia for the report.
",['django/db/backends/sqlite3/features.py'],Issues with deferred constraint checks on SQLite versions 3.20 and above lead to database integrity problems.
1b00ed088073ffd268af15d25246d2565253536d,1464528670,"Fixed #26674 -- Corrected a i18n makemessages test.

Made it consistently read the PO file, decode its contents and then
check for the non-breaking space Unicode code point.

Previously we were erroneously skipping the interpretation of what we
read as UTF-8 text.

This was causing the test to fail on Windows with Python 3.5.
",['tests/i18n/test_extraction.py'],The i18n makemessages test is failing on Windows with Python 3.5 due to incorrect interpretation of the PO file as UTF-8 text.
68d769e691eb0d765228defddb3ba982eabdc761,1694719032,"Fixed #34838 -- Corrected output_field of resolved columns for GeneratedFields.

Thanks Simon Charette for the implementation idea.
","['django/db/models/fields/generated.py', 'tests/model_fields/test_generatedfield.py']",Resolved columns for GeneratedFields have incorrect output_field values.
516b7664dcc7dc5a8f40afde38cc892446ead5b4,1496421356,"Fixed #28260 -- Allowed customizing the test tablespace initial and autoextend size on Oracle.

Thanks Tim Graham for the review.",['django/db/backends/oracle/creation.py'],Oracle test tablespace lacks customizable options for initial and autoextend size.
2e8941b6f90e65ffad3f07083b8de59e8ed29767,1592980640,"Fixed #31735 -- Fixed migrations crash on namespaced inline FK addition on PostgreSQL.

The namespace of the constraint must be included when making the
constraint immediate.

Regression in 22ce5d0031bd795ade081394043833e82046016c.

Thanks Rodrigo Estevao for the report.
","['django/db/backends/base/schema.py', 'django/db/backends/postgresql/schema.py', 'tests/schema/tests.py']",Migrations crash on PostgreSQL when adding a namespaced inline foreign key due to missing constraint namespace.
483e30c3d5c82c562a17e016ae2098666bf3a728,1636960027,"Fixed #33288 -- Made SQLite introspection use information schema for relations.

Previous solution was using brittle and complex parsing rules to
extract them from the SQL used to define the tables.

Removed a now unnecessary unit test that ensured the removed parsing
logic accounted for optional spacing.
","['django/db/backends/sqlite3/introspection.py', 'tests/introspection/tests.py']","SQLite introspection uses fragile parsing to extract relations from table-defining SQL, resulting in potential inaccuracies and complexity."
9c3fbf5423367cdcf1a30a411793919d86f5288c,1466121073,"Used SQL from DB backend in GeomValue.

This avoids the deprecated GeomFromText on MySQL (refs #26134).

Thanks Claude Paroz for the review.
","['django/contrib/gis/db/backends/oracle/operations.py', 'django/contrib/gis/db/models/functions.py']","MySQL's deprecated GeomFromText function is being used instead of SQL from DB backend in GeomValue, which could lead to potential problems or errors."
33c365781abbcc1b21a31b31d95d344a174df0d5,1590470767,"Fixed #31416 -- Made autodetector find dependencies for MTI model creation on base fields removal.

Removing a base field must take place before adding a new inherited
model that has a field with the same name.
","['django/db/migrations/autodetector.py', 'tests/migrations/test_autodetector.py']",Removing base fields causes conflict with new inherited model's field having the same name leading to dependency error in autodetector.
432623603ced935132798c22214f866af5b5f37c,1434307462,"Changed reduce method lookup in migration optimizer to dict

Thanks Andrew Godwin and Simon Charette for the review.
",['django/db/migrations/optimizer.py'],"Migration optimizer's reduce method lookup has issues, which might lead to inefficiency or errors."
c238e65e29494042d6ccf925c0a06a3135619799,1562153751,"Fixed #30596 -- Fixed SplitArrayField.has_changed() for non-string base fields.

Thanks to Evgeniy Krysanov for the report and the idea to use to_python.
Thanks to Mariusz Felisiak for the test case.
","['django/contrib/postgres/forms/array.py', 'tests/postgres_tests/test_array.py']",SplitArrayField's has_changed() method is not functioning correctly for base fields that are not strings.
ec5aa2161d8015a3fe57dcbbfe14200cd18f0a16,1593409903,"Fixed #30807 -- Fixed TestArchive.test_extract_file_permissions() when umask is 0o000.

Fixed test that checks permissions on files extracted from archives
with no permissions set, to not assume a default umask of 0o002.

Test regression in c95d063e776e849cf1a0bf616c654165cb89c706.",['tests/utils_tests/test_archive.py'],"TestArchive.test_extract_file_permissions() fails when umask is set to 0o000, test assumes a default umask of 0o002 causing errors with file extraction from archives."
50c3ac6fa9b7c8a94a6d1dc87edf775e3bc4d575,1605080010,"Fixed #31762 -- Made reloading the database for tests use the base manager.

Co-authored-by: Eugene Kulak <kulak.eugene@gmail.com>
","['django/db/backends/base/creation.py', 'tests/backends/base/test_creation.py', 'tests/backends/models.py']","Reloading the database for tests is currently utilizing the non-base manager, causing potential inaccuracies in management commands and operations."
e37ab311fc52ff5c9ea0951ce3a8d8b38f285900,1418650367,"Changed internal storing of abstract and concrete managers to be in a single list.

This commit prepares the internal manager layout to be serialized by
migrations; refs #23822.
","['django/db/models/base.py', 'django/db/models/manager.py', 'django/db/models/options.py']",Current layout of internal manager prevents it from being serialized in migrations.
db19619545dd99a1d2502c72974d79eca33acff7,1459494260,"Fixed #25532 -- Properly redisplayed JSONField form input values

Thanks David Szotten for the report and Tommy Beadle for code inspiration.
Thanks Tim Graham for the review.
","['django/contrib/postgres/forms/jsonb.py', 'django/forms/forms.py', 'tests/postgres_tests/test_json.py']","JSONField form input values are not being displayed correctly upon redisplay.
"
82e0cd15711c7171aed7af5e481967cc721c9642,1423425417,"Optimized allow_lazy() by not generating a new lazy wrapper on each invocation.

This dramatically improves performance on PyPy. The following benchmark:

python -mtimeit -s ""from django.utils.functional import allow_lazy; from django.utils.translation import ugettext_lazy; f = allow_lazy(lambda s: s, str)"" ""f(ugettext_lazy('abc'))""

goes from 390us per loop to 165us.
",['django/utils/functional.py'],Current implementation of allow_lazy() function is resulting in performance degradation as it is generating a new lazy wrapper with each invocation.
8d018231ac64c044c9740b79c0acf6d0abd7c513,1602698624,"Removed redundant tests in test_extract_trunc.

tzinfo is ignored for DateFields and TimeFields, and it's already
covered by DateFunctionTests.test_trunc_func().
",['tests/db_functions/datetime/test_extract_trunc.py'],"Redundant tests found in test_extract_trunc, where tzinfo is unnecessarily being tested for DateFields and TimeFields."
1d00923848d504c6132019492b8d5a6cdf8261db,1514400434,"Refs #28958 -- Added a test for ModelAdmin with query expressions in ordering.

This provides additional test coverage but isn't a regression test for
the ticket's issue.",['tests/admin_ordering/tests.py'],Lack of test coverage for ModelAdmin with query expressions in ordering.
148702e7258eafb27d5488b33a723c87d898e22b,1607359456,"Refs #21012 -- Removed unnecessary _create_cache() hook.

This removes unused (since d038c547b5ce585cbf9ef5bb7e5298f52e4a243b)
workaround to load a cache backend with its dotted import path and
moves remaining logic to the CacheHandler.

Thanks Tim Graham for the review.
",['django/core/cache/__init__.py'],The _create_cache() hook is unused and might be causing unnecessary load on the cache backend with its dotted import path.
859a87d873ce7152af73ab851653b4e1c3ffea4c,1647258746,"Fixed #31357 -- Fixed get_for_models() crash for stale content types when model with the same name exists in another app.
","['django/contrib/contenttypes/models.py', 'tests/contenttypes_tests/test_models.py']",Crash in get_for_models() when dealing with stale content types for a model that shares its name with a model in a different app.
53b6a466d89f972aa435fe7b5135e9b501ce68ee,1584705333,"Refs #29724 -- Added is_dst parameter to QuerySet.datetimes().

Thanks Simon Charette for the review and Mariusz Felisiak for tests.
","['django/db/models/query.py', 'tests/datetimes/tests.py']","The QuerySet.datetimes() function lacks a parameter for handling Daylight Saving Time, leading to potential misinterpretation of timezone aware datetimes."
be648d1c457a13af27bc310568c95ab6f08610dd,1585044569,"Fixed #31391 -- Removed jQuery usage in cancel.js

Now that cancel.js has no dependencies, it can be loaded asynchronously.

Co-Authored-By: François Freitag <mail@franek.fr>
",['django/contrib/admin/static/admin/js/cancel.js'],"cancel.js script is unnecessarily dependent on jQuery, causing it to not be loaded asynchronously."
9023f25278e60bb2da64cd8fddb243ad2137d400,1474287831,"Removed invalid year character from datetime format in Azerbaijani locale.

Azerbaijani switched to Latin letters after Soviets and doesn't add il when
writing date time formats.",['django/conf/locale/az/formats.py'],"Datetime format in Azerbaijani locale contains invalid year character 'il', which is no longer used after the switch to Latin letters."
1a09b3c398b42800de864023dad872d83b196181,1442667954,"Fixed #25424 -- Use force_str for test client URLs.

urlparse() fails with an AttributeError (""'__proxy__' object has no
attribute 'decode'"") if reverse_lazy is used to look up the URL
(this is exactly the same problem that caused ticket #18776). The
solution is to use force_str() on the path before handing it to
urlparse().
","['django/test/client.py', 'tests/test_client/tests.py']","urlparse() function fails with AttributeError when reverse_lazy is used to look up the URL, leading to test client URLs failing."
681df1aeafb30092430157f7977f713e1ce234ca,1431101470,"Fixed #24771 -- Simplified ModelForm._post_clean()

This code added in 45e049937d2564d11035827ca9a9221b86215e45
is no longer necessary to pass the model_formsets_regress tests
as of 5e2c4a4bd1f86962842783e0b42ada7b9c14c247.
",['django/forms/models.py'],"ModelForm._post_clean() contains unnecessary code, affecting test pass rates from model_formsets_regress tests."
0344565179527d80990e2247e3be7c04aa8c43c8,1559110130,"Fixed #30516 -- Fixed crash of autoreloader when re-raising exceptions with custom signature.

Regression in c8720e7696ca41f3262d5369365cc1bd72a216ca.
","['django/utils/autoreload.py', 'tests/utils_tests/test_autoreload.py']",Autoreloader crashes when attempting to re-raise exceptions with custom signatures due to a regression in a previous commit.
48c34f3336cbbc906066636a7aa35270a7b44895,1471984807,"Fixed #26971 -- Prevented crash with non-UTF-8 incoming PATH_INFO

Thanks Tim Graham and Loïc Bistuer for the reviews.
","['django/core/handlers/wsgi.py', 'django/core/servers/basehttp.py', 'tests/handlers/tests.py', 'tests/requests/tests.py']",Crash occurs when incoming PATH_INFO is not in UTF-8 format.
621c5cf4a501c8e80348df0ddbe726defd6be2ed,1392727086,"Fixed #21732 -- Made compilemessages complain about non-writable location

Instead of crashing with a CommandError, now a non-writable location
of mo files will only make compilemessages complain and continue.
Thanks Ramiro Morales for the review.
","['django/core/management/commands/compilemessages.py', 'tests/i18n/test_compilation.py']","When trying to compile messages, a non-writable location of mo files results in a CommandError crash, stopping further execution."
35911078fa40eb35859832987fedada76963c01e,1660204390,"Replaced Expression.replace_references() with .replace_expressions().

The latter allows for more generic use cases beyond the currently
limited ones constraints validation has.

Refs #28333, #30581.
","['django/contrib/postgres/constraints.py', 'django/db/models/constraints.py', 'django/db/models/expressions.py']","The current method Expression.replace_references() limits use cases, affecting the validation of constraints."
15ef1dd478c5b6f005e5f782b7619f718ed55e84,1446123529,"Fixed #20846 -- Increased User.username max_length to 254 characters.

Thanks Collin Anderson and Nick Sandford for work on the patch.
","['django/contrib/auth/migrations/0008_alter_user_username_max_length.py', 'django/contrib/auth/models.py']","The max length of User.username is insufficient, not supporting usernames upto 254 characters."
2b64ff68cc375b5688174b4087bf44be9edd2558,1473261341,"Fixed #27180 -- Fixed a crash in MySQL checks where SELECT @@sql_mode doesn't return a result.
",['django/db/backends/mysql/validation.py'],Crash occurring in MySQL checks when SELECT @@sql_mode does not return a result.
bc315266c86f371ab04d05c43383775267e8595a,1395502786,"Fixed #22294 -- Prevented converting length filter output to string

Thanks Steve Pike for the report.
","['django/template/defaultfilters.py', 'tests/defaultfilters/tests.py', 'tests/template_tests/filters.py']","Length filter output is being converted to string type, despite content not being string-oriented."
1a403aa705e7921eb6ec88c7d9f686ab0e54ef76,1459043381,"Fixed #25987 -- Made inline formset validation respect unique_together with an unsaved parent object.

Thanks Anton Kuzmichev for the report and Tim for the review.
","['django/forms/models.py', 'tests/inline_formsets/models.py', 'tests/inline_formsets/tests.py']",Inline formset validation does not respect unique_together constraint when the parent object is unsaved.
f0d3dd4f04efa49e0b58da4847cb89770b59d4a8,1409151524,"Fixed #23357 -- Added small int introspection support to MySQL backend.

In the MySQL backend, updated the can_introspect_small_integer feature
flag to True. In data_types_reverse, map FIELD_TYPE.SHORT to a
SmallIntegerField. Added test to verify introspecting SmallIntegerFields
and fixed existing tests influenced by this change.
","['django/db/backends/mysql/base.py', 'django/db/backends/mysql/introspection.py', 'tests/introspection/models.py', 'tests/introspection/tests.py']","The MySQL backend lacks support for introspecting SmallIntegerField, leading to potential discrepancies in data mapping and type handling."
1a9cbf41a130def83a7e384955544d08be0fc148,1533285115,"Fixed #29613 -- Fixed --keepdb on PostgreSQL if the database exists and the user can't create databases.

Regression in e776dd2db677d58dcb50aea20d3bb191537df25b.

Thanks Tim Graham for the review.","['django/db/backends/postgresql/creation.py', 'tests/backends/postgresql/test_creation.py']",The --keepdb option in PostgreSQL is failing when the database already exists and the user lacks the proper permissions to create databases.
829f4d1448f7b40238b47592fc17061bf77b0f23,1673411800,"Refs #31546, Refs #34118 -- Corrected CommandTests.test_requires_system_checks_specific().

System checks are never called without skip_checks=False. Moreover,
called_once_with() is not a proper assertion and raise AttributeError
on Python 3.12.",['tests/user_commands/tests.py'],System checks not being called without `skip_checks=False` coupled with the improper usage of `called_once_with()` results in `AttributeError` on Python 3.12 in `CommandTests.test_requires_system_checks_specific()`.
836d475afefecd643d5e7f44027d7209df3ac690,1461051324,"Fixed #22561 -- Prevented too long lines in email messages

Thanks NotSqrt for the excellent report and Tim Graham for the review.
","['django/core/mail/message.py', 'tests/mail/tests.py']",Email messages are failing to send due to the lines in the emails exceeding the permissible length limit.
3e9aa298719f19d5f09dbe0df29b6bb8d2136229,1495332548,"Refs #16850 -- Removed obsolete simplejson support in JSON serializer.

cpython's json version is 2.0.9 so this line is never used.",['django/core/serializers/json.py'],"The JSON serializer is using an outdated simplejson support, despite cpython's json version being 2.0.9."
c0beff21239e70cbdcc9597e5be09e505bb8f76c,1659932933,"Fixed #33899 -- Fixed migration crash when removing indexed field on SQLite 3.35.5+.

Regression in 702819227fd0cdd9b581cd99e11d1561d51cbeb.

Thanks cessor for the report.
","['django/db/backends/sqlite3/schema.py', 'tests/schema/tests.py']",Removing an indexed field in SQLite 3.35.5+ causes migration to crash.
40f0a84cb151669313faadf857aaddd18d39aaeb,1433466122,"Fixed #24159 -- Made compilemessages run across all apps.

Updated the command to match the documentation, which states it
runs over all .po files.
","['django/core/management/commands/compilemessages.py', 'tests/i18n/test_compilation.py']","The compilemessages command is not running across all applications, contradicting the stated documentation.
"
04e87e79a0bd2b1b9fdc30f884a637a3268733f0,1598261879,"Refs #31877 -- Reverted ""Fixes #31877 -- Used lazy() for TemplateView kwarg deprecation warning.""

This reverts commit 20799cc0a6d98816b9ef0577e24691bd26b80d7d.
","['django/views/generic/base.py', 'tests/generic_views/test_base.py']",The use of lazy() for the TemplateView keyword argument deprecation warning is causing unexpected issues.
9f8c994851804863d556854f5231316eec478bd5,1664130181,"Fixed #34027 -- Fixed migrations crash when altering type of char/text fields referenced by foreign key on PostgreSQL.
","['django/db/backends/postgresql/schema.py', 'tests/migrations/test_operations.py']",Migrations crash on PostgreSQL when trying to alter the type of char/text fields that are being referenced by a foreign key.
cc2ca9c550fbf8fca8684b373a3c8e3618eea08e,1448554487,"Fixed #25807 -- Instructed the migration writer about lazy objects.

Thanks to Trac alias mrgaolei for the report, Baptiste for the confirmation
and Tim for the review.
","['django/db/migrations/writer.py', 'tests/migrations/test_writer.py']","The migration writer is having issues handling lazy objects, potentially causing errors in the migration process."
14c8456ffe7e6388383e6fe5c3f51cd20810ea49,1410026466,"Fixed #23416 -- Make sure DatabaseCreation respects checks.

Migrations respected Field.db_parameters()['check'], but
DatabaseCreation was still using just Field.db_type().
","['django/db/backends/creation.py', 'tests/commands_sql/models.py', 'tests/commands_sql/tests.py']","DatabaseCreation is not respecting Field.db_parameters()['check'], leading to discrepancies with migrations that respect this check."
17d3a6d8044752f482453f5906026eaf12c39e8e,1436383383,"Fixed catastrophic backtracking in URLValidator.

Thanks João Silva for reporting the problem and Tim Graham for finding the
problematic RE and for review.

This is a security fix; disclosure to follow shortly.
","['django/core/validators.py', 'tests/validators/tests.py']","URLValidator is exhibiting catastrophic backtracking, which could potentially lead to security vulnerabilities."
5307ce565fbedb9cc27cbe7c757b41a00438d37c,1408559980,"Fixed #23066 -- Modified RemoteUserMiddleware to logout on REMOTE_USER change.

This is a security fix. Disclosure following shortly.
","['django/contrib/auth/middleware.py', 'django/contrib/auth/tests/test_remote_user.py']","RemoteUserMiddleware doesn't logout when there's a change in REMOTE_USER, leading to potential security risks."
426b63ba04521b8eaffb129b7e4feca36eed8777,1428137189,"Fixed #24571 -- Restored testserver positional arguments parsing

Thanks Domas Lapinskas for the report and Tim Graham for the
review.
","['django/core/management/commands/testserver.py', 'tests/admin_scripts/tests.py']",Testserver's positional arguments parsing functionality is malfunctioning.
2d3cc94284674638c334670903d49565039d77ae,1510493291,"Fixed #28781 -- Added QuerySet.values()/values_list() support for union(), difference(), and intersection().

Thanks Tim Graham for the review.","['django/db/models/sql/compiler.py', 'tests/queries/test_qs_combinators.py']","`union()`, `difference()`, and `intersection()` methods are not supported by QuerySet's `values()` and `values_list()` resulting in errors during QuerySet operations."
3f22e83e90bc2eeea5f65858660385a34fbf5486,1443876033,"Fixed #25483 -- Allowed passing non-string arguments to call_command

Thanks KS Chan for the report and Tim Graham for the review.
","['django/core/management/__init__.py', 'tests/user_commands/management/commands/dance.py', 'tests/user_commands/tests.py']",`call_command` cannot accept non-string arguments leading to constraint in command line interactions.
c8bd37a8606a89b6e09854ab5f3bbaa98e849408,1574950213,"Fixed #31042 -- Removed AdminSeleniumTestCase.get_css_value() in favor of Selenium .is_displayed().

All instances of AdminSeleniumTestCase.get_css_value() were used to
inspect the display property.","['django/contrib/admin/tests.py', 'tests/admin_widgets/tests.py']","`AdminSeleniumTestCase.get_css_value()` function used for inspecting 'display' property instead of the Selenium built-in `.is_displayed()`.
"
a82e21b0f9ac613db3354d46539cb97c897ea663,1444666467,"Refs #18012 -- Removed the now unused proxied_children model option.

Thanks to Tim for the review.
","['django/db/models/base.py', 'django/db/models/options.py']",The 'proxied_children' model option is no longer in use and resides unnecessarily in the codebase.
753a22a6352638b7df55176584795ac8c5d4232c,1395433791,"Fixed transaction handling in two management commands.

Previously, when createcachetable and flush operated on non-default
databases, they weren't atomic.
","['django/core/management/commands/createcachetable.py', 'django/core/management/commands/flush.py', 'tests/cache/tests.py']","Management commands 'createcachetable' and 'flush' aren't atomic when operating on non-default databases, causing a potential issue in transaction handling."
cdf6eba1816669bd77a28da903d931b5a4b15992,1394322285,"Merge pull request #2315 from bendavis78/issues/22073

Fixed #22073 - Ensure CreateTable operation handles backwards migration correctly when M2M fields are present","['django/db/backends/schema.py', 'tests/migrations/test_operations.py']","Backwards migration with CreateTable operation fails to handle Many-to-Many fields correctly, causing migration issues."
e8bfc1c74767ba902846ed0736327ce400112f3c,1441524496,"Stopped returning mirrors from setup_databases.

The return value of setup_databases is only used as an argument for
teardown_databases which doesn't need mirrors.
",['django/test/runner.py'],"The return value of setup_databases, which includes mirrors, is unnecessarily passed to teardown_databases that does not utilize mirrors."
51297a92324976a704279b567ec4f80bb92d7b60,1597320636,"Fixed #31792 -- Made Exists() reuse QuerySet.exists() optimizations.

The latter is already optimized to limit the number of results, avoid
selecting unnecessary fields, and drop ordering if possible without
altering the semantic of the query.
","['django/db/models/expressions.py', 'django/db/models/sql/compiler.py', 'django/db/models/sql/query.py', 'tests/expressions/tests.py']","Exists() method doesn't reuse the optimization from QuerySet.exists(), leading to inefficiencies like lack of result limiting and unnecessary field selection."
530dd193f2a1c791c703f3f961e2296cbb316bf9,1573804890,"Fixed #29808 -- Fixed initial migration detection when identifiers are case-insensitive.

Thanks Simon Charette for the review.
","['django/db/migrations/executor.py', 'tests/migrations/test_commands.py', 'tests/migrations/test_fake_initial_case_insensitive/fake_initial/0001_initial.py', 'tests/migrations/test_fake_initial_case_insensitive/initial/0001_initial.py']",Initial migration is not properly detected when identifiers are case-insensitive.
07b6404d2245519fd88c2d51b4455ed099d3a1f0,1400567961,"Merge pull request #2688 from whoshuu/22661

Fixed #22661 -- Move makemigrations tests to the proper class",['tests/migrations/test_commands.py'],"`makemigrations` tests are not organized in the correct class, causing confusion and potentially hindering debugging."
235124d3eaf6cc7ab9f97f1d1467d1caf18e1016,1423179907,"Fixed small regression caused by 0204714b0bdf10d7558ee106de9a718407f3ec5a

Since 1.7 models need to declare an explicit app_label if they are not
in an application in INSTALLED_APPS or were imported before their
application was loaded.
",['tests/schema/tests.py'],"Models not part of an application in INSTALLED_APPS or imported before their application was loaded, need to declare an explicit app_label since version 1.7."
bebc1e53a3ab059849e5c4e5a55b2f5e68b67169,1424216671,"Refs #24324 -- Fixed UnicodeDecodeError in template_backends tests

The message for the SuspiciousFileOperation exception needs to
be a unicode string.
",['django/utils/_os.py'],SuspiciousFileOperation exception in template_backends tests raises a UnicodeDecodeError due to non-unicode string message.
361254810eb8920978d69aa0fc074dbd40bfcc21,1442866842,"Documented ""rel objects"".

Kept the docstring short because these objects aren't very well defined
and they're in the crosshairs of several refactorings.
",['django/db/models/fields/reverse_related.py'],The 'rel objects' are not properly defined and there is a lack of sufficient documentation for them.
999891bd80b3d02dd916731a7a239e1036174885,1567414256,"Refs #29379 -- Moved autocomplete attribute to UsernameField.

Moving the autocomplete attribute into UsernameField allows this to work
for custom forms making use of UsernameField, removes some duplication
in the code, and keeps consistency with the autocapitalize attribute
that is already defined on UsernameField.",['django/contrib/auth/forms.py'],"The autocomplete attribute is not functioning for custom forms using UsernameField due to its placement, leading to code duplication and inconsistency with autocapitalize attribute."
baa732ac9f18b6ed0ca386c632e15c9fb3037e39,1437402021,"Refs #23622 -- Added tests to ensure ordering is retained for distinct on fields subqueries.

The ticket was already fixed by
b68212f539f206679580afbfd008e7d329c9cd31.

Thanks to Beauhurst for commissioning the work on this ticket.
",['tests/queries/tests.py'],Subqueries with distinct on fields are not retaining the order as expected.
211486f3ab5602cdc332f03cd03fad3cb929d154,1444666466,"Fixed #23076, #25505 -- Fixed deletion of intermediate proxy models.

Thanks to James Murty for his work on an alternate patch.
","['django/db/models/deletion.py', 'tests/proxy_model_inheritance/models.py', 'tests/proxy_model_inheritance/tests.py']",'Deletion of intermediate proxy models is not functioning correctly.'
9f6b704769ba5bc0daafc25340d3dc28b18d8fb1,1443727179,"Fixed #21042 -- Allowed accessing FileDescriptor on the model class.

This is consistent with ability to reference other descriptors
on the model class (5ef0c03ae9aca99289737ba6d88a371ad95cf432).
","['django/db/models/fields/files.py', 'tests/file_storage/tests.py']",Inability to access FileDescriptor on a model class despite other descriptors being accessible.
e26a7a8ef41f0d69951affb21655cdc2cf94a209,1600944761,"Fixed #27906 -- Fixed test tools counting of HTML matches for subsets of elements.

Previously examples such as '<a/><b/>' would not match in '<a/><b/><c/>'.
","['django/test/html.py', 'tests/test_utils/tests.py']",The test tools counting of HTML matches incorrectly counts subsets of elements. Scenario such as '<a/><b/>' doesn't match in '<a/><b/><c/>'.
5708327c3769262b845730996ca2784245ada4d1,1575630704,"Fixed #23433 -- Deprecated django-admin.py entry point in favor of django-admin.

Unify on the entry point created by setuptools entry_points feature.
","['django/bin/django-admin.py', 'tests/admin_scripts/test_django_admin_py.py', 'tests/admin_scripts/tests.py']","The django-admin.py entry point is resulting in inconsistencies, requiring unification with the setuptools entry_points feature."
45466f11f200914cde2a4b5533441b93015ea14e,1686542010,"Removed function call overhead when preparing proxy class for lazy().

We can avoid the function call and assignment overhead which could be
significant when instantiating many lazy objects. It's still easy enough
to read too.
",['django/utils/functional.py'],The preparation of proxy class for lazy() function instigates unnecessary function call and assignment overhead when instantiating multiple lazy objects.
e53495ba3352c2c0fdb6178f2b333c30cb6b5d46,1419782549,"Preserved context class in inclusion_tag.

Previously, when a template was rendered with RequestContext, inclusion
tags were rendered with a plain context, losing additional information
available in the RequestContext.

The (admittedly bizarre) implementation of RequestContext.new() has the
side-effect of not running template context processors, making this
change backwards-compatible.
",['django/template/base.py'],Inclusion tags lose additional information when templates are rendered with RequestContext due to them being rendered with plain context.
9253042d53d61b23b3f727a00c41e8089be73836,1417189875,"Fixed #4444 - Made runserver suppress 'broken pipe' errors

One handler in WSGIServer, to catch the error when raised from
SocketServer.BaseServer's finish_request, and one in WSGIRequestHandler
(by creating a subclass of ServerHandler), to catch the error when
raised in wsgiref.handlers.BaseHandler's finish_response.
",['django/core/servers/basehttp.py'],"'Broken pipe' errors are not suppressed when raised from SocketServer.BaseServer's finish_request or in wsgiref.handlers.BaseHandler's finish_response, causing issues in runserver."
c2bc1cefdcbbf074408f4a4cace88b315cf9d652,1431787332,"Refs #23763 -- Silenced SimpleTestCase.assertRaisesMessage() deprecation warning on Python 3.5.

Deprecation warning was introduced in https://bugs.python.org/issue24134
",['django/test/testcases.py'],Deprecation warning from SimpleTestCase.assertRaisesMessage() on Python 3.5 causing unnecessary noise in logging output.
6e4f7ec8540b2c93b2f5bedb3fe5556e0b757494,1602742662,"Refs #31926 -- Made test_pickle_filteredrelation_m2m do not depend on auto-PK.

This caused failures on CockroachDB that use random rather than serial
pk values.","['tests/queryset_pickle/models.py', 'tests/queryset_pickle/tests.py']","Test 'test_pickle_filteredrelation_m2m' fails on CockroachDB due to dependency on auto-PK, which is problematic with random pk values."
81d69568a675f0fb7f66b9c898dc7fb42f967d58,1590041359,"Made test_once a keyword argument in template_tests.utils.setup().

Replaces the kwargs.get(...) pattern. Helps avoid typos by providing a
better error message in case of misuse.
",['tests/template_tests/utils.py'],"`test_once` argument in `template_tests.utils.setup()` is susceptible to typos with a non-intuitive error message, causing difficulties in identifying and rectifying mistakes.
"
806efe912b846c1fde250c9321d8334b7517cd56,1641383382,"Fixed #33400 -- Added support for msg_prefix and count arguments to assertTemplateUsed()/assertTemplateNotUsed() used as context managers.
","['django/test/testcases.py', 'tests/test_utils/tests.py']",Using assertTemplateUsed() / assertTemplateNotUsed() as context managers lacks support for msg_prefix and count arguments.
df7187d7957f7b94d6f5207e00218a23fe93212e,1410310113,"Fixed #23368 -- Overhauled the Welsh formats.py file.

The only debatable thing here is setting FIRST_DAY_OF_WEEK to 1.
The only examples of calendars I can find in Welsh start on Monday,
for example, the calendar on S4C (the only all Welsh TV station).

http://www.s4c.co.uk/clic/c_clicschedule.shtml
",['django/conf/locale/cy/formats.py'],"The Welsh formats.py file may be inaccurate with FIRST_DAY_OF_WEEK set incorrectly, potentially conflicting with Welsh calendars starting on Monday."
d02a9f0cee84e3d23f676bdf2ab6aadbf4a5bfe8,1673499850,"Fixed thread termination in servers.tests.LiveServerPort on Python 3.10.9+, 3.11.1+, and 3.12+.

Class cleanups registered in TestCase subclasses are no longer called
as TestCase.doClassCleanups() only cleans up the particular class, see

https://github.com/python/cpython/commit/c2102136be569e6fc8ed90181f229b46d07142f8",['tests/servers/tests.py'],Thread termination does not function properly in TestCase subclasses on specific Python versions due to a change in the behavior of TestCase.doClassCleanups().
3d0a0ecd2cc5d7bfe0b53c33255c1b6564c160a4,1497210739,"Refs #23919 -- Removed support for broken Model.__str__() in Model.__repr__().

Returning invalid bytestrings in __str__() is unlikely in Python 3.","['django/db/models/base.py', 'tests/model_regress/models.py', 'tests/model_regress/tests.py']","Broken `Model.__str__()` method is returning invalid bytestrings in Python 3, affecting the functionality of `Model.__repr__()`."
5792e6a88c1444d4ec84abe62077338ad3765b80,1421682746,"Fixed #24163 -- Removed unique constraint after index on MySQL

Thanks Łukasz Harasimowicz for the report.
","['django/db/backends/base/schema.py', 'tests/schema/models.py', 'tests/schema/tests.py']","Unique constraint in MySQL remains after indexing, leading to undesired unique field restrictions."
fa6893e9dbb127d70c1376667c700b71bb987fe0,1580287028,"Removed ""Pocket PC"" from terminal color support function.

Introduced over 13 years ago in 9bea530c33e, Pocket PC was surpassed by
Windows Mobile, then Windows Phone, which has since been retired. The
value ""Pocket PC"" isn't documented as a value for ``sys.platform`` and
it isn't clear whether it ever worked. There are no tests for this.",['django/core/management/color.py'],"The terminal color support function includes an undocumented and potentially non-functional value for ""Pocket PC"", a platform that's long since been retired and surpassed."
80bcbecd4a394f67c1679b077ba79a797c4a57d7,1447963472,"Fixed #19361 -- Added link to object's change form in admin's post-save message.

Thanks Roel Kramer for tests.
","['django/contrib/admin/options.py', 'tests/admin_views/tests.py']",Admin's post-save message is missing a link to the object's change form.
e819a3cd622fe9404b1f5ea7891906c4cdabbb12,1396117557,"Skipped PostGIS version tests when psycopg2 not installed

Refs #22334. Thanks Tim Graham for spotting the issue.
",['django/contrib/gis/tests/tests.py'],Tests for PostGIS version are failing when psycopg2 is not installed.
b43acf22dfa59815a1f4db0558acd98816325f66,1512748789,"Refs #27849 -- Removed empty Q() hack in filtered Aggregate.as_sql().

This required allowing WhereNode to be provided as When(condition).

This was made possible by cf12257db23fa248c89a3da3f718aa01a50ca659.","['django/db/models/aggregates.py', 'django/db/models/expressions.py', 'django/db/models/query_utils.py', 'django/db/models/sql/where.py']","The Aggregate.as_sql() method is improperly using an empty Q() as a workaround in handling filtered aggregates, affecting the structure of SQL queries."
e1253bc26facfa1d0fca161f43925e99c2591ced,1492107601,"Refs #25406 -- Removed exception hiding in MySQL test database creation during --keepdb.

Thanks Adam Johnson, Simon Charette and Tim Graham for reviews.","['django/db/backends/mysql/creation.py', 'tests/backends/test_creation.py']","The MySQL test database creation process during --keepdb action is hiding exceptions, making error tracking challenging."
abd0ad7681422d7c40a5ed12cc3c9ffca6b88422,1534533189,"Fixed #29626, #29584 -- Added optimized versions of get_many() and delete_many() for the db cache backend.
","['django/core/cache/backends/db.py', 'tests/cache/tests.py']",Inefficient versions of get_many() and delete_many() in the db cache backend causing performance issues.
4dc4d12e27e4e0337568651136eee5b6f2171204,1400798116,"Fixed #21598 -- cleaned up template loader overrides in tests

- Template loader overriding is managed with contexts.
- The test loader is a class (function based loaders entered deprecation timeline
  in 1.4).
- Template loader overrider that overrides with test loader added.
","['django/test/utils.py', 'tests/template_tests/tests.py', 'tests/view_tests/tests/test_debug.py', 'tests/view_tests/tests/test_defaults.py']","Template loader overrides in tests are misbehaving, potentially due to deprecated function-based loaders causing management issues."
5f9ad17201981b7160df23747239cf3512a60edd,1647443770,"Fixed #33580 -- Fixed crash when checking support for terminal colors on Wine.

Regression in f1585c54d0242d71cdc63421f751528472b1c9c2.",['django/core/management/color.py'],Checking support for terminal colors on Wine causes the system to crash due to a recent regression.
2848e5d0ce5cf3c31fe87525536093b21d570f69,1668594659,"Refs #34118 -- Used smtplib's context parameter instead of keyfile and certfile.

keyfile and certfile parameters were removed in Python 3.12, see
https://github.com/python/cpython/commit/ef0e72b31d22f780d3a165d7d0471806061fe380",['django/core/mail/backends/smtp.py'],Keyfile and certfile parameters used in smtplib are removed in Python 3.12 which causes incompatibility issues in newer environments.
0fb83f1491b5b8bda49270d3cfdde1f1772f8b58,1413732411,"Made the ping_google command override BaseCommand.handle() rather than execute().

Overriding execute() bypasses the system check framework among other things.
",['django/contrib/sitemaps/management/commands/ping_google.py'],"The `ping_google` command is currently overriding `execute()`, which bypasses the system's check framework, causing potential system integrity issues."
ddf4af885fa3bc69e45781c10afa9e5ed3d90abc,1457584817,"Correct a grammatical error: ""it's related model""

I am no English professor, but ""inheriting its related model"" should not contain an apostrophe.

For reference, see http://theoatmeal.com/comics/apostrophe",['tests/ordering/tests.py'],"There's a grammatical error in the documentation: ""it's related model"" should be ""its related model""."
c914d6cff176ae6bfab2f33a84bcfd45208f1894,1678086496,"Fixed #34386 -- Made SMTP backend load default system root CA certificates by default.

Regression in 2848e5d0ce5cf3c31fe87525536093b21d570f69.
",['django/core/mail/backends/smtp.py'],"The SMTP backend is not loading default system root CA certificates, leading to a regression in the system."
5a3d7cf46205f42303a5f429c388cb507ef5d630,1594288983,"Used urllib.parse.urljoin() in auth_tests to join URLs.

As the strings represent URLs and not paths, should use urllib to
manipulate them.",['tests/auth_tests/test_views.py'],Using string operations instead of urllib for URL manipulation in auth_tests could lead to incorrect URL handling and inconsistencies.
5cb3ed187b283059589cb442c56a66a795800cac,1568811185,"Fixed #30772 -- Optimized make_template_fragment_key().

Removed usage of urllib.quote(), unnecessary since cbbe60c7fc39fa8ff75554bd90104eaad6924bb1.
Used hasher's .update() on key fragments.
","['django/core/cache/utils.py', 'tests/cache/tests.py']","The make_template_fragment_key() function is functioning inefficiently, with unnecessary usage of urllib.quote(), affecting the overall performance."
311401d9a278339795a7ab3f1617c4da9077fdcc,1627016213,"Refs #32902 -- Added CSRF test when rotate_token() is called between resetting the token and processing response.
","['tests/csrf_tests/tests.py', 'tests/csrf_tests/views.py']",There is no CSRF test to handle the situation when rotate_token() is called between resetting the token and processing the response.
2f73b527dda6683868fac2791f7f07ccb01ea0d9,1406460685,"Fixed #23098 -- Checked that lazy choices are not evaluated too soon

Thanks Matthieu Agopian for the report.
","['django/db/models/fields/__init__.py', 'tests/model_fields/tests.py']","Lazy choices in form fields are being evaluated prematurely, potentially leading to incorrect form behavior."
86d9b10dc33cc115fee2ecab40a569354ac55d15,1433591704,"Instead of using DjangoJSONEncoder, use base_field's value_to_string.

Note this means the serialization of e.g. IntegerRangeField now has
strings for lower and upper, so use to_python when they came back in
(same behaviour as ArrayField, hopefully, from where I also got the
set_attributes_from_name function).
","['django/contrib/postgres/fields/array.py', 'django/contrib/postgres/fields/ranges.py', 'django/contrib/postgres/fields/utils.py', 'tests/postgres_tests/test_ranges.py']","The usage of DjangoJSONEncoder is causing issues with the serialization of IntegerRangeField, leading to misrepresentation of lower and upper as strings."
adc57632bc26cc8fe42bdb6aff463f883214980a,1431358947,"Fixed #24748 -- Fixed incorrect GROUP BY on MySQL in some queries

When the query's model had a self-referential foreign key, the
compiler.get_group_by() code incorrectly used the self-referential
foreign key's column (for example parent_id) as GROUP BY clause
when it should have used the model's primary key column (id).
","['django/db/models/sql/compiler.py', 'tests/aggregation_regress/models.py', 'tests/aggregation_regress/tests.py']","When a model has a self-referential foreign key, the get_group_by() method incorrectly uses the foreign key's column for GROUP BY clause instead of model's primary key column."
7def55c3f6716fcfa40a3bd5d0fbb2090588d81e,1466211842,"Reverted ""Fixed #26398 -- Made FieldFile.open() respect its mode argument.""

This reverts commit a52a531a8b34f049fba11c3ee7b010af7534bf90 due to
regressions described in refs #26772.
","['django/db/models/fields/files.py', 'tests/file_storage/tests.py']",The fix for issue #26398 (FieldFile.open() not respecting its mode argument) has resulted in unspecified regressions as reported in #26772.
10e83d48a3b199f9c8c73882be1ded5016f86a1a,1404320496,"Fixed #22935 -- Changed ForeignKey.default_error_messages['invalid'] to refer to correct field.

Thanks Tim Graham for suggestion and review.
","['django/db/models/fields/related.py', 'tests/validation/models.py', 'tests/validation/tests.py']","ForeignKey's default_error_messages references an incorrect field in the 'invalid' key, resulting in misleading error messages."
86988dd890671aa8935f86eab2bbe22ad917db70,1528528748,"Refs #29483 -- Relaxed WGS 84 check regex

With GDAL 2.3, the exact string changed again.
",['tests/gis_tests/gdal_tests/test_ds.py'],The WGS 84 check regex is too strict and fails on legitimate string changes in GDAL 2.3.
87d0a3384cc263fe0df749a28e2fbc1e1240f043,1403113987,"Fixed #22778 -- Added a model Meta option to define default_related_name.

Thanks jorgecarleitao and mmardini for reviews.
","['django/db/models/options.py', 'django/db/models/related.py', 'tests/model_options/models/default_related_name.py', 'tests/model_options/test_default_related_name.py']","There's no way to define a default related_name for relationships in model Meta options, leading to repetitive hard-coded related_names."
d4db417c8e6935222d198925dd4c5ac1ca737909,1659597398,"Fixed #33891 -- Fixed test command crash when running in parallel using spawn.

Thanks Kevin Renskers for the report.

Regression in 41c4cb253c137edf5a96b7408ea55d57d6e0602a.",['django/test/runner.py'],"'Test command crashes when run in parallel using spawn, regression identified in specific commit.'"
4b2f6ace5789768a5734b017b70b3dec31bb000c,1646249019,"Refs #33546 -- Optimized HttpResponseBase.charset a bit.

This avoids scanning the Content-Type if it's empty, allowing the
Content-Type header itself to have a charset assigned without using
the re module.
",['django/http/response.py'],"Scanning an empty Content-Type in HttpResponseBase.charset is causing unnecessary utilization of the re module, and impedes assigning a charset directly to the Content-Type header."
6c9778a58e4f680db180d4cc9dc5639d2ec1b40c,1568799458,"Fixed #30776 -- Restored max length validation on AuthenticationForm.UsernameField.

Regression in 5ceaf14686ce626404afb6a5fbd3d8286410bf13.

Thanks gopackgo90 for the report and Mariusz Felisiak for tests.
","['django/contrib/auth/forms.py', 'tests/auth_tests/test_forms.py']","AuthenticationForm.UsernameField is missing maximum length validation, causing potential issues with excessive long usernames."
f0bb3c98cc9e128cb0c1622be9eb41a26794c91f,1413875817,"Fixed #21740 -- Allowed test client data to be an empty string

This fixes a regression introduced by 2a31d00933.
Thanks tony-zhu for the report.
","['django/test/client.py', 'tests/test_client_regress/tests.py']","Regression caused by 2a31d00933 prevents test client data from being an empty string, disrupting certain testing processes."
cdc25ac4747bf5a6cdc2e70461c2d43c54529d35,1406834986,"Fixed #22808 -- Made ModelMultipleChoiceField validation more robust to invalid data types..

Thanks Mattias Lindvall for the report and inital patch.
","['django/forms/models.py', 'tests/model_forms/tests.py']",ModelMultipleChoiceField validation can fail or behave unpredictably with certain invalid data types.
05964b2198e53a8d66e34d83d9123e3051720b28,1565007395,"Moved indexes in ArrayField's Index and Slice transforms to SQL params.

Follow up to 7deeabc7c7526786df6894429ce89a9c4b614086.

These lookups aren't vulnerable to SQL injection because both accept
only integer indexes. It is a part of good practices.
",['django/contrib/postgres/fields/array.py'],"ArrayField's Index and Slice transforms don't convert indexes to SQL parameters, potentially leading to non-compliance with best practices."
07728a2c2c78b030b7de9c6b20ef028f82d6134a,1419113047,"Refs #2443 -- Fix Oracle tests for DurationField.

It helps if there are the correct number of microseconds in a second.
",['django/db/backends/oracle/base.py'],Oracle tests for DurationField failing due to incorrect number of microseconds in a second.
86971c40909430a798e4e55b140004c4b1fb02ff,1634538323,"Fixed #33194 -- Fixed migrations when altering a field with functional indexes/unique constraints on SQLite.

This adjusts Expressions.rename_table_references() to only update alias
when needed.

Regression in 83fcfc9ec8610540948815e127101f1206562ead.

Co-authored-by: Simon Charette <charettes@users.noreply.github.com>
","['django/db/backends/ddl_references.py', 'tests/backends/test_ddl_references.py', 'tests/migrations/test_operations.py']",Alteration of a field with functional indexes/unique constraints on SQLite in migrations causes faulty behavior due to unnecessary alias update.
26c66f45193fa65125ca06328817927d6bbc2b22,1570607393,"Fixed #30856 -- Combined fast-delete queries by model during cascade deletion.

Reduced the number of queries required when performing cascade deletion
for a model referenced multiple time by another one by performing an
union of reference lookups.
","['django/contrib/admin/utils.py', 'django/db/models/deletion.py', 'tests/delete/tests.py']","Cascade deletion of a model referenced multiple times by another causes excessive number of queries, reducing performance."
058d112ed2635873d415661bdf0fcc8752ec37c9,1514491026,"Refs #27175 -- Removed an obsolete test comment and DEBUG=True.

As of e62165b898785e890661953c3b2c9c36d98aee57, {% include %}
doesn't silence exceptions.
",['tests/generic_inline_admin/tests.py'],"The {% include %} tag does not suppress exceptions even when DEBUG=True, contrary to prior documented behavior."
dd68b51e1da54267bde4799fa0d9fbd4290eb8b5,1524346397,"Fixed #29295 -- Fixed management command crash when using subparsers.

Thanks Tim Graham for the fix.
","['django/core/management/__init__.py', 'django/core/management/base.py', 'tests/user_commands/management/commands/subparser.py', 'tests/user_commands/tests.py']","Management command crashes when using subparsers, causing disruptions in command handling."
3cbb7590cb0ece38f665b516db30cd5a9431f8c8,1409189213,"Fixed #23329 -- Allowed inherited and m2m fields to be referenced in the admin.

Thanks to Trac alias Markush2010 and ross for the detailed reports.
","['django/contrib/admin/options.py', 'tests/admin_views/admin.py', 'tests/admin_views/models.py', 'tests/admin_views/tests.py']",Inherited fields and many-to-many (m2m) fields cannot be referenced in the admin interface.
47927eb786f432cb069f0b00fd810c465a78fd71,1397696602,"Revert ""Fixed #22401 -- Deprecated regular expression parsing of initial SQL in favor of installing sqlparse.""

This reverts commit 071c9337750b296d198cced56f3ffad0e176afb6.

This introduced a regression on MySQL and custom SQL is deprecated.
",['django/core/management/sql.py'],Regression issue with MySQL and custom SQL following the update that deprecated regular expression parsing of initial SQL in favor of sqlparse.
586a9dc4295357de1f5ad0590ad34bf2bc008f79,1534954049,"Fixed #26352 -- Made system check allow ManyToManyField to target the same model if through_fields differs.
","['django/db/models/base.py', 'tests/invalid_models_tests/test_models.py']",System check incorrectly disallows ManyToManyField to target the same model even when 'through_fields' differs.
0d67481a6664a1e66d875eef59b96ed489060601,1622036262,"Fixed #32762 -- Fixed locale reset in compilemessages test.

Reset the `LC_ALL` override value in the test environment to ensure that locale
values the calling environment are not used.
",['tests/i18n/test_compilation.py'],"The test environment for compilemessages is not resetting the `LC_ALL` override value, causing unexpected usage of locale values from the calling environment."
4b67e8dc75b50073a80239569016936f10a95ded,1503763244,"Complemented datetime picker selenium test

This includes test coverage for the calendarMonth JS function in calendar.js
",['tests/admin_widgets/tests.py'],Lack of test coverage for the 'calendarMonth' JS function in 'calendar.js' used in the datetime picker.
fde6fb28984a76d5bee794f4c0458eb25fe56fcd,1625136152,"Fixed #32893 -- Fixed serialization of models.Model class in migrations.

Migrations assumed that an import of the models.Model class must
already be included when it's serialized, but for models with only
custom fields this was not necessarily the case.

Thanks Jaap Joris Vens for the report.
","['django/db/migrations/serializer.py', 'tests/migrations/test_writer.py']","Migrations incorrectly assume an import of the models.Model class, not considering models with only custom fields. This results in flawed serialization."
51c24d8799fb09f04d0a5deb713eaeceb20d15c7,1637823439,"Fixed #33024 -- Fixed height of admin selector boxes in collapsed fieldset.

Thanks Tom Carrick for the review.
","['django/contrib/admin/static/admin/js/SelectFilter2.js', 'js_tests/admin/SelectFilter2.test.js', 'tests/admin_views/admin.py', 'tests/admin_views/tests.py']",The admin selector boxes in collapsed fieldset are not displaying at the correct height.
c335c0fee92a658b6a09453ae73e5c542f10703a,1416949895,"Fixed #23914 -- Improved {% now %} to allow storing its result in the context.

Thanks to Tim for the review.
","['django/template/defaulttags.py', 'tests/template_tests/tests.py']","The {% now %} template tag doesn't provide the option to store its result in the context, resulting in limitations for later use in the rendering process."
2e67e80fbe0accd5f256415ac28af8bd82eeaced,1586284919,"Refs #31051 -- Made dumpdata do not sort dependencies if natural foreign keys are not used.

There is no need to sort dependencies when natural foreign keys are not
used.
",['django/core/management/commands/dumpdata.py'],The `dumpdata` command is unnecessarily sorting dependencies even when natural foreign keys are not being utilized.
2cbb095bec757b804e8b6d9d0930ef3c6446a591,1495745241,"Fixed #28221 -- Fixed plural fallback translations in JavaScriptCatalog view

Thanks Waldemar Kornewald for the report and initial patch.
","['django/views/i18n.py', 'tests/view_tests/tests/test_i18n.py']",The JavaScriptCatalog view is not correctly applying plural fallback translations.
a80d70dd10f3c7d483579734e524c94c62832070,1447717772,"Refs #23751 -- Added some unicode characters to the latex preamble.

Thanks Graham Wideman for the patch.
",['docs/conf.py'],Latex preamble lacks support for some unicode characters.
241ba23870221085cc31ae302b9647f375f9c6c6,1634044779,"Refs #29470 -- Added makemigrations test for adding fields with no default and auto_now_add=True in non-interactive mode.
",['tests/migrations/test_commands.py'],Non-interactive mode of 'makemigrations' handling fields with no default and 'auto_now_add=True' produces unexpected behavior and needs testing.
9a2aca60304dc2e98f9ef45636e129d225cb981f,1447352693,"Fixed #25743 -- Optimized utils.localize() and localize_input()

Bail early if the input is a string since that's the most common case.
",['django/utils/formats.py'],The utils.localize() and localize_input() functions are inefficient and do not bail early if input is a common case string.
2ccfac1a651ff35cd243cd272b2202ae1ccd5740,1443051071,"Refs #23913 -- Removed support for a single equals sign in {% if %} tag.

Per deprecation timeline.
","['django/template/smartif.py', 'tests/template_tests/syntax_tests/test_if.py']",The single equals sign in {% if %} tag is currently supported but deprecated.
c754bdc45bdcd9b2a03d4e3e10ea2a742456de91,1502217523,"Refs #7070 -- Improved test for extra(), values(), distinct() and ordering() all together.

Tested that the extra select that appears in the select clause only because of
distinct() and order_by() doesn't appear in the result values.",['tests/extra_regress/tests.py'],"Extra select clauses appear in the result values when used with distinct() and order_by(), which should not be the case."
994a00eb70969e4fd8f7a30a95122e2f0411ff48,1555841825,"Refs #30380 -- Used cursor._executed in DatabaseOperations.last_executed_query() on MySQL.

Regression in a41b09266dcdd01036d59d76fe926fe0386aaade.

Thanks Tobias Krönke for the report.",['django/db/backends/mysql/operations.py'],"Cursor._executed is not correctly utilized in DatabaseOperations.last_executed_query() on MySQL, leading to a regression."
de2c2127b66e77a034c01c81753c5c08e651a5b4,1666855414,"Fixed #34066 -- Fixed link to password reset view in UserChangeForm.password's help text when using to_field.

Co-Authored-By: David Sanders <shang.xiao.sanders@gmail.com>
Co-Authored-By: Mariusz Felisiak <felisiak.mariusz@gmail.com>
","['django/contrib/auth/forms.py', 'tests/auth_tests/test_forms.py']",The link to password reset view in UserChangeForm.password's help text is incorrect when using to_field.
5dcdbe95c749d36072f527e120a8cb463199ae0d,1405363803,"Fixed #23005 -- Allowed specifying special fallback languages

This fixes the Chinese language issues described in #23005 but
also provides for other fallback exceptions by updating the
LANG_INFO structure.
Thanks caxekis at gmail.com for the report and Tim Graham for the
review.
","['django/conf/locale/__init__.py', 'django/utils/translation/__init__.py', 'django/utils/translation/trans_real.py', 'tests/i18n/tests.py']","Currently, there is no way to specify special fallback languages, causing issues with certain languages like Chinese."
7937cc16f5fafb33a53b9a9ff286229fcc5ba67f,1502407274,"Fixed #28386 -- Made operations within non-atomic migrations honor the operation's atomic flag when migrating backwards.
","['django/db/migrations/migration.py', 'tests/migrations/test_executor.py', 'tests/migrations/test_migrations_atomic_operation/0001_initial.py', 'tests/migrations/test_operations.py']",Operations within non-atomic migrations don't respect the operation's atomic flag when migrating in the reverse direction.
f71b0cf769d9ac582ee3d1a8c33d73dad3a770da,1664787141,"Refs #32987 -- Relaxed system check for template tag modules with the same name by turning into a warning.

Thanks Claude Paroz for the report.

Regression in 004b4620f6f4ad87261e149898940f2dcd5757ef.","['django/core/checks/templates.py', 'tests/check_framework/test_templates.py']","System check erroneously fails for template tag modules having the same name, instead of issuing a warning."
e023ceb453c02e271d00f9ac25e154b7be712bb0,1417172406,"Fixed #23910 -- Added reply_to parameter to EmailMessage

Thanks to Berker Peksag and Tim Graham for the review and suggestions.
","['django/core/mail/message.py', 'tests/mail/tests.py']","EmailMessage does not have a reply_to parameter, causing issues with email reply functionality."
3b4a571275d967512866012955eb0b3ae486d63c,1697427450,"Fixed #34798 -- Fixed QuerySet.aggregate() crash when referencing expressions containing subqueries.

Regression in 59bea9efd2768102fc9d3aedda469502c218e9b7,
complements e5c844d6f2a4ac6ae674d741b5f1fa2a688cedf4.

Refs #28477, #34551.

Thanks Haldun Komsuoglu for the report.
","['django/db/models/expressions.py', 'django/db/models/sql/query.py', 'tests/aggregation/tests.py']",QuerySet.aggregate() crashes when it tries to handle expressions that contain subqueries.
1960d55f8baa412b43546d15a8342554808fff57,1578034024,"Refs #31040 -- Fixed crypt.crypt() call in test_hashers.py.

An empty string is invalid salt in Python 3 and raises exception since
Python 3.9, see https://bugs.python.org/issue38402.",['tests/auth_tests/test_hashers.py'],Passing an empty string as salt in crypt.crypt() call in test_hashers.py raises an exception in Python 3.9 due to it being considered as invalid.
3e71f6544feca490211e88db4f449dfdb7acce39,1468521476,"Fixed #26897 -- Fixed makemessages crash on Python 2 with non-ASCII file names

Thanks Tim Graham for the review.
","['django/core/management/commands/makemessages.py', 'tests/i18n/test_extraction.py']",'makemessages' function crashes on Python 2 when dealing with non-ASCII file names.
0808ccce3808235c5b5a56e3f689cec0d4bc0ebf,1427907739,"Fixed #23441, #24555 -- Improved the behavior of InclusionNode.

This change:

* Makes the InclusionNode cache-safe by removing render-time side effects
  to its nodelist.
* Ensures the render_context stack is properly scoped and reset by updating
  the render call to use Template.render rather than Nodelist.render.
","['django/template/base.py', 'tests/template_tests/templatetags/inclusion.py', 'tests/template_tests/test_custom.py']","InclusionNode exhibits render-time side effects impacting its cachability, and improper scoping and resetting of render_context stack due to use of Nodelist.render in lieu of Template.render."
67eee5e4fa08f4404445ebf4f54b686e68a8530c,1475345667,"Fixed #27302 -- Fixed ModelAdmin.construct_change_message() changed field detection

Thanks Ramiro Morales for the report and Tim Graham for the review.
","['django/contrib/admin/options.py', 'tests/admin_utils/test_logentry.py']",The function ModelAdmin.construct_change_message() incorrectly detects changed fields.
3a297d78169b7d3c6d688cf0e349f4663acc6bad,1409404020,"Fixed #23055 -- Made generic admin filter obey ModelAdmin queryset.

Thanks to Trac user synasius and to Ola Sitarska for helping in
identifying the issue and helping with the test case.
","['django/contrib/admin/filters.py', 'tests/admin_filters/tests.py']","Generic admin filter does not respect ModelAdmin queryset, resulting in unexpected filtering outcomes."
0851933cba7b40e22f5e424c95763dbc27c40aa9,1621243295,"Fixed #32720 -- Added configuration and docs for Sphinx link checker.

We explicitly ignore checking anchors for line-range anchors on GitHub
which are dynamically generated and, otherwise, show up as broken links.

See https://github.com/sphinx-doc/sphinx/issues/7388#issuecomment-739961689.

We also ignore links to resources that require authentication.
",['docs/conf.py'],"Sphinx link checker produces false positives for dynamically generated anchors on GitHub and authenticated resource links, identifying them as broken."
dfa712efb8b90c953d850136804ca970fa25b2a5,1440874164,"Refactored autoreload tests.

* Added helpers to test uncached and cached access.
* Fixed test_project_root_locale: it duplicated test_locale_paths_setting.
* Rewrote test_only_new_files: test more cases.
",['tests/utils_tests/test_autoreload.py'],"Autoreload tests lack helper functions for uncached and cached access. The test_project_root_locale duplicates another test, and test_only_new_files needs to cover more scenarios."
eb7b8f3699fbe5ad6aaafb264355741648fdd5e4,1656389082,"Fixed #33805 -- Made admin's many-to-many widgets do not display help text for selecting values when allow_multiple_selected is False.
","['django/contrib/admin/options.py', 'tests/admin_widgets/tests.py']",Admin's many-to-many widgets incorrectly display help text for selecting multiple values even when allow_multiple_selected is set to False.
ed3c59097a01ed3f32f8a8bed95307fb5c181251,1556276149,"Fixed #30361 -- Increased the default timeout of watchman client to 5 seconds and made it customizable.

Made the default timeout of watchman client customizable via
DJANGO_WATCHMAN_TIMEOUT environment variable.
","['django/utils/autoreload.py', 'tests/utils_tests/test_autoreload.py']",The default timeout for the watchman client may be too short for certain use cases and isn't currently customizable.
aa12ea05cee4af5f2655ed9526ad9852419cc82e,1402035935,"Rewrote migration autodetector to involve actual computer science.

Fixes #22605, #22735; also lays the ground for some other fixes.
","['django/db/migrations/autodetector.py', 'django/db/migrations/optimizer.py', 'tests/migrations/test_autodetector.py']","Existing migration autodetector has issue in identifying necessary migrations, opening up possibility for unsuccessful or errant database transfers."
2ac7cd52b466e5090c0479de02c4765b4c483fa3,1532638155,"Refs #29600 -- Removed datetime_safe usage in feedgenerator.

The only effect would be if items in Atom feeds had a published date
year of < 1000 (ensuring those years are padded with leading zeros).",['django/utils/feedgenerator.py'],Atom feed items with a published date year of <1000 are not properly padded with leading zeros.
60dc957a825232fdda9138e2f8878b2ca407a7c9,1563860707,"Removed unnecessary code in Model.__init__().

As is_related_object is True, the val variable is unused for the
remainder of the method.

Unnecessary since 53da1e47942f22a56e761d786ba89d05ca55a224.",['django/db/models/base.py'],"Unused 'val' variable in Model.__init__() persists when 'is_related_object' is True, creating unnecessary lines of code."
eaf4d8c0d85056c3481986fe092d5a8786bc4f26,1433634026,"Fixed #24922 -- Added system check for templates setting

If `'loaders'` is present in the `TEMPLATES` options together with
`APP_DIRS` set to `True`, the template engine raises an exception. This
conflict is now detected by the system check templates.E001.
","['django/core/checks/__init__.py', 'django/core/checks/registry.py', 'django/core/checks/templates.py', 'tests/check_framework/test_templates.py']","Presence of 'loaders' in TEMPLATES options with APP_DIRS set to True, is causing the template engine to raise an exception."
10781b4c6ff981f581157957d221e7621e0bf4ed,1456402713,"Fixed #12233 -- Allowed redirecting authenticated users away from the login view.

contrib.auth.views.login() has a new parameter `redirect_authenticated_user`
to automatically redirect authenticated users visiting the login page.

Thanks to dmathieu and Alex Buchanan for the original code and to Carl Meyer
for the help and review.
","['django/contrib/auth/views.py', 'tests/auth_tests/test_views.py', 'tests/auth_tests/urls.py']","Authenticated users visiting the login page are not automatically redirected, causing unnecessary traffic to the login view."
c87540cee5a3d5b676b9359c01bdea35f733aabb,1451577423,"Fixed #26011 -- Prevented random LiveServerTestCase test failures on Windows.

Prevented LiveServerTestCase from stealing ports used by concurrent
processes on Windows.
","['django/core/servers/basehttp.py', 'django/test/testcases.py', 'tests/servers/tests.py']",Concurrent processes on Windows are causing random test failures in LiveServerTestCase due to port conflicts.
cbb6531e5bef7ffe0c46d6c44d598d7bcdf9029e,1582018343,"Fixed #31228 -- Reallowed aggregates to be used with multiple expressions and no DISTINCT on SQLite.

Regression in bc05547cd8c1dd511c6b6a6c873a1bc63417b111.

Thanks Andy Terra for the report.
","['django/db/backends/sqlite3/operations.py', 'tests/backends/sqlite/tests.py']",SQLite aggregates are not functioning properly with multiple expressions and without DISTINCT due to recent regression.
58df8aa40fe88f753ba79e091a52f236246260b3,1558680025,"Fixed #28780 -- Allowed specyfing a token parameter displayed in password reset URLs.

Co-authored-by: Tim Givois <tim.givois.mendez@gmail.com>
","['django/contrib/auth/views.py', 'tests/auth_tests/client.py', 'tests/auth_tests/test_views.py', 'tests/auth_tests/urls.py']",Inability to specify a token parameter displayed in password reset URLs leading to potential security and user experience concerns.
6eb3f53bdd5089e3ab229780fe339fecfc30a7ee,1601489438,"Fixed #32047 -- Fixed call_command() crash if a constant option from required mutually exclusive group is passed in options.
","['django/core/management/__init__.py', 'tests/user_commands/management/commands/mutually_exclusive_required.py', 'tests/user_commands/tests.py']",The call_command() function crashes when a constant option from a required mutually exclusive group is passed in options.
3738e4ac46688a0f13139c0b9058fc81c1aac424,1450401904,"Fixed #25841 -- Handled base array fields validation errors with params.

Thanks to Trac alias benzid-wael for the report.
","['django/contrib/postgres/fields/array.py', 'django/contrib/postgres/forms/array.py', 'django/contrib/postgres/utils.py', 'tests/postgres_tests/test_array.py']","Base array field validation errors are not being handled properly when parameters are involved, which leads to incorrect or incomplete validation."
8ed024b9b9ca4491fcb17cb15b3b5f18a8f60ff8,1605244633,"Refs #32120 -- Fixed test_add_inline_fk_index_update_data for DatabaseFeatures.indexes_foreign_keys.

This test creates an index with editor.add_index() so it's present
regardless of the database's behavior. Reverted the change from
ede9fac75807fe5810df66280a60e7068cc97e4a.",['tests/schema/tests.py'],The test_add_inline_fk_index_update_data does not function correctly for Databases with indexes_foreign_keys feature due to a change in index creation behaviour.
30a01441347d5a2146af2944b29778fa0834d4be,1642438867,"Fixed #29338 -- Allowed using combined queryset in Subquery.

Thanks Eugene Kovalev for the initial patch, Simon Charette for the
review, and Chetan Khanna for help.","['django/db/models/sql/compiler.py', 'django/db/models/sql/query.py', 'tests/queries/test_qs_combinators.py']","When trying to use a combined queryset in Subquery, it's not allowed, causing an error."
7b8fa1653fde578ab3a496d9974ab1d4261b8b26,1583231137,"Fixed #31150 -- Included subqueries that reference related fields in GROUP BY clauses.

Thanks Johannes Hoppe for the report.

Regression in fb3f034f1c63160c0ff13c609acd01c18be12f80.

Co-authored-by: Simon Charette <charette.s@gmail.com>
","['django/db/models/expressions.py', 'tests/aggregation/tests.py']","Subqueries referencing related fields are not being included in GROUP BY clauses, leading to regression."
05cea7fdbbcd7bdcdc8d8162d95b1dd5d8195913,1441832631,"Changed database connection duplication technique.

This new technique is more straightforward and compatible with test
parallelization, where the effective database connection settings no
longer match settings.DATABASES.
","['django/db/backends/base/base.py', 'tests/backends/tests.py', 'tests/delete_regress/tests.py', 'tests/select_for_update/tests.py']","Database connection duplication technique is not compatible with test parallelization as it fails to match settings.DATABASES, leading to ineffective connection settings."
3bac904607f1999136b97249d9aa220f1db94258,1420276400,"Removed extraneous super call in LiveServerTestCase

Refs #21281. Thanks Tim Graham and Thomas Chaumeny for investigations.
",['django/test/testcases.py'],"Unnecessary super call present in LiveServerTestCase, possibly leading to unexpected behaviour or performance issues."
518ce7a51f994fc0585d31c4553e2072bf816f76,1629450321,"Fixed #33017 -- Fixed storage engine introspection on MySQL.

This also improves performance on MySQL instances with a large number
of databases, since querying the information_schema table can be very
slow
","['django/db/backends/mysql/introspection.py', 'tests/backends/mysql/test_introspection.py']",MySQL instances with a large number of databases suffer from performance degradation due to slow queries on the information_schema table during storage engine introspection.
cbae4d31847d75d889815bfe7c04af035f45e28d,1478985502,"Fixed #27448 -- Switched use of functions deprecated in PostGIS 2.2.

Thanks Claude Paroz and Tim Graham for reviews, and
Mjumbe Wawatu Poe for the initial regression test.","['django/contrib/gis/db/backends/postgis/operations.py', 'django/contrib/gis/db/models/functions.py', 'tests/gis_tests/tests.py']",Use of deprecated functions in PostGIS 2.2 causing potential app instability and regression issues.
8b2c1ac06d3d1cf99661f4af75030abb456e1665,1390937955,"Added tests for m2m queries with custom pk on the end models

It seems this case was fixed somewhere between 1.5.x and 1.6.x. I added
tests as I wasn't able to find any tests for these cases. Refs #21879
","['tests/queries/models.py', 'tests/queries/tests.py']",Many-to-many queries with custom primary key on the end models lacks necessary test cases to ensure functionality.
ed532a6a1ee675432940e69cec866b52aca96575,1397836535,"Fixed #22399 -- Forced fixture reading in binary mode

This might help on systems where default encoding is not UTF-8 (and
on Python 3).
Thanks bacilla for the report.
",['django/core/management/commands/loaddata.py'],"Fixture reading might fail or cause issues on systems with default encoding not set to UTF-8, especially on Python 3."
2a66c102d9c674fadab252a28d8def32a8b626ec,1641643555,"Fixed #33425 -- Fixed view name for CBVs on technical 404 debug page.

Regression in 0c0b87725bbcffca3bc3a7a2c649995695a5ae3b.
","['django/views/debug.py', 'tests/view_tests/tests/test_debug.py']",Technical 404 debug page displays incorrect view name for Class-Based Views (CBVs) due to a regression.
316b8d49746933d1845d600314b002d9b64d3e3d,1421172185,"Stripped headers containing underscores to prevent spoofing in WSGI environ.

This is a security fix. Disclosure following shortly.

Thanks to Jedediah Smith for the report.
","['django/core/servers/basehttp.py', 'tests/servers/test_basehttp.py']",Headers containing underscores potentially lead to spoofing attacks in WSGI environment.
89c27d867252d7c81be3de7184578db1934a9318,1685937413,"Fixed #34601 -- Added field name to check message for ModelAdmin.readonly_fields.

Co-authored-by: Rick van Hattem <wolph@wol.ph>","['django/contrib/admin/checks.py', 'tests/admin_checks/tests.py']","ModelAdmin.readonly_fields check messages lack specificity, making it unclear which field is causing the error."
bfe0d54514bf4f03bc4a956452541f0103134ba3,1484704323,"Refs #26230 -- Removed support for model name query lookups when using Meta.default_related_name.

Per deprecation timeline.
","['django/db/models/sql/query.py', 'tests/model_options/test_default_related_name.py']",Using model name query lookups in conjunction with `Meta.default_related_name` is not supported and can lead to unexpected behaviors.
1e280f031eb679520ebe2a90d136920711caae29,1549372463,"Removed unused branch from SymlinkExtractorTests.test_symlink().

Unused since bb7bb379e8cd91a91336946829519d64e919a1d2.
SymlinkExtractorTests.test_dir, which contains
SymlinkExtractorTests.symlinked_dir, is deleted after every test.",['tests/i18n/test_extraction.py'],"SymlinkExtractorTests.test_symlink() contains an unused branch, likely causing inefficiency in testing procedures."
a973fb2d68f2e23e599a601fdaec13d129207e9f,1416926852,"Fixed and restored assertions in OneToOneTests.test_foreign_key.

These assertions had been removed in 34ba86706f and 7fe554b2a3,
seemingly because they were referencing the wrong objects, and so
they started failing when the checking of object types (as well as
PK values) was introduced.
",['tests/one_to_one/tests.py'],Assertions in OneToOneTests.test_foreign_key are referencing wrong objects causing tests to fail after the introduction of object types and PK values checking.
a9874d48b1b9d91988b9f299726ec4f559fb2f75,1494551092,"Fixed #28188 -- Fixed crash when pickling model fields.

Regression in d2a26c1a90e837777dabdf3d67ceec4d2a70fb86.

Thanks Adam Alton for the report and test, and Adam Johnson for
suggesting the fix.","['django/db/models/fields/__init__.py', 'tests/model_fields/tests.py']",Pickling model fields is leading to unexpected crashes due to a regression.
972000420e08703dd4981466ff67adcd5a61ad4b,1590387289,"Fixed #31624 -- Avoided subquery usage on QuerySet.all().delete().

Thanks Adam Johnson for the report.

Regression in 7acef095d73322f45dcceb99afa1a4e50b520479.
","['django/db/models/sql/compiler.py', 'tests/delete/tests.py']","Using QuerySet.all().delete() triggers subquery usage, causing performance issues."
2e55790838a75bf25a11115536dae57880cfccfb,1484393494,"Refs #25226 -- Cloned ArrayField.base_field on deconstruction.

This prevents the base_field from sharing attributes with the one used
during migrations.","['django/contrib/postgres/fields/array.py', 'tests/postgres_tests/test_array.py']",`ArrayField.base_field` is sharing attributes with the one used during migrations leading to undesired attribute carryovers.
4e424084e6d796f7ed5f215330cd0b98287c1300,1405411074,"Fixed #22991 -- Prevented *.pyc files in autoreload monitoring

This fixes a regression introduced in 6d302f639.
Thanks lorinkoz at gmail.com for the report, Collin Anderson
for the initial patch and Simon Charette for the review.
","['django/utils/autoreload.py', 'tests/utils_tests/test_autoreload.py']",Regression in autoreload monitoring leads to unnecessary inclusion of *.pyc files.
fea9cb46aacc73cabac883a806ccb7fdc1f979dd,1503346453,"Fixed #28375 -- Fixed KeyError crash on reverse prefetch of a model with OneToOneField primary key to a non-pk field.
","['django/db/models/fields/related_descriptors.py', 'tests/prefetch_related/models.py', 'tests/prefetch_related/tests.py']",Reverse prefetching of a model with a OneToOneField primary key linked to a non-primary key field results in a KeyError crash.
eb4724a0632928bda2a512a9117a91260096e457,1493386235,"Reverted ""Refs #20939 -- Moved subquery ordering clearing optimization to the __in lookup.""

This reverts commit e62ea0bb9cbb54c1eef848871fe3eab2bad268dc since it
broke multi-column __in lookups and _meta.order_wrt on Oracle.","['django/db/models/lookups.py', 'django/db/models/sql/query.py']",The ordering clearing optimization in the __in lookup breaks multi-column __in lookups and _meta.order_wrt when used on Oracle.
3d62ddb02695cfafc847951b45e6e1ec5dc0b149,1582699879,"Refs #3254 -- Removed unnecessary truth check in SearchVectorExact.as_sql().

Direct usage of the @@ operator is perfectly allowed.
",['django/contrib/postgres/search.py'],Unnecessary truth check in SearchVectorExact.as_sql() potentially leads to inefficient SQL operation.
c2c27867ef1d4ad32369f8cda42a6d72b262cae5,1572443032,"Refs #20456 -- Moved initialization of HEAD method based on GET to the View.setup() for generic views.

This will ease unit testing of views since setup will essentially do
everything needed to set the view instance up (other than instantiating
it). Credit for idea goes to Vincent Prouillet.
","['django/views/generic/base.py', 'tests/generic_views/test_base.py']","Initialization of HEAD method based on GET is not located in the View.setup() for generic views, complicating unit testing of these views."
aef2a0ec59301022354c043744a6a2fa13583aa1,1435580179,"Fixed #25018 -- Changed simple_tag to apply conditional_escape() to its output.

This is a security hardening fix to help prevent XSS (and incorrect HTML)
for the common use case of simple_tag.

Thanks to Tim Graham for the review.
","['django/template/library.py', 'tests/admin_views/tests.py', 'tests/template_tests/templatetags/custom.py', 'tests/template_tests/test_custom.py']",'Potential XSS and incorrect HTML due to lack of escaping in the output of simple_tag function.'
222699d224ee7851e1cab5ecc029cf83836b882b,1418664355,"Refs #23947 -- Fixed queries test execution order dependency.

Specify an id to avoid conflict with objects created in setUpTestData.
",['tests/queries/tests.py'],Objects created in setUpTestData causing conflicts with queries test due to execution order dependency.
d70432deae847deb1e7760d2a9e4e9877d329ce8,1501703807,"Refs #7697 -- Tested escaping of safe strings in the technical 500 debug view.

Tests were omitted in the original commit: a56a226241f5808b2eaf1e4b5a155d35047b8a06.",['tests/view_tests/tests/test_debug.py'],"Safe strings in the technical 500 debug view are not being properly escaped, leading to potential rendering issues or security risks. No tests currently exist for this functionality."
c8b3fbe21b09937b57e96dbddcc71946da246a2f,1449706324,"Refs #25896 -- Fixed migration test failure on Oracle

The test creates and deletes a model in the same migration, and the model
had an AutoField. On Oracle, AutoField's are set up using deferred SQL, which
in this case was trying to modify a table after it had dbeen removed.
",['tests/migrations/test_operations.py'],"Model creation and deletion in the same migration fails on Oracle when the model includes an AutoField, due to deferred SQL attempting to modify a removed table."
f5123c7291e855713b59e739bad0e50a1d50d3ef,1392041609,"Fixed #21371 -- Added the block.super to admin bodyclass blocks.

Thanks Keryn Knight for the report.
",['tests/admin_views/tests.py'],Admin bodyclass blocks are missing block.super feature leading to potential styling and layout issues.
1e655d35ad7540ea557c532ebc72a9acc407df50,1621017904,"Refs #32317 -- Cleaned up try/except blocks in loaddata command.

This moves code unable to trigger relevant exceptions outside of
try/except blocks, and changes 'objects' to 'objects_in_fixture'
which is equal to the length of 'objects'.
",['django/core/management/commands/loaddata.py'],Relevant exceptions in 'loaddata' command are not triggered properly and naming confusion exists between 'objects' and 'objects_in_fixture'.
35cecb1ebd0ccda0be7a518d1b7273333d26fbae,1391532486,"Fixed #21748 -- join promotion for negated AND conditions

Made sure Django treats case .filter(NOT (a AND b)) the same way as
.filter((NOT a OR NOT b)) for join promotion.
","['django/db/models/sql/query.py', 'tests/queries/tests.py']",Django doesn't uniformly handle .filter(NOT (a AND b)) and .filter((NOT a OR NOT b)) conditions for join promotion.
70499b25c708557fb9ee2264686cd172f4b2354e,1668505699,"Fixed #34123 -- Fixed combinator order by alias when using select_related().

Regression in c58a8acd413ccc992dd30afd98ed900897e1f719.

Thanks to Shai Berger for the report and tests.

Co-Authored-By: David Sanders <shang.xiao.sanders@gmail.com>
","['django/db/models/sql/compiler.py', 'tests/queries/test_qs_combinators.py']",Regression causing combinator order by alias to malfunction when using select_related().
868ff4e37c1e4cfaf7283496c24f6e711ad66005,1402430683,"Fixed #22798 -- `pluralize()` now adds plural_suffix for any `1 < d < 2`

Thanks Odd_Bloke for the report.
","['django/template/defaultfilters.py', 'tests/defaultfilters/tests.py']",The `pluralize()` function is not adding plural_suffix for fractional numbers between 1 and 2.
deb607648ed7d484a90474b6da48642b4f39bca7,1417178919,"Fixed #23728 -- Added the --exit option to makemigrations.

If no changes that need migrations are found, `makemigrations --exit`
exits with error code 1.
","['django/core/management/commands/makemigrations.py', 'tests/migrations/test_commands.py']",`makemigrations --exit` command incorrectly exits with an error code 1 when no changes that require migrations are found.
ff55adbd0da6618abaf265d16196bf54f81aa77a,1595394246,"Reverted ""Fixed #30300 -- Allowed migrations to be loaded from directories without __init__.py file.""

This reverts commit 3cd3bebe8921e14b911b36b2a1cbceef8fb6294e.","['django/db/migrations/loader.py', 'tests/migrations/test_loader.py']",Migrations cannot be loaded from directories missing an __init__.py file.
fd5897193f0bd8fa211885be5726f8e5613f3c08,1404138357,"Fixed problem with refs #10811.

When 'to_field' is specified with a FK, then we need to check the pk value
the object.
","['django/db/models/fields/related.py', 'tests/many_to_one_regress/models.py', 'tests/many_to_one_regress/tests.py']","When 'to_field' is specified with a Foreign Key (FK), checking the primary key (pk) value of the object becomes problematic."
1711c509faf3111bdf5a3a860b2cd01c0dc5d233,1571394171,"Fixed #27391 -- Implemented SimpleTestCase.debug().

debug() should bubbled up exceptions if occurring in test, but behave
the same as run() when no exceptions occurred.
","['django/test/testcases.py', 'tests/test_utils/test_simpletestcase.py']","SimpleTestCase.debug() not correctly handling exceptions, failing to bubble them up when they occur in tests."
8ab2ae44045478f7ece696385f432fe83f84e4c0,1499960460,"Removed unneeded index check in LineString._set_single() as index is already checked in __getitem__().

Unneeded since its introduction in 66e1670efae34d721e374788e4c3f8b5fe5fa481.",['django/contrib/gis/geos/linestring.py'],"Redundant index check in LineString._set_single() causing inefficiency, as index is already verified in __getitem__()."
544a716da8e2ee774dc4ae4baecfc86b07c69820,1416739891,"Removed unused API get_template_loaders.

It was introduced in a recent refactoring so this isn't an issue.

Then renamed _get_template_loaders to get_template_loaders.
","['django/template/engine.py', 'django/template/loaders/cached.py', 'django/template/loaders/utils.py']",Unused API 'get_template_loaders' left in the code from a recent refactoring which could cause unnecessary clutter.
9a9e22832166594e3561fa1911dd255a2fb09b2b,1491056343,"Fixed #27848 -- Prevented crash when attaching a .eml file to a message

Thanks Sébastien Ramage for the report.
","['django/core/mail/message.py', 'tests/mail/tests.py']",Attachment of a .eml file to a message results in an application crash.
63ff4177467fbcceedf9c87e9cab4ae31a4ce119,1413039408,"Fixed a tuple/int comparison in spatialite backend

On Python 3, comparing tuple with int raises a TypeError.
",['django/contrib/gis/db/backends/spatialite/operations.py'],Tuple/int comparison in spatialite backend on Python 3 is causing a TypeError.
09b3e46635da8048ac94ddbf058e37ec9ef31400,1503522318,"Fixed #27796 -- Prevented middleware being loaded twice with runserver

Thanks Tim Graham for the review.
","['django/contrib/staticfiles/handlers.py', 'tests/staticfiles_tests/test_management.py']","The middleware module gets loaded twice when using the runserver command, causing potential redundancy and performance issues."
bad6280c4e3f75f3ccd27f8fd85a4043bb296128,1424179198,"Refs #24324 -- Fixed get_app_template_dirs() UnicodeDecodeError on Python 2.

The function implemented most of upath(), but skipped the check for
strings that are already unicode.
",['django/template/utils.py'],get_app_template_dirs() is throwing UnicodeDecodeError while processing Unicode strings in Python 2.
ccfd1295f986cdf628d774937d0b38a14584721f,1485807032,"Refs #27795 -- Prevented SafeText from losing safe status on str()

This will allow to replace force_text() by str() in several places (as one of
the features of force_text is to keep the safe status).
","['django/utils/safestring.py', 'tests/utils_tests/test_safestring.py']","'SafeText loses its safe status when str() function is applied on it, requiring force_text() to preserve the safe status.'"
e43ea36b7681e43ea99505a2cf7550d4d36016b3,1474141446,"Refs #27025 -- Fixed a timezone test for Python 3.6.

Reflects behavior changes in PEP 495 (Local Time Disambiguation).
",['tests/utils_tests/test_timezone.py'],Timezone test is failing on Python 3.6 due to behavior changes introduced in PEP 495 concerning local time disambiguation.
0c42cdf0d2422f4c080e93594d5d15381d6e955e,1611209015,"Fixed #32374 -- Stopped recording migration application before deferred SQL.

Migrations cannot be recorded in the same transaction as its associated
DDL operations when some of it is deferred until the schema editor
context exits.

Regression in c86a3d80a25acd1887319198ca21a84c451014ad.
","['django/db/migrations/executor.py', 'tests/migrations/test_executor.py']","Migrations are incorrectly recorded in the same transaction as their DDL operations when some operations are deferred until the schema editor context is exited, causing a regression."
238e2ac3690755d0e6c2dfca815e2b6f84a47f6e,1433423635,"Fixed #18166 -- Added form_kwargs support to formsets.

By specifying form_kwargs when instantiating the formset, or overriding
the `get_form_kwargs` method on a formset class, you can pass extra
keyword arguments to the underlying `Form` instances.

Includes tests and documentation update.
","['django/forms/formsets.py', 'tests/forms_tests/tests/test_formsets.py']","Formsets currently lack support for form_kwargs, preventing extra keyword arguments from being passed to underlying `Form` instances."
5e31be1b96f60232e1e04140c5f0e33d8c2319f1,1506099078,"Refs #25187 -- Required the authenticate() method of authentication backends to have request as the first positional argument.

Per deprecation timeline.
","['django/contrib/auth/__init__.py', 'tests/auth_tests/test_auth_backends_deprecation.py']",The authenticate() method of authentication backends does not require 'request' as the first positional argument as per deprecation timeline.
579909a13feb958f75d1d77e9995cef8f2b9c2a3,1566803737,"Refs #30591 -- Fixed introspection of check and unique column constraints on MariaDB.

Unnamed unique and check columns constraints have the same name as
a column. Ensure uniqueness by using custom names.

Thanks Adnan Umer for the report.","['django/db/backends/mysql/introspection.py', 'tests/introspection/models.py', 'tests/introspection/tests.py']","Introspection misbehaves on MariaDB due to unnamed unique and check columns constraints having same identifier as a column, breaking uniqueness."
1df89a60c5b7a28d7fda4c9ba7c07f02fd7de0fa,1484578995,"Fixed #25307 -- Fixed QuerySet.annotate() crash with conditional expressions.

Thanks Travis Newport for the tests and Josh Smeaton for contributing
to the patch.","['django/db/models/lookups.py', 'django/db/models/sql/query.py', 'django/db/models/sql/where.py', 'tests/aggregation_regress/tests.py']",The annotate() function in QuerySet crashes when used with conditional expressions.
53a5fb3cc0137bebeebc0d4d321dbfe20397b065,1464719578,"Fixed #26676 -- Prevented prefetching to_attr from caching its result in through attr.

Thanks Ursidours for the report.
","['django/db/models/query.py', 'tests/prefetch_related/tests.py']","The prefetching process is unintentionally caching its results in 'through attr', leading to inaccurate data retrieval when using 'to_attr'."
9c6879284315d5119942355c340c3e48f6c65882,1693539878,"Fixed #34807 -- Avoided circular import between forms, models, and utils' choices.

Thanks Collin Anderson for the report.

Regression in 500e01073adda32d5149624ee9a5cb7aa3d3583f.",['django/utils/choices.py'],"Circular import issue occurring between forms, models, and utils' choices leading to a regression."
3e3a7372f58e005813dd1b9e61eb85a5e43c7173,1397295726,"Fixed #22102 -- Made SimpleTestCase tests run before unittest.TestCase ones

Thanks aptiko for the reporti and Tim Graham for the review.
","['django/test/runner.py', 'tests/test_discovery_sample/doctests.py', 'tests/test_discovery_sample/tests_sample.py', 'tests/test_runner/test_discover_runner.py']",'SimpleTestCase tests are not executed prior to unittest.TestCase ones causing potential mismatch in expected test execution order.'
5c43fd48258eb977e6e611310e12a921d8470944,1420740885,"Isolated some cache tests; refs #23947.

This reverts a change made in 40c60efecc0fc73f0b2320b44d684586b52ee799
which was incorrect and caused CacheKeyWarnings.
",['tests/cache/tests.py'],"Reverted changes have caused CacheKeyWarnings, indicating an issue with cache test isolation."
27b07a3246bc033cd9ded01238c6dc64731cce35,1651725874,"Refs #30581 -- Moved CheckConstraint tests for conditional expressions to migrations.test_operations.

This allows avoiding warning in tests about using RawSQL in
CheckConstraints.","['tests/constraints/models.py', 'tests/constraints/tests.py', 'tests/migrations/test_operations.py']",Tests for CheckConstraint's conditional expressions using RawSQL are causing warning messages during testing.
bb4a92d7845878b2ce0c4a5ca154cb4db22f7bad,1416212484,"Fixed #23840 -- Fixed makemessages find_files method

Changed the handling of extensions to be used for gettext. Now
obeying the --extension argument. find_files now only find the
given or default extensions and puts only these in the
TranslatableFiles. As a result there are no more confusing messages
for filetypes (extension) not handled by makemessages.
","['django/core/management/commands/makemessages.py', 'tests/i18n/test_extraction.py']","Makemessages' find_files method is not respecting the --extension argument, leading to confusing messages for filetypes not handled by the command."
d238ab29915b24bb717b3fdc2d552c65a43ba9ab,1391968095,"Silence deprecation warnings.

Also they should only be raised if allow_syncdb does exist, not just if
allow_migrate does not.

Refs comments on 250841017c6c456806cadd214b4e130aa998233d
",['django/db/utils.py'],"Deprecation warnings are being displayed unnecessarily, even if allow_syncdb does not exist but only allow_migrate is present."
560ff988dd6cff40381408c62494ca3eb9804f32,1636960830,"Refs #33288 -- Removed SQLite's DatabaseIntrospection._get_foreign_key_constraints().

The get_relations() method returns the exact same data in a more generic
format.
","['django/db/backends/sqlite3/introspection.py', 'django/db/backends/sqlite3/schema.py']",SQLite's DatabaseIntrospection._get_foreign_key_constraints() method is redundant as get_relations() method provides the same data in a more universal format.
41b337efa085b6b9cfdb2cf724d977005ff77e75,1414065939,"Fixed #23630 -- Made AlterModelTable rename auto-created M2M tables.

Thanks Naddiseo for the report, Andrew Godwin for guidance,
and Shai Berger for review.
","['django/db/migrations/operations/models.py', 'tests/migrations/test_operations.py']","Auto-created many-to-many (M2M) tables are not being renamed properly by AlterModelTable operation, causing database inconsistencies."
f91e085c3054240dbb581c1db9b4a9063c26525c,1676763769,"Refs #34176 -- Adjusted group by position variables naming to follow SQL spec.

This avoids conceptual collisions with the notion of indices.
",['django/db/models/sql/compiler.py'],"Group by position variables naming does not follow SQL specifications, which may cause conceptual collisions related to indices."
4c60c3edff4312303e1021fca47ed52c2152d285,1641566131,"Fixed #33419 -- Restored marking forms.Field.help_text as HTML safe.

Regression in 456466d932830b096d39806e291fe23ec5ed38d5.

Thanks Matt Westcott for the report.
",['tests/forms_tests/tests/test_forms.py'],"Regression in forms.Field.help_text marked as HTML safe is affecting the application, causing potential cross-site scripting vulnerabilities."
16454ac35f6a24a04b23a9340b0d62c33edbc1ea,1548705876,"Fixed #29825 -- Fixed JS ngettext if the string is a non-plural msgid in the catalog.
","['django/views/i18n.py', 'tests/view_tests/tests/test_i18n.py']",JavaScript ngettext fails when dealing with non-plural msgid strings present in the catalog.
b23d47412c12352ba2e2133b05a15ccd09e81af3,1411752988,"Fixed #23560 -- Fixed MigrationWrite to handle builtin types without imports.

Thanks Tim Graham for the review.
","['django/db/migrations/writer.py', 'tests/migrations/test_writer.py']","'Builtin types in MigrationWriter are not handled correctly, leading to problems with imports.'"
4484bc1b2f84da6442c9c2bfd95d3f1f7d8f96f7,1590001727,"Fixed #31597, #31603 -- Corrected admin clear all filters link behavior.

- Show ""Clear all filters"" only when any filter is selected.
- Preserve query string not related with filters.

Co-Authored-By: Hasan Ramezani <hasan.r67@gmail.com>
","['django/contrib/admin/views/main.py', 'tests/admin_changelist/admin.py', 'tests/admin_changelist/test_date_hierarchy.py', 'tests/admin_changelist/tests.py']","""Clear all filters"" link in the admin panel is shown even when no filters are selected, and non-filter related query strings are not preserved when clearing filters."
ffb72a95bcd6fc5cce7915f3b3732a05837f29a2,1526687458,"Fixed #29414 -- Restored form inputs on admin inlines when the user doesn't have the change permission.

Regression in 825f0beda804e48e9197fcf3b0d909f9f548aa47.","['django/contrib/admin/helpers.py', 'tests/admin_inlines/admin.py', 'tests/admin_inlines/models.py', 'tests/admin_inlines/tests.py']","Admin inlines form inputs disappear for users that lack the change permission, introduced as a regression in 825f0beda804e48e9197fcf3b0d909f9f548aa47."
33ec01caaf57271d1820dc0ea90c5360287e305c,1579599801,"Refs #29095 -- Added test for using QuerySet.count() with window expressions ordered by related fields.

Fixed in 3f32154f40a855afa063095e3d091ce6be21f2c5.
","['tests/expressions_window/models.py', 'tests/expressions_window/tests.py']",Using QuerySet.count() with window expressions ordered by related fields is untested and could potentially lead to unintended behavior.
ff1e7b4eb43737bf2752197036663cee58922317,1472689173,"Fixed #25181 -- Added localdate() function to get date in a different time zone.

Thanks Konrad Świat for the original patch.","['django/utils/timezone.py', 'django/views/generic/dates.py', 'tests/utils_tests/test_timezone.py']","There is no function available to retrieve the date in a different time zone, making it difficult for applications dealing with different geographical locations."
6709ea4ae91b906742506ac0c42a3a272991001f,1474983967,"Fixed #27271 -- Fixed a crash in runserver logging.

Allowed ServerFormatter to handle simple string messages or messages with
formatting arguments. The formatter will set the server_time variable on
the log record if it's required by the format string but wasn't passed in
extra parameters.
","['django/utils/log.py', 'tests/get_or_create/tests.py', 'tests/logging_tests/tests.py']",Crash in runserver logging occurs when the ServerFormatter is required to handle simple string messages or messages with formatting arguments; issue arises when server_time variable isn't passed in extra parameters when format string requires it.
719b7466203181066d9537d2e3bec687dffc9f41,1556620347,"Fixed #30412 -- Fixed crash when adding check constraints with OR'ed condition on Oracle and SQLite.
","['django/db/models/sql/query.py', 'tests/migrations/test_operations.py', 'tests/queries/test_query.py']",Adding check constraints with an OR condition leads to a crash in Oracle and SQLite.
ceb1ffcc8da92a82338582bc6801de4bc8f05e32,1415022708,"Fixed #23420 - broken warning for unbound naive datetime objects

Fixed issue with warning message displayed for unbound naive datetime
objects when USE_TZ is True. Adds unit test that demonstrates the issue
(discoverable when using a custom lookup in MySQL).
","['django/db/models/fields/__init__.py', 'tests/custom_lookups/models.py', 'tests/custom_lookups/tests.py']","When USE_TZ is set to True, the system fails to display the correct warning message for unbound naive datetime objects when using a custom lookup in MySQL."
84b6c768301096849f5589d7612b129c5445abd3,1422372949,"Fixed #24210 -- Cleaned up relational fields __init__().

Thanks Collin Anderson and Tim Graham for the reviews.
","['django/contrib/contenttypes/fields.py', 'django/db/models/fields/__init__.py', 'django/db/models/fields/related.py']",Initialization of relational fields is causing unexpected behaviors or errors.
5660267e5b9cc35280e7ecbc59d67fa035e6691d,1577433454,"Fixed #31121 -- Cleared Site cache in SitesFrameworkTests.

Thanks Matthijs Kooijman for the report and analysis.",['tests/sites_tests/tests.py'],"Site cache is not being cleared between runs in SitesFrameworkTests, causing potential data inconsistency."
0205e04ce7a554a7b9b27b412288cc6a0e75e48f,1485996459,"Removed ExceptionReporter support for string exceptions.

Reverted refs #6423 since raising string exceptions is prohibited
since Python 2.5.
",['django/views/debug.py'],"ExceptionReporter is incorrectly supporting string exceptions, even though they've been disallowed since Python 2.5."
a7f27fca5239ff3840735dc6dc731b71a99a1d57,1630907273,"Refs #32508 -- Raised TypeError/ValueError instead of using ""assert"" in encode() methods of remaining password hashers.
","['django/contrib/auth/hashers.py', 'tests/auth_tests/test_hashers.py']","Using ""assert"" in encode() methods of password hashers leads to lack of TypeError/ValueError, causing unexpected behavior."
92bbef8b9ecb8e66e578ecf24ca6a6625eb1316a,1479985296,"Improved the way Model.save() skips the auto_field.

Identity comparison is quicker than isinstance(), and it avoids coupling
between Model and AutoField.",['django/db/models/base.py'],"The current implementation of Model.save() is inefficient and tightly coupled with AutoField when skipping the auto_field, causing potential performance issues."
b41d38ae26b1da9519a6cd765bc2f2ce7d355007,1609748740,"Fixed #32298 -- Fixed URLValidator hostname length validation.

URLValidator now validates the maximum length of a hostname without
the userinfo and port.
",['django/core/validators.py'],"URLValidator is not accurately validating the maximum length of a hostname, ignoring userinfo and port."
6e742dabc95b00ba896434293556adeb4dbaee8a,1619513015,"Fixed #32687 -- Restored passing process’ environment to underlying tool in dbshell on PostgreSQL.

Regression in bbe6fbb8768e8fb1aecb96d51c049d7ceaf802d3.
","['django/db/backends/base/client.py', 'django/db/backends/postgresql/client.py', 'tests/backends/base/test_client.py', 'tests/dbshell/test_postgresql.py']","The process' environment variables are not being passed to the underlying tool in dbshell on PostgreSQL, causing a regression."
8ed7834fb2830364b590b6fa6453efc8129ed0d5,1410741070,"Fixed occasional selenium test failure on Jenkins with Chrome 36+.

Previously find_element_by_id('id_password') on the next line failed with
NoSuchElementException and selenium.page_source was
<html xmlns=""http://www.w3.org/1999/xhtml""><head></head><body></body></html>.

Possibly related: https://code.google.com/p/selenium/issues/detail?id=1969.
",['tests/admin_widgets/tests.py'],"Occasional Selenium test failures on Jenkins with Chrome 36+, NoSuchElementException triggered when find_element_by_id('id_password') is called, with page source rendering a blank HTML body."
52442898e747e9d76bf6349938fa3dada6f0e887,1467900415,"Refs #26709 -- Added 'model' argument to SchemaEditor.add/remove_index()

This removes the dependency of the Index class on its model attribute
when a name is passed to it.

Thanks to Markush for discussions.
","['django/db/backends/base/schema.py', 'django/db/migrations/operations/models.py', 'django/db/models/indexes.py', 'tests/schema/tests.py']","SchemaEditor.add/remove_index() fails to function when Index class lacks a model attribute, even with a name provided."
a9e5ac823df8ba8b786b6450c967ca378c008d0e,1512759988,"Refs #28856 -- Added test for caching of a GenericForeignKey pointing to a model that uses more than one level of MTI.

Forwardport of test and release notes of
35222035029863f95769e2e59beeeb953d125689 from stable/1.11.x
","['tests/generic_relations_regress/models.py', 'tests/generic_relations_regress/tests.py']",Caching issues arise when a GenericForeignKey is pointing to a model using multiple levels of Multi-Table Inheritance (MTI).
088a6fab1ccd1efcd4ce28b353df3c03dcfa0caf,1565588875,"Refs #24793 -- Removed bogus connection argument from SQLCompiler.compile() calls.

The method doesn't expect a connection object to be passed as its second
argument.
",['django/db/models/expressions.py'],The SQLCompiler.compile() method is incorrectly expecting a connection object as its second argument.
a20aae414e762e4d9043e76b0bf8eccd334c8ebc,1520096904,"Fixed #29144 -- Made untranslated strings for territorial language variants use translations from the generic language variant.
","['django/utils/translation/trans_real.py', 'tests/i18n/tests.py']",Untranslated strings for territorial language variants are not making use of translations from the generic language variant.
2c0fda7f206f2057df642939e51358944b313483,1551195038,"Refs #30057 -- Added more diffsettings tests.

The test in 573f44d62fe1e87e2c20a74eba5e20ca9ff0ed85 doesn't act as a
regression test.
","['tests/admin_scripts/configured_dynamic_settings_manage.py', 'tests/admin_scripts/tests.py']","The test introduced in commit 573f44d62fe1e87e2c20a74eba5e20ca9ff0ed85 fails to serve as a regression test, leaving potential for unnoticed issues."
dd99e69fa8f89263d0396f23e0db9aa8fa667b01,1480984643,"Refs #27025 -- Fixed Python 3.6 deprecation warning for empty model super() calls.

https://bugs.python.org/issue23722

Thanks Nick Coghlan for advice and review.",['django/db/models/base.py'],Deprecation warning appearing on Python 3.6 due to empty super() calls in model.
d66378a8b2d48d41b56ba3622189493e4edf9e5a,1494023708,"Fixed #28175 -- Fixed __in lookups on a foreign key when using the foreign key's parent model as the lookup value.

Thanks Simon Charette for review.","['django/db/models/fields/related_lookups.py', 'tests/model_inheritance_regress/tests.py']",'__in lookups on a foreign key return incorrect results when the lookup value is the parent model of the foreign key.'
8f8a93a9ae49fa807348f9f456b6635c8ebc5d0c,1515261054,"Fixed #28859 -- Made Oracle backend raise DatabaseError if ""no data found"" exception is hidden by the Oracle OCI library.

Thanks Tim Graham for the review and Jani Tiainen for the report.","['django/db/backends/oracle/operations.py', 'tests/backends/oracle/tests.py']","Oracle backend is not raising DatabaseError when ""no data found"" exception is hidden by the Oracle OCI library."
1173db4a16bb2938ba62a6cd50372a76a7f9e05f,1596087387,"Fixed #31822 -- Added support for comments URL per feed item.

The item_comments hook returns a comments URL which is then used by the
feed builder.
","['django/contrib/syndication/views.py', 'tests/syndication_tests/feeds.py', 'tests/syndication_tests/tests.py']",Item_comments hook does not currently support returning a comments URL for individual feed items.
35355a4ffedb2aeed52d5fe3034380ffc6a438db,1443891637,"Fixed #25389 -- Fixed pickling a SimpleLazyObject wrapping a model.

Pickling a `SimpleLazyObject` wrapping a model did not work correctly; in
particular it did not add the `_django_version` attribute added in 42736ac8.
Now it will handle this and other custom `__reduce__` methods correctly.
","['django/utils/functional.py', 'tests/utils_tests/models.py', 'tests/utils_tests/test_lazyobject.py']","`SimpleLazyObject` wrapping a model fails to pickle correctly, particularly failing to add the `_django_version` attribute."
42b5e4feeacf7cfa57867bf9fd5a6046de8c1cd3,1415815485,"Fixed #23730 -- Moved support for SimpleCookie HIGHEST_PROTOCOL pickling to http.cookie.

This fix is necessary for Python 3.5 compatibility (refs #23763).

Thanks Berker Peksag for review.
","['django/http/cookie.py', 'django/http/response.py', 'django/template/response.py', 'tests/httpwrappers/tests.py']",Incompatibility issue with Python 3.5 when pickling SimpleCookie using HIGHEST_PROTOCOL from http.cookie.
c5395eef7693e1ae222cbfd81d031237c1802c7f,1392027683,"Allowed a message to be passed to assertQuerysetEqual to make it consistent with other assert methods.
",['django/test/testcases.py'],Inconsistent behavior in `assertQuerysetEqual` method as it doesn't allow passing custom assert messages.
ac51496ceb07888c034d42deee864d3e32a8152f,1417546610,"Added cpl error codes to errcheck functions

GDAL raster methods return different error codes from the vector
API.
","['django/contrib/gis/gdal/error.py', 'django/contrib/gis/gdal/prototypes/errcheck.py', 'django/contrib/gis/gdal/prototypes/generation.py', 'django/contrib/gis/gdal/prototypes/raster.py']",GDAL raster methods are returning inconsistent error codes as compared to the vector API.
170f7115bbae45f26ca8078e749dfe67445a57ea,1432317991,"Fixed #24826 -- Accounted for filesystem-dependent filename max length

Thanks Raphaël Hertzog for the report and help on the patch, and Tim Graham
for the review.
",['tests/file_storage/tests.py'],"There's an issue with the filename max length, which isn't being accounted for and can differ based on the filesystem."
71902e0d9f93670c4f93ff9d66095b0e571be74b,1661414637,"Fixed #33938 -- Fixed migration crash for m2m with a through model in another app.

Regression in aa4acc164d1247c0de515c959f7b09648b57dc42.

Thanks bryangeplant for the report.
","['django/db/migrations/autodetector.py', 'tests/migrations/test_autodetector.py']","Migrations crash when many-to-many relationships utilize a 'through' model located in a different app, causing a regression in the system."
bd903e8a6ec7a5b321f24096223e43e4aea5b653,1505152644,"Fixed #28570 -- Dropped support for GEOS 3.3.x.

Removed setting SRID in GEOSGeometry.clone() which was only required
in GEOS 3.3.0.",['django/contrib/gis/geos/geometry.py'],"Support for GEOS 3.3.x results in dealing with redundant SRID setting in GEOSGeometry.clone(), which is not needed in later versions."
75430be86f4c90b7fb8a370d2b080a8a7cc925a0,1427638087,"Refs #24366 -- Fixed recursion depth error in migration graph

Made MigrationGraph forwards_plan() and backwards_plan() fall back to an
iterative approach in case the recursive approach exceeds the recursion
depth limit.
","['django/db/migrations/graph.py', 'tests/migrations/test_graph.py']","MigrationGraph's methods - forwards_plan() and backwards_plan() - are hitting recursion depth limit due to excessive recursive calls, causing application crashes."
1ea44a3abd4e58777247a095afd03dd01efdef55,1395422230,"Switched {% cycle %} and {% firstof %} tags to auto-escape their variables per deprecation timeline.

refs #17906.
","['django/template/defaulttags.py', 'django/templatetags/future.py', 'tests/template_tests/tests.py']","Variables inside {% cycle %} and {% firstof %} tags not being auto-escaped in accordance with deprecation timeline, posing a potential security risk."
ed244199c72f5bbf33ab4547e06e69873d7271d0,1496666443,"Fixed #28269 -- Fixed Model.__init__() crash on models with a field that has an instance only descriptor.

Regression in d2a26c1a90e837777dabdf3d67ceec4d2a70fb86.
","['django/db/models/options.py', 'tests/model_meta/models.py', 'tests/model_meta/tests.py']","Model.__init__() is crashing when a model has a field that includes an instance-only descriptor, and it's a regression error."
d3e3703a15cd9d294406121bc43be0c75b1a4e0e,1447250170,"Fixed #25720 -- Made gettext() return bytestring on Python 2 if input is bytestring.

This is consistent with the behavior of Django 1.7.x and earlier.
","['django/utils/translation/trans_real.py', 'tests/i18n/tests.py']","gettext() function inconsistency issue on Python 2 where it doesn't return bytestring if input is bytestring, breaching earlier behavior of Django 1.7.x and prior versions."
8c3bc5cd7801a307a0bc2969abebe7a6ca48d17f,1470702049,"Fixed docs to refer to HSTS includeSubdomains as a directive.

The spec refers to it as a 'directive' rather than a 'tag':
https://tools.ietf.org/html/rfc6797#section-6.1.2
",['tests/middleware/test_security.py'],"Current documentation refers to HSTS includeSubdomains inaccurately as a 'tag' instead of its correct term, a 'directive', as per the official specification."
3f76339355c1fe550dedf676feddd42a5d48be58,1398073388,"Fixed #22402 -- Consolidated model_inheritance tests.

The model_inheritance_same_model_name tests couldn't be run without the
model_inheritance tests. Make the problem go away by merging them.

Thanks timo for the report.
","['tests/model_inheritance/same_model_name/models.py', 'tests/model_inheritance/tests.py', 'tests/model_inheritance_same_model_name/tests.py']",Running model_inheritance_same_model_name tests independently of model_inheritance tests results in errors.
6fbce45b0376f0ec8f3bf244f4f1f8d62c201f58,1586024160,"Fixed #31415 -- Fixed crash when nested OuterRef is used with operators or in database functions.
","['django/db/models/expressions.py', 'tests/expressions/tests.py']","Application crashes when using OuterRef in conjunction with operators or in database functions, particularly when nested."
a87189fc5e2e874219d20700cf811345138dd365,1494312008,"Fixed #28164 -- Improved float conversions in DecimalField.to_python

Thanks Tim Graham and Adam Johnson for the reviews.
","['django/db/models/fields/__init__.py', 'tests/model_fields/test_decimalfield.py']",The `DecimalField.to_python` function has issues with converting floating point numbers correctly.
d3e33fff12266b51ab1488f7094855aef6061e9e,1392727782,"Made content_type_extra optional for TemporaryUploadedFile and MemoryUploadedFile.

This provides better backwards compatibility for those constructing these
objects manually.

Refs #13721.
",['django/core/files/uploadedfile.py'],Manual construction of TemporaryUploadedFile and MemoryUploadedFile objects without providing 'content_type_extra' results in compatibility issues.
65a7a0d9eed4f4da9568cf0e7688e7a8c9f01957,1429732140,"Improved display of template loader postmortem on debug page.

This now works for multiple Django engines and recursive loaders.
Support for non-Django engines is still pending.

Refs #15053.
","['django/views/debug.py', 'tests/view_tests/tests/test_debug.py']","Template loader postmortem on the debug page doesn't display correctly for multiple Django engines and recursive loaders, support for non-Django engines is also missing."
58ad030d05fa50cfed327368ab61defca3303e02,1552611923,"Fixed #30254 -- Allowed model metaclasses to access the attribute dict in __init__().

Regression in a68ea231012434b522ce45c513d84add516afa60.
","['django/db/models/base.py', 'tests/model_regress/tests.py']","Model metaclasses are unable to access the attribute dictionary during the initiation process, unexpectedly breaking expected behaviour due to a regression."
965f678a39b79f8e0bdc8222df094916fd7f8ed4,1486680907,"Fixed #25898 -- Made test database/user creation on Oracle reraise unexpected errors.

Thanks Shai Berger and Tim Graham for review.","['django/db/backends/oracle/creation.py', 'tests/backends/test_creation.py']","Unexpected errors are not being re-raised during test database/user creation on Oracle, making debugging difficult."
cd03e8e2d698e9ccefae2f7687a0400329e6cbe6,1664258571,"Fixed #34050 -- Replaced invalid chars in migration names with '_'.

Thanks to Bishal Gautam for the report and initial implementation.

Regression in fa58450a9ab8a1bdd2a5090b51b00078fd85ffa6.

Co-Authored-By: Bishal Gautam <bisalgt@gmail.com>
","['django/db/migrations/migration.py', 'tests/migrations/test_autodetector.py']",Invalid characters appearing in migration names cause unexpected behavior in application.
24b9f5082344a127147266dd52d5d2dcd1c9cb44,1573766849,"Fixed #29916 -- Added lower_inc, lower_inf, upper_inc, and upper_inf lookups for RangeFields.

Co-Authored-By: Mariusz Felisiak <felisiak.mariusz@gmail.com>
","['django/contrib/postgres/fields/ranges.py', 'tests/postgres_tests/test_ranges.py']","RangeFields missing essential lookups: lower_inc, lower_inf, upper_inc, and upper_inf."
17e75d03f92cff7d1d5d4679a8a09b13e08f3264,1406678155,"Fixed #23129 -- Added 'true' and 'false' to `NullBooleanField`.

JavaScript serializations of forms will sometimes render the boolean
values as the strings 'true' and 'false', in lower case. Rather than
repeat boilerplate in the JavaScript to circumvent this, it seems
reasonable to allow Django to understand the lower-case versions of the
booleans.
","['django/forms/fields.py', 'tests/forms_tests/tests/test_fields.py']","Javascript serialization renders boolean values as lowercase strings 'true' and 'false', which Django's `NullBooleanField` currently does not understand."
9dc83c356d363c090f3351c908cad6f823aeb7bf,1497316374,"Fixed #27967 -- Fixed KeyError in admin's inline form with inherited non-editable pk.

Thanks Robin Anupol for the initial report and workaround.
","['django/contrib/admin/helpers.py', 'tests/admin_inlines/admin.py', 'tests/admin_inlines/models.py', 'tests/admin_inlines/tests.py']",Admin's inline form is throwing KeyError when dealing with inherited non-editable primary keys.
0decef337f7f00d73b380531ac22cbc843d6e806,1427212297,"Fixed #24405 -- Made admin related object JavaScript overridable

Consolidated it in one file and move the DOM related stuff to the
template so it is easily overridable. To override the popup behavior
you need to add handlers for the custom events triggered in the
admin_change_form_document_ready template block.
","['django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js', 'django/contrib/admin/static/admin/js/related-widget-wrapper.js', 'django/contrib/admin/widgets.py']","Admin related object JavaScript is not easily overridable, hindering custom event triggers and popup behaviour modification in the admin_change_form_document_ready template block."
02c07be95c47efaab9da7422c33ee76142f11336,1546353734,"Fixed #30050 -- Fixed InlineModelAdmin.has_change_permission() called with non-None obj during add.

Thanks andreage for the report and suggested fix.
","['django/contrib/admin/options.py', 'tests/admin_views/tests.py']",The InlineModelAdmin.has_change_permission() is unexpectedly being called with non-None object during add operation.
831a05b1859f960dba0aff3ac46daa40ca70704e,1610643004,"Refs #27604 -- Removed support for the pre-Django 3.1 encoding format in CookieStorage.

Per deprecation timeline.
","['django/contrib/messages/storage/cookie.py', 'tests/messages_tests/test_cookie.py']","The encoding format used in CookieStorage prior to Django 3.1 is still supported, leading to potential issues with deprecated functionality."
8e90560aa8868a42bb8eda6273595bf0932a6090,1612524823,"Fixed #32420 -- Fixed detecting primary key values in deserialization when PK is also a FK.
","['django/core/serializers/base.py', 'tests/serializers/models/natural.py', 'tests/serializers/test_natural.py']",Deserialization fails to properly detect primary key values when the primary key is also a foreign key.
53d8646f799de7f92ab9defe9dc56c6125448102,1578467143,"Fixed #31141 -- Relaxed system check of translation settings for sublanguages.

Regression in 4400d8296d268f5a8523cd02ddc33b12219b2535.

Thanks Enrique Matías Sánchez for the report.","['django/core/checks/translation.py', 'tests/check_framework/test_translation.py']","The system's verification of translation settings is too strict for sublanguages, leading to potential regressions."
2e10abeb7f375d56dca21b1baed11f98e74ab7f5,1632165781,"Refs #31395 -- Removed support for assigning objects which don't support deepcopy() in setUpTestData().

Per deprecation timeline.
","['django/test/testcases.py', 'tests/test_utils/test_testcase.py']","setUpTestData() is currently accepting objects that don't support deepcopy(), which is not compliant with the deprecation timeline."
c5ed884eabf3b2b67581c55bf6c87e721f69157f,1670690773,"Fixed #34205 -- Fixed Meta.constraints validation crash with ArrayField and __len lookup.

Regression in 88fc9e2826044110b7b22577a227f122fe9c1fb5 that began
manifesting in Django 4.1.
","['django/contrib/postgres/fields/array.py', 'tests/postgres_tests/test_constraints.py']","Meta.constraints validation with ArrayField and __len lookup causes a crash, originating from regression in Django 4.1."
fe6e5824218bab7cf47dee112d68325b338f9947,1606312295,"Fixed #32203 -- Fixed QuerySet.values()/values_list() crash on key transforms with non-string values on SQLite.

Thanks Gordon Wrigley for the report.
","['django/db/models/fields/json.py', 'tests/model_fields/test_jsonfield.py']",QuerySet.values()/values_list() methods are causing the application to crash on SQLite when key transforms are used with non-string values.
e11d05e0b488a3ff2b3c9d8f2e1e50f471750d6e,1600106864,"Fixed #31990 -- Fixed QuerySet.ordered for GROUP BY queries on models with Meta.ordering.

Regression in 0ddb4ebf7bfcc4730c80a772dd146a49ef6895f6.

Thanks Julien Dutriaux for the report.","['django/db/models/query.py', 'tests/queries/tests.py']",Regression causes QuerySet.ordered to malfunction for GROUP BY queries on models with Meta.ordering.
6c3dfba89215fc56fc27ef61829a6fff88be4abb,1568615080,"Fixed #30769 -- Fixed a crash when filtering against a subquery JSON/HStoreField annotation.

This was a regression introduced by 7deeabc7c7526786df6894429ce89a9c4b614086
to address CVE-2019-14234.

Thanks Tim Kleinschmidt for the report and Mariusz for the tests.
","['django/contrib/postgres/fields/hstore.py', 'django/contrib/postgres/fields/jsonb.py', 'tests/postgres_tests/test_hstore.py', 'tests/postgres_tests/test_json.py']","Filtering against a subquery JSON/HStoreField annotation is causing the system to crash, a regression introduced by a recent commit."
13be45308045f522dfd1d0ff3da3cdc163bc521d,1505146909,"Refs #28492 -- Stopped accessing settings at Field.db_tablespace initialization.

Deferring accesses to settings allows database fields to be initialized before
settings are loaded.
",['django/db/models/fields/__init__.py'],"Field.db_tablespace initialization currently accesses settings too early, causing issues when database fields try to initialize before settings are loaded."
1dd96f731df3ca9df0e3ff83a9a8e723dc7e8685,1589566971,"Refs #13227 -- Adjusted a test to avoid making a shared test model unpickable.

This allowed the Note model to be used in setUpTestData() which requires
assigned model instances to be copy.deepcopy()'able.
","['tests/queries/models.py', 'tests/queries/tests.py']",Shared test model 'Note' becomes unpickable when used in setUpTestData() due to deepcopy() requirement on assigned model instances.
11f307a5a8fa66605652e0496c7385e584bfcad7,1411312097,"Fixed #23196 -- Short-circuited empty string translation

Translating an empty string used to return the gettext catalog
metadata instead of the empty string.
Thanks Ned Batchelder for the suggestion, Tim Graham for the review
and Anton Berezin and Claude Paroz for contributions to the patch.
","['django/utils/translation/trans_real.py', 'tests/i18n/tests.py']","When translating an empty string, the gettext catalog metadata is returned instead of the expected empty string."
5052f79df45d843d1e44dcc47152ed503220098f,1452296943,"Added a test for adding a UUID pk object using the ""Add related"" admin popup.

Follow up to refs #25997 but this case wasn't broken.
",['tests/admin_views/tests.py'],"The ""Add related"" admin popup fails to add an object with a UUID primary key, lacking sufficient test coverage."
934a16dc93a5f46f965ba299dbd543703d32d493,1414794114,"Fixed #23468 -- Added checks for duplicate fixtures directories in loaddata.

If settings.FIXTURE_DIRS contains duplicates or a default fixture
directory (app_name/fixtures), ImproperlyConfigured is raised.

Thanks to Berker Peksag and Tim Graham for review.
","['django/core/management/commands/loaddata.py', 'tests/fixtures_regress/tests.py']",Duplicate or default fixtures directories in settings.FIXTURE_DIRS leads to ImproperlyConfigured exception being raised during 'loaddata'.
bce180dd05c425341261240fab1d2642e6d4bc65,1592974871,"Refs #31703 -- Moved MigrationAutodetector.suggest_name() to Migration.

Allows expanding the method to inspect additional attributes of the
migration instance. For example, the Migration.initial attribute.
","['django/db/migrations/autodetector.py', 'django/db/migrations/migration.py', 'tests/migrations/test_autodetector.py']",Method suggest_name() in MigrationAutodetector cannot inspect additional attributes of the migration instance like Migration.initial attribute.
9e1b6b8a66af4c2197e5b1b41eb9dbb36e4f6502,1585129174,"Fixed #23916 -- Allowed makemigrations to handle related model name case changes.

Made autodetector ignore related model name case changes so unnecessary
migrations are not created.
","['django/db/migrations/autodetector.py', 'django/db/models/fields/related.py', 'tests/field_deconstruction/tests.py', 'tests/migrations/test_autodetector.py']",The `makemigrations` command is generating unnecessary migrations due to case changes in related model names.
c82893cb8c6b2a4a876965426c5a5bc4590e1583,1539196702,"Refs #27795 -- Removed force_bytes() usage from django/utils/http.py.

django.utils.http.urlsafe_base64_encode() now returns a string, not a
bytestring. Since URLs are represented as strings,
urlsafe_base64_encode() should return a string. All uses immediately
decoded the bytestring to a string anyway.

As the inverse operation, urlsafe_base64_decode() accepts a string.
","['django/contrib/auth/forms.py', 'django/utils/http.py', 'tests/auth_tests/test_templates.py', 'tests/auth_tests/test_views.py']","The function django.utils.http.urlsafe_base64_encode() is returning a bytestring rather than a string, causing unnecessary decoding operations."
628b6a686974698cbf820bad72f10dad133174ec,1638819063,"Updated translations from Transifex.

This also fixes related i18n tests.

Forwardport of 4c5215ab036aa8fda9cd0148fd034f4d8f7d69d1 from stable/4.0.x

Co-authored-by: Claude Paroz <claude@2xlibre.net>
","['tests/forms_tests/tests/test_i18n.py', 'tests/i18n/tests.py']",There are outdated translations causing associated i18n tests to fail.
0d8e3e608ee9aab5076d497664aa97e0a29e523e,1529000524,"Fixed #29428 -- Fixed admin changelist crash when using a query expression without asc()/desc() in the ordering.
","['django/contrib/admin/views/main.py', 'tests/admin_changelist/tests.py']",Admin changelist crashes when a query expression without asc()/desc() is used in ordering.
21f13ff5b3d5a42d62f38398c010efcdce30dad7,1486649008,"Refs #23919 -- Removed an used block in ExceptionReporter.get_traceback_data().

The test from refs #20368 only runs this block on Python 2.",['django/views/debug.py'],"The `ExceptionReporter.get_traceback_data()` function includes a block of code that is only run for Python 2, but this block is now unused."
c0969ee22741f15841a55b4420c113a9eac1c7a5,1555334441,"Refs #27149 -- Based recursive nested subquery detection on sys.getrecursionlimit().

This makes sure the test_avoid_infinite_loop_on_too_many_subqueries test
doesn't fail on systems with a non-default recursion limit.
","['django/db/models/sql/query.py', 'tests/queries/tests.py']",Test_avoid_infinite_loop_on_too_many_subqueries tends to fail in systems with non-default recursion limit due to recursive nested subquery detection.
6d11bb102dd6876a936297c1ee8cddbaca22eee3,1413818760,"Revert ""Fixed #23650 -- Prevented migrate from calling checks 3 times""

This reverts commit 8d6e1afe0be0570253a508f43e2ef89ae640984e.
call_command now always set skip_checks to True (tested in
user_commands).
","['django/core/management/commands/migrate.py', 'tests/migrations/test_commands.py']",The migrate command is redundantly calling checks three times causing performance issues.
adacbd64a062662f54d6e91dc4e460eff96b5dd5,1417608263,"Fixed ""no such test method"" error in template_tests.

Without this patch, you couldn't run an individual test
case in template_tests.

Refs #23768
",['tests/template_tests/syntax_tests/utils.py'],"Individual test cases in template_tests aren't runnable, producing a ""no such test method"" error."
1853724acaf17ed7414d54c7d2b5563a25025a71,1598944643,"Fixed CVE-2020-24584 -- Fixed permission escalation in intermediate-level directories of the file system cache on Python 3.7+.
","['django/core/cache/backends/filebased.py', 'tests/cache/tests.py']",There is a permission escalation issue in intermediate-level directories of the file system cache when using Python 3.7 and above.
2b1242abb3989f5d74e787b09132d01bcbee5b55,1674721900,"Fixed #34291 -- Fixed Meta.constraints validation crash on UniqueConstraint with ordered expressions.

Thanks Dan F for the report.

Bug in 667105877e6723c6985399803a364848891513cc.","['django/db/models/constraints.py', 'tests/constraints/tests.py']",A validation crash occurs on `UniqueConstraint` due to an issue with ordered expressions in `Meta.constraints`.
bb91c0a4dcad89ec9ad14306e9708d11ea385444,1502316136,"Refs #4518 -- Removed handling of empty strings in typecast_decimal().

It's unclear if the original change was needed, but it seems unneeded now.
Reverted 6fc10f50b0c9b877fffcad4893056cb91fa66b4f.",['django/db/backends/utils.py'],Empty strings being handled in typecast_decimal() seems to be causing an undefined issue.
1ecc0a395be721e987e8e9fdfadde952b6dee1c7,1546568515,"Fixed #30070, CVE-2019-3498 -- Fixed content spoofing possiblity in the default 404 page.

Co-Authored-By: Tim Graham <timograham@gmail.com>","['django/views/defaults.py', 'tests/handlers/tests.py']","The default 404 page is vulnerable to content spoofing, creating a security issue."
d9881a025c15d87b2a7883ee50771117450ea90d,1569219848,"Fixed #29915 -- Added support for values with hyphens to pattern lookups for UUIDField on backends without UUID datatype.

Support hyphens in iexact, contains, icontains, startswith, istartswith,
endswith and iendswith UUIDField filters on backends without UUID
datatype.
","['django/db/models/lookups.py', 'tests/model_fields/test_uuid.py']","Pattern lookups for UUIDField on backends without UUID datatype doesn't support values with hyphens in iexact, contains, icontains, startswith, istartswith, endswith, and iendswith filters."
3417ba03094b644f01597d6b5a43ccbc71a55378,1397309602,"Also allowed a non-overridden setting to be deleted

Refs #20032, #18824. Thanks ztorstri at gmail.com for the report.
","['django/conf/__init__.py', 'tests/settings_tests/tests.py']","Non-overridden settings are unable to be deleted, causing potential clutter and unused settings."
262fde94de5eb6544fc0f289575583436613c045,1652182951,"Fixed #33622 -- Allowed customizing error messages for invalid number of forms.

Co-authored-by: Mariusz Felisiak <felisiak.mariusz@gmail.com>
","['django/forms/formsets.py', 'tests/forms_tests/tests/test_formsets.py']","Custom error messages for invalid number of forms in a formset is not modifiable, necessitating a generic and potentially unclear error message."
c32d8f33d8e988a376e44997b8f3606d821f305e,1601885254,"Fixed #31926 -- Fixed recreating queryset with FilteredRelation when using a pickled Query.

In a pickled join, the join_fields had the same values, but weren't the
same object (contrary to when not pickling the QuerySet).
","['django/db/models/fields/reverse_related.py', 'tests/queryset_pickle/tests.py']",Recreating queryset with FilteredRelation fails when using a pickled Query due to discrepancy in join_fields values.
68efbfde5e35013c14c0c30cabb1c94b80a48807,1402500933,"Fixed #22068 -- Made runtests.py remove trailing slashes from test labels.

When using tab-completion it's easy to accidentally run a test with
a trailing slash, which causes INSTALLED_APPS to be set incorrectly.
Normalize the test labels to avoid this common error.

Thanks MattBlack for the suggestion.
",['tests/runtests.py'],Running tests with trailing slashes due to tab-completion causes INSTALLED_APPS to be incorrectly set.
ed9eca8457e1673d09adfc65392a214027053109,1658909184,"Refs #32948 -- Simplified WhereNode and Node.__deepcopy__()/add().

We can use copy() in Node.add() instead of create() as we don't need the
children to be cloned via [:] subscript in __init__().
","['django/db/models/sql/where.py', 'django/utils/tree.py']",Usage of create() in Node.add() is causing unnecessary cloning of children via [:] subscript in __init__().
a34cb5a6d408203f4fbdb364fc9768c026eda224,1582052069,"Refs #31282 -- Clarified M2O add/remove/set with PK behaviour.

Improved error message for remove() and added tests.
","['django/db/models/fields/related_descriptors.py', 'tests/many_to_one/tests.py']",Misleading behavior and error messages when adding/removing/setting One-to-Many fields with Primary Key in Django.
2839659b42ef80038152768b6cedae1016c59d90,1571032946,"Fixed #30868 -- Prevented unnecessary AlterField when renaming a referenced pk.

Regression introduced by dcdd219ee1, refs #25817.

Thanks Carlos E. C. Leite for the report and Mariusz for the bisect.
","['django/db/migrations/autodetector.py', 'tests/migrations/test_autodetector.py']","Unnecessary AlterField operation is triggered when renaming a referenced primary key, causing potential database inefficiencies."
123b1d3fcf79f091573c40be6da7113a6ef35b62,1667804790,"Fixed #34137 -- Made Model.refresh_from_db() clear cached generic relations.

Thanks Simon Charette for the implementation idea.","['django/db/models/base.py', 'tests/contenttypes_tests/test_fields.py']","Cached generic relations are not cleared when Model.refresh_from_db() is invoked, leading to outdated data."
2960e3a3a7ba66924233f076c6e6affbc6697a07,1467792227,"Fixed #26841 -- Avoid remake tables for altering togethers in sqlite3 (#6888)

alter_index_together and alter_unique_together no more use _remake_table method in sqlite3",['django/db/backends/sqlite3/schema.py'],Alteration of index_together and unique_together in sqlite3 unnecessarily results in remaking of tables using _remake_table method.

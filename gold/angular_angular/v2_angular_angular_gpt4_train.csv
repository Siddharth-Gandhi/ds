commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
27eaded62dbe059fc9ac02cfa7f53ccf8aebccbf,1669931010,"fix(compiler-cli): Produce diagnostic rather than crash when using invalid hostDirective (#48314)

Because the language service uses the compiler, we try to produce as
much useful information as possible rather than throwing hard errors.
Hard errors cause the compiler to crash. While this can be acceptable
when compiling a program as part of a regular build, this is undesirable
for the language service.

PR Close #48314
","['packages/compiler-cli/src/ngtsc/metadata/src/host_directives_resolver.ts', 'packages/compiler-cli/src/ngtsc/metadata/src/inheritance.ts', 'packages/compiler-cli/src/ngtsc/scope/src/typecheck.ts', 'packages/compiler-cli/test/ngtsc/host_directives_spec.ts']","Invalid hostDirective causes the compiler to crash instead of producing useful information, adversely affecting the language service."
ca677481a2ac3675b84698e2d16fd379e1799e2c,1586551995,"fix(core): undecorated-classes-with-decorated-fields migration should avoid error if base class has no value declaration (#36543)

The undecorated-classes-with-decorated-fields migration relies on
the type checker to resolve base classes of individual classes.

It could happen that resolved base classes have no value declaration.
e.g. if they are declared through an interface in the default types.
Currently the migration will throw in such situations because it assumes
that `ts.Symbol#valueDeclaration` is always present. This is not the
case, but we don't get good type-checking here due to a bug in the
TypeScript types. See:
https://github.com/microsoft/TypeScript/issues/24706.

Fixes #36522.

PR Close #36543
","['packages/core/schematics/test/undecorated_classes_with_decorated_fields_migration_spec.ts', 'packages/core/schematics/utils/typescript/find_base_classes.ts']","Undecorated-classes-with-decorated-fields migration crashes when attempting to resolve base classes without value declarations, especially when declared through an interface in default types."
69d4ebffa9ec0862b93b5b7e27ab4506e5c39a09,1626976877,"Revert ""fix(dev-infra): perform actual npm login verification for wombot proxy (#42871)"" (#42917)

This reverts commit fd92a3e87f08253ac8d20d01bc726c7460bd9ec9.

It turns out that wombot proxy will return who is logged in, but does so regardless of
if the users token is currently active.  Since we cannot rely on `npm whoami` to
determine the login state, we revert to our previous state of assuming new login is
needed.

PR Close #42917
","['dev-infra/ng-dev.js', 'dev-infra/release/publish/index.ts']","The `npm whoami` command in wombot proxy returns active user regardless of token validity, thus failing to correctly determine the login state."
6650d71fe2a958d277e7a7f409251fe648236a76,1602516766,"test(compiler-cli): make the `getDeclaration()` utility more resilient to code format (#38959)

Previously `getDeclaration()` would only return the first node that matched
the name passed in and then assert the predicate on this single node.
It also only considered a subset of possible declaration types that we might
care about.

Now the function will parse the whole tree collecting an array of all the
nodes that match the name. It then filters this array based on the predicate
and only errors if the filtered array is empty.

This makes this function much more resilient to more esoteric code formats
such as UMD.

PR Close #38959
","['packages/compiler-cli/ngcc/test/host/esm2015_host_spec.ts', 'packages/compiler-cli/src/ngtsc/testing/src/utils.ts']","The `getDeclaration()` utility is not resilient to different code formats, failing to parse certain types of declarations and only considering a subset of possible declaration types."
7180ec9e7c3e33c1acfba1f40190d2de804c062e,1623689877,"fix(forms): changes to status not always being emitted to statusChanges observable for async validators. (#42553)

When a FormControl, FormArray, or FormGroup is first constructed, if an async validator is attached, the `statusChanges` observable should receive a message when the validator complete (i.e. pending -> valid/invalid). If the validator was provided as part of the constructor options, it was not fired at construction time, which is fixed in this PR.

Fixes #35309.

PR Close #42553
","['packages/forms/src/model.ts', 'packages/forms/test/form_array_spec.ts', 'packages/forms/test/form_control_spec.ts', 'packages/forms/test/form_group_spec.ts']","`statusChanges` observable not receiving updates on status changes when async validator is provided at the construction of FormControl, FormArray, or FormGroup."
2003caf4b74bfc023252960daec5212bdfd696a0,1697474119,"fix(core): handle if alias in control flow migration (#52181)

This adds the support of `if ` conditions with `as` clause when migrating to the control flow syntax.
It now adds the required semicolon before the `as` when migrating the template.

Before: `@if (user$ | async as user) {`
After: `@if (user$ | async; as user) {`

PR Close #52181
","['packages/core/schematics/ng-generate/control-flow-migration/util.ts', 'packages/core/schematics/test/control_flow_migration_spec.ts']","The migration to the control flow syntax does not correctly handle `if` conditions with `as` clause, resulting in syntax errors."
58cdc2279152a07df3086efc354ac18b031e5e5e,1578524856,"fix(ngcc): handle UMD factories that do not use all params (#34660)

In some cases, where a module imports a dependency
but does not actually use it, UMD bundlers may remove
the dependency parameter from the UMD factory function
definition.

For example:

```
import * as x from 'x';
import * as z from 'z';
export const y = x;
```

may result in a UMD bundle including:

```
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ?
        factory(exports, require('x'), require('z')) :
    typeof define === 'function' && define.amd ?
        define(['exports', 'x', 'z'], factory) :
    (global = global || self, factory(global.myBundle = {}, global.x));
}(this, (function (exports, x) { 'use strict';
...
})));
```

Note that while the `z` dependency is provide in the call,
the factory itself only accepts `exports` and `x` as parameters.

Previously ngcc appended new dependencies to the end of the factory
function, but this breaks in the above scenario. Now the new
dependencies are prefixed at the front of parameters/arguments
already in place.

Fixes #34653

PR Close #34660
","['packages/compiler-cli/ngcc/src/rendering/umd_rendering_formatter.ts', 'packages/compiler-cli/ngcc/test/rendering/umd_rendering_formatter_spec.ts']",UMD bundlers removing unused dependencies from UMD factory function definitions breaks ngcc's logic when new dependencies are being appended to the factory function.
a99aa2904070a0543e84ba51115f2118319d18d2,1618515952,"fix(animations): allow animations on elements in the shadow DOM (#40134)

When determining whether to run an animation, the `TransitionAnimationPlayer`
checks to see if a DOM element is attached to the document. This is done by
checking to see if the element is ""contained"" by the document body node.

Previously, if the element was inside a shadow DOM, the engine would
determine that the element was not attached, even if the shadow DOM's
host was attached to the document. This commit updates the `containsElement()`
method on `AnimationDriver` implementations to also include shadow DOM
elements as being contained if their shadow host element is contained.

Further, when using CSS keyframes to trigger animations, the styling
was always added to the `head` element of the document, even for
animations on elements within a shadow DOM. This meant that those
elements never receive those styles and the animation would not run.
This commit updates the insertion of these styles so that they are added,
to the element's ""root node"", which is the nearest shadow DOM host, or the
`head` of the document if the element is not in a shadow DOM.

Closes #25672

PR Close #40134
","['packages/animations/browser/src/render/css_keyframes/css_keyframes_driver.ts', 'packages/animations/browser/src/render/shared.ts', 'packages/animations/browser/test/render/css_keyframes/css_keyframes_driver_spec.ts', 'packages/animations/browser/test/render/web_animations/web_animations_driver_spec.ts', 'packages/core/test/linker/projection_integration_spec.ts']",Animations are not being applied to elements within the Shadow DOM as they're incorrectly determined to be not attached to the document and CSS keyframes are wrongly added to the head of the document.
327980bf4964c948e4d53aa3d0262a2e8320d6af,1589993015,"fix(elements): correctly handle getting/setting properties before connecting the element (#36114)

`createCustomElements()` creates some getters/setters for properties
corresponding to component inputs that delegate to the
`NgElementStrategy`. However, it is not guaranteed that the element's
`NgElementStrategy` will have been created when these getters/setters
are called, because some polyfills (e.g. `document-register-element`) do
not call the constructor.

Previously, trying to get/set input properties before connecting the
element to the DOM (via `connectedCallback()`) would fail due to
`NgElementStrategy` not being created.

This commit ensures that the `NgElementStrategy` is always created
before used inside the input property getters/setters (similar to how it
is done for other methods of `NgElement`).

Mentioned in https://github.com/angular/angular/pull/31416/files#r300326698.

PR Close #36114
","['packages/elements/src/create-custom-element.ts', 'packages/elements/test/create-custom-element_spec.ts']","When using `createCustomElements()`, getters/setters for properties are called before the `NgElementStrategy` is created, causing failures when getting/setting input properties before connecting the element to the DOM."
c0d56840782aa93fc447e5fc02d25f0ad7eed827,1565388757,"fix: do not allow `squash! ` commits when merging (#32023)

While `fixup! ` is fine, `squash! ` means that the commit message needs
tweaking, which cannot be done automatically during merging (i.e. it
should be done by the PR author).

Previously, `validate-commit-message` would always allow
`squash! `-prefixed commits, which would cause problems during merging.

This commit changes `validate-commit-message` to make it configurable
whether such commits are allowed and configures the
`gulp validate-commit-message` task, which is run as part of the `lint`
job on CI, to not allow them.

NOTE: This new check is disabled in the pre-commit git hook that is used
      to validate commit messages, because these commits might still be
      useful during development.

PR Close #32023
","['tools/gulp-tasks/validate-commit-message.js', 'tools/validate-commit-message/validate-commit-message.js', 'tools/validate-commit-message/validate-commit-message.spec.js']",`Squash!`-prefixed commits are causing issues during the merging process due to their need for manual tweaking of commit messages.
c74917a7d505eeec5111cc816cbaf5fd5f49d601,1601324384,"refactor(compiler-cli): update type checker symbols to include more information (#38844)

This commit updates the symbols in the TemplateTypeCheck API and methods
for retrieving them:

* Include `isComponent` and `selector` for directives so callers can determine which
attributes on an element map to the matched directives.
* Add a new `TextAttributeSymbol` and return this when requesting a symbol for a `TextAttribute`.
* When requesting a symbol for `PropertyWrite` and `MethodCall`, use the
`nameSpan` to retrieve symbols.
* Add fix to retrieve generic directives attached to elements/templates.

PR Close #38844
","['packages/compiler-cli/src/ngtsc/annotations/test/directive_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/symbols.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/template_symbol_builder.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/ts_util.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/test_utils.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__get_symbol_of_template_node_spec.ts', 'packages/compiler/src/render3/view/t2_api.ts', 'packages/compiler/test/render3/view/binding_spec.ts']","Symbols in TemplateTypeCheck API lack important information such as `isComponent`, `selector` for directives, and doesn't properly handle `TextAttribute`, `PropertyWrite`, and `MethodCall` leading to issues in symbol retrieval."
6377487b1ab7679cef9a44f88440fe5e8eb97480,1675865885,"fix(migrations): only exclude bootstrapped declarations from initial standalone migration (#48987)

Currently the standalone migration is set up to skip any modules that have a `bootstrap` array with at least one element. This ends up being misleading for small apps who have everything in the root module.

These changes add some logic to only skip the root component.

Fixes #48944.

PR Close #48987
","['packages/core/schematics/ng-generate/standalone-migration/to-standalone.ts', 'packages/core/schematics/test/standalone_migration_spec.ts']","Standalone migration erroneously skips all modules with a bootstrap array, inconveniencing small apps where everything is in the root module."
a529d4f4f8e7db16df43fe697aed0551e75371c6,1620657381,"fix(core): do not retain dynamically compiled components and modules (#42003)

The JIT compiler has a mapping from component to the owning NgModule
and tracks whether a certain NgModule class has been verified; these
maps causes any JIT compiled component and NgModule to be retained even
if they are no longer referenced from anywhere else. This commit
switches the maps to `WeakMap` to allow garbage collecting any
components and NgModules that are no longer referenced elsewhere.

Fixes #19997

PR Close #42003
",['packages/core/src/render3/jit/module.ts'],"JIT compiled components and NgModules are not garbage collected even when no longer referenced due to persistent mapping from component to owning NgModule, leading to memory leaks."
1d141a8ab16c6db310b9a048a5017d3b6d013db8,1572560748,"fix(compiler-cli): attach the correct `viaModule` to namespace imports (#33495)

Previously declarations that were imported via a namespace import
were given the same `bestGuessOwningModule` as the context
where they were imported to. This causes problems with resolving
`ModuleWithProviders` that have a type that has been imported in
this way, causing errors like:

```
ERROR in Symbol UIRouterModule declared in
.../@uirouter/angular/uiRouterNgModule.d.ts
is not exported from
.../@uirouter/angular/uirouter-angular.d.ts
(import into .../src/app/child.module.ts)
```

This commit modifies the `TypescriptReflectionHost.getDirectImportOfIdentifier()`
method so that it also understands how to attach the correct `viaModule` to
the identifier of the namespace import.

Resolves #32166

PR Close #33495
","['packages/compiler-cli/ngcc/test/host/esm2015_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm5_host_spec.ts', 'packages/compiler-cli/src/ngtsc/reflection/src/typescript.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","Namespace imports are given the same `bestGuessOwningModule` as the context they're imported to, causing problems with resolving `ModuleWithProviders` and resulting in ""not exported"" errors."
3e97a1ea433974c8241e8e90a59b98b05a59e3fb,1611090194,"fix(language-service): fix go to definition for template variables and references (#40455)

The current ""go to definition"" is broken for template variables and
references when a template is overridden. This is because we get the
file url from the source span, which uses the overridden name
'override.html'. Instead, we can retrieve the template file from the
compiler in the same manner that is done for references.

Another way to fix this would have been to use the real template file path when
overriding a template, but this was the more straightforward fix since
the strategy was already used in find references and rename locations.

fixes https://github.com/angular/vscode-ng-language-service/issues/1054

PR Close #40455
","['packages/language-service/ivy/definitions.ts', 'packages/language-service/ivy/references.ts', 'packages/language-service/ivy/test/definitions_spec.ts', 'packages/language-service/ivy/test/test_utils.ts', 'packages/language-service/ivy/utils.ts']","""Go to definition"" feature for template variables and references is not functioning correctly when a template is overridden, leading to incorrect file url."
cfbb1a1e77b8adf11a857c8ff75dcb9460bba4c0,1578937700,"fix(ngcc): correctly detect dependencies in CommonJS (#34528)

Previously, `CommonJsDependencyHost.collectDependencies()` would only
find dependencies via imports of the form `var foo = require('...');` or
`var foo = require('...'), bar = require('...');` However, CommonJS
files can have imports in many different forms. By failing to recognize
other forms of imports, the associated dependencies were missed, which
in turn resulted in entry-points being compiled out-of-order and failing
due to that.

While we cannot easily capture all different types of imports, this
commit enhances `CommonJsDependencyHost` to recognize the following
common forms of imports:

- Imports in property assignments. E.g.:
  `exports.foo = require('...');` or
  `module.exports = {foo: require('...')};`

- Imports for side-effects only. E.g.:
  `require('...');`

- Star re-exports (with both emitted and imported heleprs). E.g.:
  `__export(require('...'));` or
  `tslib_1.__exportStar(require('...'), exports);`

PR Close #34528
","['packages/compiler-cli/ngcc/src/dependencies/commonjs_dependency_host.ts', 'packages/compiler-cli/ngcc/test/dependencies/commonjs_dependency_host_spec.ts']","CommonJS dependencies are not correctly detected and recognized, resulting in out-of-order entry-point compilation that leads to failures."
d6bc63fa38b6a55073118a8b5640252317419856,1581556465,"fix(ivy): error if directive with synthetic property binding is on same node as directive that injects ViewContainerRef (#35343)

In the `loadRenderer` we make an assumption that the value will always be an `LView`, but if there's a directive on the same node which injects `ViewContainerRef` the `LView` will be wrapped in an `LContainer`. These changes add a call to unwrap the value before we try to read the value off of it.

Fixes #35342.

PR Close #35343
","['packages/core/src/render3/instructions/shared.ts', 'packages/core/test/acceptance/property_binding_spec.ts']","Assuming `LView` for value in `loadRenderer` is erroneous when a directive on the same node injects `ViewContainerRef`, causing an `LContainer` wrap and leading to value read-off issues."
49804fe0176f91ab284bedb1cf5a18d255879150,1574812627,"fix(language-service): determine index types accessed using dot notation (#33884)

Commit 53fc2ed8bf345222e0c3d53ce7f13a4f27f3052e added support for
determining index types accessed using index signatures, but did not
include support for index types accessed using dot notation:

```typescript
const obj<T>: { [key: string]: T };
obj['stringKey']. // gets `T.` completions
obj.stringKey.    // did not peviously get `T.` completions
```

This adds support for determining an index type accessed via dot
notation by rigging an object's symbol table to return the string index
signature type a property access refers to, if that property does not
explicitly exist on the object. This is very similar to @ivanwonder's
work in #29811.

`SymbolWrapper` now takes an additional parameter to explicitly set the
type of the symbol wrapped. This is done because
`SymbolTableWrapper#get` only has access to the symbol of the index
type, _not_ the index signature symbol itself. An attempt to get the
type of the index type will give an error.

Closes #29811
Closes https://github.com/angular/vscode-ng-language-service/issues/126

PR Close #33884
","['packages/language-service/src/typescript_symbols.ts', 'packages/language-service/test/completions_spec.ts', 'packages/language-service/test/diagnostics_spec.ts']","Language service does not support determining index types accessed using dot notation, only supporting index types accessed using index signatures."
7de1469be62b08037681ee9e75614fb800700ef8,1665176593,"feat(core): introduce EnvironmentProviders wrapper type (#47669)

This commit introduces a new type `EnvironmentProviders` which can be used
in contexts where Angular accepted `Provider`s destined for
`EnvironmentInjector`s. This includes contexts such as `@NgModule.providers`
and `Route.providers`.

The new type is useful for preventing such providers from accidentally
ending up in `@Component.providers`. It can be used as the return type of
provider functions (such as `provideRouter`) to enforce this safety.

Because `Provider` allows `any[]` nested arrays, the compile-time safety
provided by `EnvironmentProviders` is easily circumvented. However, the
runtime shape of `EnvironmentProviders` is not compatible with component
injectors and will result in a runtime error if it leaks through (NG0207).

A new function `makeEnvironmentProviders` is used to construct this new type
from an array of providers.

The existing `importProvidersFrom` operation previously returned a very
similar type `ImportedNgModuleProviders` which had the same goal. This
machinery is switched over to use the new `EnvironmentProviders` interface
instead (in fact, `ImportedNgModuleProviders` is now just an alias to
`EnvironmentProviders`).

PR Close #47669
","['packages/core/src/application_ref.ts', 'packages/core/src/di/index.ts', 'packages/core/src/di/interface/defs.ts', 'packages/core/src/di/interface/provider.ts', 'packages/core/src/di/provider_collection.ts', 'packages/core/src/di/r3_injector.ts', 'packages/core/src/metadata/ng_module.ts', 'packages/core/src/render3/ng_module_ref.ts', 'packages/core/test/acceptance/di_spec.ts', 'packages/platform-browser/src/browser.ts', 'packages/platform-server/src/utils.ts', 'packages/router/src/models.ts']","Any[] nested arrays are being accidentally accepted in Angular's `@NgModule.providers` and `Route.providers`, causing runtime errors when incompatible with component injectors."
269a775287069eaa30d8c99812631672ae4aef61,1607627086,"refactor(compiler-cli): produce binding access when checkTypeOfOutputEvents is false (#39515)

When `checkTypeOfOutputEvents` is `false`, we still need to produce the access
to the `EventEmitter` so the Language Service can still get the
type information about the field. That is, in a template `<div
(output)=""handle($event)""`, we still want to be able to grab information
when the cursor is inside the ""output"" parens. The flag is intended only
to affect whether the compiler produces diagnostics for the inferred
type of the `$event`.

PR Close #39515
","['packages/compiler-cli/src/ngtsc/typecheck/src/template_symbol_builder.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_check_block.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_check_block_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__get_symbol_of_template_node_spec.ts', 'packages/language-service/ivy/test/quick_info_spec.ts']","When `checkTypeOfOutputEvents` is `false`, the Language Service is unable to retrieve type information about the field in a template, hindering proper functionality."
5640cedc82151dfcfc18fa59a740d0ffa26cd427,1558632708,"refactor(core): static-query migration should always use template strategy (#30628)

We are removing the prompt for the `static-query` migration and make the
template strategy the migration strategy for the migration. The usage
strategy is good for best-practices, but for now we want to ensure that
the migration is a seamless as possible and that is only achievable my
re-using the same logic that View Engine uses for determining the
timing of a query.

PR Close #30628
","['packages/core/schematics/migrations/static-queries/index.ts', 'packages/core/schematics/migrations/static-queries/strategy_prompt.ts', 'packages/core/schematics/test/static_queries_migration_usage_spec.ts']","The current `static-query` migration strategy isn't optimal, leading to possible inconsistencies with the timing of queries as interpreted by the View Engine."
b6f439d91bfe513e86188ce7bbd38447bb1cd9eb,1568244503,"refactor(language-service): remove unnecessary size check (#32587)

Presumably, the size of the results array was checked so that a TS
source file wouldn't have to be created if there were no diagnostics.
However, it is very likely that a TS program already has the
`ts.SourceFile` for file when diagnostics are queried. This removal is
just to make the function a minimal amount simpler.

PR Close #32587
",['packages/language-service/src/language_service.ts'],"Redundant size checks of diagnostic results array can overcomplicate the function, despite the TS program likely already containing the `ts.SourceFile`."
32eafef6a715d25a939f757f9c0b149b4a4113a4,1585849908,"fix(core): undecorated-classes-with-decorated-fields migration does not decorate derived classes (#35339)

The `undecorated-classes-with-decorated-fields` migration has been
introduced with 904a2018e0d3394ad91ffb6472f8271af7845295, but misses
logic for decorating derived classes of undecorated classes which use
Angular features. Example scenario:

```ts
export abstract class MyBaseClass {
  @Input() someInput = true;
}

export abstract class BaseClassTwo extends MyBaseClass {}

@Component(...)
export class MyButton extends BaseClassTwo {}
```

Both abstract classes would need to be migrated. Previously, the migration
only added `@Directive()` to `MyBaseClass`, but with this change, it
also decorates `BaseClassTwo`.

This is necessary because the Angular Compiler requires `BaseClassTwo` to
have a directive definition when it flattens the directive metadata for
`MyButton` in order to perform type checking. Technically, not decorating
`BaseClassTwo` does not break at runtime.

We basically want to enforce consistent use of `@Directive` to simplify the
mental model. [See the migration guide](https://angular.io/guide/migration-undecorated-classes#migrating-classes-that-use-field-decorators).

Fixes #34376.

PR Close #35339
","['packages/core/schematics/migrations/google3/undecoratedClassesWithDecoratedFieldsRule.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/google3/tslint_update_recorder.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/index.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/transform.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/update_recorder.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/utils.ts', 'packages/core/schematics/test/google3/undecorated_classes_with_decorated_fields_spec.ts', 'packages/core/schematics/test/undecorated_classes_with_decorated_fields_migration_spec.ts']","Undecorated derived classes of undecorated classes using Angular features aren't being handled by `undecorated-classes-with-decorated-fields` migration, causing a failure in directive metadata flattening for Angular Compiler type checking."
6c84c5f513d8a0775ab2f7e5de46d5619cbcbc19,1631204484,"fix(animations): emit pure annotations to static property initializers (#43344)

Currently the pure annotations comments are not emitted because unless the entire expression is wrapped in braces.

See the below TypeScript playgrounds

https://www.typescriptlang.org/play?target=99&module=1&ts=4.4.2&ssl=8&ssc=1&pln=1&pc=1#code/MYGwhgzhAEByCuIQEkB2ArApsALgewCdoBvAXwFgAoKzADwAdCdowAjCHAsXaUSGNFlyESVaNA5gcAS2BwAqgBlF0ALzQA9ACpoAAQD6+gAryASgFFD0LRuipMAdziIUGbPgIAKAJQBuKhTUlMB4qBB4IJgAdCB4AOaegu6EUbBKin5UQA
```js
""use strict"";
Object.defineProperty(exports, ""__esModule"", { value: true });
exports.Injector = void 0;
class NullInjector {
}
class Injector {
}
exports.Injector = Injector;
Injector.NULL = new NullInjector();
console.log(Injector.NULL);

```

https://www.typescriptlang.org/play?target=99&module=1&ts=4.4.2&ssl=4&ssc=18&pln=4&pc=33#code/MYGwhgzhAEByCuIQEkB2ArApsALgewCdoBvAXwFgAoKzADwAdCdowAjCHAsXaUSGNFlyESVaNA5gcAS2BwAqgBlF0ALzQAFAHoAVNAACAfUMAFeQCUAoseg6t0VJgDucRCgzZ8BDQEofAbioKakpgPFQIPBBMADoQPABzDUFPQhjYJUUAqiA

```js
""use strict"";
Object.defineProperty(exports, ""__esModule"", { value: true });
exports.Injector = void 0;
class NullInjector {
}
class Injector {
}
exports.Injector = Injector;
Injector.NULL = ( /* @__PURE__ */new NullInjector());
console.log(Injector.NULL);
```

PR Close #43344
","['packages/animations/browser/src/render/animation_driver.ts', 'packages/animations/browser/src/render/special_cased_styles.ts']","Pure annotations comments are currently not being emitted unless the entire expression is wrapped in braces, affecting static property initializers in animations."
4aecf9253bf0854e765b1f80ebf384e9a31ef113,1563484927,"fix(ivy): support older CLI versions that do not pass a list of changed files (#31322)

Versions of CLI prior to angular/angular-cli@0e339ee did not expose the host.getModifiedResourceFiles() method.

This meant that null was being passed through to the IncrementalState.reconcile() method
to indicate that there were either no changes or the host didn't support that method.

This commit fixes a bug where we were checking for undefined rather than null when
deciding whether any resource files had changed, causing a null reference error to be thrown.

This bug was not caught by the unit testing because the tests set up the changed files
via a slightly different process, not having access to the CompilerHost, and these test
were making the erroneous assumption that undefined indicated that there were no
changed files.

PR Close #31322
","['packages/compiler-cli/src/main.ts', 'packages/compiler-cli/src/ngtsc/incremental/src/state.ts', 'packages/compiler-cli/src/perform_compile.ts', 'packages/compiler-cli/test/ngtsc/env.ts', 'packages/compiler-cli/test/ngtsc/incremental_spec.ts']","Older versions of CLI are triggering null reference errors in IncrementalState.reconcile() process due to lack of exposure to host.getModifiedResourceFiles(), causing improper detection of resource files changes."
ded7beed3241714373536ae7d76450d0b3ee2a5f,1604515477,"test(compiler-cli): run the linker transform in the compliance test's prelink target (#39518)

In PR #38938 an additional Bazel target was introduced for the compliance
tests, as preparation to run the compliance tests in partial compilation
mode and then apply the linker transform. The linker plugin itself was
not available at the time but has since been implemented, so this commit
updates the prelink target of the compliance tests to apply the linker
transform using the Babel plugin.

Actually emitting partial compilations to be transformed will be done in
follow-up work.

PR Close #39518
","['packages/compiler-cli/test/compliance/mock_compile/index.ts', 'packages/compiler-cli/test/compliance/prelink/bootstrap.ts']","The compliance tests' prelink target is not applying the linker transform in partial compilation mode, even though the linker plugin is already implemented."
f0366843ea157f17cfafcfc49a72c31d69561caa,1571418916,"fix(bazel): Remove angular devkit and restore ngc postinstall (#32946)

This commit removes `@angular-devkit/build-angular` from package.json
for a project that opts into Bazel. This is because the package adds a
dependency on node-sass, which is rejected by Bazel due to its absense.

This commit also appends to `scripts.postinstall` if it already exists.
This is needed because `ng new` in CLI v9 now automatically adds a
postinstall step for `ngcc`.

PR Close #32946
","['integration/bazel-schematics/test.sh', 'packages/bazel/src/schematics/ng-add/index.ts', 'packages/bazel/src/schematics/ng-add/index_spec.ts']","Opting into Bazel for a project leads to rejection due to the absence of dependency node-sass brought in by `@angular-devkit/build-angular`, also `ng new` in CLI v9 adds an automatic postinstall step for `ngcc` causing issues."
9b3d4f5575bfccfbbfb943dc9689f3915dd63752,1627923193,"refactor(compiler): define interfaces for each lexer token (#42062)

These token interfaces will make it easier to reason about tokens in the
parser and in specs.

Previously, it was never clear what items could appear in the `parts`
array of a token given a particular `TokenType`. Now, each token interface
declares a labelled tuple for the parts, which helps to document the token
better.

PR Close #42062
","['packages/compiler/src/i18n/i18n_parser.ts', 'packages/compiler/src/ml_parser/ast.ts', 'packages/compiler/src/ml_parser/html_whitespaces.ts', 'packages/compiler/src/ml_parser/lexer.ts', 'packages/compiler/src/ml_parser/parser.ts', 'packages/compiler/src/ml_parser/tokens.ts', 'packages/compiler/test/ml_parser/html_parser_spec.ts', 'packages/compiler/test/ml_parser/lexer_spec.ts']",Unclear items in the `parts` array of a lexer token given a `TokenType` leads to difficulties in reasoning about tokens in the parser and in specifications.
32f368af2dc38218c63501891cb73b2d8793c630,1634578250,"fix(router): Do not clear currentNavigation if already set to next one (#43852)

Experimentation with the Router URL management exposed a situation where
the `currentNavigation` was being cleared in the `finalize` after the
`currentNavigation` was already set to the next one.

This change ensures that the `currentNavigation` is only cleared if the
id of the finalized transition matches the one on the
`currentNavigation` object.

PR Close #43852
","['packages/router/src/router.ts', 'packages/router/test/integration.spec.ts']","Router URL management issues; `currentNavigation` is prematurely cleared in the `finalize` even when it's set to the next transition, leading to navigation errors."
6db342a87ab3c8995f9cdafa68b03581c7c92989,1611600942,"test(compiler-cli): reset i18n message index in compliance test macro (#40529)

The compliance test runner has various macros that process the
expectation files before actually checking their contents. Among those
macros are i18n helpers, which uses a global message counter to be able
to uniquely identify ICU variables.

Because of the global nature of this message index, it was susceptible
to ordering issues which could result in flaky tests, although it failed
very infrequently.

This commit resets the global message counter before applying the macros.
As a result of this change an expectation file had to be updated; this
is actually a bug fix as said test used to fail if run in isolation (if
`focusTest: true` was set for that particular testcase).

PR Close #40529
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/icu_logic/html_content.js', 'packages/compiler-cli/test/compliance/test_helpers/expected_file_macros.ts', 'packages/compiler-cli/test/compliance/test_helpers/i18n_helpers.ts']","Flaky tests due to global message counter in compliance test runner's i18n helpers, caused by ordering issues. This causes certain tests to fail when run in isolation."
4d66185cbcb42c7e1b959f3b7ec9c34e9ef08952,1611603674,"fix(forms): properly cleanup in cases when FormControlName has no CVA (#40526)

PR #39235 introduced additional cleanup logic for form controls and directives. The cleanup logic relies
on the presence of ControlValueAccessor instances on FormControlName and FormControl directives. In general
these fields are present and there are also checks to make sure that the mentioned directive instances are
created with CVAs. However some scenarios (primarily tests) may invoke the logic in a way that the directive
instance would not be fully initialized, thus causing CVA to be absent. As a result, the cleanup logic fails
while trying to call some methods on associated CVA instances.

This commit updates the cleanup logic to take into account the situation when CVA is not present.

Fixes #40521.

PR Close #40526
","['packages/forms/src/directives/shared.ts', 'packages/forms/test/reactive_integration_spec.ts']","The cleanup logic for form controls and directives fails when ControlValueAccessor (CVA) instances are absent on FormControlName and FormControl directives, primarily seen in testing scenarios."
b17dc7a7f78fa0062203fa1c6f69ffd9253be3c0,1669661606,"refactor(router): directly inject internal properties from DI (#48202)

Rather than accessing router internal properties that are available in DI,
this commit directly injects those dependencies in the navigation transition
handler. Note that there are several other items that _should_ be injectable
in DI (like the TitleStrategy) but because those are part of the Router public
interface and writeable(!), they might be changed during runtime. We
have to get these other items from the Router for now...

PR Close #48202
","['packages/router/src/navigation_transition.ts', 'packages/router/src/router.ts']",Accessing router internal properties available in Dependency Injection (DI) during navigation transition handling may lead to inconsistencies due to potential runtime changes.
c59717571ed5e90ec4b6681f43d598339ab46078,1557249888,"fix(ivy): ngcc - handle missing entry-point dependencies better (#30270)

If an entry-point has a missing dependency then all the entry-points
that would have pointed to that dependency are also removed from
the dependency graph.

Previously we were still processing the dependencies of an entry-point
even if it had already been removed from the graph because it depended
upon a missing dependency that had previously been removed due to another
entry-point depending upon it.

This caused the dependency processing to crash rather than gracefully
logging and handling the missing invalid entry-point.

Fixes #29624

PR Close #30270
","['packages/compiler-cli/ngcc/src/dependencies/dependency_resolver.ts', 'packages/compiler-cli/ngcc/test/dependencies/dependency_resolver_spec.ts']","When an entry-point with a missing dependency is removed from the dependency graph, the dependency processing still continues leading to crashes instead of a graceful logging of the missing invalid entry-point."
44acf6734b5b925d04c2ccc85d292c05094bcd7f,1585332889,"build: allow custom module resolution for ts-circular-deps tests (#36226)

Currently the `ts-circular-deps` tool uses a hard-coded module resolver
that only works in the `angular/angular` repository.

If the tool is consumed in other repositories through the shared
dev-infra package, the module resolution won't work, and a few
resolvable imports (usually cross-entry-points) are accidentally
skipped. For each test, the resolution might differ, so tests can
now configure their module resolution in a configuration file.

Note that we intentionally don't rely on tsconfig's for module
resolution as parsing their mappings rather complicates the
circular dependency tool. Additionally, not every test has a
corresponding tsconfig file.

Also, hard-coding mappings to `@angular/*` while accepting a
path to the packages folder would work, but it would mean
that the circular deps tool is no longer self-contained. Rather,
and also for better flexibility, a custom resolver should be
specified.

PR Close #36226
","['dev-infra/ts-circular-dependencies/config.ts', 'dev-infra/ts-circular-dependencies/index.ts', 'packages/circular-deps-test.conf.js']","The 'ts-circular-deps' tool hard-codes module resolution, making it unusable in repositories other than 'angular/angular' and causing potentially resolvable imports to be inadvertently missed."
d80d6ea3f6bc153b864550e6189f4817729b1bf0,1615308771,"fix(docs-infra): fix styling of `<code>` elements on older browsers (#41051)

Previously, styling of `<code>` elements utilized the `:not()` CSS
pseudo-class with multiple selectors (`:not(h1, h2, ...)`). It turns out
that older browsers (such as IE11) do not support multiple selectors in
a single `:not()` instance.
(See [MDN][1] and [CanIUse][2] for more info.)

This commit fixes `<code>` styling to use multiple separate `:not()`
instances instead (`:not(h1):not(h2)...`), so that they are styled
correctly on older browsers as well.

NOTE:
This change seems to trigger some kind of bug in LightHouse that causes
the a11y score of `/start` to be calculated as 0 (which is clearly
wrong). This happens on Linux (tested on CI and locally using the
Windows Subsystem for Linux (WSL)) - on Windows the score is computed
correctly as 98/100.
([Example failure][3])

The bug seems to be related to the layout of the content and goes away
if we change the viewport size (for example, switching to LightHouse's
`desktop` config) or make another change that affects the content's
layout (for example, reducing the padding of `<code>` elements).

To work around the issue, this commit updates the `test-aio-a11y.js`
script to test `/start-routing` instead of `/start`.

[1]: https://developer.mozilla.org/en-US/docs/Web/CSS/:not#description:~:text=Using%20two%20selectors
[2]: https://caniuse.com/css-not-sel-list
[3]: https://circleci.com/gh/angular/angular/931038

PR Close #41051
",['aio/scripts/test-aio-a11y.js'],Styling of `<code>` elements on older browsers such as IE11 is not displayed correctly due to the use of the `:not()` CSS pseudo-class containing multiple selectors. This causes issues in LightHouse scores on Linux platforms.
46aec4a58f08a9a0d0600a3e0188f35c2ec1764b,1548448741,"feat(ivy): support host properties in DebugElement.properties (#28355)

DebugElement.properties should contain a map of element
property names to element property values, with entries
for both normal property bindings and host bindings.
Many Angular core tests depend on this map being present.

This commit adds support for host property bindings in
DebugElement.properties, which fixes the Angular core tests.
There is still work to be done for normal property bindings.

PR Close #28355
","['packages/core/src/debug/debug_node.ts', 'packages/core/src/render3/instructions.ts', 'packages/core/src/render3/interfaces/view.ts', 'packages/core/test/linker/integration_spec.ts', 'packages/core/test/linker/ng_module_integration_spec.ts', 'packages/core/test/test_bed_spec.ts', 'packages/platform-browser/test/testing_public_spec.ts']","DebugElement.properties map does not contain entries for host property bindings, causing dependency issues in Angular core tests."
0c4c773fca2e950983e1b2bdff27914512e13d96,1692378062,"refactor(compiler): generate switch block instructions (#51380)

Adds the logic to generate the instructions for `switch` instructions. For the following block:

```html
{#switch value()}
  {:case 0} case 0
  {:case 1} case 1
  {:case 2} case 2
  {:default} default
{/switch}
```

The compiler will produce the following output:

```ts
function App_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, App_Case_0_Template, 1, 0);
    ɵɵtemplate(1, App_Case_1_Template, 1, 0);
    ɵɵtemplate(2, App_Case_2_Template, 1, 0);
    ɵɵtemplate(3, App_Case_3_Template, 1, 0);
  }
  if (rf & 2) {
    let App_contFlowTmp;
    ɵɵconditional(0, (App_contFlowTmp = ctx.value()) === 0 ? 0 : App_contFlowTmp === 1 ? 1 : App_contFlowTmp === 2 ? 2 : 3);
  }
}
```

PR Close #51380
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/GOLDEN_PARTIAL.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/basic_switch.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/basic_switch_template.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/nested_switch.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/nested_switch_template.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/switch_with_pipe.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/switch_with_pipe_template.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/switch_without_default.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_control_flow/switch_without_default_template.js', 'packages/compiler/src/render3/r3_identifiers.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/core/src/render3/jit/environment.ts']",The compiler is unable to properly generate instructions for `switch` block resulting in incorrect output being produced.
5dbf3572248941698088798c655b4c412e7ee0cb,1601673579,"feat(compiler-cli): support getting resource dependencies for a source file (#38048)

The compiler maintains an internal dependency graph of all resource
dependencies for application source files. This information can be useful
for tools that integrate the compiler and need to support file watching.
This change adds a `getResourceDependencies` method to the
`NgCompiler` class that allows compiler integrations to access resource
dependencies of files within the compilation.

PR Close #38048
","['packages/compiler-cli/src/ngtsc/core/src/compiler.ts', 'packages/compiler-cli/src/ngtsc/core/test/compiler_test.ts', 'packages/compiler-cli/src/ngtsc/incremental/src/dependency_tracking.ts']","The compiler's internal dependency graph of application source files' resource dependencies is inaccessible, hindering tool integrations that require file watching support."
6fbfb5a159e09591f8f5be7da11fd4fac233f06c,1560542996,"feat(ivy): ngcc - recognize static properties on the outer symbol in ES5 (#30795)

Packages that have been compiled using an older version of TypeScript
can have their decorators at the top-level of the ES5 bundles, instead
of inside the IIFE that is emitted for the class. Before this change,
ngcc only took static property assignments inside the IIFE into account,
therefore missing the decorators that were assigned at the top-level.

This commit extends the ES5 host to look for static properties in two
places. Testcases for all bundle formats that contain ES5 have been added
to ensure that this works in the various flavours.

A patch is included to support UMD bundles. The UMD factory affects how
TypeScripts binds the static properties to symbols, see the docblock of
the patch function for more details.

PR Close #30795
","['packages/compiler-cli/ngcc/src/host/esm5_host.ts', 'packages/compiler-cli/ngcc/src/packages/bundle_program.ts', 'packages/compiler-cli/ngcc/src/packages/patch_ts_expando_initializer.ts', 'packages/compiler-cli/ngcc/test/helpers/utils.ts', 'packages/compiler-cli/ngcc/test/host/commonjs_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm5_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/umd_host_spec.ts']","Ngcc fails to recognize decorators assigned at the top-level of ES5 bundles, which are compiled using older Typescript versions, only considering those inside the IIFE."
e842fd75acd4c0096d3d722c9991f25f61a345c1,1662483792,"test(service-worker): fix default value of `Request#credentials` (`omit` --> `same-origin`) (#47260)

Previously, the default value of `MockRequest#credentials` (used in
testing) was set to `omit`. This was different than the default value
used in browsers, which is `same-origin` (see [Request docs on MDN][1])
and could lead to incorrect test results.

This commit changes the default value for `credentials` to `same-origin`
to match what would happen in the browser.

[1]: https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials

PR Close #47260
",['packages/service-worker/worker/testing/fetch.ts'],"The default value of `MockRequest#credentials` used in testing is set to `omit`, differing from the browser's default `same-origin`, potentially leading to inaccurate test results."
9366a3c5f39853321c5871b8425989b0216a0053,1646076685,"docs: improve structure of http example (#44986)

improve the http aio example by:
 - adding a background color to the messages section so that it
   can be distinguished from the others
 - avoid using `hr` elements to divide the various sections, use
   css instead (so that the divisions can also be omitted when
   the sections are not being shown)
 - fix the erroneous presence of an input text element inside a button
   (see: https://github.com/angular/angular/pull/44557#discussion_r787239658)

PR Close #44986
","['aio/content/examples/http/src/app/app.component.ts', 'aio/content/examples/http/src/app/heroes/heroes.component.ts', 'aio/content/examples/http/src/app/messages/messages.component.ts']","The HTTP aio example has an unclear structure with indistinguishable sections, improper CSS division, and an incorrect presence of an input text element inside a button."
f245c6bb15aa79817a166d711e6ec63b2d522d47,1597871924,"fix(core): remove closing body tag from inert DOM builder (#38454)

Fix a bug in the HTML sanitizer where an unclosed iframe tag would
result in an escaped closing body tag as the output:

_sanitizeHtml(document, '<iframe>') => '&lt;/body&gt;'

This closing body tag comes from the DOMParserHelper where the HTML to be
sanitized is wrapped with surrounding body tags. When an opening iframe
tag is parsed by DOMParser, which DOMParserHelper uses, everything up
until its matching closing tag is consumed as a text node. In the above
example this includes the appended closing body tag.

By removing the explicit closing body tag from the DOMParserHelper and
relying on the body tag being closed implicitly at the end, the above
example is sanitized as expected:

_sanitizeHtml(document, '<iframe>') => ''

PR Close #38454
","['packages/core/src/sanitization/inert_body.ts', 'packages/core/test/sanitization/html_sanitizer_spec.ts']","The HTML sanitizer incorrectly outputs an escaped closing body tag when sanitizing an unclosed iframe tag, incorrectly including it in the sanitized final output."
bd3b0564e6cde66ae6f5d9d861e8d5924488dc2e,1561137486,"fix(ivy): sync ViewRefs between multiple ViewContainerRefs (#30985)

Previously, multiple ViewContainerRef instances (obtained by injecting
ViewContainerRef multiple times) each had private state that could be out of
sync with actual LContainer, if views were inserted/removed/queried across
the different instances. In particular each instance had its own array which
tracked ViewRefs inserted via that instance.

This commit moves the ViewRefs array onto the LContainer itself, so that it
can be shared across multiple ViewContainerRef instances. A test is added
that verifies ViewContainerRefs now provide a consistent view of the
container.

FW-1377 #resolve

PR Close #30985
","['packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/interfaces/container.ts', 'packages/core/src/render3/view_engine_compatibility.ts', 'packages/core/test/acceptance/di_spec.ts']","Different instances of ViewContainerRef, each with their own ViewRefs array, can become out of sync with the actual LContainer when views are inserted, removed or queried."
e0969b248077deab261f84e4c1be7ab112be1bd7,1560802047,"ci: update nodejs version to v10.16.0 (#31088)

Updates the NodeJS version to the latest stable version at the time of
writing (v10.16.0). We need to update our image to use a minimum NodeJS
version of v10.15.0 because new CLI apps automatically install a non-locked
version of selenium-webdriver that now requires NodeJS >= 10.15.0 since the
latest release of 17th June 2019 (4.0.0-alpha.3).

See CI failures: https://circleci.com/gh/angular/angular/359077

PR Close #31088
",['.circleci/env.sh'],"Current NodeJS version is lower than the minimum required (v10.15.0) by new CLI apps that install a non-locked version of selenium-webdriver, leading to CI failures."
56bd21de6f62893140675c874c556fd1b95232d6,1625078628,"feat(dev-infra): introduce shared tool for validating API signature (#42688)

For the last years the Angular repositories relied on `ts-api-guardian`
for testing the public API signature. This project worked well in
general but its another inconvenience to maintain if we could rely on
Microsoft's `api-extractor` tool.

Especially since with TypeScript 4.3 issues with export aliases appeared
that would require us to extend TS API guardian to support such exports.
This is not as straightforward as it sounds, given it requires rewriting
of declarations to show-case the proper name in the API golden. Microsoft's
API extractor has integrated support for this.

As of TypeScript 4.3, we want to start using the new `override` keyword.
We are not able to use that keyword currently because an old version of
API extractor is used in the `ng_module` rule to flatten the types into
a single file. To fix this, we need to update `api-extractor`, but this
unveils the issue with TS API guardian because the most recent version
of api-extractor uses alias exports to avoid potential conflicts
with globals available through the TypeScript default libraries (e.g.
`dom.d.ts`).

PR Close #42688
","['dev-infra/bazel/api-golden/find_entry_points.ts', 'dev-infra/bazel/api-golden/index.bzl', 'dev-infra/bazel/api-golden/index.ts', 'dev-infra/bazel/api-golden/index_npm_packages.ts', 'dev-infra/bazel/api-golden/test_api_report.ts']","The current `ts-api-guardian` tool is causing issues with the latest TypeScript 4.3's export aliases and `override` keyword, thus heavily influencing Angular's public API signature testing and maintenance."
4ba478267ec4081ebeab1760968b2d58156948b8,1579811142,"feat(language-service): specific suggestions for template context diags (#34751)

This commit elaborates diagnostics produced for invalid template
contexts by including the name of the embedded template type using the
template context, and in the common case that the implicity property is
being referenced (e.g. in a `for .. of ..` expression), suggesting to
refine the type of the context. This suggestion is provided because
users will sometimes use a base class as the type of the context in the
embedded view, and a more specific context later on (e.g. in an
`ngOnChanges` method).

Closes https://github.com/angular/vscode-ng-language-service/issues/251

PR Close #34751
","['packages/language-service/src/expression_diagnostics.ts', 'packages/language-service/test/diagnostics_spec.ts', 'packages/language-service/test/project/app/main.ts', 'packages/language-service/test/project/app/parsing-cases.ts']","Diagnostics for invalid template contexts lack specificity and do not suggest refining the context type in case of implicitly referenced properties, leading to potential use of incorrect base classes in the embedded view context."
8fb83ea1b524663bd804908308d528c338450270,1612805690,"feat(forms): introduce min and max validators (#39063)

This commit adds the missing `min` and `max` validators.

BREAKING CHANGE:

Previously `min` and `max` attributes defined on the `<input type=""number"">`
were ignored by Forms module. Now presence of these attributes would
trigger min/max validation logic (in case `formControl`, `formControlName`
or `ngModel` directives are also present on a given input) and
corresponding form control status would reflect that.

Fixes #16352

PR Close #39063
","['goldens/public-api/forms/forms.d.ts', 'packages/forms/src/directives.ts', 'packages/forms/src/directives/validators.ts', 'packages/forms/src/forms.ts', 'packages/forms/test/reactive_integration_spec.ts', 'packages/forms/test/template_integration_spec.ts']","`<input type=""number"">` attributes `min` and `max` are ignored by Forms module, not triggering validation logic, causing incorrect form control status."
e986a9787b7787c3cffef69d06a2e7e1228e3f40,1614207944,"fix(language-service): use single entry point for Ivy and View Engine (#40967)

Currently there are two entry points for the `@angular/language-service`
package:

- `@angular/language-service`
  This default entry point is for View Engine LS. Through the redirection
  of `main` field in `package.json`, it resolves to
  `./bundles/language-service.js`.
- `@angular/language-service/bundles/ivy.js`
  This secondary entry point is for Ivy LS.

TypeScript recently changed the behavior of tsserver to allow only package
names as plugin names [1] for security reasons. This means the secondary
entry point for Ivy LS can no longer be used.
We implemented a quick hack in the module resolver (in the extension repo)
to fix this, but the long term fix should be in `@angular/language-service`.

Here, the `main` field in `package.json` is changed to `index.js`, and in the
index file we conditionally load View Engine or Ivy based on the input config.
This eliminates the need for multiple entry points.

As part of this PR, I also removed all source code for View Engine and Ivy
included in the NPM package. Consumers of this package should run the bundled
output and nothing else. This would help us prevent an accidental import that
results in execution of unbundled code.

[1]: https://github.com/microsoft/TypeScript/pull/42713

PR Close #40967
","['packages/language-service/api.ts', 'packages/language-service/index.ts']","The Angular Language Service package has separate entry points for the Ivy and View Engine, a practice that is no longer supported due to recent TypeScript security updates and leads to issues with module resolution."
8572e885b4fbb93a881612753af876834321754d,1593124843,"test(compiler-cli): fix assertion of diagnostic filename on Windows (#37758)

Several partial_evaluator tests in the diagnostics_spec check assert
correctness of diagnostic filenames. Previously these assertions compared
a resolved (`absoluteFrom`) filename with the TypeScript `ts.SourceFile`'s
`fileName` string, which caused the tests to fail on Windows because the
drive letter case differed.

This commit changes the assertions to use `absoluteFromSourceFile` instead
of the `fileName` string, resulting in an apples-to-apples comparison of
canonicalized paths.

PR Close #37758
",['packages/compiler-cli/src/ngtsc/partial_evaluator/test/diagnostics_spec.ts'],Differences in case sensitivity for drive letters on Windows cause partial_evaluator tests in diagnostics_spec to fail when asserting diagnostic filenames.
243c6797f45fc0060b05031c23df29d17b72aa72,1654276014,"test(router): illustrate canceling of intermediate results in canLoad (#46231)

This adds a test to illustrate the ""canceling"" behavior we get from the
`Observable` chain in the Router. A new navigation cancels ongoing ones,
and that means also preventing intermediate results in user guards from
executing. This test is important when thinking about future refactors
which might attempt to change the details of how the `applyRedirects`
operator executes.

PR Close #46231
",['packages/router/test/integration.spec.ts'],Ongoing navigations within the Router's `Observable` chain may cancel causing prevention of execution of intermediate results in user guards.
2f1a862b831f44b9b923dcc52f94af69d3b40aa6,1556033607,"build(docs-infra): upgrade preview server docker image to Debian 9 (#29976)

Previously, the preview server docker image was based on Debian 8
(jessie). Recently, `jessie-updates` and `jessie-backborts` were removed
from the Debian mirrors ([more info][1]), thus breaking new builds of
the image.

Instead of updating `/etc/apt/sources.list` to remove the obsolete
sources, this commit upgrades to Debian 9 (stretch).

(The GCE VM running the preview server docker container was also
upgraded from Debian 8 to 9 this morning.)

---
Other changes:
- Removed dependency on `chkconfig`, which is not supported on Debian 9.
- Installing `nginx` from the regular repositories (instead of
  `*-backports).
- Upgraded to `pm2` v3, which can handle hooking itself up to system
  startup better (without `chkconfig` - see above).
- Updated tests to reflect the fact that `nginx` has dropped the reason
  phrase in response status lines for HTTP/2 (in compliance with
  [the spec][2]). (HTTP/1.1: `HTTP/1.1 200 OK` | HTTP/2: `HTTP/2 200`)

[1]: https://www.lucas-nussbaum.net/blog/?p=947
[2]: https://http2.github.io/http2-spec/#rfc.section.8.1.2.4

PR Close #29976
","['aio/aio-builds-setup/dockerbuild/scripts-js/lib/verify-setup/helper.ts', 'aio/aio-builds-setup/dockerbuild/scripts-js/lib/verify-setup/nginx.e2e.ts']",The preview server docker image based on Debian 8 is breaking new image builds due to the removal of `jessie-updates` and `jessie-backborts` from Debian mirrors.
296dc0622f0e8c4e803ff4f19a5c6fe02a2ae66e,1580231974,"ci: Migrate from CODEOWNERS to PullApprove for PR review management (#34814)

We are migrating to PullApprove for our PR review management in an attempt
to allow for more granular and equitable code review assignments across the
team.  Currently this migration is equivalent in the review assignments
it will create. Once stable, our expectation is that we will be able to
take advantage of PullApproves additional features for things like staged
reviews.

PR Close #34814
",['tools/verify-codeownership.js'],The current CODEOWNERS system for PR review management is missing granularity and equitable code review assignments across the team.
bdce7698fc2a49d31d90ae15a4f5629d00dd3085,1604683906,"fix(elements): update the view of an `OnPush` component when inputs change (#39452)

As with regular Angular components, Angular elements are expected to
have their views update when inputs change.

Previously, Angular Elements views were not updated if the underlying
component used the `OnPush` change detection strategy.

This commit fixes this by calling `markForCheck()` on the component
view's `ChangeDetectorRef`.

NOTE:
This is similar to how `@angular/upgrade` does it:
https://github.com/angular/angular/blob/3236ae0ee118d0734c90fa9f3767435396213470/packages/upgrade/src/common/src/downgrade_component_adapter.ts#L146.

Fixes #38948

PR Close #39452
","['integration/ng_elements/e2e/app.e2e-spec.ts', 'integration/ng_elements/src/app.ts', 'integration/ng_elements/src/elements.ts', 'integration/ng_elements/src/main.ts', 'packages/elements/src/component-factory-strategy.ts', 'packages/elements/test/component-factory-strategy_spec.ts']",Angular Elements views with underlying components using the 'OnPush' change detection strategy are not updating as expected when inputs change.
553f80ff460fe28cdc022ef3532726c25093521a,1550088313,"fix(ivy): set proper implementation for module injector (#28667)

Prior to this change we used current injector implementation for module injector, which was causing problems and produces circular dependencies in case the same token is referenced (with @SkipSelf flag) in the `deps` array. The origin of the problem was that once `directiveInject` implementation becomes active, it was used for module injector as well, thus searching deps in Component/Directive DI scope. This fix sets `injectInjectorOnly` implementation for module injector to resolve the problem.

PR Close #28667
","['packages/core/src/render3/component_ref.ts', 'packages/core/src/render3/di.ts', 'packages/core/test/acceptance/di_spec.ts', 'tools/material-ci/angular_material_test_blocklist.js']",Using the current injector implementation for the module injector causes circular dependencies when the same token is referenced (with @SkipSelf flag) in the `deps` array.
ea6a2e9f252f052664342d1613ae9fd59f1013c4,1568070696,"fix(ivy): template compiler should render correct $localize placeholder names (#32509)

The `goog.getMsg()` function requires placeholder names to be camelCased.

This is not the case for `$localize`. Here placeholder names need
match what is serialized to translation files.

Specifically such placeholder names keep their casing but have all characters
that are not in `a-z`, `A-Z`, `0-9` and `_` converted to `_`.

PR Close #32509
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/i18n/localize_utils.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/compiler/test/render3/view/i18n_spec.ts', 'packages/core/test/acceptance/i18n_spec.ts', 'packages/core/test/acceptance/view_container_ref_spec.ts', 'packages/core/test/bundling/todo_i18n/translations.ts']",`$localize` template compiler is not rendering correct placeholder names consistent with those serialized to translation files due to different casing and character conversion convention.
4a2fb86b1ea05376d428d594d9ab738579e9bec0,1554742017,"refactor(core): polish failure messages for template-var-assignment schematic (#29708)

Improves the failure messages for the `template-var-assignment` schematic. After manual
testing of the schematic it's not quite clear for developers what the failure message means
without any context. The schematic now also references a short markdown file mentioning
what needs to be changed, but eventually this document needs to be expanded with more
information and context of the reasoning behind this change within Ivy.

PR Close #29708
","['packages/core/schematics/migrations/template-var-assignment/index.ts', 'packages/core/schematics/test/template_var_assignment_migration_spec.ts']","The failure messages for the `template-var-assignment` schematic lack clarity and context, resulting in confusion for developers attempting to understand what the failure means."
7eddd12bf001bab9e2e320339cc5c9f698f4cfd8,1626741199,"feat(dev-infra): add option to setup global types in API golden test (#42876)

Previously we disabled automatic type-resolution for the API
extractor because in non-sandbox environments this resulted in
different API reports. There are cases where global types are
still needed for analysis of an entry-point. To support this,
we add a new property called `types` which allows for explicit
type targets being specified.

Note that we do not want to determine types from the `data`
runfiles because API extractor itself also brings in types
which should not always be part of the API report analysis.

PR Close #42876
","['dev-infra/bazel/api-golden/index.bzl', 'dev-infra/bazel/api-golden/index.ts', 'dev-infra/bazel/api-golden/index_npm_packages.ts', 'dev-infra/bazel/api-golden/test_api_report.ts']","API golden test experiencing issues due to disabled automatic type-resolution in non-sandbox environments, and inability to include necessary global types for entry-point analysis."
b8ec182a2a8a0ae9c9b9c4d32b43ebd880dcc923,1690922734,"test(compiler): allow alternate expected file for template pipeline (#51100)

In some cases it is not feasible to have the template pipeline produce
the exact same compiled output as the TemplateDefinitionBuilder. This
commit adds support to the testing infrastructure to have different
expected output files for each. This option should be used sparingly, as
we want the output to be as close as possible.

PR Close #51100
","['packages/compiler-cli/test/compliance/test_helpers/get_compliance_tests.ts', 'packages/compiler-cli/test/compliance/test_helpers/test_runner.ts']",Incompatibilities between the template pipeline and TemplateDefinitionBuilder cause differences in expected output files during testing.
64f837d2c0fbcf722d32b35a87e87220bfe61f65,1643936821,"fix(router): Update `Navigation#initialUrl` to match documentation and reality (#43863)

BREAKING CHANGE:

* The type of `initialUrl` is set to `string|UrlTree` but in reality,
  the `Router` only sets it to a value that will always be `UrlTree`
* `initialUrl` is documented as ""The target URL passed into the
  `Router#navigateByUrl()` call before navigation"" but the value
  actually gets set to something completely different. It's set to the
  current internal `UrlTree` of the Router at the time navigation
  occurs.

With this change, there is no exact replacement for the old value of
`initialUrl` because it was enver intended to be exposed.
`Router.url` is likely the best replacement for this.
In more specific use-cases, tracking the `finalUrl` between successful
navigations can also be used as a replacement.

PR Close #43863
",['packages/router/src/router.ts'],"The `initialUrl` property is incorrectly described as the target URL in `Router#navigateByUrl()`, it ranges beyond declared type (`string|UrlTree`) and incorrectly set to Router's current internal `UrlTree` at navigation."
9105c41f4423fcb820930d6c994ecd16f3a2cef6,1676592029,"fix(platform-server): avoid duplicate TransferState info after renderApplication call (#49094)

This commit updates the `renderApplication` function to avoid duplicate serialization of the data from the `TransferState` class. The `renderApplication` function imports providers from the `ServerModule`, which already include the `TransferState` serialization providers, but the same providers were also included inside the `renderApplication` as well, which led to the duplication.

PR Close #49094
","['packages/platform-server/src/utils.ts', 'packages/platform-server/test/integration_spec.ts']",Duplicate serialization of data from `TransferState` class happening due to `renderApplication` function importing providers already included in `ServerModule`.
fa3909e8b4b982423357a6e3d6c1d719ea6fa378,1680307441,"fix(router): Ensure initial navigation clears current navigation when blocking (#49572)

The navigation transition clears the current navigation in the finalize
operator of the current navigation Observer. This commit both completes
the `bootstrapDone` observable and updates the transition to only take 1
emit from the completed navigation. Either of these changes on their own
would fix the issue. The latter is a preventative measure in case a
mistake like the former is made again.

fixes #49567

PR Close #49572
","['packages/router/src/navigation_transition.ts', 'packages/router/src/provide_router.ts', 'packages/router/test/bootstrap.spec.ts']","Initial navigation fails to clear current blocking navigation, leading to potential transition issues and repeat navigation errors."
294e56d529ed92f59cebaca64609f80bbd21b6ad,1582665147,"refactor(platform-browser): Hoist functions to workaround optimization bug. (#32230)

Technically, function definitions can live anywhere because they are
hoisted. However, in this case Closure optimizations break when exported
function definitions are referred in another static object that is
exported.

The bad pattern is:
```
exports const obj = {f};
export function f() {...}
```

which turns to the following in Closure's module system:
```
goog.module('m');

exports.obj = {f};

function f() {...}
exports.f = f;
```

which badly optimizes to (note module objects are collapsed)
```
var b = a; var a = function() {...};  // now b is undefined.
```

This is an optimizer bug and should be fixed in Closure, but in the
meantime this change is a noop and will unblock other changes we want to
make.

PR Close #32230
",['packages/platform-browser/src/browser.ts'],"Closure optimizer bug breaks when exported function definitions are referred to within another static object that is also exported, causing problems in proper function references."
39266654e6a006603a50ddd154c6d3a2be254946,1605647348,"fix(http): queue jsonp <script> tag onLoad event handler in microtask (#39512)

Before this change, when trying to load a JSONP script that calls the JSONP callback inside a
microtask, it will fail in Internet Explorer 11 and EdgeHTML. This commit changes the onLoad cleanup
to be queued after the loaded endpoint executed any potential microtask itself. This ensures that
the aforementioned browsers will first evaluate the loaded script calling the JSONP callback and
only then run the cleanup inside onLoad.

Fixes #39496

PR Close #39512
","['packages/common/http/src/jsonp.ts', 'packages/common/http/test/jsonp_spec.ts']",JSONP script loading fails in Internet Explorer 11 and EdgeHTML when the JSONP callback is invoked inside a microtask due to premature onLoad cleanup.
1a4aee7e49074e3bc3f3099bff88eaee9b2ab255,1696977026,"feat(core): show runtime error for orphan component rendering (#52061)

A runtime error will be thrown if a non-standalone component is being rendered without its NgModule loaded in the browser. This error is thrown only in dev mode and only if the Angular option `forbidOrphanComponents` is set to true. The error contains useful info to find the orphan component in the source code.

PR Close #52061
","['packages/core/src/render3/component_ref.ts', 'packages/core/src/render3/deps_tracker/deps_tracker.ts', 'packages/core/test/linker/integration_spec.ts', 'packages/core/test/render3/deps_tracker_spec.ts']","Non-standalone components are rendering without their NgModule loaded in the browser, causing issues in development mode when `forbidOrphanComponents` is set to true."
f1b1de9a3dcf9fcc258d5cb09870ef771ea3c2d9,1568758410,"fix(ivy): i18n - start generated placeholder name at `PH` (#32493)

Currently the expressions used in a template string are automatically named
`PH_1`, `PH_2`, etc. Whereas interpolations used in i18n templates generate
placeholders automatically named `INTERPOLATION`, `INTERPOLATION_1`, etc.

This commit aligns the behaviors by starting the generated placeholder
names for expressions at `PH`, then `PH_1`, etc.

It also documents this behavior in the documentation of `$localize` as
it was not mentioned before.

PR Close #32493
","['packages/localize/init/index.ts', 'packages/localize/src/localize/src/localize.ts', 'packages/localize/src/utils/messages.ts', 'packages/localize/test/translate_spec.ts', 'packages/localize/test/utils/messages_spec.ts', 'packages/localize/test/utils/translations_spec.ts']","Automatic naming of expressions in i18n templates generates different placeholder names (`INTERPOLATION`) than in template strings (`PH_1`, `PH_2`), causing inconsistency. Documentation also lacks this vital information."
ca25c957bfd8faa7a67cd4b1ac32808dd5eca723,1585937326,"fix(ngcc): correctly detect imported TypeScript helpers (#36284)

The `NgccReflectionHost`s have logic for detecting certain known
declarations (such as `Object.assign()` and TypeScript helpers), which
allows the `PartialEvaluator` to evaluate expressions it would not be
able to statically evaluate otherwise.

In #36089, `DelegatingReflectionHost` was introduced, which delegates to
a TypeScript `ReflectionHost` when reflecting on TypeScript files, which
for ngcc's case means `.d.ts` files of dependencies. As a result, ngcc
lost the ability to detect TypeScript helpers imported from `tslib`,
because `DelegatingReflectionHost` was not able to apply the known
declaration detection logic while reflecting on `tslib`'s `.d.ts` files.

This commit fixes this by ensuring `DelegatingReflectionHost` calls the
`NgccReflectionHost`'s `detectKnownDeclaration()` method as necessary,
even when using the TypeScript `ReflectionHost`.

NOTE:
The previous commit exposed a bug in ngcc that was hidden due to the
tests' being inconsistent with how the `ReflectionHost`s are used in the
actual program. The changes in this commit are verified by ensuring the
failing tests are now passing (hence no new tests are added).

PR Close #36284
","['packages/compiler-cli/ngcc/src/host/delegating_host.ts', 'packages/compiler-cli/ngcc/src/host/ngcc_host.ts']","The NgccReflectionHosts are losing the ability to detect TypeScript helpers imported from `tslib`, due to the introduction of DelegatingReflectionHost which fails to apply known declaration detection while reflecting on `tslib`'s `.d.ts` files."
64aae3a9dfbd9a39c4c0fe837b53c6068747fcaa,1571096573,"test(language-service): test project cleanup (#33157)

This PR adds es2015 lib to the `tsconfig.json` of the test project so
that `Promise` could be used. Note this only affects diagnostics in the
IDE. The tsconfig in Language Service Mock Host is the actual config
values used, and it already has es2015 lib.

- Other minor cleanup: Rename imports in `main.ts`.
- Add more cases to `parsing-cases.ts`, which are tested in later PRs

PR Close #33157
","['packages/language-service/test/project/app/main.ts', 'packages/language-service/test/project/app/parsing-cases.ts', 'packages/language-service/test/typescript_host_spec.ts']","The test project lacks es2015 lib in its `tsconfig.json`, preventing the use of `Promise` and affecting diagnostics in the IDE, while Language Service Mock Host is functioning with actual config values."
8e2e9dcee6dd24cfb4c056a4eca58eda3479b654,1558125202,"test(ivy): move render3 view_container_ref tests to acceptance (#30488)

Moves all manual render3 view_container_ref tests that use property
bindings to acceptance tests with TestBed.

Two issues surfaced and refer to a difference between Ivy and View
engine:

* Multi-slot projection is not working with Ivy: FW-1331
* ViewContainerRef throws if index is invalid while View Engine clamped index: FW-1330

PR Close #30488
","['packages/core/test/acceptance/view_container_ref_spec.ts', 'packages/core/test/render3/view_container_ref_spec.ts']","There are discrepancies between Ivy and ViewEngine - Multi-slot projection doesn't work with Ivy and ViewContainerRef throws if the index is invalid, whereas View Engine just clamps the index."
345a3cd9aa2caf631fb1a08166ea9d27f418e976,1557266177,"fix(ivy): ensure `select(n)` instructions are always generated around style/class bindings (#30311)

Prior to this patch, the `select(n)` instruction would only be generated
when property bindings are encountered which meant that styling-related
bindings were skipped. This patch ensures that all styling-related bindings
(i.e. class and style bindings) are always prepended with a `select()`
instruction prior to being generated in AOT.

PR Close #30311
","['packages/compiler-cli/test/compliance/r3_compiler_compliance_spec.ts', 'packages/compiler-cli/test/compliance/r3_view_compiler_styling_spec.ts', 'packages/compiler/src/render3/view/template.ts']","Styling-related bindings in Ivy are not properly generated with a `select(n)` instruction in AOT, which causes class and style bindings to be skipped."
8c9f0671253c5acd55dea9439cab5903358c5e05,1671881140,"build(bazel): prevent remote cache misses on dgeni build (#48585)

Using 'always' as the stamp attribute caused stable-status.txt
to always be included as an input, which has different values on
different ci executors causing a cache miss.

We run the regular aio build without stamping on ci so only include
status files when stamping is explicitly enabled.

PR Close #48585
",['aio/tools/transforms/angular-base-package/services/bazelStampedProperties.js'],The dgeni build is experiencing remote cache misses due to stable-status.txt being included as an input on different CI executors.
8fcadaad48b2b1328f47b7603b230445a26f95a8,1663777343,"perf(compiler-cli): cache source file for reporting type-checking diagnostics (#47471)

When reporting type-checking diagnostics in external templates we create a
`ts.SourceFile` of the template text, as this is needed to report Angular
template diagnostics using TypeScript's diagnostics infrastructure. Each
reported diagnostic would create its own `ts.SourceFile`, resulting in
repeatedly parsing of the template text and potentially high memory usage
if the template is large and there are many diagnostics reported. This commit
caches the parsed template in the template mapping, such that all reported
diagnostics get to reuse the same `ts.SourceFile`.

Closes #47470

PR Close #47471
",['packages/compiler-cli/src/ngtsc/typecheck/diagnostics/src/diagnostic.ts'],"Reporting type-checking diagnostics in external templates leads to repeated parsing of the template text and high memory usage, due to creation of new `ts.SourceFile` for each diagnostic reported."
c7bf75dd5e7f3f80a3c2afb8586ae46f7258f349,1649789017,"fix(platform-browser): remove obsolete shim for Map comparison in Jasmine (#45521)

Angular now uses Jasmine 2.8 as a minimum version (required by
protractor; most of it is using ^3.5.0 which currently resolves to
3.99.0), which makes this shim obsolete - all versions of Jasmine used
have Map comparison built in.

This shim causes problems for custom equality checkers - when using a
Map containing types needing a custom equality check, this  fails
because the call to `jasmine.matchersUtil.equals` from the shim does not
use any of the custom equality matchers.

PR Close #45521
",['packages/platform-browser/testing/src/matchers.ts'],"Obsolete Jasmine shim for Map comparison in platform-browser interferes with custom equality checkers, particularly when Maps contain types requiring custom equality checks."
98d9626746780e2b071ecd4d7f65e95ef5041992,1681238812,"refactor(compiler): pipeline phase to generate advance() instructions (#48580)

When executing the template update pass, the runtime keeps an internal
declaration slot pointer for which declaration (element, template, etc) is
the current subject of any binding or interpolation instructions. In between
update operations which reference different declarations, this pointer needs to
be adjusted, which is the job of the `advance()` instruction.

This commit introduces `phaseGenerateAdvance()` which inserts `advance()`
operations wherever necessary to satisfy this runtime requirement.

PR Close #48580
","['packages/compiler/src/template/pipeline/ir/src/enums.ts', 'packages/compiler/src/template/pipeline/ir/src/ops/update.ts', 'packages/compiler/src/template/pipeline/ir/src/traits.ts', 'packages/compiler/src/template/pipeline/src/phases/generate_advance.ts']","During execution of the template update pass, changes in declaration subjects of binding or interpolation instructions require adjustment of the internal declaration slot pointer; currently this isn't handled efficiently."
bb53b6549c34df1f1b68bce52b1cbf4be81b0b9c,1571342455,"refactor(ivy): move all of the instruction state into a singe object (#33093)

Turns out that writing to global state is more expensive than writing to
a property on an object.

Slower:
````
let count = 0;

function increment() {
  count++;
}
```

Faster:
````
const state = {
  count: 0
};

function increment() {
  state.count++;
}
```

This change moves all of the instruction state into a single state object.

`noop_change_detection` benchmark
Pre refactoring: 16.7 us
Post refactoring: 14.523 us (-13.3%)

PR Close #33093
","['packages/core/src/render3/instructions/styling.ts', 'packages/core/src/render3/state.ts']",Writing to global state for instruction handling results in slower performance compared to using object properties.
1116c492fa2e5d216f25a0af7961e36243820425,1678926310,"refactor(core): Handle cases of lost empty text nodes during hydration (#49419)

During DOM serialization, empty text nodes are lost when the client parses the DOM. To solve this problem comment nodes are added where the empty nodes are located right before serialization. Those comments then get replaced during hydration with the proper empty text nodes.

PR Close #49419
","['packages/core/src/hydration/annotate.ts', 'packages/core/src/hydration/api.ts', 'packages/core/src/hydration/utils.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/platform-server/test/hydration_spec.ts']","During DOM serialization and subsequent client parsing, empty text nodes are being lost, leading to inconsistencies in hydration."
da79e0433f14033dfa4573c5261c9e6a8b9bef83,1588726332,"test(language-service): [ivy] Add mock service to overwrite files (#36923)

Add a mechanism to replace file contents for a specific file. This
allows us to write custom test scenarios in code without modifying the
test project.

Since we are no longer mocking the language service host, the file
overwrite needs to happen via the project service.
Project service manages a set of script infos, and overwriting the files
is a matter of updating the relevant script infos.

Note that the actual project service is wrapped inside a Mock Service.
Tests should not have direct access to the project service. All
manipulations should take place via the Mock Service.

The MockService provides a `reset()` method to undo temporary overwrites
after each test.

PR Close #36923
","['packages/language-service/ivy/test/mock_host.ts', 'packages/language-service/ivy/test/mock_host_spec.ts']","Lack of functionality to replace file contents for custom test scenarios without altering test project, making it difficult to conduct flexible and specific testing."
7d4929918dace806d9165733f13899fa5d6c759c,1602626286,"fix(core): use Trusted Types policy in inert DOM builder (#39208)

When Angular is used in an environment that enforces Trusted Types, the
inert DOM builder raises a Trusted Types violation due to its use of
DOMParser and element.innerHTML with plain strings. Since it is only
used internally (in the HTML sanitizer and for i18n ICU parsing), we
update it to use Angular's Trusted Types policy to promote the provided
HTML to TrustedHTML.

PR Close #39208
",['packages/core/src/sanitization/inert_body.ts'],Angular's inert DOM builder triggers a Trusted Types violation in environments enforcing Trusted Types due to usage of DOMParser and element.innerHTML with plain strings.
9470f56ad3159f5fba7731db49de39eb1734f616,1632167791,"fix(compiler-cli): handle directives that refer to a namespaced class in a type parameter bound (#43511)

The template type-checker has to emit type constructors for the
directives that are used in a template, where a type constructor's
declaration has to mirror the type parameter constraints as they were
originally declared. Therefore, the compiler analyzes whether a type
parameter constraint can be recreated, e.g. by generating imports for
any type references. Some type references cannot be recreated, in which
case the compiler has to fall back to a strategy where the type
constructor is created inline in the original source file (which comes
with a performance penalty).

There used to be an issue for type references to namespaced declarations.
The compiler is unable to emit such references such that an inline
type constructor should be used as fallback, but this did not happen.
This caused the attempt to emit the type reference to fail, as the
namespaced declaration cannot be located by the reference emitters.

This commit fixes the issue by using a stricter check to determine if a
type parameter requires an inline type constructor. The TypeScript
reflection host's `isStaticallyExported` logic was expanded to work for
any declaration instead of just classes, as e.g. type declarations can
also be referenced in a type parameter constraint.

Closes #43383

PR Close #43511
","['packages/compiler-cli/ngcc/src/host/delegating_host.ts', 'packages/compiler-cli/src/ngtsc/reflection/src/host.ts', 'packages/compiler-cli/src/ngtsc/reflection/src/typescript.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_parameter_emitter.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_parameter_emitter_spec.ts']",The template type-checker fails when handling directives that point to a namespaced class in a type parameter bounds due to an inability to recreate certain type references. This results in unsuccessful attempts to emit the type reference as the namespaced declaration cannot be found by the reference emitters.
8fdfa7b60481e1afc4b98ae0e7178a5e1c1b38ee,1595869470,"refactor(compiler): allow strings with certain length to be included into `ConstantPool` (#38213)

Prior to this commit, the `ConstantPool` ignored all primitive values. It turned out that it's
beneficial to include strings above certain length to the pool as well. This commit updates the
`ConstantPool` logic to allow such strings to be shared across multiple instances if needed.
For instance, this is helpful for component styles that might be reused across multiple components
in the same file.

PR Close #38213
",['packages/compiler/src/constant_pool.ts'],"'ConstantPool' ignores all primitive values, resulting in inefficiencies for strings of certain lengths that should be shared across multiple instances, such as reused component styles."
372a6cf8d7690053d3a905a94a3f633bdb170488,1601323902,"feat(dev-infra): add release command for setting NPM dist tag (#38656)

Introduces a new command for `ng-dev release`, so that the NPM
dist tag can be set for all configured NPM packages. This command
can be useful in case a manual tag needs to be set, but it is
primarily used by the release tooling when a new stable version
is cut, and when the previous patch branch needs to be set as LTS
version through a `v{major}-lts` dist tag.

It is necessary to have this as a command so that the release tool
can execute it for old branches where other packages might have been
configured. This is similar to the separate `ng-dev build` command
that we created.

Note that we also added logic for spawning a process conveniently
with different ""console output"" modes. This will be useful for
other command invocations in the release tool and it's generally
better than directly using native `child_process` as that one doesn't
log to the dev-infra debug log file.

PR Close #38656
","['dev-infra/release/cli.ts', 'dev-infra/release/set-dist-tag/cli.ts', 'dev-infra/release/set-dist-tag/set-dist-tag.spec.ts', 'dev-infra/release/versioning/npm-publish.ts', 'dev-infra/utils/child-process.ts']","The release tooling lacks a command for setting the NPM dist tag for all configured NPM packages, which is crucial when a new stable version is cut or when setting a previous patch branch as LTS version through a 'v{major}-lts' dist tag."
cac9199d7c851266a568aa8208f66640c9cc6113,1548706225,"feat(ivy): cycle detector for TypeScript programs (#28169)

This commit implements a cycle detector which looks at the import graph of
TypeScript programs and can determine whether the addition of an edge is
sufficient to create a cycle. As part of the implementation, module name
to source file resolution is implemented via a ModuleResolver, using TS
APIs.

PR Close #28169
","['packages/compiler-cli/src/ngtsc/cycles/index.ts', 'packages/compiler-cli/src/ngtsc/cycles/src/analyzer.ts', 'packages/compiler-cli/src/ngtsc/cycles/src/imports.ts', 'packages/compiler-cli/src/ngtsc/cycles/test/analyzer_spec.ts', 'packages/compiler-cli/src/ngtsc/cycles/test/imports_spec.ts', 'packages/compiler-cli/src/ngtsc/cycles/test/util.ts']","Importing TypeScript programs can potentially create a cycling problem, lacking a mechanism to verify if an additional edge would lead to a cycle."
5557dec120e3e81f5078089cb7821187fae501e0,1571084641,"refactor(core): missing-injectable migration should respect providers of directives and components (#33011)

Currenly the `missing-injectable` migration only migrates providers referenced from
`@NgModule` definitions. The schematic currently does not cover the migration for
providers referenced in `@Directive` or `@Component` definitions.

We need to handle the following keys for directives/components:

- `@Directive` -> `providers`
- `@Component` -> `providers` and `viewProviders`.

This commit ensures that the migration handles providers for these
definitions.

PR Close #33011
","['packages/core/schematics/migrations/google3/noMissingInjectableRule.ts', 'packages/core/schematics/migrations/missing-injectable/definition_collector.ts', 'packages/core/schematics/migrations/missing-injectable/google3/tslint_update_recorder.ts', 'packages/core/schematics/migrations/missing-injectable/index.ts', 'packages/core/schematics/migrations/missing-injectable/transform.ts', 'packages/core/schematics/migrations/missing-injectable/update_recorder.ts', 'packages/core/schematics/test/google3/missing_injectable_rule_spec.ts', 'packages/core/schematics/test/missing_injectable_migration_spec.ts']","The `missing-injectable` migration does not handle providers referenced in `@Directive` or `@Component` definitions, missing out on key directive and component providers."
46caf88b2c837285f4bc040c80454f7a3314f8d3,1567037386,"feat(language-service): add definitions for templateUrl (#32238)

Adds support for `getDefinitionAt` when called on a templateUrl
property assignment.

The currrent architecture for getting definitions is designed to be
called on templates, so we have to introduce a new
`getTsDefinitionAndBoundSpan` method to get Angular-specific definitions
in TypeScript files and pass a `readTemplate` closure that will read the
contents of a template using `TypeScriptServiceHost#getTemplates`. We
can probably go in and make this nicer in a future PR, though I'm not
sure what the best architecture should be yet.

Part of angular/vscode-ng-language-service#111

PR Close #32238
","['integration/language_service_plugin/test.ts', 'packages/language-service/src/definitions.ts', 'packages/language-service/src/language_service.ts', 'packages/language-service/src/typescript_host.ts', 'packages/language-service/test/definitions_spec.ts']","The getDefinitionAt function currently lacks support when called on a templateUrl property assignment, causing issues with obtaining definitions."
89b44d19006b98538a466919ac74cacf24cdb113,1589993016,"fix(elements): do not break when the constructor of an Angular Element is not called (#36114)

Previously, the correct behavior of Angular custom elements relied on
the constructor being called (and thus the `injector` property being
initialized). However, some polyfills (e.g. `document-register-element`)
do not call the constructor of custom elements, which resulted in the
`injector` property being undefined and the `NgElementStrategy` failing
to be instantiated.

This commit fixes it by being tolerant to the `injector` property being
undefined and falling back to the injector passed to the
`createCustomElement()` config.

NOTE:
We don't have proper tests exercising the situation where the
constructor is not called. For now this is tested using a Google
internal test suite (which is how this issue was caught).
This commit also adds a rudimentary unit test to emulate this situation.

PR Close #36114
","['packages/elements/src/create-custom-element.ts', 'packages/elements/test/create-custom-element_spec.ts']","Angular custom elements fail when constructors are not called by certain polyfills(e.g. document-register-element), resulting in undefined 'injector' property and inability to instantiate 'NgElementStrategy'."
60e9d2da4f3a204161897d04d5363deb81f20f11,1555528479,"ci(docs-infra): increase wait for SW on localhost to avoid CI flakes (#29953)

The server used for testing on localhost has less optimizations (e.g.
serves uncompressed files), so we need to wait longer the ServiceWorker
to be loaded and registered to allow Lighthouse to reliably detect it,
especially on slower environments (e.g. CI).

Related: https://github.com/GoogleChrome/lighthouse/issues/5527#issuecomment-483710849

Fixes #29910

PR Close #29953
",['aio/scripts/test-pwa-score.js'],"The server used for localhost testing causes ServiceWorker to load and register slowly, particularly on slower environments like CI, leading to unreliable detections by Lighthouse."
ab931cf872668ff5d14d35bb9b7831387bf44ea3,1580767420,"fix(ivy): host-styling throws assert exception inside *ngFor (#35133)

Inside `*ngFor` the second run of the styling instructions can get into situation where it tries to read a value from a binding which has not yet executed. As a result the read is `NO_CHANGE` value and subsequent property read cause an exception as it is of wrong type.

Fix #35118

PR Close #35133
","['packages/core/src/render3/instructions/styling.ts', 'packages/core/test/acceptance/styling_spec.ts']","Styling instructions inside `*ngFor` throws an assertion exception on second run due to attempted reads from unexecuted bindings, resulting in a `NO_CHANGE` value and wrong type for subsequent property reads."
fc4c3c3eb5a8dc5910dcd1dfaba9175ffbee57ee,1583773565,"fix(localize): merge translation from all  XLIFF `<file>` elements (#35936)

XLIFF translation files can contain multiple `<file>` elements,
each of which contains translations. In ViewEngine all these
translations are merged into a single translation bundle.

Previously in Ivy only the translations from the last `<file>`
element were being loaded. Now all the translations from each
`<file>` are merged into a single translation bundle.

Fixes #35839

PR Close #35936
","['packages/localize/src/tools/src/translate/translation_files/translation_parsers/xliff1_translation_parser.ts', 'packages/localize/src/tools/src/translate/translation_files/translation_parsers/xliff2_translation_parser.ts', 'packages/localize/src/tools/test/translate/translation_files/translation_parsers/xliff1_translation_parser_spec.ts', 'packages/localize/src/tools/test/translate/translation_files/translation_parsers/xliff2_translation_parser_spec.ts']","Ivy is only loading translations from the last `<file>` element in XLIFF translation files, missing other potentially valid translations."
926ffcd8acedfc0e6870a14f48a886fa8531c750,1599585321,"fix(router): support lazy loading for empty path named outlets (#38379)

In general, the router only matches and loads a single Route config tree. However,
named outlets with empty paths are a special case where the router can
and should actually match two different `Route`s and ensure that the
modules are loaded for each match.

This change updates the ""ApplyRedirects"" stage to ensure that named
outlets with empty paths finish loading their configs before proceeding
to the next stage in the routing pipe. This is necessary because if the
named outlet has `loadChildren` but the associated lazy config is not loaded
before following stages attempt to match and activate relevant `Route`s,
an error will occur.

fixes #12842

PR Close #38379
","['packages/router/src/apply_redirects.ts', 'packages/router/src/utils/config.ts', 'packages/router/test/apply_redirects.spec.ts']","The router fails to match and load multiple Route config trees for named outlets with empty paths, causing errors when later stages attempt to match and activate relevant Routes before the associated lazy config has loaded."
02975e9166512154023816acf5d1091734bb439e,1548354414,"docs(docs-infra): show top menu at 992px screen width (#26418)

Show top menu at 992px screen width. The JS expression was checking just for screen widths
strictly greater than 992px to show the menu, while the CSS media query was showing the hamburger
icon just for screen widths strictly smaller than 992px, so there was a gap of 1px that the user
could't navigate through the top menu.

closes #24324

PR Close #26418
",['aio/src/app/app.component.ts'],A 1px gap in screen width (992px) leaves users unable to navigate using top menu due to discrepancy between JS expression and CSS media query.
6706fab0170b11387976909bc4220741fbad47df,1670000299,"perf(docs-infra): remove usage of the NgClass directive (#48312)

NgClass has non-negligable performance cost, especially if a
different object is provided as NgClass input (which was the case
for the NavItemComponent). The perfornace problem was noticed
in the scope of the INP score investigations while profiling the
https://angular.io/resources page. On this particular page replacing
NgClass usage with alternatives results in 20x (!) runtime perf
improvement. Such big improvement is possible since we avoid unneeded
CSS classes removal / adding in the DOM.

Part of #25518

PR Close #48312
","['aio/src/app/custom-elements/code/code-example.component.spec.ts', 'aio/src/app/custom-elements/code/code-example.component.ts', 'aio/src/app/layout/nav-item/nav-item.component.spec.ts', 'aio/src/app/layout/nav-item/nav-item.component.ts', 'aio/src/app/layout/top-menu/top-menu.component.ts']","Using NgClass directive in NavItemComponent is leading to significant performance degradation, especially noticeable when profiling the /resources page."
05f5e8ad8657fb26ed871b1d1d191529bd5e0765,1661190688,"fix(animations): fix stagger timing not handling params (#47208)

prior to this change the stagger timing was being built during the
ast building instead of dynamically when visiting the stagger animation,
thus it could not handle params correctly, this change makes it so that
during ast building a timing ast is built instead and that ast is used
dynammically to build animations which can handle params correctly

resolves #19786

PR Close #47208
","['packages/animations/browser/src/dsl/animation_ast_builder.ts', 'packages/animations/browser/src/dsl/animation_timeline_builder.ts', 'packages/core/test/animation/animation_query_integration_spec.ts']",Stagger timing in animations is not correctly handling parameters due to being built during AST creation rather than dynamically.
ce20ed067f12714ee6488ffe07f1a1c18bb60a15,1655482688,"fix(router): Ensure Route injector is created before running CanMatch guards (#46394)

Once a `Route` matches via the `match` or `path` property, we need to
immediately create the injector for the route (if it has providers)
before running the `CanMatch` guards. This is necessary because the
`CanMatch` guards might be provided in the `Route` providers.

Fixes #46386

PR Close #46394
","['packages/router/src/apply_redirects.ts', 'packages/router/src/recognize.ts', 'packages/router/src/utils/config_matching.ts', 'packages/router/test/apply_redirects.spec.ts']","The Route injector is not created before running CanMatch guards once a Route matches, potentially causing issues if the CanMatch guards are provided in the Route providers."
78a44768e0bc5038ac5d813641ca6287ce2f22ea,1593451751,"fix(ngcc): ensure lockfile is removed when analyzeFn fails (#37739)

Previously an error thrown in the `analyzeFn` would cause
the ngcc process to exit immediately without removing the
lockfile, and potentially before the unlocker process had been
successfully spawned resulting in the lockfile being orphaned
and left behind.

Now we catch these errors and remove the lockfile as needed.

PR Close #37739
","['packages/compiler-cli/ngcc/src/execution/cluster/executor.ts', 'packages/compiler-cli/ngcc/src/locking/async_locker.ts', 'packages/compiler-cli/ngcc/test/execution/cluster/executor_spec.ts']",Errors thrown in the `analyzeFn` cause the ngcc process to exit immediately leaving the lockfile orphaned or not removed.
949927eddaf67b527dfd18a99e136e28ed363709,1651706967,"build: remove outdated/obsolete github PR utility scripts (#45868)

Removes scripts and documentation for tools which are no longer
actively used and likely do not work anyway at this point.

All of our PR-related tooling has moved into the `yarn ng-dev` command.
The `PR_REVIEW` markdown file is deleted since it was soley about
the legacy review scripts and the PR review workflow also does not
seem like the common/standard workflow Angular team members follow.

PR Close #45868
","['scripts/github/utils/git_util.js', 'scripts/github/utils/github_closes.js', 'scripts/github/utils/json_extract.js', 'scripts/github/utils/json_extract_test.js']","Obsolete GitHub PR utility scripts and outdated documentation are no longer being used and possibly malfunctioning, creating confusion in PR review workflow."
b48d6e1b13ff5f8d64ddaecdee02185f79ec7b06,1553107555,"fix(ivy): ngcc - empower `Esm5ReflectionHost` to analyze `ModuleWithProviders` functions (#29092)

In ESM5 code, static methods appear as property assignments onto the constructor
function. For example:

```
var MyClass = (function() {
  function MyClass () {}
  MyClass.staticMethod = function() {};
  return MyClass;
})();
```

This commit teaches ngcc how to process these forms when searching
for `ModuleWithProviders` functions that need to be updated in the typings
files.

PR Close #29092
","['packages/compiler-cli/ngcc/src/analysis/module_with_providers_analyzer.ts', 'packages/compiler-cli/ngcc/src/host/esm2015_host.ts', 'packages/compiler-cli/ngcc/src/host/ngcc_host.ts', 'packages/compiler-cli/ngcc/test/host/esm2015_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm5_host_spec.ts']",The Esm5ReflectionHost in ngcc fails to analyze functions with 'ModuleWithProviders' in ESM5 code where static methods are property assignments.
f464e39364da6436fc4b5a703f66fe7dee70818c,1693500164,"fix(router): Ensure title observable gets latest values (#51561)

The data `Observable` is not updated unless there have been changes to
the object. The current diffing does not look at `symbol` keys of the
object but the `title` property is stored as a private `symbol`. This
commit updates the object diffing to include symbols.

fixes #51401

PR Close #51561
","['packages/router/src/operators/resolve_data.ts', 'packages/router/src/utils/collection.ts', 'packages/router/test/page_title_strategy_spec.ts']","The data `Observable` is not updating as it should, missing the latest value changes. Diffing does not currently account for `symbol` keys, meaning the `title` property (stored as a private `symbol`) is not being tracked properly."
ed77bfea26e64bd24019812131e14f5dd450fcf5,1617304860,"test(core): fix JIT factory declaration test for IE11 (#41416)

This commit removes a check for the name of the generated factory
function, which is unimportant to test the behaviour of the code.

The name of these functions is generated from the name of the class
being instantiated. In IE11, there is no `function.name` property available
and so there is a shim for it in `third_party/shims_for_IE.js`, which patches
the `Function.property.name` property.

For performance reasons this shim writes the result of the computation
to the prototype of the function. Unfortunately, this means that any class
that extends the patched class will have the same value for `name`.

PR Close #41416
",['packages/core/test/render3/jit/declare_factory_spec.ts'],"Test for JIT factory declaration fails for IE11 due to the extension of patched classes maintaining the same 'name' property, leading to inaccurate function names."
b61c009c5479812b061c6837e1fdbf645deea4f1,1616618545,"build: emit performance JSON file for each ng_module() (#41125)

A previous commit implemented a streamlined performance metric reporting
system for the compiler-cli, controlled via the compiler option
`tracePerformance`.

This commit adds a custom Bazel flag rule //packages/compiler-cli:ng_perf
to the repository, and wires it through to the `ng_module` implementation
such that if the flag is set, `ng_module` will produce perf results as part
of the build. The underlying mechanism of `//:ng_perf` is not exported from
`@angular/bazel` as a public rule that consumers can use, so there is little
risk of accidental dependency on the contents of these perf traces.

An alias is added so that `--ng_perf` is a Bazel flag which works in our
repository.

PR Close #41125
","['packages/bazel/index.bzl', 'packages/bazel/src/ng_module.bzl', 'packages/bazel/src/ng_perf.bzl', 'tools/defaults.bzl']",The compiler-cli's performance metric reporting system doesn't create a performance JSON file for each ng_module() when the tracePerformance compiler option is utilized.
1a62f74496857f688b7cd5890994a31a56b51aef,1600716393,"test(compiler-cli): fix drive letter casing in Windows filesystem emulation (#37782)

In native windows, the drive letter is a capital letter, while our Windows
filesystem emulation would use lowercase drive letters. This difference may
introduce tests to behave differently in native Windows versus emulated
Windows, potentially causing unexpected CI failures on Windows CI after a PR
has been merged.

Resolves FW-2267

PR Close #37782
",['packages/compiler-cli/src/ngtsc/file_system/testing/src/mock_file_system_windows.ts'],"Differences in drive letter casing between native Windows and our emulated Windows filesystem may make tests behave inconsistently, leading to unexpected CI failures on Windows CI after PR merge."
9f2ae5d6ff487df080d670a1adef0cc01878c92c,1563922360,"feat(ivy): introduce missing-injectable migration for google3 (#30956)

Introduces a new migration schematic for adding the ""@Injectable()""
decorator to provider classes which are currently not migrated. Previously
in ViewEngine, classes which are declared as providers sometimes don't
require the ""@Injectable()"" decorator
(e.g. https://stackblitz.com/edit/angular-hpo7gw)

With Ivy, provider classes need to be explicitly decorated with
the ""@Injectable()"" decorator if they are declared as providers
of a given module. This commit introduces a migration schematic
which automatically adds the explicit decorator to places where
the decorator is currently missing.

The migration logic is designed in a CLI devkit and TSlint agnostic
way so that we can also have this migration run as part of a public
CLI migration w/ `ng update`. This will be handled as part of a follow-up to reiterate on console output etc.

Resolves FW-1371

PR Close #30956
","['packages/core/schematics/migrations/missing-injectable/google3/noMissingInjectableRule.ts', 'packages/core/schematics/migrations/missing-injectable/google3/tslint_update_recorder.ts', 'packages/core/schematics/migrations/missing-injectable/import_manager.ts', 'packages/core/schematics/migrations/missing-injectable/index.ts', 'packages/core/schematics/migrations/missing-injectable/module_collector.ts', 'packages/core/schematics/migrations/missing-injectable/transform.ts', 'packages/core/schematics/migrations/missing-injectable/update_recorder.ts', 'packages/core/schematics/test/google3/missing_injectable_rule_spec.ts', 'packages/core/schematics/test/missing_injectable_migration_spec.ts']","Provider classes in Ivy need to be explicitly decorated with ""@Injectable()"", which is not currently required in ViewEngine, causing potential issues after migration."
5686f68fde514a7daf760aacc1fe52a7cb80b3af,1643665169,"fix(core): Add back support for namespace URIs in createElement of dom renderer (#44914)

Support for namespace URIs rather than short namespace names was added in
https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to
support how Ivy passed around the namespace URI rather than short name at the time.
As a side-effect, this meant that namespace URIs were supported by the
default dom renderer as part of the public API (likely unintentionally).

It did not, however extend the support to other parts of the system (setAttribute, setAttribute,
and the ServerRenderer). In the future we should decide what exactly the
semantics for dealing with namespaces should be and make it consistent.

fixes #44028

PR Close #44914
",['packages/platform-browser/src/dom/dom_renderer.ts'],"Namespace URIs in createElement of the default DOM renderer are unsupported, causing a discrepancy in public API handling of namespace identifiers. Other system parts like setAttribute and ServerRenderer also lack this support."
4d2e0063728286866e83cf9cea1510c2a319d005,1652469556,"refactor(router): Only create the `Route` injector when the path matches (#45990)

Currently, the `Router` will create the `EnvironmentInjector` for a
`Route` with `providers` as soon as it _attempts_ to match segments to
the `Route`. Instead, this change updates the logic to only create the
injector once we have confirmed that the `Route` matches. Note that this
will include partial matches where the final navigation still fails with
a ""cannot match any routes to segment"" error. We need to maintain the
injector hierarchy so we still need to create parent injectors before
descending into the child routes and determining if there is a full
match or just a partial one.

resolves #45988

PR Close #45990
","['packages/router/src/apply_redirects.ts', 'packages/router/src/utils/config.ts', 'packages/router/test/apply_redirects.spec.ts']","The `Router` is currently creating the `EnvironmentInjector` for a `Route` prematurely, leading to inefficient use of resources and potential navigation errors."
5c48cd30b5e0d871adb8e72d4defa643495aa4ca,1618846722,"fix(zone.js): should continue to executue listeners when throw error (#41562)

Close #41522

`zone.js` patches event listeners and run all event listeners together, if
one event handler throws error, the listeners afterward may not be invoked.

Reproduction:

```
export class AppComponent implements AfterViewInit {
  @ViewChild('btn') btn: ElementRef;
  title = 'event-error';

  constructor(private ngZone: NgZone) {}

  ngAfterViewInit() {
    this.ngZone.runOutsideAngular(() => {
      this.btn.nativeElement.addEventListener('click', () => {
        throw new Error('test1');
      });
      this.btn.nativeElement.addEventListener('click', () => {
        console.log('add eventlistener click');
      });
    });
  }
}
```

Until now no Angular users report this issue becuase in the `ngZone`, all
error will be caught and will not rethrow, so the event listeners afterward
will still continue to execute, but if the event handlers are outside of `ngZone`,
the error will break the execution.

This commit catch all errors, and after all event listeners finished invocation,
rethrow the errors in seperate `microTasks`, the reason I am using `microTask` here
is to handle multiple errors case.

PR Close #41562
","['packages/zone.js/lib/browser/browser.ts', 'packages/zone.js/lib/browser/event-target-legacy.ts', 'packages/zone.js/lib/browser/event-target.ts', 'packages/zone.js/lib/browser/shadydom.ts', 'packages/zone.js/lib/browser/webapis-rtc-peer-connection.ts', 'packages/zone.js/lib/browser/websocket.ts', 'packages/zone.js/lib/common/events.ts', 'packages/zone.js/lib/extra/socket-io.ts', 'packages/zone.js/lib/node/events.ts', 'packages/zone.js/lib/zone.ts', 'packages/zone.js/test/browser/browser.spec.ts']","When an error is thrown within one event handler in `zone.js`, subsequent event handlers may not execute especially when the handlers are outside of `ngZone`."
1ca2ce19ab871c76bee3ad67ee9c610284ca9281,1660671412,"fix(common): remove default for image width (#47082)

Previously NgOptimizedImage would default to requesting
an image at the width matching the width attribute in
the image HTML. While this works for width attrs that
match the intrinsic size of the image (e.g. responsive
images or images sized with CSS), this can be a sharp
edge for developers who use the width/height attributes
to set rendered size (i.e. instead of CSS, which one can
do for a fixed size image). In this case, defaulting to
the width attribute for the requested image would mean
requesting always at 1x quality, so screens with a DPR
 of 2+ get an image that is too small. Without a default
request width, the image served by the CDN would likely
be at intrinsic size, so 2x images would look correct.

This PR also updates the NgOptimizedImage sandbox and tests.

PR Close #47082
","['packages/common/src/directives/ng_optimized_image.ts', 'packages/common/src/private_export.ts', 'packages/common/test/directives/ng_optimized_image_spec.ts', 'packages/core/test/bundling/image-directive/basic/basic.e2e-spec.ts', 'packages/core/test/bundling/image-directive/basic/basic.ts', 'packages/core/test/bundling/image-directive/index.ts']","The default setting for NgOptimizedImage's image width, which matches the width attribute in HTML, results in the fetching of images at lower quality for screens with a device pixel ratio (DPR) of 2+ when the width/height attributes are used to set rendered size, disregarding CSS rules."
82d54fe8c3de0d89642f9deb0a52dd9a83a9c876,1601929397,"feat(zone.js): add jest fakeTimers support (#39016)

Close #38851, support `jest` fakeTimers APIs' integration with `fakeAsync()`.
After enable this feature, calling `jest.useFakeTimers()` will make all test
run into `fakeAsync()` automatically.

```
beforeEach(() => {
    jest.useFakeTimers('modern');
  });
  afterEach(() => {
    jest.useRealTimers();
  });

  test('should run into fakeAsync() automatically', () => {
    const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');
    expect(fakeAsyncZoneSpec).toBeTruthy();
  });
```

Also there are mappings between `jest` and `zone` APIs.

- `jest.runAllTicks()` will call `flushMicrotasks()`.
- `jest.runAllTimers()` will call `flush()`.
- `jest.advanceTimersByTime()` will call `tick()`
- `jest.runOnlyPendingTimers()` will call `flushOnlyPendingTimers()`
- `jest.advanceTimersToNextTimer()` will call `tickToNext()`
- `jest.clearAllTimers()` will call `removeAllTimers()`
- `jest.getTimerCount()` will call `getTimerCount()`

PR Close #39016
","['packages/zone.js/lib/jest/jest.ts', 'packages/zone.js/lib/testing/fake-async.ts', 'packages/zone.js/lib/zone-spec/fake-async-test.ts', 'packages/zone.js/test/jest/jest-zone-patch-fake-timer.js', 'packages/zone.js/test/jest/jest-zone.js', 'packages/zone.js/test/jest/jest.config.js', 'packages/zone.js/test/jest/jest.node.config.js', 'packages/zone.js/test/jest/jest.spec.js', 'packages/zone.js/test/jest/zone-jsdom-environment.js', 'packages/zone.js/test/jest/zone-node-environment.js']",There's a lack of support for integration of Jest's fakeTimers APIs with the fakeAsync() which makes it difficult to write automated tests.
c6ecdc9a8175971ce4caf7ccb65b8716a506ea92,1588802770,"feat(core): undecorated-classes-with-decorated-fields migration should handle classes with lifecycle hooks (#36921)

As of v10, undecorated classes using Angular features are no longer
supported. In v10, we plan on removing the undecorated classes
compatibility code in ngtsc. This means that old patterns for
undecorated classes will result in compilation errors.

We had a migration for this in v9 already, but it looks like
the migration does not handle cases where classes uses lifecycle
hooks. This is handled in the ngtsc compatibility code, and we
should handle it similarly in migrations too.

This has not been outlined in the migration plan initially,
but an appendix has been added for v10 to the plan document.

https://hackmd.io/vuQfavzfRG6KUCtU7oK_EA?both.

Note: The migration is unable to determine whether a given undecorated
class that only defines `ngOnDestroy` is a directive or an actual
service. This means that in some cases the migration cannot do
more than adding a TODO and printing an failure.

Certainly there are more ways to determine the type of such classes,
but it would involve metadata and NgModule analysis. This is out of
scope for this migration.

PR Close #36921
","['packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/google3/tslint_update_recorder.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/index.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/transform.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/update_recorder.ts', 'packages/core/schematics/test/undecorated_classes_with_decorated_fields_migration_spec.ts']",The undecorated classes migration is not handling cases where classes are utilizing lifecycle hooks which is causing compilation errors in v10.
f83fb3a5f9b146cb5025517950100e98895304ed,1641928578,"fix(compiler-cli): handle property reads of `ThisReceiver` in the indexer (#44678)

Previously, the Angular Indexer made an assumption that in any binding to
a property of an `ImplicitReceiver`, the property name begins at the start
of the binding. This is true for normal reads from `ImplicitReceiver` as
the implicit receiver has no representation in the template.

However, `ThisReceiver` inherits from `ImplicitReceiver` and _does_ have a
template representation. Such a binding looks like `{{this.foo}}`. This
commit corrects the logic of the indexer to use the `nameSpan` of the
property binding instead of its `sourceSpan` to locate the identifier.

PR Close #44678
","['packages/compiler-cli/src/ngtsc/indexer/src/template.ts', 'packages/compiler-cli/src/ngtsc/indexer/test/template_spec.ts']","Angular Indexer incorrectly assumes property name starts at beginning of the binding for 'ThisReceiver', leading to incorrect identifier location."
dedac8d3f73ebf4f05b773454e2a22ab5fa4bf7c,1674675098,"feat(router): Add test helper for trigger navigations in tests (#48552)

In order to test components and services which depend on router navigations, such as `ActivatedRoute` instances, tests currently need to provide a fair bit of boilerplate _or_ they can set up a stub for `ActivatedRoute` and list it in the `providers` to override it in `TestBed`. This approach of stubbing the `ActivatedRoute` creates a situation that can easily cause the test to break. The stub often only mocks out the dependencies that the component/service _currently_ needs. This dependencies might change over time and break the test in an unexpected way. In addition, it is difficult to get the structure of `ActivatedRoute` exactly correct.

This change will allow unit tests to quickly set up routes, trigger real navigations in the Router, and get instances of component's to test along with real instances of `ActivatedRoute`. This all comes without needing to know that the component depends on `ActivatedRoute` at all. This becomes more important when considering that a component may be refactored in the future to use `@Input` rather than access data on the `ActivatedRoute` instance (see #18967). Tests which mock out `ActivatedRoute` would all break, but those which use `navigateForTest` would continue to work without needing any updates.

resolves #15779
resolves #48608

PR Close #48552
","['packages.bzl', 'packages/examples/router/testing/test/router_testing_harness_examples.spec.ts', 'packages/router/src/private_export.ts', 'packages/router/testing/src/router_testing_harness.ts', 'packages/router/testing/src/testing.ts', 'packages/router/testing/test/router_testing_harness.spec.ts']","Testing components and services dependent on router navigations require significant boilerplate or stubbing ActivatedRoute, leading to fragile tests that can fail due to unconsidered dependencies or future refactoring."
8d2e5e6c4f5dd8ff435152f4a3ce94d7197255aa,1656605096,"refactor(core): remove experimental renderComponent function (#46605)

This commit removes the experimental `renderComponent` operation, which
implemented an alternative, lighter-weight bootstrapping option. This
experiment is being discontinued as the path towards it being a supported
production API was not clear. In particular, it lacked a clear roadmap for
supporting Angular's change detection, particularly when consuming existing
components.

PR Close #46605
","['packages/core/src/core_render3_private_export.ts', 'packages/core/src/render3/component.ts', 'packages/core/src/render3/index.ts']","The experimental `renderComponent` operation, a light-weight bootstrapping option, lacks a clear support roadmap for Angular's change detection, especially when consuming existing components."
d5101dff3ba97ee1ac9ab7e4de41128368d39768,1567107174,"fix(ivy): ngcc - improve the ""ngcc version changed"" error message (#32396)

If a project has nested projects that contain node_modules folders
that get processed by ngcc, it can be confusing when the ngcc
version changes since the error message is very generic:

```
The ngcc compiler has changed since the last ngcc build.
Please completely remove `node_modules` and try again.
```

This commit augments the error message with the path of
the entry-point that failed so that it is more obvious which
node_modules folder to remove.

BREAKING CHANGE:

This commit removes the public export of `hasBeenProcessed()`.

This was exported to be availble to the CLI integration but was never
used. The change to the function signature is a breaking change in itself
so we remove the function altogether to simplify and lower the public
API surface going forward.

PR Close #32396
","['packages/compiler-cli/ngcc/index.ts', 'packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/src/packages/build_marker.ts', 'packages/compiler-cli/ngcc/test/packages/build_marker_spec.ts']","In nested projects using ngcc, the error message shown when the ngcc version changes is too generic, causing confusion about which node_modules folder to remove."
1b37dcda61d69253237fe2ac546e4f930b13c8c6,1685634367,"refactor(compiler): add pure function support to the template pipeline (#50118)

This commit adds support for generating pure functions in the output
`ConstantPool` based on `ir.PureFunctionExpr`s. Note that nothing yet
generates these pure function forms - in the future they will be used both
in the implementation of the `pipeBindV` instruction as well as literal
arrays and maps in expressions.

PR Close #50118
","['packages/compiler/src/template/pipeline/ir/src/enums.ts', 'packages/compiler/src/template/pipeline/ir/src/expression.ts', 'packages/compiler/src/template/pipeline/src/emit.ts', 'packages/compiler/src/template/pipeline/src/instruction.ts', 'packages/compiler/src/template/pipeline/src/phases/pure_function_extraction.ts', 'packages/compiler/src/template/pipeline/src/phases/reify.ts', 'packages/compiler/src/template/pipeline/src/phases/var_counting.ts']","The output ConstantPool cannot generate pure functions based on ir.PureFunctionExpr's, thus implementing pipeBindV instruction and literal arrays and maps in expressions is hindered."
a4f3f3f81d62337cba9b2e0698a2d34a00913984,1554400356,"build(docs-infra): support doc aliases via `@alias` dgeni tag (#29673)

Now, one can add an `@alias` tag to API docs, which tells dgeni that this
API element (usually a `const`) is really just an alias for some API element
defined elsewhere.

Dgeni will then look up this API element and copy over the properties from
the alias to the current doc.

For example, we would like to privately export an Enum from `@angular/core`
but then publicly export this from `@angular/common`:

**packages/core/private_exports.ts**

```ts
/**
 * Description of this document.
 */
export enum ɵSomeEnum { ... }
```

**packages/common/public_api.ts**

```ts
import {ɵSomeEnum} from '@angular/core';

 /**
 * @alias core/ɵSomeEnum
 */
export const SomeEnum = ɵSomeEnum;
```

In the generated docs there will be a page for `common/SomeEnum`, which
will be rendered as an enum, rather than a const, showing the description
extracted from the `core/ɵSomeEnum`.

---

The implementation of this feature required some refactoring of the other
processing:

1. Previously `ɵ` prefixed exports were not even considered.
2. Due to 1. some processors needed to have guards added to ignore such
   private exports (`addMetadataAliases` and `checkContentRules`).
3. The processing of package pages had to be reworked (and split) so that
   it picked up the aliased export docs after their alias proeprties had
   been copied.

See FW-1207, FW-632, #29249

PR Close #29673
","['aio/tools/transforms/angular-api-package/index.js', 'aio/tools/transforms/angular-api-package/processors/addMetadataAliases.js', 'aio/tools/transforms/angular-api-package/processors/addMetadataAliases.spec.js', 'aio/tools/transforms/angular-api-package/processors/collectPackageContentDocs.js', 'aio/tools/transforms/angular-api-package/processors/collectPackageContentDocs.spec.js', 'aio/tools/transforms/angular-api-package/processors/processAliasDocs.js', 'aio/tools/transforms/angular-api-package/processors/processAliasDocs.spec.js', 'aio/tools/transforms/angular-api-package/processors/processPackages.js', 'aio/tools/transforms/angular-api-package/processors/processPackages.spec.js', 'aio/tools/transforms/angular-api-package/tag-defs/alias.js', 'aio/tools/transforms/angular-base-package/processors/checkContentRules.js', 'aio/tools/transforms/angular-base-package/processors/checkContentRules.spec.js']","API docs are unable to handle cases where a constant is an alias for an API element defined in another location, resulting in documentation discrepancies and confusion."
2fc5ae561b2d2f3ec2b90cf580c41bf6f5b55fda,1589993016,"fix(elements): capture input properties set before upgrading the element (#36114)

Previously, if an element started out as a regular `HTMLElement` (not a
Custom Element) and was later upgraded to a Custom Element, any
properties corresponding to component inputs that were set on the
element before upgrading it would not be captured correctly and thus not
reflected on the instantiated component.

This commit fixes it by ensuring that such properties are captured
correctly.

Jira issue: [FW-2006](https://angular-team.atlassian.net/browse/FW-2006)

Fixes #30848
Closes #31416

PR Close #36114
","['packages/elements/src/create-custom-element.ts', 'packages/elements/test/create-custom-element_spec.ts']","Properties corresponding to component inputs set on an HTMLElement, prior to its upgrade to a Custom Element, are not correctly captured and thus not reflected on the instantiated component."
b35fa739687a357108edaa0a57dcd033ecfcb9f2,1680645673,"feat(core): change the URL sanitization to only block javascript: URLs (#49659)

In modern browsers, the 'javascript:' URL scheme is the only scheme that
can execute JavaScript when passed in a navigation URL context (e.g.
`a.href` value). Validate URL shemes to only contain characters allowed
in the URL specification ([a-zA-Z-+.]), and that are not javascript
(case insensitive). This is not a breaking change. The URL sanitization
is loosen.

PR Close #49659
","['packages/core/src/sanitization/url_sanitizer.ts', 'packages/core/test/sanitization/url_sanitizer_spec.ts']","URL sanitization is not blocking 'javascript:' URL scheme, posing a security risk as it can execute JavaScript in a navigation URL context."
a6c8cc3215b28987aeb10243ffef67d0f5f5acf2,1607031733,"test(compiler-cli): validate broken external template incrementality (#39923)

Previously, if a component had an external template with a hard error, the
compiler would ""forget"" the link between that component and its NgModule.
Additionally, the NgModule would be marked as being in error, because the
template issue would prevent the compiler from registering the component
class as a component, so from the NgModule it would look like a declaration
of a non-directive/pipe class. As a combined result, the next incremental
step could fix the template error, but would not refresh diagnostics for the
NgModule, leading to an incrementality issue.

The various facets of this problem were fixed in prior commits. This commit
adds a test verifying the above case works now as expected.

PR Close #39923
",['packages/compiler-cli/test/ngtsc/incremental_error_spec.ts'],"When a component with an external template containing a hard error is compiled, the system ""forgets"" the link between the component and its NgModule, leading to incrementality issues."
fe58f0a383373147544f4392c480e8094ed233e7,1680804059,"refactor(core): update the link in hydration stats message (#49728)

Currently, the link points to https://angular.io/guides/hydration and there are 2 issues with it: the `guides/hydration` should actually be `guide/hydration` and the guide is only available at https://next.angular.io, but not at https://angular.io. It will be available at https://angular.io once v16 final is released. For now, we can point to https://next.angular.io, so that developers testing hydration during the pre-release period can follow the link.

PR Close #49728
",['packages/core/src/hydration/api.ts'],The hydration stats message link is incorrectly pointing to a non-existent guide on https://angular.io/guides/hydration instead of the correct guide available on https://next.angular.io.
b1df9a30f40aa9474ac78d541e76f8a13170be2d,1551482374,"fix(ivy): use the imported name of decorators for detection (#29061)

Currently, ngtsc has a bug where if you alias the name of a decorator when
importing it, it won't be detected properly. This is because the compiler
uses the aliased name and not the original, declared name of the decorator
for detection.

This commit fixes the compiler to compare against the declared name of
decorators when available, and adds a test to prevent regression.

PR Close #29061
","['packages/compiler-cli/src/ngtsc/annotations/src/util.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']",Current ngtsc bug causing improper decorator detection when the decorator name is aliased during import; compiler uses aliased name instead of original decorator name resulting in discrepancies.
eeaabe7fbf7a1cf057c6b740609886415e4037eb,1641579118,"fix(compiler-cli): incorrectly interpreting $any calls with a property read (#44657)

This was flagged during the code review of #44580. When generating a type check block, we were interpreting any call to `$any` as an `as any` cast, even if it's part of a `PropertyRead` (e.g. `foo.$any(1)`). This is handled correctly in other parts of the compiler, but it looks like it was missed in the type checker.

PR Close #44657
","['packages/compiler-cli/src/ngtsc/typecheck/src/type_check_block.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_check_block_spec.ts']","Generation of type check block misinterprets any call to `$any` as an `as any` cast, even if it's part of a `PropertyRead`, leading to inconsistent handling in different parts of the compiler."
11325bad4ab786a07e52ff380c00622fda11c0b7,1547077128,"test(ivy): mark jit_summaries_integration_spec as obsolete in Ivy (#28027)

These tests validate the ability of the View Engine TestBed to consume
summary metadata, a mechanism which allows the TestBed to use
AOT-compiled components & directives in tests. It achieves this through
two operations which are independently obsolete in Ivy:

1. It injects CompileMetadataResolver, a View Engine specific compiler
   internal class which extracts global analysis metadata from classes,
   and uses it to construct summary metadata. This happens in a
   beforeEach() block which calls createSummaries().

2. It uses TestBed.initTestEnvironment to pass summary metadata to the
   TestBed itself. Any such metadata is ignored in Ivy.

Operation #1 makes it impossible to run these tests under Ivy, as the
CompileMetadataResolver is not available with an Ivy compiler.

Ivy itself does not rely on summary data, and the R3TestBed can depend
directly on AOT compiled components without it. Thus, the spirit of thes
tests is obsolete in an Ivy world.

FW-838 #resolve

PR Close #28027
",['packages/core/test/linker/jit_summaries_integration_spec.ts'],"Tests relying on View Engine TestBed for consuming summary metadata fails in Ivy as Ivy compiler doesn't provide CompileMetadataResolver, making the tests obsolete."
ffc427bffc14e271bf85be3bffa1682c97fd01c2,1669145598,"test(router): Update flaky tests to consistently pass (#48176)

This commit makes several updates to the bootstrap tests of the Router.
The change that made the real difference was providing
`MockPlatformLocation`. Other changes include:

* using `async/await` instead of `done`
* not providing APP_BASE_HREF (recent router refactors made this unnecessary)
* using some functional guards to simplify some tests

PR Close #48176
",['packages/router/test/bootstrap.spec.ts'],"Bootstrap tests in the Router are flaky, potentially due to not using `MockPlatformLocation` and unnecessarily providing `APP_BASE_HREF`."
cb719ee16e086673e1e69946bec9b1e50bc169a0,1589993016,"test(elements): clean up `TestStrategy` between tests (#36114)

Previously, the `TestStrategy` `NgElementStrategy` used in
`createCustomElement()` tests was created once and re-used in each test
(due to complications related to how `customElements.register()` works).
As a result, the `TestStrategy` instance's state (e.g. inputs) could be
polluted from previous tests and affect subsequent ones.

This commit ensures the strategy instance is reset before each test.

PR Close #36114
",['packages/elements/test/create-custom-element_spec.ts'],"The `TestStrategy` instance's state (e.g. inputs) becomes polluted from previous tests and affects subsequent ones, due to it being created once and re-used in each `createCustomElement()` test."
4e4fcacb6d1d4e2c063eeba3a56c31c9e11fae88,1612896977,"fix(docs-infra): correctly handle entry-points with no public exports (#40737)

Previously, if an entry-point had no public exports (such as the
`@angular/platform-server/shims` introduced in #40559, which is a
side-effect-ful entry-point), it was incorrectly marked as having all
its exports deprecated (which marks the entry-point as deprecated as
well).

This commit fixes this by ensuring that an entry-point is not marked as
having all its exports deprecated if it has no public exports.

PR Close #40737
","['aio/tools/transforms/angular-api-package/processors/processPackages.js', 'aio/tools/transforms/angular-api-package/processors/processPackages.spec.js']","Entry-points with no public exports, like `@angular/platform-server/shims`, are incorrectly marked as deprecated due to being perceived as having all their exports deprecated."
a6b6590339013f9216d5691ebc413fa6fa250ea2,1651790114,"fix(bazel): speed up `d.ts` bundling by configuring worker (#45900)

Speeds up the `d.ts` bundling by configuring it as a Bazel
persistent worker. Also improve logging for the ng packager
rule to make it easier to spot which actions/bundles take
up significant time.

Type bundling will occur for every entry-point so for machines
with rather limited cores/threads, this will be useful to save
NodeJS boot and resolution time.

PR Close #45900
","['packages/bazel/src/ng_package/ng_package.bzl', 'packages/bazel/src/types_bundle/index.bzl', 'packages/bazel/src/types_bundle/index.ts']","`d.ts` bundling in Bazel is slow, especially on machines with limited cores/threads, leading to increased NodeJS boot and resolution time. Additionally, current logging in the ng packager rule does not effectively highlight time-consuming actions/bundles."
3c6a439a6fec6c921e08bde583a457953424b4bc,1669162784,"refactor(router): extract navigation transition code to a new file (#48092)

This commit extracts the Router's navigation ""transitions"" to a separate
file. The goal here is twofold:

- Separate the Router's logic into more manageable chunks. Rather than
  having to always edit a 1000+ line file, this separates different
  pieces into smaller, more focused files
- More importantly, this sets the groundwork for separating the Router
  state from the individual navigation transition. That is, it would be
  good for the rxjs pipeline to _not_ modify the Router state but only
  keep track of its own intermediate stages and emit outwards during
  important events. The Router can subscribe to those events and make
  updates to its state. This would theoretically allow us to swap those
  implementations independently. That is, the Router's state management
  can be changed without changing the transition handling and
  vice-versa.

PR Close #48092
","['packages/router/src/index.ts', 'packages/router/src/navigation_transition.ts', 'packages/router/src/operators/activate_routes.ts', 'packages/router/src/operators/apply_redirects.ts', 'packages/router/src/operators/check_guards.ts', 'packages/router/src/operators/recognize.ts', 'packages/router/src/operators/resolve_data.ts', 'packages/router/src/private_export.ts', 'packages/router/src/router.ts', 'packages/router/test/integration.spec.ts', 'packages/router/test/router.spec.ts']","The Router's logic is concentrated in a lengthy file, and its state management is too intertwined with navigation transition handling, hindering individual modifications to each part."
02742552f3e05b19c2915235d62fbc570a24c667,1624987798,"refactor(docs-infra): make angular.io and docs examples compatible with RxJS v7 (#42660)

This commit applies the necessary changes to make angular.io and (most)
docs examples compatible with both RxJS v6 and v7. It also adds new
steps to relevant CI jobs to test angular.io and docs examples against
RxJS v7 as well (to catch potential regressions).

NOTE:
Some of the docs examples are not compatible with RxJS v7 and are
therefore excluded from the tests. The SystemJS-based ngUpgrade
examples in particular are excluded, since they require a different
SystemJS configs to run against RxJS v6 and v7 and the extra complexity
of managing that is not worth it for the 4 affected examples.

PR Close #42660
","['aio/content/examples/elements/src/app/popup.component.ts', 'aio/src/app/custom-elements/api/api.service.ts', 'aio/src/app/custom-elements/toc/toc.component.ts', 'aio/src/app/layout/notification/notification.component.ts', 'aio/src/app/shared/scroll-spy.service.ts']",Angular.io and certain documentation examples are not compatible with RxJS version 7. Relevant CI jobs are also unable to detect potential regressions with this RxJS version.
29bf476bfe468696d3e90450d6792e938fa18434,1688068463,"refactor(compiler): Generate temporary variable assignments when function calls appear in a safe-access expression. (#50688)

The expression `a()?.b` should expand into `(tmp = a()) === null ? null : tmp.b`, in order to avoid calling the function `a()` twice.

This commit modifies the null-safe-expansion algorithm to emit temporary assignments, and provides the reification code to actually generate the declarations, assignments, and reads.

Note also that, with our bottom-up algorithm, there are some tricky cases when a function call exists inside an indexed access, such as `f1()?.[f2()?.a]?.b`. We add some special logic to avoid generating a double-assignment to the temporary storing the result of `f2()`.

Finally, there are opportunities to reuse the same temporary in expressions like `a?.[f()]?.[f()]`. We save this for the next commit.

PR Close #50688
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/safe_access/GOLDEN_PARTIAL.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/safe_access/safe_access_temporaries.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/safe_access/safe_access_temporaries_template.js', 'packages/compiler/src/output/output_ast.ts', 'packages/compiler/src/template/pipeline/ir/src/enums.ts', 'packages/compiler/src/template/pipeline/ir/src/expression.ts', 'packages/compiler/src/template/pipeline/src/emit.ts', 'packages/compiler/src/template/pipeline/src/phases/expand_safe_reads.ts', 'packages/compiler/src/template/pipeline/src/phases/nullish_coalescing.ts', 'packages/compiler/src/template/pipeline/src/phases/reify.ts', 'packages/compiler/src/template/pipeline/src/phases/temporary_variables.ts']",Safe-access expressions with function calls are ineffectively expanded leading to functions being called multiple times and a potential increase in execution time.
c38195f59e748005c43407b69b74f758aea588f4,1578524450,"refactor(ngcc): use a special map for memoizing expensive-to-compute values (#34512)

Previously, in cases were values were expensive to compute and would be
used multiple times, a combination of a regular `Map` and a helper
function (`getOrDefault()`) was used to ensure values were only computed
once.

This commit uses a special `Map`-like structure to compute and memoize
such expensive values without the need to a helper function.

PR Close #34512
","['packages/compiler-cli/ngcc/src/host/commonjs_host.ts', 'packages/compiler-cli/ngcc/src/host/umd_host.ts', 'packages/compiler-cli/ngcc/src/utils.ts', 'packages/compiler-cli/ngcc/test/utils_spec.ts']","Usage of regular `Map` and a helper function to compute and memoize values that are expensive, results in values being computed more than once."
cb05c0102fc951899745e16a923966d41f9384a7,1597684437,"fix(core): move generated i18n statements to the `consts` field of ComponentDef (#38404)

This commit updates the code to move generated i18n statements into the `consts` field of
ComponentDef to avoid invoking `$localize` function before component initialization (to better
support runtime translations) and also avoid problems with lazy-loading when i18n defs may not
be present in a chunk where it's referenced.

Prior to this change the i18n statements were generated at the top leve:

```
var I18N_0;
if (typeof ngI18nClosureMode !== ""undefined"" && ngI18nClosureMode) {
    var MSG_X = goog.getMsg(“…”);
    I18N_0 = MSG_X;
} else {
    I18N_0 = $localize('...');
}

defineComponent({
    // ...
    template: function App_Template(rf, ctx) {
        i0.ɵɵi18n(2, I18N_0);
    }
});
```

This commit updates the logic to generate the following code instead:

```
defineComponent({
    // ...
    consts: function() {
        var I18N_0;
        if (typeof ngI18nClosureMode !== ""undefined"" && ngI18nClosureMode) {
            var MSG_X = goog.getMsg(“…”);
            I18N_0 = MSG_X;
        } else {
            I18N_0 = $localize('...');
        }
        return [
            I18N_0
        ];
    },
    template: function App_Template(rf, ctx) {
        i0.ɵɵi18n(2, 0);
    }
});
```

Also note that i18n template instructions now refer to the `consts` array using an index
(similar to other template instructions).

PR Close #38404
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/compiler.ts', 'packages/compiler/src/render3/view/i18n/util.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/core/src/render3/definition.ts', 'packages/core/src/render3/instructions/i18n.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/interfaces/definition.ts', 'packages/core/src/render3/interfaces/node.ts', 'packages/core/test/render3/i18n_spec.ts']",Generated i18n statements placed at top-level are invoking `$localize` before component initialization causing issues with lazy-loading and hampering runtime translations.
3633be9875ab9e3a9085c62627025456929f2828,1598300377,"fix(devtools): Style Changes to Profiler, general color scheme, controls & responsiveness (rangle/angular-devtools#468)

* make angular version number copyable

* Make version selectable

* change instructions and icons in profiler

* make font size responsive

* fix: move checkbox to control panel

* fix: change loading indicator to match style

* fix: profiler tab style of graphs

* fix: version responsive to size

* fix: version colors

* fix: flame graph colors and change detection

Co-authored-by: Emma Twersky <emmatwersky@google.com>","['projects/ng-devtools/src/lib/devtools-tabs/profiler/profiler.module.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/record-formatter/flamegraph-formatter/flamegraph-formatter.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/recording-visualizer/bargraph-visualizer/bargraph-visualizer.component.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/recording-visualizer/flamegraph-visualizer/flamegraph-visualizer.component.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/recording-visualizer/recording-visualizer.module.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/recording-visualizer/timeline-visualizer.component.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/timeline-controls/timeline-controls.component.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/timeline.component.ts', 'projects/ng-devtools/src/lib/devtools-tabs/profiler/recording/timeline/timeline.module.ts']","Inconsistent styling within Angular Devtools Profiler causes lack of responsiveness, version number not being selectable or copyable, mismatching loading indicators, and irregular color scheme, affecting overall usability."
93289f9c7639f9d455d27da113aa1dc132c6284d,1660310869,"refactor(router): Update error message when Router is provided twice (#47130)

The current error message is absolute in that it thinks there is only
one possible way to provide Router twice. In fact, you can get a new
instance of the Router in several ways so the error message should
indicate the exact failure case with a _potential_ cause.

Based on findings in thread https://github.com/angular/angular/commit/0cbbd6aeecda8ea994f1086727e580b813a53d79#commitcomment-80900192

PR Close #47130
","['packages/router/src/router_module.ts', 'packages/router/test/integration.spec.ts']","Error message incorrectly assumes single method of providing the Router twice, resulting in inconsistent debugging when multiple methods are used."
a64eded5216e822c0cb52679f31af63b932ecc69,1568070634,"fix(ivy): capture template source mapping details during preanalysis (#32544)

Prior to this change, the template source mapping details were always
built during the analysis phase, under the assumption that pre-analysed
templates would always correspond with external templates. This has
turned out to be a false assumption, as inline templates are also
pre-analyzed to be able to preload any stylesheets included in the
template.

This commit fixes the bug by capturing the template source mapping
details at the moment the template is parsed, which is either during the
preanalysis phase when preloading is available, or during the analysis
phase when preloading is not supported.

Tests have been added to exercise the template error mapping in
asynchronous compilations where preloading is enabled, similar to how
the CLI performs compilations.

Fixes #32538

PR Close #32544
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/diagnostics.ts', 'packages/compiler-cli/src/perform_compile.ts', 'packages/compiler-cli/test/ngtsc/env.ts', 'packages/compiler-cli/test/ngtsc/template_typecheck_spec.ts']",Pre-analyzed inline templates' source mapping details are not being captured correctly during the analysis phase which leads to issues in template error mapping especially in asynchronous compilations.
82a2207f4a5cc92d57400d3e60c5aecff7b2f173,1594235086,"build: filter out duplicate cherry-picked commits in changelog (#37956)

Often changelogs are generated from the patch branch and then
cherry-picked into the `CHANGELOG.md` file in `master` for
better access and readability. This is problematic though as
`conventional-changelog` (the tool we use for generating the
changelog), will duplicate commits when a future changelog
is generated from `master` then (i.e. for a new minor release).

This happens because conventional-changelog always generates the
changelog from the latest tag in a given branch to `HEAD`. The
tag in the patch branch does not correspond to any SHA in `master`
so the intersection of commits is not automatically omitted.

We work around this naively (until we have a better tool provided
by dev-infra), by deduping commits that are already part of the
changelog. This has proven to work as expected in the components
repo.

PR Close #37956
",['tools/gulp-tasks/changelog.js'],Changelog generation from the master branch duplicates commits when a future changelog is generated due to the misalignment of tag correspondence between master and the patch branch.
0f3831b105bab1f077bf21338f9c567ca052d3d4,1588621430,"build: create macro for transpiling javascript file to es5 (#36802)

For testing on IE, shims must be served in es5.  Because the shims
served in these tests come from node_modules and are not part of
the angular/angular source code, they must be transpiled to es5 if
they are published as es6. This macro allows for a uniform method
for running this transpilation during the build process.

PR Close #36802
",['tools/utils.bzl'],"Shims served from node_modules for testing on IE are not transpiled to es5 if published as es6, causing potential testing conflicts."
4e1f37fc177f637de18f7448c0fc597211bf79c2,1570740974,"refactor(docs-infra): replace `mousewheel` event with `wheel` event (#32980)

This commit replaces the non-standard, depecated [mousewheel][1] event
(which is not supported in Firefox and possibly other browsers too) with
the standard [wheel][2] event, which works on all supported browsers
according to [MDN's compatibility table][3].

I manually tested it in Chrome, Firefox, Edge and IE11.

[1]: https://developer.mozilla.org/en-US/docs/Web/API/Element/mousewheel_event
[2]: https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
[3]: https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event#Browser_compatibility

PR Close #32980
",['aio/src/app/app.component.spec.ts'],"Non-standard, deprecated `mousewheel` event is not supported in Firefox and possibly some other browsers, causing compatibility issues."
8e0a08767485e3a218320940f5df9a0a89fecd5f,1678233405,"refactor(core): hydration logic for <ng-container>s (#49303)

This commit incrementally builds on top of #49285 and adds the logic to hydrate <ng-container>s and their contents. This implementation supports simple <ng-container>s that don't have any Angular features (like *ngIf/*ngFor, etc) and are not content-projected.

The subsequent commits will extend the logic further to support more complex scenarios.

PR Close #49303
","['packages/core/src/hydration/annotate.ts', 'packages/core/src/hydration/api.ts', 'packages/core/src/hydration/error_handling.ts', 'packages/core/src/hydration/interfaces.ts', 'packages/core/src/hydration/node_lookup_utils.ts', 'packages/core/src/hydration/utils.ts', 'packages/core/src/render3/instructions/element_container.ts', 'packages/platform-server/test/hydration_spec.ts']","Hydration of <ng-container> and its contents fail, specifically when they don't have Angular features and are not content-projected."
a0a373be8d64e7b63cb70661c8ee31e93ae797c9,1619200840,"test: delete integration test for language service plugin (#41740)

This commit deletes the integration test for `@angular/language-service`
as a plugin to the standard tsserver.

In version 12, Ivy LS will replace legacy View Engine LS as the default,
and Ivy LS plugin cannot be loaded via `tsconfig.json` due to the need to
run ngcc. This makes the test irrelevant.

PR Close #41740
","['integration/language_service_plugin/generate.ts', 'integration/language_service_plugin/matcher.ts', 'integration/language_service_plugin/project/app/app.component.ts', 'integration/language_service_plugin/project/app/app.module.ts', 'integration/language_service_plugin/project/app/main.ts', 'integration/language_service_plugin/project/app/widget.component.ts', 'integration/language_service_plugin/test.ts', 'integration/language_service_plugin/tsclient.ts']",The integration test for `@angular/language-service` as a plugin to the standard tsserver has become irrelevant as Ivy LS will be replacing the legacy View Engine LS and cannot be loaded via `tsconfig.json`.
d82c957a260f4e4a341e7036355a764a5e98d3ca,1643760277,"fix(compiler-cli): ensure casing of logical paths is preserved (#44798)

The logical filesystem would store a cached result based on the canonical path,
where the cached value contains the physical path that was originally provided.
This meant that other physical paths with an identical canonical path would use
a cached result derived from another physical path.

This inconsistency is not known to result in actual issues but is primarily
being made as a performance improvement, as using the provided physical paths
as cache key avoids the need to canonicalize the path if its result is already
cached.

PR Close #44798
","['packages/compiler-cli/src/ngtsc/file_system/src/logical.ts', 'packages/compiler-cli/src/ngtsc/file_system/test/logical_spec.ts']","Logical filesystem is not preserving the casing of paths, resulting in potential inconsistencies and inefficient caching, especially with paths having identical canonical form but different physical paths."
c61e4d7841bb5f453acbed626403c9bd097f688d,1570470697,"fix(ivy): process nested animation metadata (#32818)

In View Engine, animation metadata could occur in nested arrays which
would be flattened in the compiler. When compiling a component for Ivy
however, the compiler no longer statically evaluates a component's
animation metadata and is therefore unable to flatten it statically.
This resulted in an issue to find animations at runtime, as the metadata
was incorrectly registered with the animation engine.

Although it would be possible to statically evaluate the animation
metadata in ngtsc, doing so would prevent reusable animations exported
from libraries from being usable as ngtsc's partial evaluator is unable
to read values inside libraries. This is unlike ngc's usage of static
symbols represented in a library's `.metadata.json`, which explains how
the View Engine compiler is able to flatten the animation metadata
statically.

As an alternative solution, the metadata flattening is now done in the
runtime during the registration of the animation metadata with the
animation engine.

Fixes #32794

PR Close #32818
","['packages/core/test/animation/animation_integration_spec.ts', 'packages/platform-browser/animations/src/animation_renderer.ts', 'packages/platform-browser/animations/test/animation_renderer_spec.ts']","Ivy compiler can't statically evaluate and flatten nested animation metadata, causing issues with finding animations at runtime due to incorrectly registered metadata."
db6cf7e7c168f9a25550d7fa53840c08b50b889c,1644259612,"fix(compiler): allow banana-in-a-box bindings to end with non-null assertion (#37809)

For two-way-bindings that use the banana-in-a-box syntax, the compiler
synthesizes an event assignment expression from the primary expression.
It is valid for the primary expression to be terminated by the non-null
operator, however naive string substitution is used for the synthesized
expression, such that the `!` would immediately precede the `=` token,
resulting in the valid `!=` operator token. The expression would still
parse correctly but it doesn't implement the proper semantics, resulting
in incorrect runtime behavior.

Changing the expression substitution to force a space between the
primary expression and the assignment avoids this mistake, but it
uncovers a new issue. The grammar does not allow for the LHS of an
assignment to be the non-null operator, so the synthesized expression
would fail to parse. To alleviate this, the synthesized expression is
parsed with a special parser flag to allow for this syntax.

Fixes #36551

PR Close #37809
","['packages/compiler/src/expression_parser/parser.ts', 'packages/compiler/src/render3/r3_template_transform.ts', 'packages/compiler/src/template_parser/binding_parser.ts', 'packages/compiler/test/expression_parser/parser_spec.ts', 'packages/compiler/test/render3/r3_template_transform_spec.ts']",Two-way bindings using banana-in-a-box syntax and ending with a non-null operator result in incorrect runtime behavior due to naive string substitution in the event assignment expression synthesized by the compiler.
a54713c8316787eea160cfdb7f2778a087fe59ed,1696026154,"feat(core): implement ɵgetInjectorMetadata debug API (#51900)

This API allows for inspection of a given injector to determine it's type (Element, Environment, Null) as well as it's ""source"".

- For Environment injectors the source is the source of the injector; `injector.source`.
- For Element injectors the name is the DOM Element that created the injector.
- For the Null Injector this is the string `""Null Injector""`.

PR Close #51900
","['packages/core/src/render3/util/global_utils.ts', 'packages/core/src/render3/util/injector_discovery_utils.ts', 'packages/core/test/acceptance/injector_profiler_spec.ts']","There's no way to inspect a given injector to determine its type (Element, Environment, Null) and its ""source"" for debugging purposes."
da42a7648a117c8c51c55717f029f66596df5416,1567721328,"fix(ivy): node placed in incorrect order inside ngFor with ng-container (#32324)

Fixes an issue where Ivy incorrectly inserts items in the beginning of an `ngFor`, if the `ngFor` is set on an `ng-container`. The issue comes from the fact that we choose the `ng-container` comment node as the anchor point before which to insert the content, however the node might be after any of the nodes inside the container. These changes switch to picking out the first node inside of the container instead.

PR Close #32324
","['packages/core/src/render3/node_manipulation.ts', 'packages/core/test/acceptance/view_container_ref_spec.ts']","Items incorrectly inserted at the beginning of an `ngFor` set on an `ng-container`,
though the `ng-container` comment node might be after any nodes inside the container."
b302797de47409b988ad77e87f766a5f18374ded,1660735935,"fix(forms): Correctly infer `FormBuilder` types involving `[value, validators]` shorthand in more cases. (#47034)

Type inference in cases involving `ControlConfig` was previously not working as desired. This was because the compiler was enforcing that `ControlConfig` is a *tuple* -- which is not always that easy to prove! By relaxing this constraint a bit, and just inferring from `ControlConfig` as an array, the type inference catches many more cases, and is generally more correct.

PR Close #47034
","['packages/forms/src/form_builder.ts', 'packages/forms/test/typed_integration_spec.ts']","Type inference issues in `ControlConfig` when using `[value, validators]` shorthand in FormBuilder, leading to the type not being correctly recognized in certain situations."
0654c05c41c1e988ad6768bda3258c94340ded6a,1612983786,"fix(core): properly move embedded views of dynamic component's projectable nodes (#37167)

This commit fixes the issue of the ASSERTION ERROR issue when
a projected node(RNode) inside an array is checked against the types
of TNodeType.Element, TNodeType.Container, TNodeType.ElementContainer,
TNodeType.IcuContainer, TNodeType.Projection. As it's inside an array,
it doesn't fall into any of those types, as a result, it throws
the ASSERTION ERROR.

PR Close #37120

PR Close #37167
","['packages/core/src/render3/assert.ts', 'packages/core/src/render3/collect_native_nodes.ts', 'packages/core/src/render3/node_manipulation.ts', 'packages/core/test/linker/integration_spec.ts']",ASSERTION ERROR occurring when a projected node (RNode) inside an array is checked against certain TNodeTypes due to the array not being covered by these types.
a2e44d97730cbf09418938e94815542604838163,1687116754,"refactor(benchpress): include text representation of results in json report (#50745)

This commit updates benchpress to include the text representation of
results in the JSON report. This is useful when results of multiple
tests are read from the Bazel testlogs and then printed together in
e.g. a GitHub comment, or at the end of a script (not in the middle
of the surroundings of the Bazel executions).

The text representation could have been built directly based on the
JSON raw metrics, but it would be unnecessary work and duplication
to get a similar output as with the console reporter- so we can
just include this information in the report.

PR Close #50745
","['packages/benchpress/src/reporter/console_reporter.ts', 'packages/benchpress/src/reporter/json_file_reporter.ts', 'packages/benchpress/src/reporter/json_file_reporter_types.ts', 'packages/benchpress/src/reporter/text_reporter_base.ts', 'packages/benchpress/src/runner.ts', 'packages/benchpress/src/sample_description.ts', 'packages/benchpress/src/sample_description_providers.ts', 'packages/benchpress/test/reporter/console_reporter_spec.ts', 'packages/benchpress/test/reporter/json_file_reporter_spec.ts']","Benchpress JSON report does not include text representation of results, making it difficult to collate and present results in situations like GitHub comments or script ends.
"
05762b9fff8bd20aaece8dec7511b9bcb0d14b51,1694209747,"refactor(localize): ignore code duplication error with compiler package (#51500) (#51558)

The localize package intentionally duplicates some logic from the
compiler to avoid adding a dependency. This is now an error in the
packaging rule to prevent common pitfalls/code duplication. Here it's
an explicit decision though so we mark it as such and ask for the check
to be ignored for the particular import.

PR Close #51500

PR Close #51558
","['aio/content/examples/router/src/app/app-routing.module.10.ts', 'aio/content/examples/router/src/app/app-routing.module.8.ts', 'aio/content/examples/router/src/app/app-routing.module.9.ts', 'aio/content/examples/router/src/app/app.component.3.ts', 'aio/content/examples/router/src/app/app.component.4.ts']","The localize package duplicates compiler logic intentionally, triggering a packaging rule error intended to prevent code duplication."
7d832ae1001b6264bb7124086089e9e69c10c9b6,1583339726,"build(docs-infra): use local version of Zone.js when testing against local packages (#35780)

In some cases, we want to test the AIO app or docs examples against the
locally built Angular packages (for example to ensure that the changes
in a commit do not introduce a breaking change). In order to achieve
this, we have the `ng-packages-installer` script that handles updating
a project's `package.json` file to use the locally built Angular
packages (and appropriate versions for their (dev-/peer-)dependencies).

Previously, `ng-packages-installer` would only consider the locally
built Angular packages (from `dist/packages-dist/`). However, given that
Zone.js is now part of the `angular/angular` repo, it makes sense to
also use the locally built Zone.js package (from `dist/zone.js-dist/`).
Otherwise, the tests might fail for commits that update both the Angular
packages (and related docs examples) and the Zone.js package. An example
of such a simultaneous change (that would have broken tests) is #33838.

This commit updates the script to install the locally built Zone.js
package (in addition to the Angular ones). The commit ensures that the
Zone.js package will always be available alongside the Angular packages
(i.e. that the Zone.js package will be built by the same script that
builds the Angular packages and that the `dist/zone.js-dist/` directory
will be cached on CI).

Note: This problem was discovered while enabling docs examples unit
tests in #34374.

PR Close #35780
","['aio/tools/ng-packages-installer/index.js', 'aio/tools/ng-packages-installer/index.spec.js', 'scripts/build/build-ivy-npm-packages.js']","When testing AIO app or docs examples against locally built Angular packages, ng-packages-installer doesn't consider locally built Zone.js package. This potentially causes test failures for commits that update both Angular and Zone.js packages."
12443ea7395c9ddc8e36314a8cc92253e2d07d26,1625867415,"build: remove `skydoc` and `rules_sass` from repository (#42760)

Skydoc is no longer used as `@angular/bazel` is no longer a
public API. The Sass rules were only used in a single place
in the repo where Sass is not really needed and has just been
added by accident most likely. We want to remove the Sass dependency
in preparation for Rules NodeJS v4.x where the Sass rules currently
still use an older version of `@bazel/worker` that is incompatible.

PR Close #42760
","['packages/bazel/package.bzl', 'packages/bazel/src/ng_module.bzl', 'packages/bazel/src/ng_package/ng_package.bzl']","The repository still contains `skydoc` and `rules_sass` deps, while the former is not used anymore and the latter is accidentally used only once and causes incompatibility with Rules NodeJS v4.x."
036dbb7e6d4c3561405e9fa2ebf590c2d102276a,1656477465,"test(core): convert remaining bundling tests to not use renderComponent (#46559)

This commit converts the remaining bundling tests which were using
`renderComponent` to use regular bootstrapping instead.

Since `renderComponent` is synchronous and regular bootstrapping is not,
some test adjustments were necessary to wait for bootstrapping before test
assertions could run.

Additionally, debug servers were adjusted in some cases where they'd broken
(likely some time ago).

PR Close #46559
","['packages/core/test/bundling/animation_world/index.ts', 'packages/core/test/bundling/cyclic_import/index.ts', 'packages/core/test/bundling/cyclic_import/integration_spec.ts', 'packages/core/test/bundling/hello_world_i18n/index.ts', 'packages/core/test/bundling/todo_i18n/index.ts', 'packages/core/test/bundling/todo_i18n/todo_e2e_spec.ts']",The remaining bundling tests are using `renderComponent` causing problems due to its synchronous nature and possibly breaking debug servers.
8004eb0eec67f624db54493b6371a4e485fb02a9,1589822781,"fix(dev-infra): misc fixes for the compare master and patch script (#37150)

This commit includes a couple minor fixes for the script that compares master and patch branch:
- take only relevant release commit into account while generating the diff
- fix the initial version display (avoid '+' sign from being added)
- removes obsolete parameter that was needed for v9.0.x branch only

PR Close #37150
",['scripts/compare-master-to-patch.js'],"The script that compares master and patch branch incorrectly considers irrelevant release commits, displays initial version with '+' sign, and uses an obsolete parameter for v9.0.x branch."
e3cef4a7843d22fd004f1e27afcc42d0fbbef74a,1664909558,"docs(core): deprecate `providedIn: NgModule` and `providedIn: 'any'` (#47616)

This commit deprecates the above two forms of `providedIn`.

DEPRECATED:

- The ability to pass an `NgModule` to the `providedIn` option for
`@Injectable` and `InjectionToken` is now deprecated.

`providedIn: NgModule` was intended to be a tree-shakable alternative to
NgModule providers. It does not have wide usage, and in most cases is used
incorrectly, in circumstances where `providedIn: 'root'` should be
preferred. If providers should truly be scoped to a specific NgModule, use
`NgModule.providers` instead.

- The ability to set `providedIn: 'any'` for an `@Injectable` or
`InjectionToken` is now deprecated.

`providedIn: 'any'` is an option with confusing semantics and is almost
never used apart from a handful of esoteric cases internal to the framework.

PR Close #47616
","['packages/core/src/di/injectable.ts', 'packages/core/src/di/injection_token.ts']",Misusage and lack of need for `providedIn: NgModule` and `providedIn: 'any'` in `@Injectable` and `InjectionToken` causes unwanted confusion and complexity in the code.
7e64bbe5a82f1d1ac3c23cb166aa381cae751015,1571342827,"fix(ivy): use container i18n meta if a message is a single ICU (#33191)

Prior to this commit, metadata defined on ICU container element was not inherited by the ICU if the whole message is a single ICU (for example: `<ng-container i18n=""meaning|description@@id"">{count, select, ...}</ng-container>). This commit updates the logic to use parent container i18n meta information for the cases when a message consists of a single ICU.

Fixes #33171

PR Close #33191
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/i18n/meta.ts', 'packages/core/test/acceptance/i18n_spec.ts']","Single ICU messages are not inheriting metadata from their ICU container element, making certain i18n features unusable."
6c3ad1f1a4ad422a218c65b2f0a032dbcdaa1083,1628537141,"fix(docs-infra): correctly detect chunk load errors (#43088)

It seems that at some point (potentially with the switch to Webpack 5)
Webpack started using the full chunk name (instead of just a numeric
identifier) in `ChunkLoadError` messages. So the error messages changed
from:
```
ChunkLoadError: Loading chunk 2 failed.
```

...to:
```
ChunkLoadError: Loading chunk src_app_something_some_module_ts failed.
```

This commit updates the regex that is used to detect such errors (in
order to print ServiceWorker-related debug info) to correctly recognize
the new error message format.

PR Close #43088
",['aio/src/app/layout/doc-viewer/doc-viewer.component.ts'],Chunk loading error detection is faulty; ServiceWorker-related debug info doesn't print due to Webpack using full chunk names instead of numeric identifiers in recent versions.
06bca0cc669680d875d294fdf0246b941026a861,1574097061,"fix(docs-infra): do not auto-link code in bash and json snippets (#33877)

Previously any code block, which was not marked with
`no-auto-link` css class would have its contents auto-linked to
API pages. Sometimes this results in false positive links being
generated.

This is problematic for triple backticked blocks, which cannot provide
the `no-auto-link` CSS class to prevent the linking.

This commit fixes the problem by allowing the auto-linker to be
configured not to auto-link code blocks that have been marked with an
""ignored"" language. By default these are `bash` and `json`.

Triple backticked blocks are able to specify the language directly after
the first set of triple backticks.

Fixes #33859

PR Close #33877
","['aio/tools/transforms/angular-base-package/post-processors/auto-link-code.js', 'aio/tools/transforms/angular-base-package/post-processors/auto-link-code.spec.js']",False positive links are being generated within triple backticked code blocks for `bash` and `json` snippets due to current auto-link to API pages functionality.
dde81ba0cdb55834dfc5633c89f7912042013252,1618440501,"perf(compiler): reduce amount of generated code for safe accesses and nullish coalescing (#41563)

This is follow-up from #41437 and it reduces the amount of code we generate for safe property accesses (`a?.b`) and nullish coalescing (`a ?? b`) by:
1. Reusing variables in nested nullish coalescing expressions.
2. Not initializing temporary variables to `null`. The way our code is generated means that the value will always be overwritten before we compare against it so the initializer didn't really matter.

Fixes #41491.

PR Close #41563
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/nullish_coalescing/nullish_coalescing_host_bindings.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/nullish_coalescing/nullish_coalescing_interpolation_template.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/nullish_coalescing/nullish_coalescing_property_template.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_bindings/host_bindings/host_bindings_with_temporaries.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_bindings/property_bindings/temporary_variables.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/element_attributes/interpolation_complex_expressions.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/nested_nodes/interpolation_complex_expressions.js', 'packages/compiler/src/compiler_util/expression_converter.ts']",Use of safe property accesses (`a?.b`) and nullish coalescing (`a ?? b`) in nested expressions is generating excessive code. This is due to unnecessary initializations and non-reuse of variables.
f57e46c53881c46e712a64e23bffb1893dfe54fc,1650056028,"fix(language-service): two-way binding completion should not remove the trailing quote (#45582)

We allow the path to contain both the `t.BoundAttribute` and `t.BoundEvent` for two-way
bindings but do not want the path to contain both the `t.BoundAttribute` with its
children when the position is in the value span because we would then logically create a path
that also contains the `PropertyWrite` from the `t.BoundEvent`. This early return condition
ensures we target just `t.BoundAttribute` for this case and exclude `t.BoundEvent` children.

Fixes https://github.com/angular/vscode-ng-language-service/issues/1626

PR Close #45582
","['packages/language-service/src/template_target.ts', 'packages/language-service/test/completions_spec.ts']",Two-way binding completion wrongly includes both `t.BoundAttribute` and its children along with `PropertyWrite` from `t.BoundEvent` when the position is in value span.
88b0985bad498f2fdd6bc8846279f63ed3acb205,1587055450,"fix(compiler): avoid generating i18n attributes in plain form (#36422)

Prior to this change, there was a problem while matching template attributes, which mistakenly took i18n attributes (that might be present in attrs array after template ones) into account. This commit updates the logic to avoid template attribute matching logic from entering the i18n section and as a result this also allows generating proper i18n attributes sections instead of keeping these attribute in plain form (with their values) in attribute arrays.

PR Close #36422
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/i18n/util.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/compiler/src/util.ts', 'packages/compiler/test/util_spec.ts', 'packages/core/src/render3/node_selector_matcher.ts']","Template attribute matching erroneously considers i18n attributes, leading to generation of i18n attributes in plain form within attribute arrays."
5a0ecdb58b50d713d52bdeced0fd1c859c6637d0,1690495685,"refactor(compiler): Allow host binding functions to specialize bindings (#50899)

Interestingly, host bindings are parsed quite differently from template functions. For example, bindings such as `[style.foo]: 3px` would be parsed into a value, unit, and type when bound to a template, but will not be parsed as such when used in a host binding.

In this commit, we remedy this shortcoming by adding support for bindings in host binding functions to the template pipeline. In particular, we create a phase to process these bindings, and transform them into the correct output binding kind.

Additionally, we fix some other minor bugs and omissions.

Finally, we enable compilation of host bindings with the template pipeline, which requires us to turn off a number of failing tests.

PR Close #50899
","['packages/compiler/src/render3/view/compiler.ts', 'packages/compiler/src/template/pipeline/src/compilation.ts', 'packages/compiler/src/template/pipeline/src/emit.ts', 'packages/compiler/src/template/pipeline/src/ingest.ts', 'packages/compiler/src/template/pipeline/src/phases/binding_specialization.ts', 'packages/compiler/src/template/pipeline/src/phases/chaining.ts', 'packages/compiler/src/template/pipeline/src/phases/host_style_property_parsing.ts', 'packages/compiler/src/template/pipeline/src/phases/naming.ts', 'packages/compiler/src/template/pipeline/src/phases/property_ordering.ts']","Host bindings are not parsing the same way as template bindings, leading to issues with specific binding types such as `[style.foo]: 3px`. Additionally, host bindings cannot be compiled with the template pipeline."
2d713f58474b332b0dcdca8bf37712348395060c,1655929606,"refactor(router): separate router initializer into different logical providers (#46215)

This change separates the router initializer into different providers.
While it does not actually change the tree-shakeablity or the public
API, it does move us towards a world that _could_ do this. That is,
instead of `initialNavigation: 'disabled'`, users could use
`provideDisabledInitialNavigation` in the `bootstrapApplication` call
and none of the code for `initialNavigation: 'enabledBlocking'` would be
included in the application.

PR Close #46215
",['packages/router/src/router_module.ts'],"The router initializer is not logically separated into different providers, potentially affecting tree-shakeability and increasing the application's size by including unnecessary code."
fe2b6923baee06f7348005ce76c4640b776ec0da,1585772693,"fix(language-service): infer type of elements of array-like objects (#36312)

Currently the language service only provides support for determining the
type of array-like members when the array-like object is an `Array`.
However, there are other kinds of array-like objects, including
`ReadonlyArray`s and `readonly`-property arrays. This commit adds
support for retrieving the element type of arbitrary array-like objects.

Closes #36191

PR Close #36312
","['packages/language-service/src/typescript_symbols.ts', 'packages/language-service/test/hover_spec.ts', 'packages/language-service/test/project/app/parsing-cases.ts']","The language service fails to infer the type of elements within array-like objects that are not specifically of `Array` type, including `ReadonlyArray`s and `readonly` property arrays."
81718769c46376a75bb7e80ff1c7b16c5de8c6b8,1607723795,"refactor(compiler-cli): rename ignore marker and helpers to be more clear (#40071)

The ignore marker is only used to ignore certain nodes in the TCB for
the purposes of diagnostics. The marker itself has been renamed as well
as the helper function to see if the marker is present. Both now
indicate that the marker is specifically for diagnostics.

PR Close #40071
","['packages/compiler-cli/src/ngtsc/typecheck/src/comments.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/tcb_util.ts']","The naming of the ignore marker and its helper function in the TCB is not indicative of their purpose in diagnostics, leading to confusion."
a0be043f8164b10e1d6516c88674f8d4cd0a67f6,1653081490,"reactor(compiler-cli): account for babel types change (#45967)

This commit accounts for the Babel types changes. Some properties
can now also be `undefined` so existing checks/assertions had to
be adjusted to also capture `undefined` (along with `null`).

Additionally, in preparation for a new ECMA proposal, Babel types
seem to have been updated to include private names in object property
keys. This is not necessarily the case for object expressions, but
could be for object patterns (in the future -- when implemented).

More details: https://github.com/babel/babel/pull/14304 and
https://github.com/tc39/proposal-destructuring-private.

PR Close #45967
","['packages/compiler-cli/linker/babel/src/ast/babel_ast_host.ts', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/ng_for_simple_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/ng_for_templated_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/ng_if_simple_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/ng_if_templated_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/output_binding_complex_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/output_binding_simple_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/two_way_binding_longhand_partial.js', 'packages/compiler-cli/test/compliance/test_cases/source_mapping/inline_templates/two_way_binding_simple_partial.js']",Compilation failure due to babel types changes - undefined properties and private names in object property keys not accounted for during checks and assertions.
27562e92db4472c624334f9e475e4fff4d0897ff,1574289871,"fix(docs-infra): fix StackBlitz and zipped `http` examples (#33941)

Previously, the generated StackBlitz examples as well as the
corresponding downloadable zips for the `http` guide examples were not
correct and thus trying to run the app and/or tests would fail.

This commit fixes the examples:

- Replace `TestBed.inject()` (which was [introduced in v9][1]) with
  `TestBed.get()` (which is available in v8 used in the examples).
  (NOTE: The examples will soon be updated to v9 (as part of
  [FW-1609][2] and switched back to `TestBed.inject()` then.)

- Include `src/app/heroes/hero.ts` in the zip, because it is referenced
  by some of the other files and the compilation fails without it.

- Ensure `src/main-specs.ts` is not included in the zip that does not
  include the tests. Including the file broke the app, because there is
  logic in our zip-builder that renamed `main-*.ts` files to `main.ts`
  and thus `main-specs.ts` ended up overwriting the actual `main.ts`.

[1]: https://next.angular.io/guide/deprecations#angularcoretesting
[2]: https://angular-team.atlassian.net/browse/FW-1609

Fixes #33874
Fixes #33945

PR Close #33941
","['aio/content/examples/http/src/app/heroes/heroes.service.spec.ts', 'aio/content/examples/http/src/main.ts', 'aio/content/examples/http/src/testing/http-client.spec.ts']","Generated StackBlitz and zipped HTTP guide examples are incorrect, causing the app/tests to fail. Issues include wrong TestBed method usage, missing critical files from the zip, and inappropriate renaming of main files causing overwrites."
b5eda603a216c4b8f9359ed04b68c028543b58b1,1568046104,"ci: work around `CIRCLE_COMPARE_URL` not being available wih CircleCI Pipelines (#32537)

The commit range that is associated with a CI build is used for a couple
of things (mostly related to payload-size tracking):
- Determine whether a size change was caused by application code or
  dependencies (or both).
- Add the messages of the commits associated with the build (and thus
  the payload-size change).

NOTE: The commit range is only used on push builds.

Previously, the commit range was computed based on the
`CIRCLE_COMPARE_URL` environment variable. With [CircleCI Pipelines][1]
enabled, `CIRCLE_COMPARE_URL` is no longer available and the commit
range cannot be reliably detected.

This commit switches `CI_COMMIT_RANGE` to only include the last commit.
This can be less accurate in some rare cases, but is true in the
majority of cases (on push builds). Additionally, it stores the CircleCI
build URL in the database along with the payload data, so the relevant
info can be retrieved when needed.

[1]: https://circleci.com/docs/2.0/build-processing

PR Close #32537
","['.circleci/env.sh', '.circleci/get-commit-range.js', 'scripts/ci/payload-size.sh']","The enabling of CircleCI Pipelines causes `CIRCLE_COMPARE_URL` to be unavailable, thus rendering commit ranges for CI builds undetectable."
61bedaf93055a23c87010ca29c581c90239e0d7f,1680574307,"refactor(core): handle a case when ngSkipHydration is applied to the root node of an application (#49675)

This commit updates the logic to handle a case when the `ngSkipHydration` attribute is applied to the root node of an app. In this case, the hydration info should not be serialized and the contents of the app on the client should be cleared up before initial rendering.

PR Close #49675
","['packages/core/src/hydration/annotate.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/platform-server/test/hydration_spec.ts']","When `ngSkipHydration` attribute is applied to the root node of an application, hydration info is still being serialized and app contents on the client are not cleared prior to initial rendering."
86372538ab017058cb9b2a7910e761d823bd3c16,1663969478,"refactor(zone.js): remove zone-async-tagging from zone.js (#47416)

1. Remove `zone-async-tagging` implementation from zone.js and move the
implementation to `@angular/core`, so `@angular/core` can import this
package more easily for better treeshaking.
2. Add `async tagging zone` implemenation into `@angular/core` package.
So we don't need to get the `AsyncStackTaggingZoneSpec` from `global`
instance, we can import the `class` directly for better treeshaking.
3. Only load this ZoneSpec when `ngDevMode` is `true`.

PR Close #47416
","['packages/core/src/zone/async-stack-tagging.ts', 'packages/core/src/zone/ng_zone.ts', 'packages/core/test/zone/async-tagging-console.spec.ts', 'packages/zone.js/bundles.bzl', 'packages/zone.js/dist/tools.bzl', 'packages/zone.js/test/browser-zone-setup.ts', 'packages/zone.js/test/browser_entry_point.ts', 'packages/zone.js/test/karma_test.bzl', 'packages/zone.js/test/npm_package/npm_package.spec.ts']","The implementation of 'zone-async-tagging' in 'zone.js' makes it difficult to import this package into '@angular/core', thus resulting in inefficiencies with tree shaking."
3fada9ee7e670be8dfd59fe4a168c292830a6f2d,1635957523,"fix(migrations): account for CRLF characters in template migrations (#44013)

Previously, when parsing code for templates to migrate, CRLF characters were converted to just LF.
This meant that the source-spans being used to overwrite the template strings in the original source code were out of sync with the positions identified in the parsed templates.

This commit fixes this by parsing the raw text of the template taken from the source code instead of processed string contents.

Fixes #44005

PR Close #44013
","['packages/core/schematics/test/routerlink_empty_expr_migration_spec.ts', 'packages/core/schematics/utils/ng_component_template.ts']",The conversion of CRLF characters to LF when parsing code for templates causes source-spans to become out of sync with positions identified in parsed templates.
f16ca1ce462fb07fba5183f00c74e61c903634d6,1589478630,"build(docs-infra): correctly handle ""pseudo"" classes (#36989)

In the code base there are cases where there is, conceptually, a class
that is represented by a combination of an `interface`
(type declaration) and a `const` (value declaration).

For example:

```
export interface SomeClass {
  count(a?: string): number;
}
export const: SomeClass = class {
  someMethod(a: string = ''): number { ... }
};
```

These were being rendered as interfaces and also not
correctly showing the descriptions and default parameter
values.

In this commit such concepts are now rendered as classes.
The classes that are affected by this are:

* `DebugElement`
* `DebugNode`
* `Type`
* `EventEmitter`
* `TestBed`

Note that while decorators are also defined in this form
they have their own rendering type (`decorator`) and so
are not affecte by this.

PR Close #36989
","['aio/tools/transforms/angular-api-package/index.js', 'aio/tools/transforms/angular-api-package/mocks/methodParameters.ts', 'aio/tools/transforms/angular-api-package/processors/mergeParameterInfo.js', 'aio/tools/transforms/angular-api-package/processors/mergeParameterInfo.spec.js', 'aio/tools/transforms/angular-api-package/processors/processPseudoClasses.js', 'aio/tools/transforms/angular-api-package/processors/processPseudoClasses.spec.js']","""Conceptual"" classes formed by a combination of an `interface` and a `const` are incorrectly rendered as interfaces, possibly resulting in inaccurate display of descriptions and default parameter values."
e78a928d6ba2bb539dce5b93d1092f6484280360,1646774004,"refactor(migrations): update `isReferenceToImport` to not use `valueDeclaration` (#45292)

valueDeclaration is only set when the Symbol type is a `Value`:

* [setValueDeclaration](https://sourcegraph.com/github.com/microsoft/TypeScript@d8b21a8d6cef772fea5cf2a507b651c5d38194bd/-/blob/src/compiler/binder.ts?L321-322)
* [Value union](https://sourcegraph.com/github.com/microsoft/TypeScript@d8b21a8d6cef772fea5cf2a507b651c5d38194bd/-/blob/src/compiler/types.ts?L4849:9#tab=references)

This won't be the case if the symbol is an interface (notice that `Interface` is not in the union for `Value` above).

For this reason, we can't rely on the `valueDeclaration` property of the symbol.
Instead, it's more reliable to just compare the first items in the `declarations` list.

PR Close #45292
",['packages/core/schematics/utils/typescript/symbol.ts'],'isReferenceToImport' function misbehaves when a symbol is an interface due to reliance on 'valueDeclaration' that is not set for interfaces.
5ee6c7e344e247bef5629c10f7fece871177ffd1,1693331734,"refactor(localize): ignore code duplication error with compiler package (#51500)

The localize package intentionally duplicates some logic from the
compiler to avoid adding a dependency. This is now an error in the
packaging rule to prevent common pitfalls/code duplication. Here it's
an explicit decision though so we mark it as such and ask for the check
to be ignored for the particular import.

PR Close #51500
",['packages/localize/src/utils/src/messages.ts'],Intentional code duplication in the 'localize' package from the 'compiler' to avoid dependency is being flagged as an error by the packaging rule.
f81765b333881bd156383d81be62c06ff00380c1,1660671414,"feat(common): warn if rendered size is much smaller than intrinsic (#47082)

This commit adds a console warning in development mode
if the ultimate rendered size of the image is much
smaller than the dimensions of the requested image.
In this case, the warning recommends adjusting the
size of the source image or using the `rawSrcset`
attribute to implement responsive sizing.

PR Close #47082
","['packages/common/src/directives/ng_optimized_image/ng_optimized_image.ts', 'packages/common/src/errors.ts', 'packages/core/test/bundling/image-directive/e2e/image-distortion/image-distortion.ts', 'packages/core/test/bundling/image-directive/e2e/oversized-image/oversized-image.e2e-spec.ts', 'packages/core/test/bundling/image-directive/e2e/oversized-image/oversized-image.ts', 'packages/core/test/bundling/image-directive/e2e/preconnect-check/preconnect-check.e2e-spec.ts', 'packages/core/test/bundling/image-directive/index.ts', 'packages/core/test/bundling/image-directive/playground.ts']","Image rendering in development mode results in sizes much smaller than the requested dimensions, which may suggest requirement for responsive sizing or source image size adjustment."
d7dd2959c87d4539e08e3337f22caaf91705e0ba,1594068071,"perf(router): apply prioritizedGuardValue operator to optimize CanLoad guards (#37523)

CanLoad guards are processed in asynchronous manner with the following rules:
* If all guards return `true`, operator returns `true`;
* `false` and `UrlTree` values wait for higher priority guards to resolve;
* Highest priority `false` or `UrlTree` value will be returned.

`prioritizedGuardValue` uses `combineLatest` which in order subscribes to each Observable immediately (not waiting when previous one completes that `concatAll` do). So it makes some advantages in order to run them concurrently. Respectively, a time to resolve all guards will be reduced.

PR Close #37523
","['packages/router/src/apply_redirects.ts', 'packages/router/test/integration.spec.ts']","CanLoad guards process in a sequential manner rather than parallel, causing inefficient guard resolution and potential performance issues."
38ad1d97abef2db0a99079cdd4d2391d96009597,1585772452,"fix(ngcc): handle entry-points within container folders (#36305)

The previous optimizations in #35756 to the
`DirectoryWalkerEntryPointFinder` were over zealous
with regard to packages that have entry-points stored
in ""container"" directories in the package, where the
container directory was not an entry-point itself.

Now we will also walk such ""container"" folders as long
as they do not contain `.js` files, which we regard as an
indicator that the directory will not contain entry-points.

Fixes #36216

PR Close #36305
","['packages/compiler-cli/ngcc/src/entry_point_finder/directory_walker_entry_point_finder.ts', 'packages/compiler-cli/ngcc/test/entry_point_finder/directory_walker_entry_point_finder_spec.ts']","Packages with entry-points located in ""container"" directories are not being properly processed by `DirectoryWalkerEntryPointFinder`, especially when the container directory is not itself an entry-point."
dafbbf8b6447c0731d71dc77f336b8244ee54af5,1553052211,"fix(core): parse incorrect ML open tag as text (#29328)

This PR alligns markup language lexer with the previous behaviour in version 7.x:
https://stackblitz.com/edit/angular-iancj2

While this behaviour is not perfect (we should be giving users an error message
here about invalid HTML instead of assuming text node) this is probably best we
can do without more substential re-write of lexing / parsing infrastructure.

This PR just fixes #29231 and restores VE behaviour - a more elaborate fix will
be done in a separate PR as it requries non-trivial rewrites.

PR Close #29328
","['packages/compiler/src/ml_parser/lexer.ts', 'packages/compiler/test/ml_parser/lexer_spec.ts']","ML Lexer erroneously parses incorrect open tags, not aligning with the behaviour observed in version 7.x and causing potential invalid HTML interpretation."
f8ad4d1e996666ee7ff969b7deb16a3ea91fdcfc,1547763088,"test(language-service): Improve integration test (#28168)

The current integration test for language service involves piping the
results of one process to another using Unix pipes.
This makes the test hard to debug, and hard to configure.

This commit refactors the integration test to use regular Jasmine
scaffolding.

More importantly, it tests the way the language service will actually
be installed by end users. Users would not have to add
`@angular/language-service` to the plugins section in tsconfig.json
Instead, all they need to do is install the *extension* from
the VS Code Marketplace and Angular Language Service will be loaded
as a global plugin.

PR Close #28168
","['integration/language_service_plugin/generate.ts', 'integration/language_service_plugin/matcher.ts', 'integration/language_service_plugin/scripts/env.sh', 'integration/language_service_plugin/scripts/install.sh', 'integration/language_service_plugin/scripts/test.sh', 'integration/language_service_plugin/scripts/update_golden.sh', 'integration/language_service_plugin/test.ts', 'integration/language_service_plugin/tools/load_test.ts', 'integration/language_service_plugin/tools/typescript_host.ts', 'integration/language_service_plugin/tools/typescript_validator.ts', 'integration/language_service_plugin/tsclient.ts']","The language service integration test is complex and hard to debug due to the use of Unix pipes. Also, it does not reflect the actual installation method end users would use."
eba185edc830ba223747487cb63ce06c3da5d75e,1606942299,"test(docs-infra): reduce ambiguity in `deploy-to-firebase.js` test descriptions (#39853)

Previously, test descriptions used `latest` to refer to the most
recent/highest version. This was ambiguous, because `latest` can also
refer to the stable version of a package (e.g. see `@latest` npm tag).

This commit replaces `latest` with `highest` (or `highest for major`) to
reduce ambiguity.

Discussed in:
https://github.com/angular/angular/pull/39853#discussion_r531730317

PR Close #39853
",['aio/scripts/deploy-to-firebase.spec.js'],"Test descriptions in `deploy-to-firebase.js` are ambiguous, ""latest"" is misinterpreted as either the most recent or stable version of a package."
39b898d0cda2ff6337d66bf41dd8046d4c189bd1,1667303068,"refactor(compiler-cli): update `emit` signature to support for strongly typed `emitCallback` (#47893)

Currently `ngc-wrapped` mostly relies on any casts/or disabled
strictness checks to be able to use `tsickle`'s emit callback and
emit result merging for ngtsc. We should change this so that supertypes
of `ts.EmitResult` can be used in these optional callbacks- allowing us
to enable strictness checks in `packages/bazel/...` too.

PR Close #47893
","['packages/compiler-cli/src/main.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/src/perform_compile.ts', 'packages/compiler-cli/src/perform_watch.ts', 'packages/compiler-cli/src/transformers/api.ts']","`ngc-wrapped` is relying on 'any' casts or disabled strictness checks to use `tsickle`'s emit callback and emit result merging for `ngtsc`, prohibiting the enabling of strictness checks in `packages/bazel/...`."
036a2faf02e4dafad80a777f32d6b7c2303139c3,1598899271,"feat(service-worker): add `UnrecoverableStateError` (#36847)

In several occasions it has been observed when the browser has evicted
eagerly cached assets from the cache and which can also not be found on the
server anymore. This can lead to broken state where only parts of the application
will load and others will fail.

This commit fixes this issue by checking for the missing asset in the cache
and on the server. If this condition is true, the broken client will be
notified about the current state through the `UnrecoverableStateError`.

Closes #36539

PR Close #36847
","['goldens/public-api/service-worker/service-worker.d.ts', 'packages/service-worker/src/index.ts', 'packages/service-worker/src/low_level.ts', 'packages/service-worker/src/update.ts', 'packages/service-worker/test/comm_spec.ts', 'packages/service-worker/worker/src/assets.ts', 'packages/service-worker/worker/src/driver.ts', 'packages/service-worker/worker/src/error.ts', 'packages/service-worker/worker/test/happy_spec.ts']",Eagerly cached assets are getting evicted from the browser leading to a broken state of the application where some parts fail to load.
815443313044e0ec0ec87af588d09eda6b88f0c8,1559588495,"perf(ivy): limit allocation of LQueries_ objects (#30664)

Before this change we would systematically call LQueries.clone() when executting
elementStart / elementContainerStart instructions. This was often unnecessary as
LQueries can be mutated under 2 conditions only:
- we are crossing an element that has directives with content queries
  (new queries must be added);
- we are descending into element hierarchy (creating a child element of an existing element)
  and the current LQueries object is tracking shallow queries (shallow queries are removed).

With this PR LQueires.clone() is only done when needed and this gratelly reduces number
of LQueries object created: in the ""expanding rows"" benchmark number of allocated
(and often GCed just after!) LQueries is reduced from ~100k -> ~35k. This represents
over 1MB of memory that is not allocated.

PR Close #30664
","['packages/core/src/render3/instructions/element.ts', 'packages/core/src/render3/instructions/element_container.ts', 'packages/core/src/render3/interfaces/query.ts', 'packages/core/src/render3/query.ts']","The systematic and often unnecessary calling of LQueries.clone() when executing elementStart and elementContainerStart instructions results in a large number of created LQueries objects, leading to excessive memory allocation."
2b4d7f6733e10e45e3ca8a448307bbc2834fc4a1,1659645474,"feat(platform-server): support document reference in render functions (#47032)

This commit updates the `renderModule` and `renderApplication` functions to also accept a document reference (in addition to the serialized document contents as a string). This should provide the necessary flexibility to NgUniversal (and other API consumers) to structure the logic to avoid serializing and parsing document multiple times during the SSR request.

PR Close #47032
","['packages/platform-server/src/server.ts', 'packages/platform-server/src/utils.ts', 'packages/platform-server/test/integration_spec.ts']",Using `renderModule` and `renderApplication` functions in NgUniversal requires multiple serialization and parsing of document during the SSR request due to a lack of support for document reference.
f19b36f462803b3b3b9410391c039649541b10bc,1648144416,"fix(zone.js): in TaskTrackingZoneSpec track a periodic task until it is cancelled (#45391)

Before this change, the macrotask for `setInterval(callback, ms)` was no
longer tracked by `TaskTrackingZoneSpec` after the `callback` was
invoked for the first time. Now the periodic macrotask is tracked until
it is cancelled, e.g. `clearInterval(id)`.

BREAKING CHANGE: in TaskTrackingZoneSpec track a periodic task until it is cancelled

The breaking change is scoped only to the plugin
`zone.js/plugins/task-tracking`. If you used `TaskTrackingZoneSpec` and
checked the pending macroTasks e.g. using `(this.ngZone as any)._inner
._parent._properties.TaskTrackingZone.getTasksFor('macroTask')`, then
its behavior slightly changed for periodic macrotasks. For example,
previously the `setInterval` macrotask was no longer tracked after its
callback was executed for the first time. Now it's tracked until
the task is explicitly cancelled, e.g  with `clearInterval(id)`.

fixes 45350

PR Close #45391
","['packages/zone.js/lib/zone-spec/task-tracking.ts', 'packages/zone.js/test/zone-spec/task-tracking.spec.ts']","Periodic tasks such as `setInterval(callback, ms)` are not tracked consistently by `TaskTrackingZoneSpec` after the first callback invocation, until the task is explicitly cancelled."
c241f63e8d2717d1dbc8b6a71d04a7c1095a155c,1678298352,"refactor(compiler-cli): remove unused class decorator downlevel code (#49351)

The decorator downlevel transform is never used for actual class
decorators because Angular class decorators rely on immediate execution
for JIT. Initially we also supported downleveling of class decorators
for View Engine library output, but libraries are shipped using partial
compilation output and are not using this transform anymore.

The transform is exclusively used for JIT processing, commonly for
test files to help ease temporal dead-zone/forward-ref issues. We can
remove the class decorator downlevel logic to remove technical debt.

PR Close #49351
","['packages/compiler-cli/private/tooling.ts', 'packages/compiler-cli/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.ts', 'packages/compiler-cli/test/downlevel_decorators_transform_spec.ts', 'tools/legacy-saucelabs/downlevel_decorator_transform.ts']","Unused class decorator downlevel transform in Angular class decorators results in technical debt, is not used in View Engine library output nor for partial compilation output."
7db269ba6a98bfadced9b341111461016e03d26a,1565034857,"fix(ivy): ngcc - correctly detect formats processed in previous runs (#32003)

Previously, `ngcc` would avoid processing a `formatPath` that a property
in `package.json` mapped to, if either the _property_ was marked as
processed or the `formatPath` (i.e. the file(s)) was processed in the
same `ngcc` run (since the `compiledFormats` set was not persisted
across runs).
This could lead in a situation where a `formatPath` would be compiled
twice (if for example properties `a` and `b` both mapped to the same
`formatPath` and one would run `ngcc` for property `a` and then `b`).

This commit fixes it by ensuring that as soon as a `formatPath` has been
processed all corresponding properties are marked as processed (which
persists across `ngcc` runs).

PR Close #32003
","['packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']","The ngcc fails to persist processed formatPaths across runs, leading to a situation where a formatPath might be compiled twice if multiple properties map to it and ngcc is run for each property individually."
297237f981d8fc226446a43c603bbab6f2e5d39e,1633112923,"test(compiler): use v12 view engine packages for compiler AOT test (#43431)

In preparation for the v13 Angular Package Format, where partial
declarations are emitted only, the AOT compiler test is updated
to rely on package artifacts from v12 instead. This allows us
to switch to the new package format without breaking the tests
which require metadata files to exist in the NPM packages.

PR Close #43431
",['packages/compiler/test/aot/test_util.ts'],AOT compiler tests break with the upcoming v13 Angular Package Format as they require metadata files that will no longer exist in the NPM packages.
8c682c52b112b440319b2a88e657d6eda47f3992,1591899176,"fix(ngcc): use annotateForClosureCompiler option (#36652)

Adds @nocollapse to static properties added by ngcc
iff annotateForClosureCompiler is true.

The Closure Compiler will collapse static properties
into the global namespace.  Adding this annotation keeps
the properties attached to their respective object, which
allows them to be referenced via a class's constructor.
The annotation is already added by ngtsc and ngc under the
same option, this commit extends the functionality to ngcc.

Closes #36618.

PR Close #36652
","['packages/compiler-cli/ngcc/src/analysis/decoration_analyzer.ts', 'packages/compiler-cli/ngcc/src/packages/transformer.ts', 'packages/compiler-cli/ngcc/src/rendering/renderer.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/src/ngtsc/translator/src/translator.ts']","Closure Compiler collapses static properties into the global namespace, causing issues when referencing these properties via their respective class's constructor."
a19a87df6c30a60ca997083b979a8e1e185e5b43,1688150217,"fix(upgrade): allow for downgraded components to work with component-router (#50871)

In the past, we had an implementation of the ""Angular 2"" router that
also worked with AngularJS. Published as `@angular/router`. We continued
to expose that router implementation in G3 and some applications still
use it. Now, when upgrading, they are seeing issues where the router
throws because it cannot find a route config/ or `$canActivate` on the
controller- simply because there is no `controller` function for
downgraded components.

We can fix this and unblock the update by simply ensuring a controller
function is defined.

PR Close #50871
",['packages/upgrade/src/common/src/downgrade_component.ts'],"Upgrade to 'Angular 2' router is resulting in issues for downgraded components, as it cannot find a route config or '$canActivate' on the controller due to absence of 'controller' function for downgraded components."
1da28f482517ea53a18e4eb526c7c9708e6fcb55,1696961782,"feat(router): Add callback to execute when a view transition is created (#52002)

This commit adds the ability to provide a function that will get called
immediately after the view transition is created. This will allow
developers to do things like add/remove classes from the DOM when the
transition animation is finished, skip the transition based on
application conditions, etc. Having access to the transition unlocks
just about every example outlined in https://developer.chrome.com/docs/web-platform/view-transitions.

Note that the timing of the `updateCallback` execution is in the spec as
being called asyncronously (https://drafts.csswg.org/css-view-transitions-1/#callbackdef-updatecallback).
This means the `onViewTransitionCreated` callback is guaranteed to
execute before the update callback which in turn means it is guaranteed
to execute before the view transition `ready`/animation. As a result, it
is safe/effictive to add classes to the document in the
`onViewTransitionCreated` function in order to control animations of
that transition and then remove those classes in the transition's `finished`
`Promise`. The animation also doesn't start until the `Promise` returned
by `updateCallback` resolves, so this would also guarantee that the
animation starts asynchronously.

resolves #51827

PR Close #52002
","['packages/router/src/index.ts', 'packages/router/src/navigation_transition.ts', 'packages/router/src/provide_router.ts', 'packages/router/src/utils/view_transition.ts', 'packages/router/test/view_transitions.spec.ts']",There is no callback present to execute custom functionality immediately after a view transition has been created.
27a4adebcbfea1ea05ebc1cf3762a4fe2822dd29,1603491431,"refactor(compiler-cli): support namespaced references (#39346)

The compiler uses a `Reference` abstraction to refer to TS nodes
that it needs to refer to from other parts of the source. Such
references keep track of any identifiers that represent the referenced
node.

Prior to this commit, the compiler (and specifically `ReferenceEmitter`
classes) assumed that the reference identifiers are always free standing.
In other words a reference identifier would be an expression like
`FooDirective` in the expression `class FooDirective {}`.

But in UMD/CommonJS source, a reference can actually refer to an ""exports""
declaration of the form `exports.FooDirective = ...`.
In such cases the `FooDirective` identifier is not free-standing
since it is part of a property access, so the `ReferenceEmitter`
should take this into account when emitting an expression that
refers to such a `Reference`.

This commit changes the `LocalIdentifierStrategy` reference emitter
so that if the `node` being referenced is not a declaration itself and
is in the current file, then it should be used directly, rather than
trying to use one of its identifiers.

PR Close #39346
",['packages/compiler-cli/src/ngtsc/imports/src/emitter.ts'],"The compiler's `ReferenceEmitter` classes inaccurately assume that reference identifiers are always free standing, leading to errors when dealing with UMD/CommonJS source where a reference can refer to an ""exports"" declaration."
07c1ddc48775967190b9c50530bae20c97140c0f,1623953513,"fix(router): error if module is destroyed before location is initialized (#42560)

This is something I ran into while working on a fix for the `TestBed` module teardown behavior for #18831. In the `RouterInitializer.appInitializer` we have a callback to the `LOCATION_INITIALIZED` which has to do some DI lookups. The problem is that if the module is destroyed before the location promise resolves, the `Injector.get` calls will fail. This is unlikely to happen in a real app, but it'll show up in unit tests once the test module teardown behavior is fixed.

PR Close #42560
","['packages/router/src/router_module.ts', 'packages/router/test/integration.spec.ts']","Module destroying before the initialization of location causes 'Injector.get' calls to fail, this error is unlikely in real apps but surfaces in unit tests once the test module teardown behavior is fixed."
dcf18dc74c260253bbf394626beb712a831824f3,1695401239,"fix(core): allow toSignal calls in reactive context (#51831)

This PR moves the Observable subscription of toSignal outside of the
reactive context. As the result the toSignal calls are allowed in the
computed, effect and all other reactive consumers.

This is based on the reasoning that we already allow signals creation
in a reactive context. Plus a similar change was done to the async pipe
in the https://github.com/angular/angular/pull/50522

Fixes #51027

PR Close #51831
","['packages/core/rxjs-interop/src/to_signal.ts', 'packages/core/rxjs-interop/test/to_signal_spec.ts', 'packages/core/test/signals/computed_spec.ts']","Observable subscription of toSignal within a reactive context is currently not permitted, leading to limitations with computed, effect and other reactive consumers."
0f1da49b867af60748570b10997fee9d9511424a,1553622025,"ci: temporarily disable chrome beta for saucelabs (#29518)

We need to temporarily disable Chrome beta within the
`legacy-saucelabs-tests` and `test_saucelabs_bazel` job.

This is necessary because Saucelabs added Chrome v74 to their
beta version channel without providing the corresponding
chromedriver that is *required* for that beta version.

Explicitly specifying a chromedriver within the Selenium browser
capabilities doesn't seem to work because Saucelabs seems to mirror
their supported chromedriver versions. Meaning that we can't explicitly
use chromedriver.storage.googleapis.com/index.html?path=74.0.3729.6/

Re-enabling tracked with: FW-1205

PR Close #29518
",['browser-providers.conf.js'],"Saucelabs added Chrome v74 to their beta version channel without the corresponding chromedriver, making `legacy-saucelabs-tests` and `test_saucelabs_bazel` job fail."
4744c229dbd372746a38ebbcdae2245f945ebcc4,1601310213,"fix(common): correct typing and implementation of `SlicePipe` (#37447)

Even in the overloads, state that it can accept `null` and
`undefined`, in order to ensure easy composition with `async`.

Additionally, change the implementation to return `null` on an
`undefined` input, for consistency with other pipes.

BREAKING CHANGE:
The `slice` pipe now returns `null` for the `undefined` input value,
which is consistent with the behavior of most pipes. If you rely on
`undefined` being the result in that case, you now need to check for it
explicitly.

PR Close #37447
","['goldens/public-api/common/common.d.ts', 'packages/common/src/pipes/slice_pipe.ts', 'packages/common/test/pipes/slice_pipe_spec.ts']","The `SlicePipe` typing and implementation is incorrect, allowing `null` and `undefined` without proper handling, leading to inconsistency with other pipes."
299f92c3b62a43c94cff4a204f9e41c46a159efc,1623342243,"fix(zone.js): only one listener should also re-throw an error correctly (#41868)

Close #41867

In the previous commit https://github.com/angular/angular/pull/41562#issuecomment-822696973,
the error thrown in the event listener will be caught and re-thrown, but there is a bug
in the commit, if there is only one listener for the specified event name, the error
will not be re-thrown, so this commit fixes the issue and make sure the error is re-thrown.

PR Close #41868
","['packages/zone.js/lib/common/events.ts', 'packages/zone.js/test/browser/XMLHttpRequest.spec.ts', 'packages/zone.js/test/browser/browser.spec.ts']",A bug causes errors thrown in an event listener not to be re-thrown when there's only one listener for a specified event name.
728fe69625124cb2c7aad127a2062c00a0f3e49d,1549349600,"feat(ivy): improve stacktrace for `R3Injector` errors (#28207)

Improve the stacktrace for `R3Injector` errors by adding the source component (or module) that tried to inject the missing provider, as well as the name of the injector which triggered the error (`R3Injector`).

e.g.:
```
R3InjectorError(SomeModule)[car -> SportsCar]:
    NullInjectorError: No provider for SportsCar!
```

FW-807 #resolve
FW-875 #resolve

PR Close #28207
","['packages/core/src/di/injector.ts', 'packages/core/src/di/interface/injector.ts', 'packages/core/src/di/r3_injector.ts', 'packages/core/src/render3/ng_module_ref.ts', 'packages/core/test/di/r3_injector_spec.ts', 'packages/core/test/di/static_injector_spec.ts', 'packages/core/test/linker/ng_module_integration_spec.ts', 'packages/core/test/view/provider_spec.ts', 'packages/platform-browser/test/browser/bootstrap_spec.ts']","`R3Injector` errors provide insufficient information in stacktraces, specifically missing the source component or module trying to inject the provider and the name of the injector triggering the error."
f97d8a9cbd89df8f779b941978b564440ad7f0e4,1589478630,"refactor: `EventEmitter` to retain behaviour of pre TypeScript 3.9 (#36989)

TypeScript 3.9 introduced a breaking change where extends `any` no longer acts as `any`, instead it acts as `unknown`.

With this change we retain the behavior we had with TS 3.8 which is;

When using the `EventEmitter` as a type you must always provide a  type;
```ts
let emitter: EventEmitter<string>
```

and when initializing the `EventEmitter` class you can either provide a  type or or use the fallback type which is `any`

```ts
const emitter = new EventEmitter(); // EventEmitter<any>
const emitter = new EventEmitte<string>(); // EventEmitter<string>
``

PR Close #36989
","['goldens/public-api/core/core.d.ts', 'packages/core/src/event_emitter.ts']",TypeScript 3.9 update broke EventEmitter behavior: must now always provide a type during EventEmitter type usage and class initialization.
2b1b7180db3e80d8717eb4a39ed38570aa4970ac,1600716367,"fix(forms): type NG_VALUE_ACCESSOR injection token as array (#29723)

NG_VALUE_ACCESSOR is a multi injection token, users can and
should expect more than one ControlValueAccessor to be
available (and this is how it is used in @angular/forms).

This is now reflected in the definition of the injection token
by typing it as an array of ControlValueAccessor. The motivating
reason is that using the programmatic Injector api will now
type Injector#get correspondingly.

fixes #29351

BREAKING CHANGES

NG_VALUE_ACCESSOR is now typed as a readonly array rather than
a mutable scalar. It is used as a multi injection token and as
such it should always be expected that more than one accessor
may be returned.

PR Close #29723
","['goldens/public-api/forms/forms.d.ts', 'packages/forms/src/directives/control_value_accessor.ts']","The NG_VALUE_ACCESSOR injection token is incorrectly typed as a scalar, but it is a multi injection token and should be typed as an array, causing issues when more than one ControlValueAccessor is required."
7dcf2864a3d37ea609559a9cfe6a2a389d7b980c,1608677582,"feat(compiler-cli): expose function to allow short-circuiting of linking (#40137)

The linker is implemented using a Babel transform such that Babel needs
to parse and walk a source file to find the declarations that need to be
compiled. If it can be determined that a source file is known not to
contain any declarations the parsing and walking can be skipped as a
performance improvement. This commit adds an exposed function for tools
that integrate the linker to use to allow short-circuiting of the linker
transform.

PR Close #40137
","['packages/compiler-cli/linker/index.ts', 'packages/compiler-cli/linker/src/file_linker/needs_linking.ts', 'packages/compiler-cli/linker/src/file_linker/partial_linkers/partial_linker_selector.ts', 'packages/compiler-cli/linker/test/file_linker/needs_linking_spec.ts', 'packages/compiler-cli/test/compliance/linked/linked_compile_spec.ts', 'packages/compiler-cli/test/compliance_old/prelink/bootstrap.ts']","Babel parsing and walking the source file for declarations even when it's known not to contain any, causes unnecessary performance overhead in the compiler-cli linker."
35e45dc89412209ab42ba43806dd44c136a12db0,1548898795,"fix(ivy): prevent errors from views being destroyed twice (#28413)

Previously, attempting to destroy a view with listeners more than once
throws an error during event listener cleanup. This happens because
`cleanup` field on the `TView` has already been cleared out by the time
the second destruction runs.

The `destroyed` flag on LView was previously being set in the `destroyLView` function,
but this flag was never _checked_ anywhere in the codebase. This commit
moves _setting_ this flag to the `cleanupView` function, just before
destroy hooks are called. This is necessary because the destroy hooks
can contain arbitrary user code, such as (surprise!) attempting to
destroy the view (again). We also add a check to `destroyLView` to skip
already-destroyed views. This prevents the cleanup code path from running twice.

PR Close #28413
","['packages/core/src/render3/node_manipulation.ts', 'packages/core/test/render3/render_util.ts', 'packages/core/test/render3/view_container_ref_spec.ts']",Errors occur when views with listeners are destroyed more than once due to the already cleared out `cleanup` field on the `TView`.
4c78984ad26825851d78d6f0339d8e4cb7bf1e54,1625264104,"fix(compiler-cli): support reflecting namespace declarations (#42728)

DTS bundling, will cause originally namespaced imports become namespace declarations within the same file. Example:

Before bundling
```ts
import * as i1 from './router';

export declare class RouterModule {
    constructor(guard: any, router: Router);

    static ɵmod: i0.ɵɵNgModuleDeclaration<RouterModule, [typeof i1.RouterOutlet...]>;
}
```

After bundling
```
declare namespace i1 {
  export {
    RouterOutletContract,
    RouterOutlet
  }
}

export declare class RouterModule {
    constructor(guard: any, router: Router);

    static ɵmod: i0.ɵɵNgModuleDeclaration<RouterModule, [typeof i1.RouterOutlet...]>;
}
```

And therefore this commit adds support for reflecting types that are defined in such namespace declarations.

Closes #42064

PR Close #42728
","['packages/compiler-cli/src/ngtsc/reflection/src/typescript.ts', 'packages/compiler-cli/src/ngtsc/reflection/test/ts_host_spec.ts']",Types defined in namespace declarations post DTS bundling are not being reflected correctly.
31b5db6fa876d4bc72f8874fadd2cd719c4c729e,1571266963,"fix(docs-infra): consider all formats when compiling docs examples with `ngcc` (#33206)

Previously, we would only consider the `es2015` property, but some
packages (such as `angular-in-memory-web-api`) may not have that. They
might still be compilable by `ngcc`, is they have other format
properties (e.g. `module` or `main`).

This commit fixes potential issues by considering all properties that
would be considered via the cli integration and aligns the command to
turn on ivy for docs examples with the one used in new cli apps:
https://github.com/angular/angular/blob/3e14c2d02/packages/core/schematics/migrations/postinstall-ngcc/index.ts#L22

PR Close #33206
",['aio/tools/examples/example-boilerplate.js'],"Compiling docs examples with `ngcc` only considers the `es2015` property, causing compilation failures with certain packages that don't have that property but have other format properties (e.g., `module` or `main`)."
364284b0dc14afbaa9b670530830973f969a17be,1598037434,"fix(dev-infra): ignore comments when validating commit messages (#38438)

When creating a commit with the git cli, git pre-populates the editor
used to enter the commit message with some comments (i.e. lines starting
with `#`). These comments contain helpful instructions or information
regarding the changes that are part of the commit. As happens with all
commit message comments, they are removed by git and do not end up in
the final commit message.

However, the file that is passed to the `commit-msg` to be validated
still contains these comments. This may affect the outcome of the commit
message validation. In such cases, the author will not realize that the
commit message is not in the desired format until the linting checks
fail on CI (which validates the final commit messages and is not
affected by this issue), usually several minutes later.

Possible ways in which the commit message validation outcome can be
affected:
- The minimum body length check may pass incorrectly, even if there is
  no actual body, because the comments are counted as part of the body.
- The maximum line length check may fail incorrectly due to a very long
  line in the comments.

This commit fixes the problem by removing comment lines before
validating a commit message.

Fixes #37865

PR Close #38438
","['dev-infra/commit-message/parse.spec.ts', 'dev-infra/commit-message/parse.ts']","Commit message validation incorrectly includes comment lines, causing erroneous linting check failures or passes due to minimum body length or maximum line length miscalculations."
d6415425875b0ac9800e119d767a02c30cf13f04,1617821589,"refactor(core): remove deprecated rxjs signature usage in event emitter and make more minifier-friendly (#41450)

* We had a usage of `Observable.subscribe` that uses the deprecated signature with 3 arguments. These changes switch to the non-deprecated version that passes in an `Observer`.
* Avoids always creating a `complete` callback since it isn't required.
* We were repeating all of the internal callbacks twice: once for sync and once for async. These changes move them out into variables so that they're more minifier-friendly. The savings aren't huge (~100 bytes minified), but it doesn't add any maintenance effort on our end so I decided to add it.

PR Close #41450
",['packages/core/src/event_emitter.ts'],The core utilises deprecated `Observable.subscribe` signature with three arguments and repeats internal callbacks for both sync and async making it less minifier-friendly.
cf598f71fda8f410232093f662ead42aa5b17056,1573070217,"build: fix ng_package & ng_rollup_bundle windows issues (#33607)

Fixes ng_package and ng_rollup_bundle rollup issue on Windows where .js file was resolved by bazel resolved instead of .mjs file as there is no sandbox.

Fixes https://github.com/angular/angular/issues/32603 by passing globals and external through templated rollup config as Windows CLI argument limit can be easily exceeded. Also fixes this for ng_rollup_bundle.

PR Close #33607
","['packages/bazel/src/ng_package/ng_package.bzl', 'packages/bazel/src/ng_package/rollup.config.js', 'tools/ng_rollup_bundle/ng_rollup_bundle.bzl', 'tools/ng_rollup_bundle/rollup.config.js']","ng_package and ng_rollup_bundle are affected by a Windows-specific bug where .js files are being resolved by Bazel instead of .mjs files, causing issues with file sandboxing and exceeding Windows CLI argument limit."
30c52ac1260e496ca4b25a182076e3b79e9ed2a0,1646327605,"build: add retry logic to postinstall script (#45252)

Several people on the team (myself included) have had issues where the `webdriver-manager` step of the `postinstall` script fails on the first run, but work correctly on the second one.

These changes attempt to simplify the workflow by retrying the script up to 3 times before giving up.

PR Close #45252
",['scripts/webdriver-manager-update.js'],"The `webdriver-manager` step of the `postinstall` script often fails on the first run, but works correctly on the subsequent run, impeding the workflow."
21c2a068110b61b918584706c6796dff40230461,1620247528,"fix(dev-infra): spawned child processes messing with tty output (#41948)

Currently we have a common utility method for running commands
in a child process. This method pipes all stdout and stderr, but sets
the `stdin` to `inherited`. This seemed to work as expected in terms of
allowing interactive commands being executed, but it messes with the
TTY in Windows (and potentially other platforms) so that colors and
prompts no longer work properly. See attached screenshot.

We fix this by not inheriting the stdin by default; but exposing
a dedicated method for interactive commands. This results in more
readable and obvious code too, so it's worth making this change
regardless of the TTY issues.

PR Close #41948
","['dev-infra/ng-dev.js', 'dev-infra/release/publish/index.ts', 'dev-infra/release/versioning/npm-publish.ts', 'dev-infra/utils/child-process.ts']","The utility method for running commands in a child process disrupts TTY on Windows, causing issues with color rendering and prompts."
d7440c452a803b14383feeb71ee188b4f08beb02,1589478629,"fix(ngcc): ensure reflection hosts can handle TS 3.9 IIFE wrapped classes (#36989)

In TS 3.9, ES2015 output can contain ES classes that are wrapped in an
IIFE. So now ES2015 class declarations can look like one of:

```
class OuterClass1 {}
```

```
let OuterClass = class InnerClass {};
```

```
var AliasClass;
let OuterClass = AliasClass = class InnerClass {};
```

```
let OuterClass = (() => class InnerClass {}};
```

```
var AliasClass;
let OuterClass = AliasClass = (() => class InnerClass {})();
```

```
let OuterClass = (() => {
  let AdjacentClass = class InnerClass {};
  // ... static properties or decorators attached to `AdjacentClass`
  return AdjacentClass;
})();
```

```
var AliasClass;
let OuterClass = AliasClass = (() => {
  let AdjacentClass = class InnerClass {};
  // ... static properties or decorators attached to `AdjacentClass`
  return AdjacentClass;
})();
```

The `Esm5ReflectionHost` already handles slightly different IIFE wrappers
around function-based classes. This can be substantially reused when
fixing `Esm2015ReflectionHost`, since there is a lot of commonality
between the two.

This commit moves code from the `Esm5ReflectionHost` into the `Esm2015ReflectionHost`
and looks to share as much as possible between the two hosts.

PR Close #36989
","['packages/compiler-cli/ngcc/src/host/esm2015_host.ts', 'packages/compiler-cli/ngcc/src/host/esm5_host.ts', 'packages/compiler-cli/ngcc/src/host/ngcc_host.ts', 'packages/compiler-cli/ngcc/test/host/commonjs_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm2015_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm5_host_import_helper_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm5_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/umd_host_spec.ts']","Reflection hosts are unable to handle ES2015 class declarations wrapped in IIFEs, resulting in compatibility issues with TypeScript 3.9."
8555016eece8b8d123369e6cda74d1011fed9d82,1557954722,"docs: fix the payload in event-binding sample code (#30429)

after reading the context. there are  some clues to infer the payload should be the `item`, not `item.name`.
1.  EventEmitter<Item>.
2.  the desc say that:
The component defines a deleteRequest property that returns an EventEmitter. When the user clicks delete, the component invokes the delete() method, telling the EventEmitter to emit an **Item** object.

PR Close #30429
",['aio/content/examples/event-binding/src/app/item-detail/item-detail.component.ts'],"The event-binding sample code incorrectly uses `item.name` as a payload, whereas the context suggests the payload should be the whole `item` object."
152d99eef0478255861d3ca2d749227bc9e1befe,1556138969,"feat(common): add @angular/common/upgrade package for $location-related APIs (#30055)

AngularJS's `$location` service doesn't have a direct counterpart in Angular. This is largely because the `Location` service in Angular was pulled out of the `Router`, but was not purpose-built to stand on its own.

This commit adds a new `@angular/common/upgrade` package with the beginnings of a new `LocationUpgradeService`. This service will more closely match the API of AngularJS and provide a way to replace the `$location` service from AngularJS.

PR Close #30055
","['packages/common/src/location/platform_location.ts', 'packages/common/upgrade/index.ts', 'packages/common/upgrade/public_api.ts', 'packages/common/upgrade/rollup.config.js', 'packages/common/upgrade/src/index.ts', 'packages/common/upgrade/src/location.ts', 'packages/common/upgrade/src/location_module.ts', 'packages/common/upgrade/test/upgrade.spec.ts', 'packages/platform-browser/src/browser/location/browser_platform_location.ts', 'packages/platform-server/src/location.ts', 'packages/platform-webworker/src/web_workers/worker/platform_location.ts']","The `$location` service in AngularJS lacks a direct equivalent in Angular, causing difficulties when replacing this service from AngularJS to Angular."
cf4718c3665b3ec17a8c7cb1001a4336918eee9b,1553107554,"feat(ivy): ngcc - support dts compilation via ES5 bundles (#29092)

Previously we only compiled the typings files, in ngcc, if there was
an ES2015 formatted bundle avaiable. This turns out to be an artificial
constraint and we can also support typings compilation via ES5 formats
too.

This commit changes the ngcc compiler to attempt typings compilation
via ES5 if necessary. The order of the formats to consider is now:
FESM2015, FESM5, ESM2015, ESM5.

FW-1122

PR Close #29092
","['packages/compiler-cli/src/ngcc/src/host/esm5_host.ts', 'packages/compiler-cli/src/ngcc/src/packages/transformer.ts', 'packages/compiler-cli/src/ngcc/test/host/esm5_host_spec.ts']","Ngcc compiler artificially constrained to only compile typings files if an ES2015 formatted bundle is available, lacking support for typings compilation via ES5 formats."
e2eaac34b06a558145be41853f1d3585c1108880,1648173396,"fix(zone.js): read `Symbol.species` safely (#45369)

We must read `Symbol.species` safely because `this` may be anything. For instance, `this`
may be an object without a prototype (created through `Object.create(null)`); thus
`this.constructor` will be undefined. One of the use cases is SystemJS creating
prototype-less objects (modules) via `Object.create(null)`. The SystemJS creates an empty
object and copies promise properties into that object (within the `getOrCreateLoad`
function). The zone.js then checks if the resolved value has the `then` method and invokes
it with the `value` context. Otherwise, this will throw an error: `TypeError: Cannot read
properties of undefined (reading 'Symbol(Symbol.species)')`.

PR Close #45369
","['packages/zone.js/lib/common/promise.ts', 'packages/zone.js/test/common/Promise.spec.ts']",Reading `Symbol.species` unsafely throws TypeError for prototype-less objects such as modules created by SystemJS via `Object.create(null)`.
2aae92b05f51442b8cc4bae10dd85210d7a1ca1b,1692716640,"refactor(router): Have router subscribe to transition events to update state (#48427)

Rather than the navigation transitions managing Router state, this
commit updates the Router to manage its own state based on ongoing
transition events. In the future, this can be abstracted even further to
have a totally separate class that manages the Router state. This would
allow the potential for swapping state manager implementations rather
than having to implement all types of state management in a single place.

One finding during tests was that unexpected errors thrown by the state management code moved
to the Router here will no longer be caught by the transition pipe's `catchError`.
This only includes calls to the following public Api methods:

* `go`, `replaceState`, `historyGo`, `isCurrentPathEqualTo` on `Location`
* `UrlSerializer.serialize`
* `UrlHandlingStrategy.merge`.

None of these methods should throw if the router is expected to function.
These might throw when tests include incomplete mocks, which is not
supported, or in cases where the actual browser methods like
`replaceState` would throw. This will already result in unexpected/unsupported
behavior. The failure case here is now arguably better - the navigation
itself still completes but the state update (either updating Router
internal state or updating the browser URL) fails separately and is
unhandled.

PR Close #48427
","['packages/router/src/events.ts', 'packages/router/src/navigation_transition.ts', 'packages/router/src/router.ts', 'packages/router/test/integration.spec.ts']","Router state updates are not adequately managed during navigation transitions, leading to potential errors thrown by state management code which are not caught by the transition pipe's `catchError`. Also, the inability to swap state manager implementations."
a7a2123ade7ec71319b2df55ce64616a5aafe75f,1610575385,"build(docs-infra): fail if we attempt to autolink to a private doc (#40404)

Previously we only logged a warning if we attempted to auto-link
to a doc that had no `path` property, which implies that it is private
and is not rendered.

Now we fail hard during full doc-gen, although when running the
`yarn serv-and-sync` command it should not fail if changes are
only made to guides, which is what authors who use this tool
are most likely to do.

PR Close #40404
","['aio/tools/transforms/angular-base-package/index.js', 'aio/tools/transforms/angular-base-package/post-processors/auto-link-code.js', 'aio/tools/transforms/angular-base-package/post-processors/auto-link-code.spec.js']","Auto-link attempts to private documentation with no 'path' property are allowed, which should not be the case as these are not rendered."
eef07539a672e952454b38e7446ee2364df207bd,1582075241,"feat(ngcc): pause async ngcc processing if another process has the lockfile (#35131)

ngcc uses a lockfile to prevent two ngcc instances from executing at the
same time. Previously, if a lockfile was found the current process would
error and exit.

Now, when in async mode, the current process is able to wait for the previous
process to release the lockfile before continuing itself.

PR Close #35131
","['packages/compiler-cli/ngcc/src/execution/cluster/executor.ts', 'packages/compiler-cli/ngcc/src/execution/lock_file.ts', 'packages/compiler-cli/ngcc/src/execution/single_process_executor.ts', 'packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/test/execution/cluster/executor_spec.ts', 'packages/compiler-cli/ngcc/test/execution/lock_file_spec.ts', 'packages/compiler-cli/ngcc/test/execution/single_processor_executor_spec.ts', 'packages/compiler-cli/ngcc/test/helpers/mock_lock_file.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/src/ngtsc/file_system/test/cached_file_system_spec.ts']","Lockfile presence causes current ngcc instance to error and exit, without allowing for asynchronous processing to wait for lockfile release from previous process."
8628826535233ba5bc6b973cef860355b4c41931,1628092708,"fix(core): incorrect error reported when trying to re-create view which had an error during creation (#43005)

Currently if a view throws an error during creation mode, we mark it as `incompleteFirstPass` so that we can try to recover later. The recovery is only possible inside component views.

The problem is that when this was introduced, I forgot to flip the `firstCreatePass` when an error is thrown which meant that calling `renderView` on the same component again is allowed. It will eventually hit an assertion which can be confusing for the end user. This issue only manifests itself when rendering views ""manually"" through `ViewContainerRef` (e.g. using `NgIf`).

These changes flip the `firstCreatePass` back to false on errors so that trying to re-render the same view will throw an error which is consistent to the one that broke the view during creation.

Fixes #41383.

PR Close #43005
","['packages/core/src/render3/instructions/shared.ts', 'packages/core/test/acceptance/view_insertion_spec.ts']","When errors occur during view creation, attempts to re-render the same view result in inconsistent error messages, particularly when rendering views manually through ViewContainerRef."
a0551ee761165ec2cf523a53165bcb77d7601c2e,1669916306,"refactor(router): Eliminate constructor parameters in Router class (#48215)

The Router constructor and `setupRouter` factory mainly exist as a
legacy configuration. Since the Router's creation, the style in Angular
has evolved quite a bit. This commit eliminates and cleans up some
unnecessary comlicated code paths related to the router
constructor/factory.

Note that there are edits to the `setupTestingRouter` that could be seen
as breaking. However, it is not for several reasons:

1. The function is documented as a factory function. If used as
   documented, the parameters should match what's available in DI
2. The function is totally unused by the Router itself and is not used
   in g3 either. I believe it was made publicApi by an error when
   updating documentation annotations long ago.

PR Close #48215
","['packages/router/src/router.ts', 'packages/router/src/router_module.ts', 'packages/router/testing/src/router_testing_module.ts']",Legacy code in Router constructor and `setupRouter` factory in Angular are causing unnecessary complicated code paths.
ab6a3d7d03a2c2b89fd96b68104c4527e179bcfa,1665082965,"refactor(http): provide XSRF configuration tokens in root (#47502)

This commit switches the XSRF configuration tokens (for header name and
cookie name) to be `providedIn: 'root'`. This is a no-op change now as they
are always provided along with any usage of them via `HttpClientModule`, but
will become load-bearing as the `provideHttpClient` API will not provide
these tokens, and will rely on injecting them from either the parent context
or from these root providers.

PR Close #47502
","['packages/common/http/src/module.ts', 'packages/common/http/src/xsrf.ts']","XSRF configuration tokens, including header name and cookie name, when loaded through the `provideHttpClient` API, are not consistently available or injectable leading to configuration inconsistency."
88962b72a9a50d9d906c2aabed0a5ff51c442b3f,1686675583,"refactor(compiler): Support safe property reads and keyed reads. (#50594)
Angular's null-safe access operators differ from Javascript's built-in semantics, in that they short-circuit to `null` instead of `undefined`. This necessitates providing a custom transformation, instead of relying on Typescript or Javascript itseld.

The old TemplateDefinitionBuilder uses a top-down approach based on the Visitor pattern, in which it recursively extracts the left-most safe access, and hoists it to a null check at the top. See `expression_converter.ts` for details.

In this commit, we replace that approach with a new bottom-up algorithm, as part of the template pipeline. This requires an intermediate expression type to represent the not-yet-expanded ternary operators, and is split into its own pass.

Null-safe function calls are not yet implemented, since they will rely on a future temporary variable allocation pass.

Co-authored-by: Alex Rickabaugh <alxhub@users.noreply.github.com>

PR Close #50594
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/safe_access/GOLDEN_PARTIAL.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/safe_access/safe_access_deep.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler/safe_access/safe_access_deep_template.js', 'packages/compiler/src/template/pipeline/ir/src/enums.ts', 'packages/compiler/src/template/pipeline/ir/src/expression.ts', 'packages/compiler/src/template/pipeline/src/emit.ts', 'packages/compiler/src/template/pipeline/src/ingest.ts', 'packages/compiler/src/template/pipeline/src/phases/expand_safe_reads.ts']","Angular's null-safe access operators short-circuit to `null` instead of `undefined`, causing issues due to differing semantics from Javascript's built-in operators. Additionally, null-safe function calls are unimplemented, potentially causing runtime errors."
772b24ccc36796408ccee46c0a0ce50b51ab05a4,1551309220,"fix(ivy): avoid missing imports for types that can be represented as values (#28941)

Prior to this change, TypeScript stripped out some imports in case we reference a type that can be represented as a value (for ex. classes). This fix ensures that we use correct symbol identifier, which makes TypeScript retain the necessary import statements.

PR Close #28941
","['packages/compiler-cli/src/ngtsc/reflection/src/typescript.ts', 'packages/compiler-cli/test/ngtsc/env.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","Imports are being stripped out in cases where we reference a type that can be represented as a value such as classes, leading to missing important imports."
ab3f4c9fe143d650b4a1e521d544e0fd4811f995,1591215385,"fix(core): infinite loop if injectable using inheritance has a custom decorator (#37022)

If we detect that an injectable class is inheriting from another injectable, we generate code that looks something like this:

```
const baseFactory = ɵɵgetInheritedFactory(Child);

@Injectable()
class Parent {}

@Injectable()
class Child extends Parent {
  static ɵfac = (t) => baseFactory(t || Child)
}
```

This usually works fine, because the `ɵɵgetInheritedFactory` resolves to the factory of `Parent`, but the logic can break down if the `Child` class has a custom decorator. Custom decorators can return a new class that extends the original once, which means that the `ɵɵgetInheritedFactory` call will now resolve to the factory of the `Child`, causing an infinite loop.

These changes fix the issue by changing the inherited factory resolution logic so that it walks up the prototype chain class-by-class, while skipping classes that have the same factory as the class that was passed in.

Fixes #35733.

PR Close #37022
","['packages/core/src/render3/di.ts', 'packages/core/test/render3/providers_spec.ts']","An infinite loop is occurring if an injectable uses inheritance and has a custom decorator, due to faulty inherited factory resolution logic."
737f71e3aa763980e4bdc6f0d3f13e2c712b12d9,1634663215,"refactor(compiler-cli): throw an error when compiling with View Engine. (#43862)

The View Engine compiler now throws when constructed and will be removed shortly. Direct users should switch to `NgtscProgram` to build with [Ivy](https://angular.io/guide/ivy). The View Engine compiler is being removed, so this makes it throw an error to ensure no one accidentally depends on code being removed.

PR Close #43862
",['packages/compiler-cli/src/transformers/program.ts'],"The use of the View Engine compiler, which is being phased out, incorrectly allows construction and may potentially allow dependencies on soon-to-be-removed code."
2b6b9c95f9a67a5f830fd0430e63eec5aaa24ba1,1601324792,"fix(docs-infra): fix the `component-interaction` example e2e tests to run in prod mode (#39001)

Previously, the `component-interaction` docs example was configured to
run e2e tests on CI in development mode (in contrast to the default for
all docs examples, which is to run e2e tests in production mode). This
was necessary due to the following reasons:
- One of the components, `CountdownTimerComponent`, which is used by
  `CountdownLocalVarParentComponent` and
  `CountdownViewChildParentComponent`, was triggering a periodic
  asynchronous task (via `setInterval()`), which prevented the app from
  stabilizing and caused tests to fail.
- In order to prevent this from happening, the example's `AppModule` had
  special provisioning to not include the problematic components in its
  declarations when testing.
- Since this had to be determined dynamically at runtime (via inspecting
  the URL query params), the `AppModule`'s config could not be
  statically evaluated in AOT compilation.

This commit fixes the example to make it compatible with AOT compilation
and removes the custom test command from its `example-config.json`
(allowing it to be run with the default e2e test command, i.e. in
production mode).

PR Close #39001
","['aio/content/examples/component-interaction/e2e/src/app.e2e-spec.ts', 'aio/content/examples/component-interaction/src/app/app.module.ts', 'aio/content/examples/component-interaction/src/app/countdown-timer.component.ts']","'component-interaction' docs example is not configured to run e2e tests in production mode, resulting in failed tests due to a periodic asynchronous task triggered by CountdownTimerComponent."
38524c4d29290d3339ad2d7335a0ea84f5701d26,1614892144,"fix(common): cleanup location change listeners when the root view is removed (#40867)

In the new behavior Angular cleanups `popstate` and `hashchange` event listeners
when the root view gets destroyed, thus event handlers are not added twice
when the application is bootstrapped again.

BREAKING CHANGE:

Methods of the `PlatformLocation` class, namely `onPopState` and `onHashChange`,
used to return `void`. Now those methods return functions that can be called
to remove event handlers.

PR Close #31546

PR Close #40867
","['goldens/public-api/common/common.d.ts', 'goldens/public-api/common/testing/testing.d.ts', 'packages/common/src/location/hash_location_strategy.ts', 'packages/common/src/location/location_strategy.ts', 'packages/common/src/location/platform_location.ts', 'packages/common/testing/src/mock_platform_location.ts', 'packages/platform-server/src/location.ts', 'packages/router/test/bootstrap.spec.ts']","Angular's `PlatformLocation` does not clean up `popstate` and `hashchange` event listeners when the root view is destroyed, leading to event handlers being added multiple times when the application is bootstrapped again."
34545ad2ccbe2c111971c1b4185b6c288326aa20,1618342757,"refactor(compiler): add an `argumentSpan` to the method call AST (#41581)

This commit adds a separate span to `MethodCall` and `SafeMethodCall` which
tracks the text span between the `(` and `)` tokens of the call. Tools like
the Language Service can use this span to more accurately understand a
cursor position within a method call expression.

PR Close #41581
","['packages/compiler/src/compiler_util/expression_converter.ts', 'packages/compiler/src/expression_parser/ast.ts', 'packages/compiler/src/expression_parser/parser.ts', 'packages/compiler/test/expression_parser/parser_spec.ts', 'packages/compiler/test/expression_parser/utils/unparser.ts']","Lack of separate span in `MethodCall` and `SafeMethodCall` for tracking the text span between tokens in the call, hinders tools like Language Service to accurately understand cursor position within a method call expression."
279e63f65f1bbd682146c496141af6fe75997530,1624988034,"refactor(dev-infra): update octokit to latest version v18 (#42666)

We previously held off with updating Octokit to v18 due to
their more noticable issues with typings. This commit updates
us to the latest version in order to take advantage of the new
pagination API (which is also strongly-typed), and to not fall
behind too much over time (Octokit seems to change quite often..)

We work around the problem with the types for `getContent` by just
using a type cast with a TODO (and link to the issue). Similarly we
work around a problem where the Octokit types have an incorrect type
for the name of the labels array in an API response.

PR Close #42666
","['dev-infra/build-worker.js', 'dev-infra/ng-dev.js', 'dev-infra/pr/check-target-branches/check-target-branches.ts', 'dev-infra/pr/merge/strategies/api-merge.ts', 'dev-infra/release/publish/pull-request-state.ts', 'dev-infra/release/versioning/active-release-trains.ts', 'dev-infra/release/versioning/version-branches.ts', 'dev-infra/utils/git/authenticated-git-client.ts', 'dev-infra/utils/git/github.ts']","Existing Octokit version has noticeable typing issues preventing update to v18, causing failure to leverage new pagination API and potentially falling behind on other updates."
06452af31fb741c3d2ba8e653e1ca830f27960a8,1682952603,"fix(platform-server): remove dependency on `@angular/platform-browser-dynamic` (#50064)

Using `@angular/platform-browser-dynamic` is no longer required for JIT scenarios with Ivy. Instead `@angular/compiler` should be imported instead.

This change is part of the effort to reduce the server bundles sizes, which is needed to support cloud workers.

BREAKING CHANGE:
Users that are using SSR with JIT mode will now need to add  `import to @angular/compiler` before bootstrapping the application.

**NOTE:** this does not effect users using the Angular CLI.

PR Close #50064
","['packages/platform-server/src/server.ts', 'packages/platform-server/src/utils.ts', 'packages/platform-server/test/integration_spec.ts']","Current use of `@angular/platform-browser-dynamic` in JIT scenarios with Ivy unnecessarily increases server bundle sizes, impacting cloud worker support."
4f7c971ee726ef17a3b080db0f71a41de402f066,1566494078,"fix(ivy): ngtsc throws if ""flatModuleOutFile"" is set to null (#32235)

In ngc is was valid to set the ""flatModuleOutFile"" option to ""null"". This is sometimes
necessary if a tsconfig extends from another one but the ""fatModuleOutFile"" option
needs to be unset (note that ""undefined"" does not exist as value in JSON)

Now if ngtsc is used to compile the project, ngtsc will fail with an error because it
tries to do string manipulation on the ""flatModuleOutFile"". This happens because
ngtsc only skips flat module indices if the option is set to ""undefined"".

Since this is not compatible with what was supported in ngc and such exceptions
should be avoided, the flat module check is now aligned with ngc.

```
TypeError: Cannot read property 'replace' of null
    at Object.normalizeSeparators (/home/circleci/project/node_modules/@angular/compiler-cli/src/ngtsc/util/src/path.js:35:21)
    at new NgtscProgram (/home/circleci/project/node_modules/@angular/compiler-cli/src/ngtsc/program.js:126:52)
```

Additionally setting the `flatModuleOutFile` option to an empty string
currently results in unexpected behavior. No errors is thrown, but the
flat module index file will be `.ts` (no file name; just extension).

This is now also fixed by treating an empty string similarly to
`null`.

PR Close #32235
","['packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/test/ngtsc/env.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","Setting ""flatModuleOutFile"" to null or an empty string in ngtsc leads to unexpected failures or behavior, with string manipulation errors and incorrect flat module index file outputs."
e79ce386fc4ab8e83372fa694971283a19a11a67,1606251940,"refactor(compiler-cli): allow visiting call expressions without an active linker (#39707)

The compilation result of components may have inserted template
functions into the constant pool, which would be inserted into the Babel
AST upon program exit. Babel will then proceed with visiting this newly
inserted subtree, but we have already cleaned up the linker instance
when exiting the program. Any call expressions within the template
functions would then fail to be processed, as a file linker would no
longer be available.

Since the inserted AST subtree is known not to contain yet more partial
declarations, it is safe to skip visiting call expressions when no
file linker is available.

PR Close #39707
","['packages/compiler-cli/linker/babel/src/es2015_linker_plugin.ts', 'packages/compiler-cli/linker/babel/test/es2015_linker_plugin_spec.ts']","Compilation of components inserts template functions into the constant pool, causing failure in processing call expressions within these functions due to unavailability of file linker after program exit."
2deac0a41234180530986d698fd043114011f058,1555433372,"perf(ivy): cache multiple reads to an element's stylingContext (#29818)

Because the styling context may be stored in a different location
and be apart of a sub array, reading the styling context each time
a host binding is evaluated is costly. This patch ensures that the
active styling context is cached so that multiple interactions with
styling bindings can easily retrieve the styling context efficiently.

PR Close #29818
","['packages/core/src/debug/debug_node.ts', 'packages/core/src/render3/instructions/element.ts', 'packages/core/src/render3/instructions/styling.ts', 'packages/core/src/render3/players.ts', 'packages/core/src/render3/state.ts', 'packages/core/src/render3/styling/state.ts', 'packages/core/src/render3/styling/util.ts']",Repeated reading of the styling context for each host binding evaluation is significantly impacting performance due to its possible distant storage location and inclusion in a sub array.
a2cd401a2eaba174677321409f62f76610c66d05,1560211662,"fix(docs-infra): do not redirect docs URLs on archive deployments (#30894)

To avoid showing outdated info (such as events, resources, etc.) but
still allow people to see docs for older versions, we redirect
non-documentation URLs to `/docs`. Recently(-ish) we have added
documentation content under the `/cli/...` and `/start/...`
path-prefixes, but we haven't added them to the list of documentation
URLs that should not be redirected. As a result, on archive deployments
(e.g. https://v7.angular.io/cli), they are redirected to `/docs`, making
it impossible to see the documentation for these versions (unless you
know about the `?mode=stable` work-around).

This commit fixes it by adding `cli` and `start` to the list of
documentation URLs that are excluded from redirection.

PR Close #30894
","['aio/src/app/app.component.spec.ts', 'aio/src/app/app.component.ts']","On archive deployments, documentation content under the `/cli/...` and `/start/...` paths are incorrectly being redirected to `/docs`, preventing access to these documents."
047642556ceefc623526193f926385cb42566406,1589410841,"refactor(core): remove ActiveIndexFlag from LContainer (#37073)

The ActiveIndexFlag is no longer needed because we no longer have ""inline embedded views"".
There is only one type of embedded view so we do not need complex tracking for
inline embedded views.

HAS_TRANSPLANTED_VIEWS now takes the place of the ACTIVE_INDEX slot as a
simple boolean rather than being a shifted flag inside the ACTIVE_INDEX bits.

PR Close #37073
","['packages/core/src/render3/instructions/lview_debug.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/interfaces/container.ts', 'packages/core/src/render3/interfaces/view.ts', 'packages/core/src/render3/node_manipulation.ts', 'packages/core/src/render3/util/view_traversal_utils.ts', 'packages/core/src/render3/util/view_utils.ts', 'packages/core/src/render3/view_engine_compatibility.ts']","Unnecessary complexity and tracking due to usage of ActiveIndexFlag in LContainer for handling ""inline embedded views"" which no longer exist."
6e18d2daccd4c8ec72546955eb807e5d3f5dffae,1602778081,"fix(compiler): promote constants in templates to Trusted Types (#39211)

Angular treats constant values of attributes and properties in templates
as secure. This means that these values are not sanitized, and are
instead passed directly to the corresponding setAttribute or setProperty
function. In cases where the given attribute or property is
security-sensitive, this causes a Trusted Types violation.

To address this, functions for promoting constant strings to each of the
three Trusted Types are introduced to Angular's private codegen API. The
compiler is updated to wrap constant strings with calls to these
functions as appropriate when constructing the `consts` array. This is
only done for security-sensitive attributes and properties, as
classified by Angular's dom_security_schema.

PR Close #39211
","['packages/compiler/src/render3/r3_identifiers.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/core/src/core_render3_private_export.ts', 'packages/core/src/render3/jit/environment.ts', 'packages/core/src/sanitization/sanitization.ts']","Constant values of attributes and properties in Angular templates are treated as secure and are not sanitized, leading to possible Trusted Types violation for security-sensitive attributes and properties."
93d7d9101e56a51f1ce315b1d0e67fa02e8916d9,1662483386,"fix(common): use DOCUMENT token to query for preconnect links (#47353)

`PreconnectLinkChecker` checks to see if preconnect links have been added to the `<head>` element but uses `document` directly which does not exist when rendering in Angular Universal. This PR switches the `PreconnectLinkChecker` to use the `DOCUMENT` token instead so that the query works when SSR'ing

PR Close #47353
",['packages/common/src/directives/ng_optimized_image/preconnect_link_checker.ts'],"Using `document` directly in `PreconnectLinkChecker` fails when rendering in Angular Universal as it doesn't exist, leading to ineffective queries for preconnect links in the head element."
9b9e11fcaf5d8d639ff1d7b8feddb01751b47e14,1696432475,"refactor(core): deprecate allowing full context object to be replaced in `EmbeddedViewRef` (#51887)

This partially reverts commit a3e17190e7e7e0329ed3643299c24d5fd510b7d6
and deprecates behavior added.

The context of an embedded view ref at some point was switched from a
getter to an actual assignable property. This is something we revert
as it introduces additional complexity for our generated code
(in terms of closures capturing the `ctx`), creates technical
limitations for Angular's internals and the usage pattern is rarely
used (and can be addressed via simple assignments, `Object.assign` or
the use of a proxy if replacing the full context object is still
desirable)

DEPRECATED: Swapping out the context object for `EmbeddedViewRef`
is no longer supported. Support for this was introduced with v12.0.0, but
this pattern is rarely used. There is no replacement, but you can use
simple assignments in most cases, or `Object.assign , or alternatively
still replace the full object by using a `Proxy` (see `NgTemplateOutlet`
as an example).

Also adds a warning if the deprecated

PR Close #51887
","['packages/core/src/render3/view_ref.ts', 'packages/core/test/acceptance/template_ref_spec.ts']","The full context object in `EmbeddedViewRef` can be replaced, introducing additional complexity for generated code, creating technical limitations for Angular's internals, and being rarely utilized."
f79110c6375d39b148339b7b4af38d99a9c039d9,1576275597,"fix(ivy): incorrect injectable name logged in warning message on IE (#34305)

When we log DI errors we get the name of the provider via `SomeClass.name`. In IE functions that inherit from other functions don't have their own `name`, but they take the `name` from the lowest parent in the chain, before `Function`. I've added some changes to fall back to parsing out the function name from the function's string form.

PR Close #34305
",['packages/core/src/di/interface/defs.ts'],Incorrect injectable provider name is logged in DI errors on IE because inherited functions don't have their own 'name' attribute.
67c5fe06e630b0a02cc0c6700bfa53f1773cbbd5,1607105928,"docs: improve FormBuilder.group deprecation message (#39946)

This expands the deprecation message that started to pop up in v11.0.3
after the landing of commit e148382bd0c6ba5c442fd6fa8c95f957205b5d01,
that deprecated the `{[key: string]: any}` type for the options property of the `FormBuilder.group` method.

It turns out that having a custom validator declared as
`{ validators: (group: FormGroup) => ValidationErrors|null }` works in practice,
but is now inferred by TS as the deprecated version of `group`
(because `FormGroup` is a subclass of `AbstractControl` that `ValidatorFn` expects).
We considered the possibility of tweaking the forms API to accept such validators,
but it turns out to generate too many changes in the framework or possible breaking changes for Angular users.

We settled for a more explicit deprecation message, elaborated with the help of @petebacondarwin.
This will hopefully help developers to understand why the deprecation warning is showing up
when they think they are already using the non-deprecated overload.

PR Close #39946
",['packages/forms/src/form_builder.ts'],"The deprecation message for `FormBuilder.group` method's options property in Angular v11.0.3 is not explicit enough, causing confusion when the deprecated warning shows up for custom validator declarations."
1d0fc42fc70fbd49de3699325de9e61bdb601b21,1695049195,"refactor(core): allow nested array for standalone component imports in local compilation mode (#51767)

This change flattens the imports info on standalone component decorators in runtime dev mode by adding flattening logic to the deps tracker. Such flattening has no effect in AoT full compilation mode since these arrays are already resolved  and flattened by AoT static analysis, but in local compilation mode it is needed since the raw array as appears on the component decorator will be passed to the deps tracker, and so it needs to be flattened.

This change does not affect prod runtime since deps tracker is only used in dev mode.

PR Close #51767
","['packages/core/src/render3/deps_tracker/deps_tracker.ts', 'packages/core/test/render3/deps_tracker_spec.ts']","Standalone component imports in local compilation mode are not properly managed when nested arrays are used, leading to issues in dependency tracking."
0849a09fd16ac89f20c5418258f81ef7427bab9b,1633725584,"fix(docs-infra): ensure `SwUpdatesService` is instantiated (#43766)

In 305d05545ad6037b3b8eccb8e53e09735836391e, we accidentally stopped
instantiating the `SwUpdatesService` service, which meant that we were
no longer subscribing to ServiceWorker update events and proactively
checking for updates. We would still gets updates, because the
ServiceWorker automatically checks on each navigation request and when a
new ServiceWorker instance is created, but we would not proactively
fetch updates and also miss `unrecoverable` errors.

This commit fixes this by exposing an `enable()` method from
`SwUpdatesService`, which has to be explicitly called for the service to
be enabled, and ensures that the method is called when `AppComponent` is
initialized.
The commit also gets rid of the `SwUpdatesModule` (whose only purpose
was to provide `SwUpdatesService`) in favor of using `providedIn`.

Fixes #43695

PR Close #43766
","['aio/src/app/app.component.spec.ts', 'aio/src/app/app.component.ts', 'aio/src/app/app.module.ts', 'aio/src/app/sw-updates/sw-updates.module.ts', 'aio/src/app/sw-updates/sw-updates.service.spec.ts', 'aio/src/app/sw-updates/sw-updates.service.ts']","Unexpected behavior in SwUpdatesService is causing it to fail to instantiate, leading to missed ServiceWorker updates and failure to fetch updates proactively. Additionally, `unrecoverable` errors are going unnoticed."
24ca582bc5f133bf43004eb87f446fc558fc8c64,1563922170,"perf(compiler): avoid copying from prototype while cloning an object (#31638)

This commit updates the `_clone` function of the `_ApplySourceSpanTransformer` class, where the for-in loop was used, resulting in copying from prototype to own properties, thus consuming more memory. Prior to NodeJS 12 (V8 versions before 7.4) there was an optimization that was improving the situation and since that logic was removed in favor of other optimizations, the situation with memory consumption caused by the for-in loop got worse. This commit adds a check to make sure we copy only own properties over to cloned object.

Closes #31627.

PR Close #31638
",['packages/compiler/src/output/output_ast.ts'],The _clone function of the _ApplySourceSpanTransformer class is causing increased memory consumption due to copying from prototype to own properties during object cloning.
f930e75a809a1e21369050884c20f42a350c411f,1588802771,"ci: update components-repo-unit-tests job commit (#36921)

Updates the `components-repo-unit-tests` job to
https://github.com/angular/components/commit/d3a9ac67d2ef89ca9570c73af41111c796c135ca.

We need to update since we added a new diagnostic in ngtsc, and
the given commit in the components repo fixes failures caused by
the new diagnostic.

Note: This commit currently points to a PR as it's unlikely that
this fix lands soon, but we want to move forward. There is no
downside to doing that as the PR is based on top of the latest
components repo `master`.

PR Close #36921
",['.circleci/env.sh'],New diagnostic in ngtsc causing failures in the 'components-repo-unit-tests' job. Updating required to accommodate changes.
81ef9c327d065fa59905bb3639f3fbf7bae466f9,1681914403,"refactor(core): handle empty projection slots within `<ng-container>` during hydration (#49920)

This commit updates hydration logic to handle cases when there are projection slots present in a template inside of an `<ng-container>` and when there are regular elements follow an <ng-content> slot (see tests for additional information). With this combination, the logic that annotates regular element locations should fallback to calculating a path from a reference node to that node. In case of an <ng-container>, the comment node is located *after* the node that needs an annotation. An existing logic was mistakenly returning an empty path, which was represented as a pointer to teh reference node. This commit fixes that and triggers a fallback to using a component host node as a reference in this case.

Resolves #49918.

PR Close #49920
","['packages/core/src/hydration/node_lookup_utils.ts', 'packages/platform-server/test/hydration_spec.ts']","During hydration, presence of projection slots in a template inside of an `<ng-container>` along with regular elements following an <ng-content> slot, lead to an erroneous path calculation due to the comment node's location."
2dc31576ab621f55d4fce5dbb46220f9f0d74349,1673366498,"ci: add Angular CLI help pages action (#48577)

This commits adds an action to update the Angular CLI help contents that are used by AIO to generate CLI guides.

This also changes the setup to include the files are source files instead of having to clone the repository each time. This also simplifies the PR review process of the PR opened by the action.

PR Close #48577
",['aio/tools/transforms/cli-docs-package/index.js'],"Angular CLI help contents used by AIO to generate CLI guides are not being updated automatically, complicating the review process. The current setup requires cloning the repository each time."
79700822fd69b1d76d2c364b713b8663ffe6bd89,1631820057,"refactor(router): remove unnecessary getTransition function (#43436)

The getTransition helper function ensures that urlAfterRedirects is assigned for when
the router does not process the previous or current URL. In this case, we would set
the browserUrlTree to be the urlAfterRedirects, which was initialized to be the browserUrlTree.
This is a no-op, so there's no need for the getTransition function at all.

PR Close #43436
","['packages/router/src/operators/recognize.ts', 'packages/router/src/router.ts', 'packages/router/test/integration.spec.ts']","The getTransition helper function in the router is redundant as it only assigns urlAfterRedirects when the router doesn't process URLs, leading to unnecessary operations."
a049840e0db4941e382b6b7046d333e58fccf688,1647551006,"build(docs-infra): move to circleci v2 api for aio-builds (#45349)

Move to the CircleCI v2 api as the authentication fails for downloading artifacts using the v1 methods.

CircleCI v2 api now requires authentication to occur view the headers instead of being done in a
query parameter, all of the CircleCI interactions are now performed through one fetchFromCircleCi method
which ensures the token is provided in the headers as expected.

PR Close #45349
","['aio/aio-builds-setup/dockerbuild/scripts-js/lib/common/circle-ci-api.ts', 'aio/aio-builds-setup/dockerbuild/scripts-js/lib/preview-server/build-retriever.ts', 'aio/aio-builds-setup/dockerbuild/scripts-js/test/common/circleci-api.spec.ts', 'aio/aio-builds-setup/dockerbuild/scripts-js/test/preview-server/build-retriever.spec.ts']","Authentication failure occurs when downloading artifacts due to outdated CircleCI v1 methods, causing disruption in CircleCI interactions."
ba84fa6f42cc217655f18cc9631127aa49bb20a9,1618346386,"refactor(compiler-cli): remove i18n options from `LinkerOptions` (#41554)

There were three options being made available to users of the linker:

- ` enableI18nLegacyMessageIdFormat`
-  `i18nNormalizeLineEndingsInICUs`
- ` i18nUseExternalIds`

None of these should actually be configurable at linking time
because partially-linked libraries have tighter restrictions on
what i18n options can be used.

This commit removes those options from the `LinkerOptions` interface.
It was considered to add a check for backwards compatibilty to ensure
that if these options were being passed, and were different to the expected
defaults, we would throw an informative error. But from looking at the
Angular CLI (the only known client of the linker) it has never been setting
these options so they have already always been set to the defaults.

BREAKING CHANGE:

Linked libraries no longer generate legacy i18n message ids. Any downstream
application that provides translations for these messages, will need to
migrate their message ids using the `localize-migrate` command line tool.

Closes #40673

PR Close #41554
","['packages/compiler-cli/linker/src/file_linker/linker_environment.ts', 'packages/compiler-cli/linker/src/file_linker/linker_options.ts', 'packages/compiler-cli/linker/src/file_linker/partial_linkers/partial_component_linker_1.ts', 'packages/compiler-cli/linker/src/file_linker/partial_linkers/partial_linker_selector.ts', 'packages/compiler-cli/test/compliance/linked/linked_compile_spec.ts']","The i18n options in the LinkerOptions interface aren't configured at linking time, causing potential limitations and constraints for partially-linked libraries."
628b0c1154f3c1c0e1c2af5e8a8b2238eff13a4a,1565731285,"feat(forms): formControlName also accepts a number (#30606)

This commit relaxes the type of the `formControlName` input to accept both a `string` and a `number`.

Currently, when using a `FormArray`, most templates look like:

```
<div formArrayName=""tags"">
  <div *ngFor=""let tag of tagsArray.controls; index as i"">
    <input [formControlName]=""i"">
  </div>
</div>
```

Here `formControlName` receives a number whereas its input type is a string.

This is fine for VE and `fullTemplateTypeCheck`, but not for Ivy which does a more thorough type checking on inputs with `fullTemplateTypeCheck` enabled and throws `Type 'number' is not assignable to type 'string'`. It is fixable by using `formControlName=""{{i}}""` but you have to know the difference between `a=""{{b}}""` and `[a]=""b""` and change it all over the application codebase. This commit allows the existing code to still type-check.

PR Close #30606
","['packages/forms/src/directives/ng_control.ts', 'packages/forms/src/directives/reactive_directives/form_control_name.ts', 'packages/forms/src/directives/shared.ts', 'tools/public_api_guard/forms/forms.d.ts']","The formControlName input only accepts a string causing issues with FormArray templates. Particularly, this creates a type discrepancy in Ivy with `fullTemplateTypeCheck`, as it throws type errors when a number is provided."
e28d460307600c15fc9c0f98c7ad26660b76bf77,1608589335,"docs: make the `spy-directive` docregion (in `lifecycle-hooks` example) easier to follow (#40208)

Previously, the docregion code referenced a `nextId` variable that was
not shown in the code, which was confusing for the reader.

This commit makes the declaration of the `nextId` variable part of the
docregion, so it is clear to the reader where it comes from and how it
is initialized.
This commit also removes the `logIt()` helper method, which didn't seem
to add value and calls `logger.log()` directly instead.

PR Close #40208
",['aio/content/examples/lifecycle-hooks/src/app/spy.directive.ts'],"In lifecycle-hooks example, `spy-directive` docregion references a `nextId` variable which is not displayed in the code, potentially confusing readers. The `logIt()` helper method also seems unnecessary."
da0c372fdf67230dea4f5d4df52c55ac6e1938db,1574193359,"perf(ivy): don't store public input names in two places (#33798)

Before this change a public name of a directive's input
was stored in 2 places:
- as a key of an object on TNode.index;
- as a value of PropertyAliasValue at the index 1

This PR changes the data structure so the public name is stored
only once as a key on TNode.index. This saves one array entry
for each and every directive input.

PR Close #33798
","['packages/core/src/render3/i18n.ts', 'packages/core/src/render3/instructions/element.ts', 'packages/core/src/render3/instructions/listener.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/instructions/styling.ts', 'packages/core/src/render3/interfaces/node.ts']","Duplication in storage of a directive's public input name in two locations, contributing to unnecessary data redundancy and inefficiency."
af2d22c43d7dcbd45b061a8ed03afa9391a82fcf,1574804155,"fix(ivy): support ICUs without ""other"" cases (#34042)

Prior to this commit, there was a runtime check in i18n logic to make sure ""other"" case is always present in an ICU. That was not a requirement in View Engine, so ICUs that previously worked may produce errors. This commit removes that restriction and adds support for ICUs without ""other"" cases.

PR Close #34042
","['packages/core/src/render3/i18n.ts', 'packages/core/test/acceptance/i18n_spec.ts']","i18n logic runtime check forces ""other"" case to be present in an ICU, causing errors with ICUs that previously worked without ""other"" cases in View Engine."
0ae4187566bb6e0121b0026cb897f00a328d2aa8,1636480953,"refactor(docs-infra): remove eslint directive comments from examples (#43831)

Linting has recently been removed from the examples provided in angular.io
(see PRs #43592 and #43746) such removal effects the downloadable and
stackblitz examples but linting is still generally used in the examples
in the aio project itself (they are being migrated from tslint to eslint in
PR #43218) thus eslint directive comments are still necessary in the code itself.

So the comments need to be present but need not to be exposed to the users
(not in the zips, stackblitzes nor docs themselves), these changes are
removing such comments during the examples' parsing phase (effectively
removing them from all three sources mentioned above).

Original discussion: https://github.com/angular/angular/pull/43218#discussion_r697305494

resolves #43788

PR Close #43831
","['aio/tools/transforms/examples-package/services/region-parser.js', 'aio/tools/transforms/examples-package/services/removeEslintComments.js', 'aio/tools/transforms/examples-package/services/removeEslintComments.spec.js']","ESLint directive comments in the code examples provided on angular.io are being exposed to the users in the zip downloads, StackBlitzes, and the documentation itself."
286b2807de61dcd6e24ced5c142fbc6eda9dfbec,1629131603,"fix(router): eagerly update internal state on browser-triggered navigations (#43102)

The management of `browserUrlTree` currently has several problems with
correctly tracking the actual state of the browser.

This change makes the Router eagerly update the `browserUrlTree` when
handling navigations triggered by browser events (i.e., not 'imperative'). This
is because with those types of navigations, the browser URL bar is
_already_ updated. If we do not update the internal tracking of the
`browserUrlTree`, we will be out of sync with the real URL if the
navigation is rejected.

It would be best if we could remove `browserUrlTree` completely, but doing that
would require a lot more investigation and is blocked by #27059 because
the SpyLocation used in tests does not emulate real browser behavior.

fixes #43101

PR Close #43102
","['packages/router/src/router.ts', 'packages/router/test/integration.spec.ts', 'packages/router/test/regression_integration.spec.ts']","Router's internal tracking (`browserUrlTree`) is not in sync with the actual browser URL for navigations triggered by browser events, causing inconsistencies if the navigation is rejected."
f0cfa00a340800af4670cbfb5604f001e8bbebd0,1643669303,"refactor(forms): Move FormControl to an overridden exported constructor. (#44316) (#44806)

This implementation change was originally proposed as part of Typed Forms, and will have major consequences for that project as described in the design doc. Submitting it separately will greatly simplify the risk of landing Typed Forms. This change should have no visible impact on normal users of FormControl.

See the Typed Forms design doc here: https://docs.google.com/document/d/1cWuBE-oo5WLtwkLFxbNTiaVQGNk8ipgbekZcKBeyxxo.

PR Close #44316

PR Close #44806
","['aio/tools/transforms/angular-api-package/processors/mergeOverriddenImplementation.js', 'aio/tools/transforms/angular-api-package/processors/mergeOverriddenImplementation.spec.js', 'packages/forms/src/forms.ts', 'packages/forms/src/model.ts', 'packages/forms/test/form_control_spec.ts']",Potential risks in landing Typed Forms due to current implementation of FormControl. Current setup might affect normal users and the project's integration.
32b16de8ea8c73b3ad9e91eb0936794a5a90a1e1,1570202841,"build(docs-infra): align config with what cli generates for new apps (#32923)

This is mainly to avoid some warning when building the app, such as:

```
WARNING in .../angular/aio/src/environments/environment.archive.ts is
part of the TypeScript compilation but it's unused.
Add only entry points to the 'files' or 'include' properties in your
tsconfig.
```

(Not turning on `fullTemplateTypeCheck` due to lots of errors.)

PR Close #32923
",['aio/scripts/switch-to-viewengine.js'],"Building the app triggers warnings regarding unused TypeScript compilation parts in 'environment.archive.ts'. Furthermore, 'fullTemplateTypeCheck' can't be enabled due to numerous errors."
38a7021d5ea454c67abf133fc5f34d0b966b9754,1595015895,"fix(core): error due to integer overflow when there are too many host bindings (#38014)

We currently use 16 bits to store information about nodes in a view.
The 16 bits give us 65536 entries in the array, but the problem is that while
the number is large, it can be reached by ~4300 directive instances with host
bindings which could realistically happen is a very large view, as seen in #37876.
Once we hit the limit, we end up overflowing which eventually leads to a runtime error.

These changes bump to using 20 bits which gives us around 1048576 entries in
the array or 16 times more than the current amount which could still technically
be reached, but is much less likely and the user may start hitting browser limitations
by that point.

I picked the 20 bit number since it gives us enough buffer over the 16 bit one,
while not being as massive as a 24 bit or 32 bit.

I've also added a dev mode assertion so it's easier to track down if it happens
again in the future.

Fixes #37876.

PR Close #38014
","['packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/interfaces/node.ts']",Having too many host bindings in a large view causes an integer overflow error due to 16 bits size constraint for storing nodes information.
aef7dca234c06df4357573eb9db1216c37f69de0,1571252046,"perf(ivy): initialise inputs from static attrs on the first template pass only (#33195)

This change assures that data structures related to initial inputs
(ones set from static attributes) are created only once (during the
first template pass) and no additional runtime checks are done for
subsequent passes.

Additionally this commit changes the data structure used by initial inputs
on TNode - previously initial inputs for a directive were stored at the
directive index in LView. This meant that an array holding initial inputs
was relativelly big and had many null elements (as placeholders for elements,
directives, injector etc.). After the change we only create an array of a size
equal to a number of directives matched on a given TNode.
For the `directive_instantiate` benchmark it boils to allocating a 1-element
array vs. 100-element array previously.

PR Close #33195
",['packages/core/src/render3/instructions/shared.ts'],"Data structures related to initial inputs for directives are repeatedly created for each template pass, causing unnecessary runtime checks and inefficient use of space in the LView."
a8fced88469b07d39c312b05c4bfe47d626514c1,1576024486,"refactor(ivy): abstract .d.ts file transformations (#34235)

This commit refactors the way the compiler transforms .d.ts files during
ngtsc builds. Previously the `IvyCompilation` kept track of a
`DtsFileTransformer` for each input file. Now, any number of
`DtsTransform` operations that need to be applied to a .d.ts file are
collected in the `DtsTransformRegistry`. These are then ran using a
single `DtsTransformer` so that multiple transforms can be applied
efficiently.

PR Close #34235
","['packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/src/ngtsc/transform/index.ts', 'packages/compiler-cli/src/ngtsc/transform/src/api.ts', 'packages/compiler-cli/src/ngtsc/transform/src/compilation.ts', 'packages/compiler-cli/src/ngtsc/transform/src/declaration.ts']",The compiler's handling of .d.ts file transformations during ngtsc builds is inefficient and potentially redundant due to maintaining a separate `DtsFileTransformer` for each input file.
3d5b98631a17c5b2051d0d9aa7e14ba1c7278c77,1552918600,"fix(ivy): listeners inherited twice if sub class has own propMetadata (#29353)

Fixes host listeners being inherited twice, if the sub class has its own `propMetadata`. This is related to #29170 which fixed something similar, however all of the test cases there had a super class with some metadata and a sub class that didn't have any. The issue manifested itself in the `MatTreeToggle` which inherits a listener from the `CdkTreeToggle` and adds an extra `Input` of its own, causing the listener to be added twice.

PR Close #29353
","['packages/core/src/render3/metadata.ts', 'packages/core/test/render3/jit/directive_spec.ts']",Inheritance of host listeners in sub classes with their own `propMetadata` results in these listeners being added twice. Issue particularly noticeable in `MatTreeToggle`.
b7fd86ec50245b67aa8ec2f217ec67f64d7576b9,1574276652,"test(docs-infra): destroy all `ScrollService` instances after each test (#33937)

`ScrollService` subscribes to global `window` events and mutates global
state in the listener (e.g. read/write values from/to `sessionStorage`).
Therefore, we need to always call its `ngOnDestroy()` method to
unsubscribe from these events after each test.

In f69c6e204, a new testcase was introduced that was not destroyed. As a
result, random failures started to randomly happen in other, unrelated
tests ([example CI failure][1]).

This commit fixes this by ensuring all `ScrollService` instances are
destroyed after each tests (provided that they are created with the
`createScrollService()` helper).

[1]: https://circleci.com/gh/angular/angular/533298

PR Close #33937
",['aio/src/app/shared/scroll.service.spec.ts'],Non-destroyed `ScrollService` instances are causing random failures in unrelated tests due to mutation of global state (event subscriptions and `sessionStorage` interactions).
41f27ad08643839d09daf4588069a3f8fe627070,1679499631,"refactor(platform-server): remove `renderApplication` overload that accepts a component (#49463)

This commit removes the `renderApplication` overload that accepts a root component as the first parameter.

BREAKING CHANGE:

`renderApplication` method no longer accepts a root component as first argument. Instead, provide a bootstrapping function that returns a `Promise<ApplicationRef>`.

Before
```ts
const output: string = await renderApplication(RootComponent, options);
```

Now
```ts
const bootstrap = () => bootstrapApplication(RootComponent, appConfig);
const output: string = await renderApplication(bootstrap, options);
```

PR Close #49463
","['packages/core/src/core_render3_private_export.ts', 'packages/platform-server/src/utils.ts', 'packages/platform-server/test/hydration_spec.ts', 'packages/platform-server/test/integration_spec.ts']",The `renderApplication` method overload accepts a root component as a first argument which contradicts the new bootstrapping standard of returning a `Promise<ApplicationRef>`.
c24ad560fa6a14d067969d5588749ba1261bcb98,1585849909,"feat(core): undecorated-classes migration should handle derived abstract classes (#35339)

In version 10, undecorated base classes that use Angular features need
to be decorated explicitly with `@Directive()`. Additionally, derived
classes of abstract directives need to be decorated.

The migration already handles this for undecorated classes that are
not explicitly decorated, but since in V9, abstract directives can be
used, we also need to handle this for explicitly decorated abstract
directives. e.g.

```
@Directive()
export class Base {...}

// needs to be decorated by migration when updating from v9 to v10
export class Wrapped extends Base {}

@Component(...)
export class Cmp extends Wrapped {}
```

PR Close #35339
","['integration/ng_update_migrations/src/app/migration-tests/undecorated-classes-with-fields.ts', 'integration/ng_update_migrations/src/app/migration-tests/undecorated-classes-with-fields_expected.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/transform.ts', 'packages/core/schematics/test/undecorated_classes_with_decorated_fields_migration_spec.ts', 'packages/core/schematics/utils/typescript/functions.ts']",Version 10 migration fails to handle abstract directives and undecorated derived classes causing issues with proper functioning of Angular features.
f00d03356f14293131e7a6aea2cb7c570b3bb5e9,1567704916,"fix(ivy): handle expressions in i18n attributes properly (#32309)

Prior to this commit, complex expressions (that require additional statements to be generated) were handled incorrectly in case they were used in attributes annotated with i18n flags. The problem was caused by the fact that extra statements were not appended to the temporary vars block, so they were missing in generated code. This commit updated the logic to use the `convertPropertyBinding`, which contains the necessary code to append extra statements. The `convertExpressionBinding` function was removed as it duplicates the `convertPropertyBinding` one (for the most part) and is no longer used.

PR Close #32309
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/core/test/acceptance/i18n_spec.ts']","Complex expressions used in attributes with i18n flags are not properly handled, leading to missing statements in the generated code."
d316a18dc660c2f77c39be14575481dffb6d73be,1556151021,"fix(ivy): don't include query fields in type constructors (#30094)

Previously, ngtsc included query fields in the list of fields which can
affect the type of a directive via its type constructor. This feature
however has yet to be built, and View Engine in default mode does not
do this inference.

This caused an unexpected bug where private query fields (which should be
an error but are allowed by View Engine) cause the type constructor
signature to be invalid. This commit fixes that issue by disabling the
logic to include query fields.

PR Close #30094
","['packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/api.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/context.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/environment.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_constructor.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_check_block_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_constructor_spec.ts']","Inclusion of query fields in directive type constructors results in invalid signatures, especially when private query fields are in use."
64c3135be7c5d1007945074478c894b71b229cea,1605653109,"refactor(compiler-cli): provide a host to readConfiguration (#39619)

Currently `readConfiguration` relies on the file system to perform disk
utilities needed to read determine a project configuration file and read
it. This poses a challenge for the language service, which would like to
use `readConfiguration` to watch and read configurations dependent on
extended tsconfigs (#39134). Challenges are at least twofold:

1. To test this, the langauge service would need to provide to the
   compiler a mock file system.
2. The language service uses file system utilities primarily through
   TypeScript's `Project` abstraction. In general this should correspond
   to the underlying file system, but it may differ and it is better to
   go through one channel when possible.

This patch alleviates the concern by directly providing to the compiler
a ""ParseConfigurationHost"" with read-only ""file system""-like utilties.
For the language service, this host is derived from the project owned by
the language service.

For more discussion see
https://docs.google.com/document/d/1TrbT-m7bqyYZICmZYHjnJ7NG9Vzt5Rd967h43Qx8jw0/edit?usp=sharing

PR Close #39619
","['packages/compiler-cli/src/perform_compile.ts', 'packages/language-service/ivy/language_service.ts', 'packages/language-service/ivy/language_service_adapter.ts', 'packages/language-service/ivy/test/legacy/language_service_spec.ts', 'packages/language-service/ivy/test/legacy/mock_host.ts']","`readConfiguration` depends on the file system for disk utilities, posing issues for the language service that wishes to use it for tsconfig dependencies, especially with mock file system testing and the use of filesystem utilities through TypeScript's `Project`."
995adb2297b552fba8b1aeb5f229004cc0a98b8f,1614012109,"test(core): refactor ApplicationInitStatus tests to avoid TestBed side-effects (#33222)

Currently TestBed (both ViewEngine and Ivy) invoke `ApplicationInitStatus.runInitializers` as a part of the
bootstrap process to mimic real bootstrap steps. This is problematic for the `ApplicationInitStatus` class
tests since the `runInitializers` call performed by TestBed interfere with actual tests.

This commit updates ApplicationInitStatus tests to interact with the class directly instead of relying on TestBed
APIs to retrieve the class though DI.

PR Close #33222
",['packages/core/test/application_init_spec.ts'],"TestBed's invocation of `ApplicationInitStatus.runInitializers` during bootstrap process interferes with `ApplicationInitStatus` class tests, impacting test accuracy."
c5c57f673745e9b66a771c49e778a7d2e8d8c56a,1585772289,"build: update to clang 1.4.0 and only run clang format on changed files (#36203)

Update to clang@1.4.0 to gain support for optional changing and nullish
coalescing.  Because this would trigger a change on >1800 files in the
repository, also changes our format enforcement to only be run against
changed files.  This will allow us to incramentally roll out the value
add of the upgraded clang format.

PR Close #36203
","['.circleci/env.sh', 'gulpfile.js', 'tools/gulp-tasks/format.js']","The current clang version doesn't support optional chaining and nullish coalescing. Also, the format enforcement works on the entire repository rather than just the changed files, leading to unnecessary processing."
9bd4b74b064e92fe998f5d1ac3814325ade38942,1594403968,"feat(dev-infra): commit message validation should skip lines consisting of URLs (#37890)

The dev-infra commit message validation optionally can check for lines
to not exceed a given amount of characters. This is desired for most
commit messages, but sometimes not actionable if a long URL is inserted
into the commit message. With this commit, we skip the max line length
check for lines that start with an URL.

PR Close #37890
","['dev-infra/commit-message/validate.spec.ts', 'dev-infra/commit-message/validate.ts']","Commit message validation enforces character limit even on lines consisting solely of URLs, making it impossible to insert long URLs into commit messages."
c56c2416a9acb4f017e7e8387a6602a6c81b41fc,1567194361,"refactor(core): undecorated-classes-with-decorated-fields migration commits empty updates (#32391)

Commit 904a2018e0d3394ad91ffb6472f8271af7845295 introduced a new migration for
undecorated classes with decorated Angular class members. Currently the migration
always calls `tree.beginUpdate` and `tree.commitUpdate` (even if there are no changes).

This causes unnecessary updates to be reported to developers running `ng update`. Once
an update is commited, the CLI will report the update regardless of whether any changes were
made or not.

This behavior can be observed in the `ng_update_migrations` integration test. See:
https://circleci.com/gh/angular/angular/438470#tests/containers/3. Notice how all
source files are denoted as `UPDATED` (even though there are no changes).

PR Close #32391
",['packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/index.ts'],"The migration for undecorated classes with decorated Angular class members triggers unnecessary `tree.beginUpdate` and `tree.commitUpdate` calls, causing false reports of changes in `ng update`."
718d7fe5fefd6a77f7fffed04559eb610acd5a57,1575666108,"fix(ivy): properly parenthesize ternary expressions when emitted (#34221)

Previously, ternary expressions were emitted as:

condExpr ? trueCase : falseCase

However, this causes problems when ternary operations are nested. In
particular, a template expression of the form:

a?.b ? c : d

would have compiled to:

a == null ? null : a.b ? c : d

The ternary operator is right-associative, so that expression is interpreted
as:

a == null ? null : (a.b ? c : d)

when in reality left-associativity is desired in this particular instance:

(a == null ? null : a.b) ? c : d

This commit adds a check in the expression translator to detect such
left-associative usages of ternaries and to enforce such associativity with
parentheses when necessary.

A test is also added for the template type-checking expression translator,
to ensure it correctly produces right-associative expressions for ternaries
in the user's template.

Fixes #34087

PR Close #34221
","['packages/compiler-cli/src/ngtsc/translator/src/translator.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_check_block_spec.ts', 'packages/compiler-cli/test/compliance/r3_view_compiler_template_spec.ts']","Nested ternary operations aren't functioning as expected due to right-associativity, causing incorrect interpretation of nested ternary expressions."
142ac41cacb018ea5fd7cd1a6727f8789c76b6b2,1552066460,"fix(ivy): ngcc - handle prototype pseudo-member from typings file in ESM5 host (#29158)

When processing a JavaScript program, TS may come across a symbol that has
been imported from a TypeScript typings file.

In this case the compiler may pass the ReflectionHost a `prototype` symbol
as an export of the class.

This pseudo-member symbol has no declarations, which previously caused the
code in `Esm5ReflectionHost.reflectMembers()` to crash.

Now we just quietly ignore such a symbol and leave `Esm2015ReflectionHost`
to deal with it.

(As it happens `Esm2015ReflectionHost` also quietly ignores this symbol).

PR Close #29158
","['packages/compiler-cli/src/ngcc/src/host/esm2015_host.ts', 'packages/compiler-cli/src/ngcc/src/host/esm5_host.ts', 'packages/compiler-cli/src/ngcc/test/host/esm5_host_spec.ts']",Processing JavaScript programs with TypeScript symbols from typings files causes Esm5ReflectionHost.reflectMembers() to crash due to pseudo-member `prototype` symbol lacking declarations.
8798abb744ffac34dc4a68d5b2c15befdc26f816,1692306111,"refactor(core): implement runtime logic to compute component dependencies in local compilation mode (#51377)

The runtime `ɵɵsetNgModuleScope` is modified to accept raw scope info as passed to it in local compilation mode. The runtime further registers the ng-module in the deps tracker. Then the runtime `ɵɵgetComponentDepsFactory` is implemented to use the deps tracker to get the component dependencies which leads to a valid and working Angular code.

PR Close #51377
","['packages/core/src/render3/interfaces/definition.ts', 'packages/core/src/render3/local_compilation.ts', 'packages/core/src/render3/scope.ts', 'packages/core/test/acceptance/local_compilation_spec.ts']",Angular components in local compilation mode are not correctly computing dependencies due to limitations in `ɵɵsetNgModuleScope` and `ɵɵgetComponentDepsFactory` runtime functions.
a107e9edc66d02249fa99fc9e053e6760e1da246,1579736134,"feat(ngcc): lock ngcc when processing (#34722)

Previously, it was possible for multiple instance of ngcc to be running
at the same time, but this is not supported and can cause confusing and
flakey errors at build time.

Now, only one instance of ngcc can run at a time. If a second instance
tries to execute it fails with an appropriate error message.

See https://github.com/angular/angular/issues/32431#issuecomment-571825781

PR Close #34722
","['packages/compiler-cli/ngcc/src/execution/cluster/executor.ts', 'packages/compiler-cli/ngcc/src/execution/lock_file.ts', 'packages/compiler-cli/ngcc/src/execution/single_process_executor.ts', 'packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/test/execution/cluster/executor_spec.ts', 'packages/compiler-cli/ngcc/test/execution/lock_file_spec.ts', 'packages/compiler-cli/ngcc/test/execution/single_processor_executor_spec.ts', 'packages/compiler-cli/ngcc/test/helpers/mock_lock_file.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']","Multiple instances of ngcc running simultaneously is not supported, leading to erratic and hard-to-debug build errors."
f52df99fe369854c4ee49e3c01afa29cf2ae7126,1624300237,"fix(compiler): generate view restoration for keyed write inside template listener (#42603)

If an implcit receiver is accessed in a listener inside of an `ng-template`, we generate some extra code in order to ensure that we're assigning to the correct object. The problem is that the logic wasn't covering keyed writes which caused it to write to the wrong object and throw an assertion error at runtime.

These changes expand the logic to cover keyed writes.

Fixes #41267.

PR Close #42603
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_listener/GOLDEN_PARTIAL.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_listener/implicit_receiver_keyed_write_inside_template.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_listener/implicit_receiver_keyed_write_inside_template_template.js', 'packages/compiler/src/compiler_util/expression_converter.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/compiler/src/view_compiler/type_check_compiler.ts', 'packages/compiler/src/view_compiler/view_compiler.ts', 'packages/core/test/acceptance/listener_spec.ts']","Keyed writes inside a template listener with an implicit receiver result in assignment to the incorrect object, subsequently causing a runtime assertion error."
5d678de4da149956cb0e42e7bed1b76eb1a07e81,1635272552,"fix(compiler-cli): avoid broken references in .d.ts files due to @internal markers (#43527)

The `ErrorCode` enum in the `error_code.ts` file is governed by public
api guards but the other top-level exports from that file are exempt
from public api documentation and are therefore marked as `@internal`.
However, TypeScript is configured with the `stripInternal` compiler
option such that declarations with `@internal` markers are not emitted
into the `.d.ts` files, but this means that the reexports in the barrel
file end up referring to missing declarations.

The `stripInternal` option is considered internal and its documentation
states to use at your own risk (as per https://github.com/microsoft/TypeScript/issues/45307).
Having the option enabled is desirable for us as it works well for
hiding class fields that are marked `@internal`, which is an effective
way to hide members from the .d.ts file. As a workaround for the issue
with top-level symbols, the declarations with `@internal` markers are
moved to dedicated files for which no public api guard is setup,
therefore allowing their `@internal` markers to be dropped.

Fixes #43097

PR Close #43527
","['packages/compiler-cli/src/ngtsc/diagnostics/index.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/docs.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/error.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/util.ts', 'packages/core/src/render3/error_code.ts']","Top-level exports marked as '@internal' in `error_code.ts` file are not emitted into the `.d.ts` files due to the `stripInternal` compiler option, causing broken references in the reexports of the barrel file."
739d745eb5a9338e30a2ca90b22650aac191368f,1605546766,"refactor(core): Cleanup circular dependency between ViewEngine and Ivy `ViewContainerRef`. (#39621)

`ViewContainerRef` is declared in ViewEngine but it sub-classed in Ivy. This creates a circular
dependency between ViewEngine `ViewContainerRef` which needs to declare `__NG_ELEMENT_ID__` and
ivy factory which needs to create it. The workaround used to be to pass the `ViewContainerRef`
through stack but that created a very convoluted code. This refactoring simply bundles the
two files together and removes the stack workaround making the code simpler to follow.

PR Close #39621
","['packages/core/src/linker/view_container_ref.ts', 'packages/core/src/render3/query.ts', 'packages/core/src/render3/view_engine_compatibility.ts', 'packages/core/test/render3/perf/ng_template/index.ts', 'packages/core/test/render3/render_util.ts']","Circular dependency detected between ViewEngine and Ivy 'ViewContainerRef', causing convoluted code structures and workarounds."
30efb6b8eabc92bc3ece57930133f71f67720f8a,1559795319,"fix(ivy): don't project removed placeholders with runtime i18n (#30783)

When translated content was projected, all of the content was reappended, even the placeholders that had been removed in the translation.
To avoid that we added a new flag on `TNode` that specifies that a node is detached, in which case it should be ignored by the projection.

FW-1319 #resolve
PR Close #30783
","['packages/core/src/render3/i18n.ts', 'packages/core/src/render3/interfaces/node.ts', 'packages/core/src/render3/node_manipulation.ts', 'packages/core/test/acceptance/i18n_spec.ts']","When using runtime i18n, placeholders that were removed during translation are incorrectly reappended during content projection."
ec455e1cf1a90da9c46a5fba4bb1c742c9f33d36,1556138969,"feat(common): add UrlCodec type for use with upgrade applications (#30055)

This abstract class (and AngularJSUrlCodec) are used for serializing and deserializing pieces of a URL string. AngularJS had a different way of doing this than Angular, and using this class in conjunction with the LocationUpgradeService an application can have control over how AngularJS URLs are serialized and deserialized.

PR Close #30055
",['packages/common/upgrade/src/params.ts'],"Angular and AngularJS have divergent methods of URL string serialization and deserialization, causing inconsistencies in upgraded applications."
4eac7e643687ec992fee323941064da79037f053,1609868928,"fix(router): Router should focus element after scrolling (#40241)

According to the [spec](https://html.spec.whatwg.org/#scroll-to-fragid),
we should attempt to set the browser focus after scrolling to a
fragment. Note that this change does not exactly follow the robust steps
outlined in the spec by finding a fallback target if the original is not
focusable. Instead, we simply attempt to focus the element by calling
`focus` on it, which will do nothing if the element is not focusable.

fixes #30067

PR Close #40241
",['packages/common/src/viewport_scroller.ts'],"The router isn't properly setting browser focus after scrolling to a fragment, ignoring that focus should be set according to HTML specifications."
a3e17190e7e7e0329ed3643299c24d5fd510b7d6,1614096841,"fix(core): allow EmbeddedViewRef context to be updated (#40360)

Currently `EmbeddedViewRef.context` is read-only which means that the only way to update
it is to mutate the object which can lead to some undesirable outcomes if the template
and the context are provided by an external consumer (see #24515).

These changes make the property writeable since there doesn't appear to be a specific
reason why it was readonly to begin with.

PR Close #40360
","['goldens/public-api/core/core.d.ts', 'packages/core/src/linker/view_ref.ts', 'packages/core/src/render3/view_ref.ts', 'packages/core/src/view/refs.ts', 'packages/core/test/acceptance/template_ref_spec.ts']","The read-only property of `EmbeddedViewRef.context` necessitates object mutation for updates, leading to potential undesirable outcomes when templates and contexts are externally provided."
7e0ed9e7b810f501466ae0faf238b242605c18ad,1696387203,"refactor(compiler): Eliminate collision between `UsesSlotIndexTrait` and `ConsumesSlotOpTrait` (#51942)

Ops with `ConsumesSlotOpTrait` have a self-xref, and are assigned a corresponding `slot`.

Ops with `UsesSlotIndexTrait` have a `target`-xref, and are assigned the `slot` of that `target`.

In both cases, the field name `slot` is used, but it means different things. Therefore, any op which both consumes and uses a slot will have a collision of two different meanings on its `slot` field.

This commit renames `slot` to `slotTarget` in the `UsesSlotIndexTrait`, to eliminate this collision.

PR Close #51942
","['packages/compiler/src/template/pipeline/ir/src/expression.ts', 'packages/compiler/src/template/pipeline/ir/src/ops/create.ts', 'packages/compiler/src/template/pipeline/ir/src/ops/update.ts', 'packages/compiler/src/template/pipeline/ir/src/traits.ts', 'packages/compiler/src/template/pipeline/src/phases/naming.ts', 'packages/compiler/src/template/pipeline/src/phases/reify.ts', 'packages/compiler/src/template/pipeline/src/phases/slot_allocation.ts']","Ops consuming and using slots simultaneously lead to a naming collision in the 'slot' field, resulting in ambiguous meanings."
7e977d99e036b17115ee5bad6564986322872741,1681238811,"refactor(compiler): introduce the core of the template pipeline (#48580)

This commit introduces the ""template pipeline"", a new compilation flow for
template compilation. This new flow is intended to eventually replace the
`TemplateDefinitionBuilder`. For now, it's being implemented in parallel with
the existing system with the goal of eventually passing all of the existing
compliance tests.

The new pipeline is based on an ""intermediate representation"" of a template -
operations which semantically encode what needs to happen at runtime to render
and change-detect the template. Using an IR allows for different concerns of
template compilation to be processed independently, which solves the biggest
problem with `TemplateDefinitionBuilder` today (the lack of separation of
concerns).

This commit introduces the IR concept of an operation and related typings, as
well as the structures used to represent templates and views during compilation.
Future commits will expand on this foundation as work on the pipeline proceeds.

PR Close #48580
","['packages/compiler/src/template/pipeline/ir/index.ts', 'packages/compiler/src/template/pipeline/ir/src/enums.ts', 'packages/compiler/src/template/pipeline/ir/src/operations.ts', 'packages/compiler/src/template/pipeline/ir/src/ops/create.ts', 'packages/compiler/src/template/pipeline/ir/src/ops/shared.ts', 'packages/compiler/src/template/pipeline/ir/src/ops/update.ts', 'packages/compiler/src/template/pipeline/src/compilation.ts']",Issues with `TemplateDefinitionBuilder` include entangled concerns making it difficult to manage template compilation. An independent processing mechanism for template encoding at runtime is needed.
d529b55651739219bbd80c2630defe9a55d149f5,1575314688,"fix(ivy): i18n - correctly parse XLIFF placeholders (#34155)

The ViewEngine translation extractor does not convert `-` to `_` for
placeholders that represent custom elements. For example `<app-component>`
gets converted to placeholders like `START_TAG_APP-COMPONENT`.

In `$localize` placeholders are expected to be snake-case, not kebab-case.
So we must normalize them when parsing a translation file that might have
been created via the View Engine translation extractor.

The `$localize` extraction code will normalize these placeholders when
creating translation files in the first place.

Fixes #34151

PR Close #34155
","['packages/localize/src/tools/src/translate/translation_files/message_serialization/target_message_renderer.ts', 'packages/localize/src/tools/test/translate/translation_files/translation_parsers/xliff1_translation_parser_spec.ts']","ViewEngine translation extractor doesn't convert '-' to '_' for placeholders representing custom elements, causing them to be in kebab-case instead of the expected snake-case in `$localize`."
a2b8dc1cfb169c2a2841b384e1c1acc861093d48,1589478628,"refactor(ngcc): ensure unlocker process works in mock file-systems (#36989)

Previously the path to the unlocker process was being resolved by the
current file-system. In the case that this was a `MockFileSystemWindows`
on a non-Windows operating system, this resulted in an incorrect path
to the entry-point.

Now the path to the entry-point is hand-crafted to avoid being broken by
whatever FileSystem is in use.

PR Close #36989
",['packages/compiler-cli/ngcc/src/locking/lock_file_with_child_process/index.ts'],"When using MockFileSystemWindows on a non-Windows operating system, the path resolution to the unlocker process fails, causing an incorrect path to the entry-point."
c6b180380a3b49449a4de990daa1c2b38a12766b,1560981574,"fix(docs-infra): do not auto-link `http://` to the `common/http` (#31051)

Previously, our auto-linking feature would match `http` in URLs (such as
`http://...`) to the `common/http` package and automatically create a
link to that, which was undesirable. While it is possible to work around
that via `<code class=""no-auto-link"">http://...</code>`, most people
didn't even realize the issue.

Since in this case it is possible to reliably know it is a false match,
this commit fixes it by applying a custom auto-link filter that ignores
all docs for `http`, if it comes before `://`.

Fixes #31012

PR Close #31051
","['aio/tools/transforms/angular-base-package/index.js', 'aio/tools/transforms/angular-base-package/post-processors/auto-link-code.js', 'aio/tools/transforms/angular-base-package/services/filterPipes.js', 'aio/tools/transforms/angular-base-package/services/ignoreHttpInUrls.js', 'aio/tools/transforms/angular-base-package/services/ignoreHttpInUrls.spec.js']","The auto-linking feature erroneously matches 'http' in URLs to the 'common/http' package, creating unwanted links without users noticing."
6046e865062a7ad35c4e17f31721fe143a00568b,1588621548,"build: update setup-rbe.sh script to accept non google.com/angular.io (#36846)

Previously the setup-rbe.sh script did not allow accounts that did
have domains of angular.io or google.com.  Since we add emails from
other domains into everyone@angular.io, we are unable to be certain
in the script that the account is not actually a member of the
required group.  This change adds the option to choose to continue
with an email account logged in which we cannot verify by domain.

PR Close #36846
",['scripts/local-dev/setup-rbe.sh'],"The setup-rbe.sh script is limited to accounts with domains of angular.io or google.com, restricting accounts with a different domain but are members of everyone@angular.io."
fcfce99e9ee9c5ffd2a637ae5f74254c632a2d03,1580498785,"fix(common): remove extra & in http params (#34896)

Previous to this commit, HTTP params like `{ a: '1', b: [], c: '3' }` resulted in a request like `a=1&&c=3` (note the double &&).

The ideal fix would probably be to stringify these params to `a=1&b=&c=3` like we do for empty string values. But that might be breaking as some APIs may rely on the absence of the parameter.

This fixes the issue in a compatible way by just removing the extra and unnecessary `&`, resulting in `a=1&c=3`.

PR Close #34896
","['packages/common/http/src/params.ts', 'packages/common/http/test/params_spec.ts']","HTTP params with empty array values are resulting in double ampersands (&&) in the request string, causing extra and unnecessary characters."
cf37c003ffc4e1307a174d6f58e5ed435db68e7e,1576710289,"feat(ivy): error in ivy when inheriting a ctor from an undecorated base (#34460)

Angular View Engine uses global knowledge to compile the following code:

```typescript
export class Base {
  constructor(private vcr: ViewContainerRef) {}
}

@Directive({...})
export class Dir extends Base {
  // constructor inherited from base
}
```

Here, `Dir` extends `Base` and inherits its constructor. To create a `Dir`
the arguments to this inherited constructor must be obtained via dependency
injection. View Engine is able to generate a correct factory for `Dir` to do
this because via metadata it knows the arguments of `Base`'s constructor,
even if `Base` is declared in a different library.

In Ivy, DI is entirely a runtime concept. Currently `Dir` is compiled with
an ngDirectiveDef field that delegates its factory to `getInheritedFactory`.
This looks for some kind of factory function on `Base`, which comes up
empty. This case looks identical to an inheritance chain with no
constructors, which works today in Ivy.

Both of these cases will now become an error in this commit. If a decorated
class inherits from an undecorated base class, a diagnostic is produced
informing the user of the need to either explicitly declare a constructor or
to decorate the base class.

PR Close #34460
","['packages/compiler-cli/ngcc/src/analysis/decoration_analyzer.ts', 'packages/compiler-cli/ngcc/test/migrations/undecorated_parent_migration_spec.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/diagnostics.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/directive.ts', 'packages/compiler-cli/src/ngtsc/annotations/test/directive_spec.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/code.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","In Ivy, when a decorated class inherits from an undecorated base, it results in a missing factory function for the base class and provides no clear diagnostic message to users."
6570292672607264c669069e0fe8a52e2d223d1f,1602861194,"feat(core): create a Trusted Types policy for JIT compiler (#39210)

Introduce a Trusted Types policy for use by Angular's JIT compiler named
angular#unsafe-jit. As the compiler turns arbitrary untrusted strings
into executable code at runtime, using Angular's main Trusted Types
policy does not seem appropriate, unless it can be ensured that the
provided strings are indeed trusted. Until then, this JIT policy can be
allowed by applications that rely on the JIT compiler but want to
enforce Trusted Types, knowing that a compromise of the JIT compiler can
lead to arbitrary script execution. In particular, this is required for
enabling Trusted Types in Angular unit tests, since they make use of the
JIT compiler.

Also export the internal Trusted Types definitions from the core package
so that they can be used in the compiler package.

PR Close #39210
",['packages/compiler/src/output/output_jit_trusted_types.ts'],"Angular's JIT compiler is converting untrusted strings into executable code at runtime without a reliable Trusted Types policy, risking potential script execution if the JIT compiler is compromised."
a7d1e65a51d91908559386933c9c3022d8698485,1623689648,"test(docs-infra): fix warnings in `ThemeToggleComponent` unit tests. (#42259)

due to unknown `<mat-icon>` element

This commit fixes some warnings in the unit tests of the
`ThemeToggleComponent`, which were caused by the following:

- The `<mat-icon>` element used in `ToggleThemeComponent`'s template was
  not declared in tests.
- The `dark-theme.css` and `light-theme.css` files requested by
  `ToggleThemeComponent` were not available.

PR Close #42259
",['aio/src/app/shared/theme-picker/theme-toggle.component.spec.ts'],Unit tests of `ThemeToggleComponent` are throwing warnings due to undecalred `<mat-icon>` element and unavailable `dark-theme.css` and `light-theme.css` files.
c3f14bb7a55ff7a15be4f7a4fa7daa47321468cc,1578606478,"feat(ivy): improve `ExpressionChangedAfterChecked` error message for attributes (#34505)

This commit improves `ExpressionChangedAfterChecked` error message for attributes by including attribute name and the content of the entire expression that contains interpolation(s). In order to achieve that, metadata is now stored in `TData` array when `attribute` and `attributeInterpolate` instructions are being called (similar to `property` and `propertyInterpolate` instructions).

PR Close #34505
","['packages/core/src/render3/instructions/attribute.ts', 'packages/core/src/render3/instructions/attribute_interpolation.ts', 'packages/core/src/render3/instructions/property_interpolation.ts', 'packages/core/test/acceptance/change_detection_spec.ts']","`ExpressionChangedAfterChecked` error message for attributes lacks specificity, making it impossible to identify the attribute name and full expression containing interpolations."
72092ebd26d6670a7dd02f6db5515d2afd27c4d6,1639582573,"feat(forms): Allow a FormControl to use initial value as default. (#44434)

Allow a FormControl to be reset to its initial value. Provide this feature via a new option in a FormControlOptions interface, based on AbstractControlOptions.

Also, expose the default value as part of the public API. This is part of a feature that has been requested elsewhere (e.g. in #19747).

This was originally proposed as part of typed forms. As discussed in the GDE session (and after with akushnir/alxhub), it is likely better to just reuse the initial value rather than accepting an additional default.

It is desirable to land this separately in order to reduce the scope of the typed forms PR, and make it a types-only change.

Pertains to issue #13721.

PR Close #44434
","['packages/forms/src/form_builder.ts', 'packages/forms/src/forms.ts', 'packages/forms/src/model.ts', 'packages/forms/test/form_control_spec.ts']","FormControl doesn't have the capability to reset to its initial value, and default value isn't exposed as part of the public API."
0264f76e94cb175ff56344499246c0967d91071f,1609959280,"fix(language-service): LSParseConfigHost.resolve should not concat abs paths (#40242)

`ts.server.ServerHost.resolvePath()` is different from Angular's
`FileSystem.resolve()` because the signature of the former is

```ts
resolvePath(path: string): string;	// ts.server.ServerHost
```

whereas the signature of the latter is
```ts
resolve(...paths: string[]): AbsoluteFsPath; // FileSystem on compiler-cli
```

The current implementation calls `path.join()` to concatenate all the input
paths and pass the result to `ts.server.ServerHost.resolvePath()`, but doing
so results in filenames like
```
/foo/bar/baz/foo/bar/baz/tsconfig.json
```
if both input paths are absolute.

`ts.server.ServerHost` should not be used to implement the
`resolve()` method expected by Angular's `FileSystem`.
We should use Node's `path.resolve()` instead, which will correctly collapse
the absolute paths.

Fix https://github.com/angular/vscode-ng-language-service/issues/1035

PR Close #40242
","['packages/language-service/ivy/adapters.ts', 'packages/language-service/ivy/test/adapters_spec.ts']",Concatenation of absolute paths in LSParseConfigHost.resolve results in duplicated paths. This is escalating to incorrect processing of absolute file paths in the language service.
a8efc605ea9c3cf03d85b5c567218202e304fef9,1694686265,"feat(zone.js): remove legacy files and access to deep imports (#51752)

This commit removes access to deep imports and `zone-testing-bundle` and `zone-testing-node-bundle`

This commit removed access to deep and legacy `dist` imports. `zone-testing-bundle` and `zone-testing-node-bundle` are also no longer generated.

BREAKING CHANGE:
Deep and legacy `dist/` imports like `zone.js/bundles/zone-testing.js` and `zone.js/dist/zone` are no longer allowed. `zone-testing-bundle` and `zone-testing-node-bundle` are also no longer part of the package.

The proper way to import `zone.js` and `zone.js/testing` is:
```js
import 'zone.js';
import 'zone.js/testing';
```

PR Close #51752
","['packages/zone.js/bundles.bzl', 'packages/zone.js/lib/browser/rollup-test-main.ts', 'packages/zone.js/test/karma_test.bzl', 'packages/zone.js/test/npm_package/npm_package.spec.ts']","Deep and legacy `dist/` imports like `zone.js/bundles/zone-testing.js` and `zone.js/dist/zone` are still accessible. Also, `zone-testing-bundle` and `zone-testing-node-bundle` are unnecessarily part of the package."
4d95c3d39acd76fe7f1bd4b9488bc9c8bc0d6f06,1578673869,"refactor(language-service): rename expression completions method (#34518)

This commit renames `addAttributeValuesToCompletions`, which generates
expression completions and is not exclusive to processing attributes, to
`processExpressionCompletions`. Also removes the expression completion
logic in `visitBoundText` for a call to `processExpressionCompletions`.

The conditional branch in `visitBoundText` is also removed. This branch
was added in one of the first commits to the language service
(519a32445407136b9d6b969cd0be6aa42ca73055) and appears to be
unnecessary, as the expression AST is constructed from the template
position anyway.

PR Close #34518
",['packages/language-service/src/completions.ts'],"The method `addAttributeValuesToCompletions` in the language service implies processing attributes exclusively but it generates general expression completions, causing confusion regarding its purpose. Additionally, redundant expression completion logic exists in `visitBoundText`."
704775168d7c0cced9aff3da2b2b733b53e9fb35,1573681771,"fix(ngcc): generate correct metadata for classes with getter/setter properties (#33514)

While processing class metadata, ngtsc generates a `setClassMetadata()`
call which (among other things) contains info about property decorators.
Previously, processing getter/setter pairs with some of ngcc's
`ReflectionHost`s resulted in multiple metadata entries for the same
property, which resulted in duplicate object keys, which in turn causes
an error in ES5 strict mode.

This commit fixes it by ensuring that there are no duplicate property
names in the `setClassMetadata()` calls.

In addition, `generateSetClassMetadataCall()` is updated to treat
`ClassMember#decorators: []` the same as `ClassMember.decorators: null`
(i.e. omitting the `ClassMember` from the generated `setClassMetadata()`
call). Alternatively, ngcc's `ReflectionHost`s could be updated to do
this transformation (`decorators: []` --> `decorators: null`) when
reflecting on class members, but this would require changes in many
places and be less future-proof.

For example, given a class such as:

```ts
class Foo {
  @Input() get bar() { return 'bar'; }
  set bar(value: any) {}
}
```

...previously the generated `setClassMetadata()` call would look like:

```ts
ɵsetClassMetadata(..., {
  bar: [{type: Input}],
  bar: [],
});
```

The same class will now result in a call like:

```ts
ɵsetClassMetadata(..., {
  bar: [{type: Input}],
});
```

Fixes #30569

PR Close #33514
","['packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/ngcc/test/rendering/renderer_spec.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/metadata.ts', 'packages/compiler-cli/src/ngtsc/annotations/test/metadata_spec.ts']","Getter/setter pairs in classes lead to duplicate metadata entries and object keys, resulting in errors in ES5 strict mode when processing ngcc's `ReflectionHost`s."
6f11a580406877e440c43df31fae3d5f120cafed,1656623147,"feat(compiler): Add extended diagnostic to warn when text attributes are intended to be bindings (#46161)

https://angular.io/guide/attribute-binding#attribute-class-and-style-bindings

Angular supports `attr.`, `style.`, and `class.` binding prefixes to
bind attributes, styles, and classes. If the key does not have the
binding syntax `[]` or the value does not have an interpolation `{{}}`,
the attribute will not be interpreted as a binding.

This diagnostic warns the user when the attributes listed above will not
be interpreted as bindings.

resolves #46137

PR Close #46161
","['packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/extended_template_diagnostic_name.ts', 'packages/compiler-cli/src/ngtsc/typecheck/extended/checks/text_attribute_not_binding/index.ts', 'packages/compiler-cli/src/ngtsc/typecheck/extended/index.ts', 'packages/compiler-cli/src/ngtsc/typecheck/extended/test/checks/text_attribute_not_binding/text_attribute_not_binding_spec.ts']","When text attributes lack either the binding syntax `[]` or interpolation `{{}}`, they are not interpreted as bindings, leading to potential confusion and errors."
df7f3b04b5189401814da29433f64c7915660fe9,1596752577,"fix(service-worker): fix the chrome debugger syntax highlighter (#38332)

The Chrome debugger is not able to render the syntax properly when the
code contains backticks. This is a known issue in Chrome and they have an
open [issue](https://bugs.chromium.org/p/chromium/issues/detail?id=659515) for that.
This commit adds the work-around to use double backslash with one
backtick ``\\` `` at the end of the line.

This can be reproduced by running the following command:

`yarn bazel test //packages/forms/test --config=debug`

When opening the chrome debugger tools, you should see the correct
code highlighting syntax.

PR Close #38332
",['packages/service-worker/worker/src/driver.ts'],"Chrome debugger fails to appropriately render syntax when code contains backticks, affecting readability during debugging sessions."
9dedb624944d16c09e1648086abd65ca64288f0b,1608067852,"test(compiler-cli): fix i18n error tests (#40026)

Refactors the i18n error tests to be unit tests in ngtsc_spec.ts. There
is two reasons for doing this.

First is that the tests in compliace_old expected an expection to be be
thrown but did not fail the test if no exception was thrown. That means
that this test could miss catching a bug. It is also a big hacky to call
compile directly and expect an exception to be thrown for diagnostics.

Also, this can easily be unit tested and an end-to-end test is not
necessary since we are not making use of the goldfiles for these tests.

It is easier to maintain and less hacky to validate that we get helpful
error messages when nesting i18n sections by calling getDiagnostics
directly.

PR Close #40026
","['packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/errors/GOLDEN_PARTIAL.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/errors/nested_i18n_msg.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/errors/nested_i18n_msg_with_ng-containers.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/errors/nested_i18n_msg_with_tags.ts', 'packages/compiler-cli/test/compliance_old/r3_view_compiler_i18n_spec.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","The i18n error tests currently do not fail if no exception is thrown and are unnecessarily end-to-end rather than unit tests, posing a risk of missing bugs."
107f15df033c955ea7698690d2bbeb1ee34fa325,1622665434,"refactor(dev-infra): add JSDoc throws description to assertion functions (#42454)

Adds the JSDoc `@throws` annotation to functions that would throw
within in the ng-dev tool. We want to add `@throws` so clearly
communicate if the invocation of a function results in errors or not.

This helps if IDEs show the `@throws` annotation on invocation, or
if TS ever lands a feature like Java `throws`, with more fine-grained
and typed error handling.

PR Close #42454
",['dev-infra/pr/merge/pull-request.ts'],Lack of `@throws` annotations in ng-dev tool functions leads to unclear communication of potential errors on function invocation.
0eacba5829208f1390dfec35e59903bd85f36ae6,1591716452,"fix(dev-infra): rebase pr script not working (#37489)

The dev-infra rebase PR script currently does not work due to
the following issues:

1. The push refspec is incorrect. It refers to the `base` of the PR, and
not to the `head` of the PR.
2. The push `--force-with-lease` option does not work in a detached head
as no remote-tracking branch is set up.

PR Close #37489
",['dev-infra/pr/rebase/index.ts'],"The `dev-infra` rebase PR script fails as the push refspec refers to the PR's `base` instead of `head`, and `--force-with-lease` cannot function in a detached head environment due to the absence of a remote-tracking branch."
d0dd69f17744a973fac81ff3b2cd8ad614c71aa1,1568151055,"test: expand the `verify-codeownership.js` script to also check packages (#32577)

The `aio/scripts/verify-codeownership.js` script (formerly
`verify-docs-codeownership.js`) can be used to verify whether there are
directories in the codebase that don't have a codeowner (in
`.github/CODEOWNERS`) and vice versa. It does not aim to cover all files
and directories, but do a coarse check on some important (or frequently
changing) directories.

Previously, the script only checked for API docs examples (in
`packages/examples/`) and guides (and related images and example) (in
`aio/content/`).

This commit expands the script to also check for packages (i.e.
top-level directories in `packages/`). It also renames the script from
`verify-docs-codeownership.js` to `verify-codeownership.js`, to better
reflect its new behavior.

PR Close #32577
",['aio/scripts/verify-codeownership.js'],"There are directories in the codebase, specifically in 'packages/', that do not have a codeowner listed in '.github/CODEOWNERS', and vice versa, which the verify-codeownership.js script currently does not check for."
034de06ab1a5927c570047dae5a485df4fbb381b,1551292421,"fix(ivy): avoid duplicate i18n consts to be present in generated output (#28967)

Prior to this change, the logic that outputs i18n consts (like `const MSG_XXX = goog.getMsg(...)`) didn't have a check whether a given const that represent a certain i18n message was already included into the generated output. This commit adds the logic to mark corresponding i18n contexts after translation was generated, to avoid duplicate consts in the output.

PR Close #28967
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/i18n/context.ts', 'packages/compiler/src/render3/view/template.ts']","The current i18n constant output logic does not check if a given constant representing an i18n message has been previously included in the generated output, leading to duplicate constants."
077f51685a87a0f674e4f53cf7269ad4a731c7db,1600109677,"perf(compiler-cli): only emit directive/pipe references that are used (#38539)

For the compilation of a component, the compiler has to prepare some
information about the directives and pipes that are used in the template.
This information includes an expression for directives/pipes, for usage
within the compilation output. For large NgModule compilation scopes
this has shown to introduce a performance hotspot, as the generation of
expressions is quite expensive. This commit reduces the performance
overhead by only generating expressions for the directives/pipes that
are actually used within the template, significantly cutting down on
the compiler's resolve phase.

PR Close #38539
",['packages/compiler-cli/src/ngtsc/annotations/src/component.ts'],"Compilation of larger NgModule scopes leads to performance issues due to excessive generation of expressions for directives/pipes, even those not used within the template."
e57691c9c5f8456f7dc75180aa1e80330da560fe,1629397452,"feat(core): Add migration to update empty routerLinks in templates (#43176)

The previous behavior of `RouterLink` for `null` and `undefined` inputs was to treat
the input the same as `[]` or `''`. This creates several unresolvable issues with
correctly disabling the links because `commands = []` does not behave the same
as disabling a link. Instead, it navigates to the current page, but will also
clear any fragment and/or query params.

The new behavior of the `routerLink` input will be to completely disable navigation
for `null` and `undefined` inputs. For HTML Anchor elements, this will also mean
removing the `href` attribute.

Migration for change in #43087

PR Close #43176
","['packages/core/schematics/migrations/router-link-empty-expression/analyze_template.ts', 'packages/core/schematics/migrations/router-link-empty-expression/angular/html_routerlink_empty_expr_visitor.ts', 'packages/core/schematics/migrations/router-link-empty-expression/index.ts', 'packages/core/schematics/test/routerlink_empty_expr_migration_spec.ts']","`RouterLink` handles `null` and `undefined` inputs same as `[]` or `''`, leading to improper link disabling and navigation issues, in some cases resulting in query parameters being cleared."
4c8766573d306dbd948cb513b769d581723a4d97,1600961712,"refactor(language-service): Update hybrid visitor to use keySpan for bound attributes (#38955)

The keySpan in bound attributes provides more fine-grained location information and can be used
to disambiguate multiple bound attributes in a single microsyntax binding. Previously,
this case could not distinguish between the two different attributes because
the sourceSpans were identical and valueSpans would not match if the cursor
was located in a key.

PR Close #38955
","['packages/language-service/ivy/hybrid_visitor.ts', 'packages/language-service/ivy/test/hybrid_visitor_spec.ts']","The hybrid visitor has issues disambiguating multiple bound attributes in a single microsyntax binding, due to identical sourceSpans and non-matching valueSpans when the cursor is located in a key."
19396769e297667db3f1fc756b298cbfd79eb7ea,1582058568,"ci: get rid of the `CI_CHROMEDRIVER_VERSION_ARG` env var (#35381)

Previously, we needed to manually specify a ChromeDriver version to
download on CI that would be compatible with the browser version
provided by the docker image used to run the tests. This was kept in the
`CI_CHROMEDRIVER_VERSION_ARG` environment variable.

With recent commits, we use the browser provided by `puppeteer` and can
determine the correct ChromeDriver version programmatically. Therefore,
we no longer need the `CI_CHROMEDRIVER_VERSION_ARG` environment
variable.

NOTE:
There is still one place (the `bazel-schematics` integration project)
where a hard-coded ChromeDriver version is necessary. Since I am not
sure what is the best way to refactor the tests to not rely on a
hard-coded version, I left it as a TODO for a follow-up PR.

PR Close #35381
","['.circleci/env.sh', 'integration/bazel-schematics/test.sh']","The environment variable `CI_CHROMEDRIVER_VERSION_ARG` is no longer necessary due to updates that allow programmatic ChromeDriver version determination, but it's still being used in the `bazel-schematics` integration project."
7d7fc48e58f51e574f3a5c1174cd7d95b515ddc8,1687373336,"refactor(core): tweak runtime deps tracker to accommodate JIT requirements. (#50606)

The previous API design for the runtime deps tracker was done with only local compilation in mind. Now if we want to use it for JIT as well then some new requirements come along which are addressed by this commit as follows:
  - JIT scopes need distinct sets for directive and pipes. Thus the ScopeData interface is modified to include these info.
  - JIT needs access to scopes for various operations. So methods `getNgModuleScope` and `getStandaloneComponentScope` are added to the tracker's public api.
  - Test bed needs to clear the scope cache for its override mechanism. So method `clearScopeCacheFor` is added to the tracker's public api for this reason.

PR Close #50606
","['packages/core/src/render3/deps_tracker/api.ts', 'packages/core/src/render3/deps_tracker/deps_tracker.ts']","The current runtime deps tracker lacks the capability to handle JIT requirements including distinct sets for directives and pipes, access to scopes for operations, and cache clearance for the test bed's override mechanism."
f13295f3a3a1d622d15cf8339360d53feba824b5,1650042386,"perf(router): cancel the navigation instantly if at least one resolver doesn't emit any value (#45621)

Recently the navigation was on hold even at least one resolver didn't emit any value and completed, but another ones still are in progress to resolve any value. The changes cancel the navigation instantly if at least one resolver doesn't emit any value and completed.

PR Close #45621
","['packages/router/src/operators/resolve_data.ts', 'packages/router/test/operators/resolve_data.spec.ts']","Navigation is still operational even when at least one resolver doesn't emit any value and completes, causing unnecessary delays in navigation cancellation process."
3c6258c85b37535c1178e84509b7c9ed3a1359e4,1695401264,"fix(router): Remove deprecated setupTestingRouter function (#51826)

The `setupTestingRouter` function is a factory function for creating a
new instance of the `Router`. This function is effectively a no-op.
Developers should use `RouterModule.forRoot` or `provideRouter` in tests
instead.

BREAKING CHANGE: The `setupTestingRouter` function has been removed. Use
`RouterModule.forRoot` or `provideRouter` to setup the `Router` for
tests instead.

PR Close #51826
",['packages/router/testing/src/router_testing_module.ts'],"`setupTestingRouter` function for creating a new instance of `Router` has become redundant, yet it's still in use. Its presence could lead to confusion as 'RouterModule.forRoot' or 'provideRouter' should be used in tests."
58c1faf5073fea15f531bacb5042275acbe11456,1680288969,"refactor(core): update `bootstrapApplication` to get `NgZone` from providers (#49557)

This commit updates the `bootstrapApplication` method to get the
`NgZone` instance from DI. This will allow a future change to enable
developers to configure `NgZone` in DI rather than adding the options to
the top level like in `bootstrapModuleFactory` (which is done in order
to get the NgZone instance without going through DI).

PR Close #49557
","['packages/core/src/application_ref.ts', 'packages/core/src/render3/ng_module_ref.ts']","'NgZone' instance cannot be configured in DI and has to be retrieved at top level in 'bootstrapModuleFactory', limiting the configuration options for developers."
7193e151d7f2e8a8197aa6cb9b2464444b4ff43a,1572391361,"build: update to @bazel/bazel 1.0.0 (#33476)

Also removes `build:remote --spawn_strategy=remote` from .bazelrc. It seems that with Bazel 1.0.0 setting `--incompatible_list_based_execution_strategy_selection=false` no longer works around the issue with npm_package that it did when it was added. The error that was originally observed has returned after updating to Bazel 1.0.0:

```
ERROR: /home/circleci/ng/packages/angular_devkit/build_optimizer/BUILD:66:1: Assembling npm package packages/angular_devkit/build_optimizer/npm_package failed: No usable spawn strategy found for spawn with mnemonic Action. Your --spawn_strategy, --genrule_strategy or --strategy flags are probably too strict. Visit https://github.com/bazelbuild/bazel/issues/7480 for migration advice
```

This commit removes both `—incompatible_list_based_execution_strategy_selection=false` as well as `build:remote --spawn_strategy=remote` which means that Bazel will do the default behavior of picking the first available strategy from the default list, which is `remote,worker,sandboxed,local`. See https://github.com/bazelbuild/bazel/issues/7480 for more details.

Not updating to Bazel 1.1.0 yet due to a docker permissions CI issue that was observed on the angular repo that is unresolved. See https://github.com/angular/angular/pull/33367#issuecomment-547643246.

PR Close #33476
",['packages/bazel/package.bzl'],"Updating to Bazel 1.0.0 reintroduces an error with npm_package that was previously patched with `--incompatible_list_based_execution_strategy_selection=false`, indicating the workaround is no longer effective."
65597d650b3d9de10255d544c45a0c92fde877f2,1637174200,"refactor(forms): inherit `ngOnChanges` hooks from the base class (#43945)

This commit updates the code of the min/max and minlength/maxlength validator directives to inherit `ngOnChanges` hooks from the base class (the `AbstractValidatorDirective` one), rather than implementing the hooks on the child classes. This was needed to avoid issues with hooks inheritance in ViewEngine, but since it's deprecated, the code can be cleaned up.

PR Close #43945
",['packages/forms/src/directives/validators.ts'],Issues with hooks inheritance in ViewEngine in Child classes of `AbstractValidatorDirective` are leading to complications in min/max and minlength/maxlength validator directives.
d3531a7d415f2e90278edfceadafae6a819d08a2,1622665375,"fix(dev-infra): breaking change and deprecation notes incorrectly picked up (#42436)

If a commit message currently mentions the breaking change or
deprecation note keywords, the commit message parse logic
accidentally picks up the note. This could then accidentally
prevent the commit from being merged (e.g. if the commit targets
the patch branch but mentioned the `BREAKING CHANGE: ` marker).

This commit switches the commit message notes pattern to only
capture notes at the beginning of a line (also allowing accidental
whitespace). This matches with the format we describe in our
contribution guide, as well as with our commit message validation
logic that also assumes notes at the beginning of a line.

PR Close #42436
","['dev-infra/commit-message/parse.spec.ts', 'dev-infra/commit-message/parse.ts', 'dev-infra/ng-dev.js']","Commit message parsing logic incorrectly identifies breaking change or deprecation notes anywhere within the commit, potentially hindering commit merging."
0cf94e3ed531c4a51ecfbea36a0af551b4a20dd8,1568058913,"refactor(ngcc): remove unused `EntryPointProcessingMetadata` data and types (#32427)

Previously, `ngcc` needed to store some metadata related to the
processing of each entry-point. This metadata was stored in a `Map`, in
the form of `EntryPointProcessingMetadata` and passed around as needed.

After some recent refactorings, it turns out that this metadata (with
its only remaining property, `hasProcessedTypings`) was no longer used,
because the relevant information was extracted from other sources (such
as the `processDts` property on `Task`s).

This commit cleans up the code by removing the unused code and types.

PR Close #32427
","['packages/compiler-cli/ngcc/src/execution/api.ts', 'packages/compiler-cli/ngcc/src/execution/single_process_executor.ts', 'packages/compiler-cli/ngcc/src/execution/utils.ts', 'packages/compiler-cli/ngcc/src/main.ts']",The `EntryPointProcessingMetadata` in `ngcc` along with its property `hasProcessedTypings` are no longer used causing redundant code in the system.
31f210bf2cd8a5cc8245c05a30ae3b8f8b9d826a,1677601280,"fix(router): Router.createUrlTree should work with any ActivatedRoute (#48508)

This change makes the `createUrlTreeFromSnapshot` added in #45877 the
default and only behavior in the Router. This now addreses #42191, #38276, #22763,
and #48472 without needing to create custom handling to
call `createUrlTreeFromSnapshot` (since it's now called by `Router.createUrlTree`).

BREAKING CHANGE: Tests which mock `ActivatedRoute` instances may need to be adjusted
because Router.createUrlTree now does the right thing in more
scenarios. This means that tests with invalid/incomplete ActivatedRoute mocks
may behave differently than before. Additionally, tests may now navigate
to a real URL where before they would navigate to the root. Ensure that
tests provide expected routes to match.
There is rarely production impact, but it has been found that relative
navigations when using an `ActivatedRoute` that does not appear in the
current router state were effectively ignored in the past. By creating
the correct URLs, this sometimes resulted in different navigation
behavior in the application. Most often, this happens when attempting to
create a navigation that only updates query params using an empty
command array, for example `router.navigate([], {relativeTo: route,
queryParams: newQueryParams})`. In this case, the `relativeTo` property
should be removed.

PR Close #48508
",['packages/router/src/create_url_tree_strategy.ts'],"`Router.createUrlTree` does not work correctly with some instances of `ActivatedRoute`, leading to improper URL creation and navigation behavior in the application."
eb5412d76fb1a836f7b6880214f4f57f84d81974,1565373040,"fix(ivy): reuse compilation scope for incremental template changes. (#31932)

Previously if only a component template changed then we would know to
rebuild its component source file. But the compilation was incorrect if the
component was part of an NgModule, since we were not capturing the
compilation scope information that had a been acquired from the NgModule
and was not being regenerated since we were not needing to recompile
the NgModule.

Now we register compilation scope information for each component, via the
`ComponentScopeRegistry` interface, so that it is available for incremental
compilation.

The `ComponentDecoratorHandler` now reads the compilation scope from a
`ComponentScopeReader` interface which is implemented as a compound
reader composed of the original `LocalModuleScopeRegistry` and the
`IncrementalState`.

Fixes #31654

PR Close #31932
","['packages/compiler-cli/ngcc/src/analysis/decoration_analyzer.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/annotations/test/component_spec.ts', 'packages/compiler-cli/src/ngtsc/incremental/src/state.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/src/ngtsc/scope/index.ts', 'packages/compiler-cli/src/ngtsc/scope/src/component_scope.ts', 'packages/compiler-cli/src/ngtsc/scope/src/local.ts', 'packages/compiler-cli/test/ngtsc/incremental_spec.ts']",Incremental recompilation of changed component templates isn't correctly capturing and utilizing NgModule compilation scope information.
7ee121f595a47338b31098ae51a6f91d80c8fdce,1646077402,"feat(forms): Add untyped versions of the model classes for use in migration. (#45205)

We had previously introduced an `AnyForUntypedForms` type alias. However, given our updated migration plan, we actually want to use aliases for the model classes themselves. This commit introduces these aliases, and adds them to the public API. It must be merged before the types, in order to migrate google3.

PR Close #45205
","['packages/forms/src/forms.ts', 'packages/forms/src/model.ts']","Untyped form models required for migration aren't aliased under current migration plan, causing issues in moving google3 to said plan."
784671597e0b28d9696bdc325b426a6c7be0cd8e,1628272177,"fix(router): Allow question marks in query param values (#31187)

According to the URI spec, question mark characters are valid in query data,
so these should accepted by the param parsing.

See https://tools.ietf.org/html/rfc3986#section-3.4

Fixes #31116

BREAKING CHANGE: The default url serializer would previously drop
everything after and including a question mark in query parameters. That
is, for a navigation to `/path?q=hello?&other=123`, the query
params would be parsed to just `{q: 'hello'}`. This is
incorrect because the URI spec allows for question mark characers in
query data. This change will now correctly parse the params for the
above example to be `{v: 'hello?', other: '123'}`.

PR Close #31187
","['packages/router/src/url_tree.ts', 'packages/router/test/url_tree.spec.ts']","The current URL serializer drops the part of the query parameter value after (and including) a question mark, which is incorrect as per the URI specification."
bed680cff8bef6092e1076ac228a25492d463e13,1565372363,"docs(forms): use a number as input value for formControlName (#30606)

PR #29473 changed the docs to use a string as the input value of `formControlName`, as it used to only accept a string.
This has been changed, and `formControlName` now accepts a string or a number, so the example in the docs can use a binding as they used to.

PR Close #30606
",['packages/examples/forms/ts/nestedFormArray/nested_form_array_example.ts'],"The `formControlName` documentation incorrectly states that it only accepts strings as input, omitting its ability to accept numbers as well."
5430d2bc66aa1a18ac17aadccf8d0b64cfc155ab,1548269974,"fix(ivy): NgOnChangesFeature no longer included in hello_world (#28187)

- Wraps the NgOnChangesFeature in a factory such that no side effects occur in the module root
- Adds comments to ngInherit property on feature definition interface to help guide others not to make the same mistake
- Updates compiler to generate the feature properly after the change to it being a factory
- Updates appropriate tests

PR Close #28187
","['packages/compiler-cli/test/compliance/r3_compiler_compliance_spec.ts', 'packages/compiler/src/render3/view/compiler.ts', 'packages/core/src/render3/features/ng_onchanges_feature.ts', 'packages/core/src/render3/interfaces/definition.ts', 'packages/core/test/render3/common_with_def.ts', 'packages/core/test/render3/host_binding_spec.ts', 'packages/core/test/render3/inherit_definition_feature_spec.ts', 'packages/core/test/render3/lifecycle_spec.ts', 'packages/core/test/render3/view_container_ref_spec.ts', 'tools/public_api_guard/common/common.d.ts']",The `NgOnChangesFeature` in `hello_world` causes unexpected side effects in the module root due to improper feature generation and lack of guiding comments.
0bd01ca64aa65f29ef651117efbc1015a4baf441,1636576939,"refactor(core): move outdated comment to view.ts (#44099)

remove the comment suggesting to use a const enum for ViewEncapsulation in
the renderer3/definitions.ts file and add a similar comment in the
view.ts file in which the enum is defined

Note: the new comment does not contain the suggestion of changing `None`
to `0` as it is unclear what benefits that would bring (for more info
see: https://github.com/angular/angular/pull/44099#discussion_r744157686)

PR Close #44099
","['packages/core/src/metadata/view.ts', 'packages/core/src/render3/definition.ts']",Outdated comment in renderer3/definitions.ts file about using const enum for ViewEncapsulation doesn't fit with its current definition and its implications are unclear.
fc7e77934fd9b5d9aacea0c5a132d7dbd13bcd3b,1594069057,"refactor(docs-infra): decouple showing the top-menu in top-bar from showing the sidenav (#37938)

As part of angular.io's responsive layout, the following rules are
applied:
- On wide screens, a menu is shown in the top-bar and the sidenav is
  shown side-by-side with the docs content.
- On narrow screens, the top-menu is moved from the top-bar to the
  sidenav and the sidenav is closed by default and floats over the
  content when manually opened.

Previously, the break-points at which the top-menu was shown in the
top-bar and the sidenav was shown side-by-side with the content were the
same (using a single variable).

This commit decouples the two break-points to make it possible to use
different values in the future.

PR Close #37938
","['aio/src/app/app.component.spec.ts', 'aio/src/app/app.component.ts']","The current responsive layout coupling of top-menu display with the side-navigation visibility causes usability issues, needing different break-points to show/hide these elements on varying screen sizes."
3e5fa569567910701b43bb519f2b2a43a820b810,1590082523,"fix(dev-infra): ensure ts-node is registered with commonjs as module (#37217)

We recently added support for automatic registration of `ts-node`
when the dev-infra configuration is loaded.

In addition to registering ts-node, we should also ensure that the
`commonjs` module is set up. By default, `ts-node` would use ES module
imports that are not supported by default in NodeJS.

PR Close #37217
",['dev-infra/utils/config.ts'],Automatic registration of `ts-node` in dev-infra configuration is incompatible with NodeJS due to default usage of ES module imports.
6c6d43086f542003ecf355f512e197392c0ed728,1547234289,"fix(ivy): make module registration by id idempotent (#28033)

An @NgModule with an 'id' property has its type registered in a global map
of modules by id. This happens during compilation of the module.

In Ivy, modules are first compiled when the @NgModule decorator executes.
In tests, they might be passed again through the TestBed's compiler,
resulting in a second compilation and registration.

Before this fix, this second registration would cause an error, as the id
was previously registered. This commit makes the registration idempotent,
so if the same module type is being registered for the same id then no
error is thrown.

Testing strategy: future commits change the way the TestBed compiles
modules, causing tests to become sensitive to this bug if not fixed.

PR Close #28033
",['packages/core/src/linker/ng_module_factory_loader.ts'],"When an @NgModule with an 'id' property is compiled more than once, as in tests using TestBed's compiler, duplicate registration leads to an error."
1d12c50f63f90c91636185b2287e31e9c0291121,1618347107,"fix(compiler-cli): autocomplete literal types in templates. (#41456)

This adds string literals, number literals, `true`, `false`, `null` and
`undefined` to autocomplete results in templates.

For example, when completing an input of union type.

Component: `@Input('input') input!: 'a'|'b'|null;`
Template: `[input]=""|""`

Provide `'a'`, `'b'`, and `null` as autocompletion entries.

Previously we did not include literal types because we only included
results from the component context (`ctx.`) and the template scope.

PR Close #41456
","['packages/compiler-cli/src/ngtsc/typecheck/api/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/completion.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/completion.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__completion_spec.ts', 'packages/language-service/ivy/completions.ts', 'packages/language-service/ivy/test/completions_spec.ts']","Autocomplete in templates doesn't suggest string literals, number literals, `true`, `false`, `null`, and `undefined` for union types, limiting utility."
8f67c0751defe28a0fbf20440235934b6b3ee61c,1690495684,"refactor(compiler): Prepare the template pipeline to support host bindings. (#50899)

Refactor `compilation.ts` by introducing two new concepts:
1. A compilation unit, which has create and update ops. Compilations of individual views are compilation units, as are individual host bindings.
2. Aa compilation job, which has several compilation units. For example, a whole component is a compilation job, because it can have many view compilation units. A host binding compilation is a job in addition to a unit, because each host binding unit is always a singleton.

Then, we begin modifying phases to accept general compilation jobs instead of component compilations specifically, which will allow us to run them on host bindings. In particular, we update the following phases: `phaseReify`, and `phaseChaining`.

PR Close #50899
","['packages/compiler/src/expression_parser/parser.ts', 'packages/compiler/src/render3/view/compiler.ts', 'packages/compiler/src/template/pipeline/src/compilation.ts', 'packages/compiler/src/template/pipeline/src/emit.ts', 'packages/compiler/src/template/pipeline/src/ingest.ts', 'packages/compiler/src/template/pipeline/src/phases/chaining.ts', 'packages/compiler/src/template/pipeline/src/phases/reify.ts']","The current template pipeline lacks the support for host bindings due to its specific design for component compilations, making it unable to handle individual host bindings or multiple view compilation units."
9eefe25e2f324eec024e421fa5dc1703683d7840,1563922310,"fix(ivy): components created with wrong context when passing root node to component factory (#31661)

The way the `ComponentFactory.create` is set up at the moment is that if a `rootSelectorOrNode` is passed in, the root context will be injected instead of creating dedicated one for the component. As far as I can tell, there doesn't seem to be a reason to do this and nothing seems to break because of it. These changes switch to always create the root context.

PR Close #31661
","['packages/core/src/render3/component_ref.ts', 'packages/core/test/acceptance/component_spec.ts']","When passing a rootSelectorOrNode to ComponentFactory.create, the root context is wrongly injected instead of a dedicated context for the component."
f27deea003822ed46437e74f102b281f692b7811,1588024516,"fix(core): handle synthetic props in Directive host bindings correctly (#35568)

Prior to this change, animations-related runtime logic assumed that the @HostBinding and @HostListener with synthetic (animations) props are used for Components only. However having @HostBinding and @HostListener with synthetic props on Directives is also supported by View Engine. This commit updates the logic to select correct renderer to execute instructions (current renderer for Directives and sub-component renderer for Components).

This PR resolves #35501.

PR Close #35568
","['packages/core/src/render3/instructions/host_property.ts', 'packages/core/src/render3/instructions/listener.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/instructions/styling.ts', 'packages/core/src/render3/state.ts', 'packages/core/test/acceptance/host_binding_spec.ts']","Animations-related runtime logic incorrectly assumes synthetic properties used for @HostBinding and @HostListener are for Components only, neglecting their usage on Directives."
eb39633823178aefa55d1295255add980699671d,1550622237,"test(ivy): re-enable ngIf protractor test (#28845)

We previously disabled this test because we did not yet have
static query support in Ivy and the planned API would be
slightly different. Now that a static query flag is available
that works in both View Engine and Ivy, the test has been
updated to use that flag and has been turned on to run in CI.

Since the test was always unrelated to queries and was intended
to test *ngIf behavior, updating the test in this instance
seems reasonable.

PR Close #28845
","['packages/examples/common/ngIf/ts/e2e_test/ngIf_spec.ts', 'packages/examples/common/ngIf/ts/module.ts']","Previously disabled ngIf protractor test can't be run due to the lack of static query support in Ivy, leading to a testing coverage gap."
604b4e46c8fbd1e86b8eb62f2636472fd3b0207e,1605636568,"perf(compiler): optimize computation of i18n message ids (#39694)

Message ID computation makes extensive use of big integer
multiplications in order to translate the message's fingerprint into
a numerical representation. In large compilations with heavy use of i18n
this was showing up high in profiler sessions.

There are two factors contributing to the bottleneck:

1. a suboptimal big integer representation using strings, which requires
repeated allocation and conversion from a character to numeric digits
and back.
2. repeated computation of the necessary base-256 exponents and their
multiplication factors.

The first bottleneck is addressed using a representation that uses an
array of individual digits. This avoids repeated conversion and
allocation overhead is also greatly reduced, as adding two big integers
can now be done in-place with virtually no memory allocations.

The second point is addressed by a memoized exponentiation pool to
optimize the multiplication of a base-256 exponent.

As an additional optimization are the two 32-bit words now converted to
decimal per word, instead of going through an intermediate byte buffer
and doing the decimal conversion per byte.

The results of these optimizations depend a lot on the number of i18n
messages for which a message should be computed. Benchmarks have shown
that computing message IDs is now ~6x faster for 1,000 messages, ~14x
faster for 10,000 messages, and ~24x faster for 100,000 messages.

PR Close #39694
","['packages/compiler/src/i18n/big_integer.ts', 'packages/compiler/src/i18n/digest.ts', 'packages/compiler/test/i18n/big_integer_spec.ts']",Extensive use of big integer multiplications for i18n message ID computation in large compilations is causing high usage in profiler sessions due to inefficient big integer representation and repeated computation of base-256 exponents.
de19b8bb8818ea00d3949cd8f4204e5b3ef49ab0,1619459947,"fix(docs-infra): do not process generated nodes for auto-linking (#41709)

While generating the docs, when a `<code>` element is inspected for
auto-linking, the `autoLinkCode` Dgeni post-processor will break its
contents up into words and generate text nodes for those words that
should not be auto-linked.

Previously, our text node visitor would visit these generated text nodes
and try to auto-link them too. As a result, it would unnecessarily
process nodes that had already been checked (and could potentially
generate links that would otherwise be ignored).

You can see an occurrence of this issue in the
[Create the product list][1] section of the
""Getting started with Angular"" tutorial (look for `<a>`).

This commit fixes this by ensuring the visitor will skip the current
node and any nodes generated by `autoLinkCode`.

[1]: https://v11.angular.io/start#create-the-product-list

PR Close #41709
","['aio/tools/transforms/angular-base-package/post-processors/auto-link-code.js', 'aio/tools/transforms/angular-base-package/post-processors/auto-link-code.spec.js']","The `autoLinkCode` Dgeni post-processor is repeatedly and unnecessarily trying to auto-link generated text nodes already checked, potentially causing ignored links to be generated in the documentation."
13362972bb5dae606889c06ff7718502057b6b9c,1638465945,"perf(common): code size reduction of `ngFor` directive (#44315)

This commit makes several changes to the implementation of `NgForOf` to
reduce its code size in production builds:

1. The tailor-made message for an unsupported differ is fully
   tree-shaken in production builds, in favor of the exception from the
   differ factory itself.
2. The private `_perViewChange` method was changed into a free-standing
   function, to allow its name to be minimized.
3. The need for an intermediate `RecordViewTuple` was avoided by
   applying the operation in-place, instead of collecting all insertions
   into a buffer first. This is safe as the `_perViewChange` operation
   that used to be done on each `RecordViewTuple` is entirely local to
   the tuple itself. Hence, it is invariant to execution ordering which
   means that the `_perViewChange` can be executed directly during the
   `forEachOperation` loop.

PR Close #44315
",['packages/common/src/directives/ng_for_of.ts'],The `NgForOf` directive's implementation has code inefficiencies leading to unnecessarily large code size in production builds.
a01bcb8e7eaf63ac9466a78dd4d15228241da900,1643831446,"fix(platform-browser): do not run change detection when loading Hammer (#44921)

The Hammer.JS might be loaded asynchronously if the `HAMMER_LOADER` token is provided.
Its loading causes additional change detection cycles when the script `load` event is fired
and the `import()` promise resolves. Its loading doesn't have to require Angular running `tick()`
since the Hammer instance is created outside of the Angular zone anyway.

BREAKING CHANGE:

This change may cause a breaking change in unit tests that are implicitly depending on a specific
number and sequence of change detections in order for their assertions to pass.

PR Close #44921
","['packages/platform-browser/src/dom/events/hammer_gestures.ts', 'packages/platform-browser/test/dom/events/hammer_gestures_spec.ts']","Loading Hammer.JS asynchronously causes unnecessary change detection cycles due to script `load` event and promise resolution, impacting unit tests relying on specific change detection sequences."
a0c3326485548e8d9b193f5472a9b02a02d679a6,1662483730,"fix(service-worker): only consider GET requests as navigation requests (#47263)

Previously, the criteria for determining if a request was a
[navigation request][1] did not account for the request method. This
incorrectly identified HTML form submit POST requests as navigation
requests and served `index.html` instead of passing them through to the
server, thus breaking the form submission.

This commit fixes this by ensuring that only GET requests are considered
navigation requests.

> **Note**
> HTML forms with their method set to `GET` will still be affected by
> the issue. This is not a big concern, because using `GET` for form
> submission is quite uncommon and generally discouraged (due to
> limitations and security considerations).

[1]: https://angular.io/guide/service-worker-config#handling-navigation-requests

Fixes #36368

PR Close #47263
","['packages/service-worker/worker/src/app-version.ts', 'packages/service-worker/worker/test/happy_spec.ts']","HTML form submit POST requests are incorrectly identified as navigation requests in the Service Worker, leading to form submission failure as index.html is served instead."
f8941a5b6b8e673ead98d998ffed948393469e58,1588351930,"refactor(ngcc): change async locker timeout to 250 secs (#36838)

Previously the `AsyncLocker` was configured to only wait
50x500ms before timing out. This is 25secs, which is often
less than a normal run of ngcc, so the chance of a timeout
flake was quite high.

The default is now 500x500ms, which is 250secs. If this is
too high for some projects then it can be changed via the
`ngcc.config.js` project file.

PR Close #36838
",['packages/compiler-cli/ngcc/src/packages/configuration.ts'],"AsyncLocker times out too quickly (within 25 secs), causing a high chance of timeout flakes during a normal run of ngcc."
0edf6fc7f6024cc94c17f60bbb55977b631a73d2,1604936458,"ci: log commands output when deploying angular.io to Firebase (#39596)

In #39470, the `deploy-to-firebase.sh` script (used to deploy AIO to
Firebase when building an upstream branch), was replaced by an
equivalent JS script. In this new `deploy-to-firebase.js` script, we
were overly aggressive with suppressing command output, which made it
hard to investigate failures ([example failing CI job][1]).

This commit updates the `deploy-to-firebase.js` script to capture
command output as usual in the CI job logs. This makes the output
similar to the one generated by the old [deploy-to-firebase.sh][2]
script ([example CI logs][3]).

One concern with capturing command output is having the value of a
secret environment variables leaked in the logs. This is not the case
here, since:
1. The secret env vars are not printed from the commands that use them.
2. CircleCI will [mask the values of secret env vars][4] in the output.

As an extra precaution (although not strictly necessary), we run `yarn`
with the `--silent` option, which avoid echoing the executed yarn
commands.

[1]: https://circleci.com/gh/angular/angular/849310
[2]: https://github.com/angular/angular/blob/3b0b7d22109c79b4dceb/aio/scripts/deploy-to-firebase.sh
[3]: https://circleci.com/gh/angular/angular/848109
[4]: https://circleci.com/docs/2.0/env-vars/#secrets-masking

PR Close #39596
",['aio/scripts/deploy-to-firebase.js'],Overly aggressive suppression of command output in `deploy-to-firebase.js` script used for deploying AIO to Firebase makes it difficult to investigate failures in CI jobs.
852558366d2a5e8c7b2f7d9f01e8c328d3b54f85,1678309673,"refactor(core): split `ɵɵdefineDirective` and `ɵɵdefineComponent` (#49350)

Before this change `ɵɵdefineDirective` called `ɵɵdefineComponent` under the hood. This is problematic for the consistent component id generation as it could result in hash collisions for certain directives. Directives however do not require an id.

This changes moves common definition generation logic into a separate function that is re-used in `ɵɵdefineDirective` and `ɵɵdefineComponent`.

PR Close #49350
","['packages/core/src/render3/definition.ts', 'packages/core/src/render3/interfaces/type_checks.ts', 'packages/core/src/render3/util/discovery_utils.ts']","The `ɵɵdefineDirective` is causing hash collisions due to unnecessarily calling `ɵɵdefineComponent`, which generates consistent component id even for directives that don't require an id."
9186f1feea2490efa4cb1c6c95665100142c9aa6,1608745939,"feat(compiler-cli): JIT compilation of directive declarations (#40101)

The `ɵɵngDeclareDirective` calls are designed to be translated to fully
AOT compiled code during a build transform, but in cases this is not
done it is still possible to compile the declaration object in the
browser using the JIT compiler. This commit adds a runtime
implementation of `ɵɵngDeclareDirective` which invokes the JIT compiler
using the declaration object, such that a compiled directive definition
is made available to the Ivy runtime.

PR Close #40101
","['packages/compiler/src/compiler_facade_interface.ts', 'packages/compiler/src/jit_compiler_facade.ts', 'packages/compiler/src/render3/partial/api.ts', 'packages/compiler/src/render3/view/util.ts', 'packages/compiler/test/compiler_facade_interface_spec.ts', 'packages/core/src/compiler/compiler_facade_interface.ts', 'packages/core/src/core_render3_private_export.ts', 'packages/core/src/render3/index.ts', 'packages/core/src/render3/jit/partial.ts', 'packages/core/test/render3/jit/declare_directive_spec.ts', 'packages/core/test/render3/jit/matcher.ts']","`ɵɵngDeclareDirective` calls are not translated to AOT compiled code in certain cases, causing failure in making a compiled directive definition available to the Ivy runtime."
2c8579f1b4731b443aa5380034c958913997f53f,1664494775,"refactor(common): decouple preconnect checks from image loaders (#47565)

Previously the built-in image loaders for the optimized image directive
were tightly coupled to the preconnect checks infrastructure. This was
creating a problem when developers were trying to provide a loader on
a component level (or, more generally, deeper in the DI hierarchy):
- PreconnectLinkChecker is the application-level service, provided in root;
- it makes sense to provide loaders in different parts of the DI hierarchy;

This refactoring removes the PreconnectLinkChecker configuration from
the loaders infrastructure and makes it application-wide config. The
PRECONNECT_CHECK_BLOCKLIST is also a simple provider (it was a
multi-provider previously) which should make the overall configuration
easier.

PR Close #47565
","['packages/common/src/directives/ng_optimized_image/image_loaders/cloudflare_loader.ts', 'packages/common/src/directives/ng_optimized_image/image_loaders/cloudinary_loader.ts', 'packages/common/src/directives/ng_optimized_image/image_loaders/image_loader.ts', 'packages/common/src/directives/ng_optimized_image/image_loaders/imagekit_loader.ts', 'packages/common/src/directives/ng_optimized_image/image_loaders/imgix_loader.ts', 'packages/common/src/directives/ng_optimized_image/preconnect_link_checker.ts', 'packages/common/src/errors.ts', 'packages/common/test/directives/ng_optimized_image_spec.ts', 'packages/common/test/image_loaders/image_loader_spec.ts']","The built-in image loaders for the optimized image directive are tightly coupled to the preconnect checks infrastructure, hindering the ability to provide a loader on a component level or deeper in the DI hierarchy."
ae858c0504da87dfc302e6b2768f36ad9303aa4a,1622761560,"ci: extend default timeout of karma tests for legacy saucelab tests (#42473)

After testing, it seems that the flakyness we are experiencing in our legacy
saucelabs job is caused by timeouts which happen due to the karma server being
unable to serve all of the files needed for the tests fast enough while concurrent
tests are being run.

PR Close #42473
","['karma-js.conf.js', 'test-main.js']",Legacy saucelabs job experiences flakiness due to timeouts caused by the karma server being unable to serve all required files fast enough for concurrent tests.
cee207ea1124eb7f6dfda62210e324496ec29981,1657310627,"refactor(router): Simplify the prioritizeGuardValue logic (#46745)

The existing logic does something similar but in a more roundabout way.
It reads _the whole array_. If it encounters a pending value, it ignores
the remaining ones. If it hasn't encountered a pending value by the time
it hits false/UrlTree, it returns that result.

The new logic is the same, but reverses what we're looking for. Instead
of processing the whole array, we stop when we encounter an initial
value. When we encounter one that isn't `true`, that gets returned. If
we get to the end and everything was `true`, return `true`.

PR Close #46745
",['packages/router/src/operators/prioritized_guard_value.ts'],The prioritizeGuardValue logic in the router is complex and inefficient due to its roundabout method of array processing and handling pending values.
3127ba3c35acd30d79517f5d03af9592d1136ad9,1568058913,"refactor(ngcc): add support for asynchronous execution (#32427)

Previously, `ngcc`'s programmatic API would run and complete
synchronously. This was necessary for specific usecases (such as how the
`@angular/cli` invokes `ngcc` as part of the TypeScript module
resolution process), but not for others (e.g. running `ivy-ngcc` as a
`postinstall` script).

This commit adds a new option (`async`) that enables turning on
asynchronous execution. I.e. it signals that the caller is OK with the
function call to complete asynchronously, which allows `ngcc` to
potentially run in a more efficient mode.

Currently, there is no difference in the way tasks are executed in sync
vs async mode, but this change sets the ground for adding new execution
options (that require asynchronous operation), such as processing tasks
in parallel on multiple processes.

NOTE:
When using the programmatic API, the default value for `async` is
`false`, thus retaining backwards compatibility.
When running `ngcc` from the command line (i.e. via the `ivy-ngcc`
script), it runs in async mode (to be able to take advantage of future
optimizations), but that is transparent to the caller.

PR Close #32427
","['packages/compiler-cli/ngcc/index.ts', 'packages/compiler-cli/ngcc/main-ngcc.ts', 'packages/compiler-cli/ngcc/src/execution/api.ts', 'packages/compiler-cli/ngcc/src/execution/single_process_executor.ts', 'packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']","`ngcc`'s programmatic API runs and completes synchronously, which isn't suitable for all use cases such as running `ivy-ngcc` as a `postinstall` script. The synchronous operation limits the potential for efficient execution and more advanced options."
ffeea63f43e6a7fd46be4a8cd5a5d254c98dea08,1625178230,"fix(language-service): Do not override TS LS methods not supported by VE NgLS (#42727)

Historically, our Language Service was built with the potential to be a
drop-in replacement for the TypeScript Language Service with the added
benefit of being able to provide Angular-specific information as well.
While our VSCode extension does not use the Language Service in this
way, it appears that other community-contributed plugins do. We don't
really officially support this use-case but there's not real reason for
us to override the TypeScript Language Service's
implementation in the VE Angular Language Service so that it returns
`undefined`. As with other non-implemented methods, we can just allow
this to be deferred to TSLS.

fixes #42715

PR Close #42727
",['packages/language-service/src/ts_plugin.ts'],"The VE Angular Language Service overrides TypeScript Language Service's methods that it doesn't support, leading to potential issues with community-contributed plugins."
1be5d659a51d10b05bee50bd5d7cd06070198c4c,1620338054,"fix(language-service): fully de-duplicate reference and rename results (#40523)

Rather than de-duplicating results as we build them, a final de-duplication can be done at the end.
This way, there's no forgetting to de-duplicate results at some level.

Prior to this commit, results from template locations that mapped to
multiple different typescript locations would not be de-duplicated (e.g.
an input binding that is bound to two separate directives).

PR Close #40523
","['packages/language-service/ivy/language_service.ts', 'packages/language-service/ivy/references_and_rename.ts', 'packages/language-service/ivy/test/references_and_rename_spec.ts']","Duplicate results appear in reference and rename operations due to mapping from template locations to multiple TypeScript locations, leading to a need for manual de-duplication."
0d6c9d36a174f7dc6eb1029e459beecc2dfb0026,1555350834,"refactor(compiler): export static-query detection logic (#29815)

The `@angular/compiler` package currently contains the logic for determining whether
given queries are used statically or dynamically. This logic would be necessary in order
to build a schematic that leverages the Angular compiler API's in order to simulate the
query timing based on what ViewEngine computed at compilation-time/runtime.

Exporting the logic that is necessary to detect the timing should not affect the public
API as the `@angular/compiler` package is denoted as private in `PUBLIC_API.md`

PR Close #29815
","['packages/compiler/src/compiler.ts', 'packages/compiler/src/view_compiler/view_compiler.ts']","Angular compiler package contains logic to determine if queries are used statically or dynamically, which is not accessible for creating a schematic that simulates query timing based on ViewEngine computation at compilation/runtime."
3ebf9e7442205ef778da2589d51e4abab3a597bd,1651528741,"refactor(compiler-cli): improve error message formatting (#45827)

Changes the message from:

```
The component 'HelloComponent' appears in 'imports', but is not standalone
and cannot be imported directly It must be imported via an NgModule.
```
to

```
The component 'HelloComponent' appears in 'imports', but is not standalone
and cannot be imported directly. It must be imported via an NgModule.
```

PR Close #45827
",['packages/compiler-cli/src/ngtsc/scope/src/util.ts'],Error messages produced by the compiler for an incorrect component import are not clear and easily understandable.
1829542aeabd0e4d5dfb1790872a00d248cd52fd,1680028538,"fix(compiler): do not unquote CSS values (#49460)

Currently we are unsafely unquoting CSS values which in some cases causes valid values to become invalid and invalid values to become valid.

Example:
```html
<div style=""width:&quot;1px;&quot;""></div>
```

In the above case, `width` has an invalid value of `""1px""`, however the compiler will transform it to `1px` which makes it valid.

On the other hand,  in the below case
```html
<div style=""content:&quot;foo&quot;""></div>
```

`content` has a valid value of `""foo""`, but since the compiler unwraps it to `foo` it becomes invalid. For correctness, we should not remove quotes.

```js
const div = document.createElement('div');
div.style.width='""1px""';
div.style.content='foo';

div.style.width; // ''
div.style.content; // ''

div.style.width='1px';
div.style.content='""foo""';

div.style.width; // '1px'
div.style.content; // '""foo""'
```

More information about values can be found https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier

PR Close #49460
","['packages/compiler/src/render3/view/style_parser.ts', 'packages/compiler/test/render3/style_parser_spec.ts', 'packages/core/test/acceptance/styling_spec.ts']","The compiler incorrectly unquotes CSS values, leading to valid CSS values becoming invalid and vice versa. This misinterpretation occurs in both direct style attributes and in the conversion of HTML to JS."
17e98e16785450d6dfc94f85868a635415f95b92,1579630127,"build: disable link to PUBLIC_API docs when running ts-api-guardian in angular repo (#34786)

Currently we are showing the following link https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md#golden-files whenever there are updates to the golden files. However this is not correct as this document only applies to the Angular repo as other consumers of ts-api-guardian have different commands, and they store they golden files in different locations.

PR Close #34786
",['tools/ts-api-guardian/lib/cli.ts'],Incorrect documentation link for golden files updates in ts-api-guardian used in Angular repo; it doesn't account for different commands and file storage locations used by other consumers.
7503e3540dce998da6cb4695938045b2d7190b94,1570053221,"refactor(core): static-queries migration should never use ngtsc (#32954)

ec4381d enabled Ivy by default. This is problematic as migrations
like `static-queries` depend on the `AngularCompilerProgram` (NGC)
in order to perform the migration from version 7 to version 8.

In order to ensure that the migration always runs with NGC
(and doesn't get the `NgtscProgram`), we need to explicitly disable
ivy when creating the `@angular/compiler-cli` program for the migration.

This code is still relevant even though the update from version 7
to version 8 landed. Developers can run `ng update` from version 7
and immediately get to version 9 where Ivy is enabled by default (and in
that case we need to ensure that ngtsc is not accidentally used).

Similar to
https://github.com/angular/angular/commit/e5636a322ccaa87faac9b2126c45f97cf76bc114.

PR Close #32954
","['packages/core/schematics/migrations/static-queries/strategies/template_strategy/template_strategy.ts', 'packages/core/schematics/test/static_queries_migration_template_spec.ts']","Ivy being enabled by default disrupts migrations, such as 'static-queries', that depend on AngularCompilerProgram (NGC). This could potentially lead to issues when updating from version 7 to newer versions where Ivy is the default."
e007918e3580f394f0af4b9e41b0c7a3aea797bd,1570470660,"refactor(forms): refactor `Validators.email()` regexp for easier comparison with WHATWG version (#32961)

As mentioned in the previous commit, the regexp used by
`Validators.email()` is a slightly enhanced version of the
[WHATWG one](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address).

This commit refactors the regexp (without changing its behavior) to make
it more closely match the format of WHATWG version, so that it is easier
for people to compare it against the WHATWG one and understand the
differences.

The main changes were:
- Changing the order of characters/character classes inside `[...]`;
  e.g. `[A-Za-z]` --> `[a-zA-Z]`
- Mark all groups as non-capturing (since we do not use the captured
  values); e.g. `(foo)` --> `(?:foo)`
  (This could theoretically also have a positive performance impact, but
  I suspect JavaScript engines are already optimizing away capturing
  groups when they are not used.)

PR Close #32961
",['packages/forms/src/validators.ts'],"Differences between the regular expression used by `Validators.email()` and the one specified by WHATWG are not readily apparent, making comparison difficult for those attempting to understand the enhancements made.
"
4e8c2c3422b75b3171830057e4bc0359ca185e3d,1554923705,"refactor(core): static-query schematic should handle abstract classes (#29688)

Queries can not only be accessed within derived classes, but also in
the super class through abstract methods. e.g.

```
abstract class BaseClass {

  abstract getEmbeddedForm(): NgForm {}

  ngOnInit() {
     this.getEmbeddedForm().doSomething();
  }
}

class Subclass extends BaseClass {
  @ViewChild(NgForm) form: NgForm;

  getEmbeddedForm() { return this.form; }

}
```

Same applies for abstract properties which are implemented in the base class
through accessors. This case is also now handled by the schematic.

Resolves FW-1213

PR Close #29688
","['packages/core/schematics/migrations/static-queries/angular/analyze_query_usage.ts', 'packages/core/schematics/migrations/static-queries/angular/declaration_usage_visitor.ts', 'packages/core/schematics/migrations/static-queries/angular/ng_query_visitor.ts', 'packages/core/schematics/migrations/static-queries/angular/super_class.ts', 'packages/core/schematics/test/static_queries_migration_spec.ts', 'packages/core/schematics/utils/typescript/nodes.ts']","The static-query schematic doesn't handle abstract classes and abstract properties implemented in the base class through accessors, causing issues with queries in derived classes."
6c05c80f19bc84189cc1d2f2e029f6f13d60dc18,1614209525,"feat(router): Add more find-tuned control in `routerLinkActiveOptions` (#40303)

This commit adds more configurability to the `Router#isActive` method
and `RouterLinkActive#routerLinkActiveOptions`.
It allows tuning individual match options for query params and the url
tree, which were either both partial or both exact matches in the past.
Additionally, it also allows matching against the fragment and matrix
parameters.

fixes #13205

BREAKING CHANGE:
The type of the `RouterLinkActive.routerLinkActiveOptions` input was
expanded to allow more fine-tuned control. Code that previously read
this property may need to be updated to account for the new type.

PR Close #40303
","['goldens/public-api/router/router.d.ts', 'packages/router/src/directives/router_link_active.ts', 'packages/router/src/index.ts', 'packages/router/src/router.ts', 'packages/router/src/url_tree.ts', 'packages/router/test/url_tree.spec.ts']","`Router#isActive` method and `RouterLinkActive#routerLinkActiveOptions` allow only global settings for matching query params and url tree, not allowing individual configurations, plus there is no matching against fragment and matrix parameters."
3deda898d0c0c58ac07c7ca4c0196788ef007ce5,1548705580,"fix(ivy): TestBed should tolerate synchronous use of `compileComponents` (#28350)

TestBed.compileComponents has always been an async API. However,
ViewEngine tolerated using this API in a synchronous manner if the
components declared in the testing module did not have any async
resources (templateUrl, styleUrls). This change makes the ivy TestBed
mirror this tolerance by configuring such components synchronously.

Ref: FW-992

PR Close #28350
","['packages/core/src/metadata/resource_loading.ts', 'packages/core/test/test_bed_spec.ts', 'packages/core/testing/src/r3_test_bed.ts']","The TestBed.compileComponents in Ivy is not tolerating the use of synchronous API for components without async resources, unlike its behavior in ViewEngine."
eac5280bec58751dd2a446ec45dbc8aa67f1ce7a,1671479441,"build: support template make variables in `nodejs_binary`/test (#48521)

We modified the macros of `nodejs_binary/test` to have a rule
in between that requests the `.mjs` output. This works fine but
breaks make variable substitution for `templated_args` because
Bazel requires referenced labels to be part of the explicit `data`.

The rule in between breaks this, so we add a new argument that
can be used for such ""template""/""args"" data dependencies.

This can be removed when everything is ESM and we don't need
the rule in between.

PR Close #48521
","['tools/circular_dependency_test/index.bzl', 'tools/defaults.bzl', 'tools/symbol-extractor/index.bzl']","In `nodejs_binary/test`, make variable substitution for `templated_args` fails due to mandatory inclusion of referenced labels in the explicit `data` as required by Bazel, getting interrupted by an inserted rule."
a9242c4fc22f526a3dc592113880d68d7499e91c,1555956979,"refactor(core): template-var-assignment migration incorrectly warns (#30026)

Currently the `template-var-assignment` migration incorrectly warns if
the template writes to a property in the component that has the same
`ast.PropertyWrite´ name as a template input variable but different
receiver. e.g.

```html
<!-- ""someProp.element"" will be incorrectly reported as template variable assignment -->
<button *ngFor=""let element of list"" (click)=""someProp.element = null"">Reset</button>
```

Similarly if an output writes to a component property with the same name as a
template input variable, but the expression is within a different template scope,
the schematic currently incorrectly warns. e.g.

```html
<button *ngFor=""let element of list"">{{element}}</button>

<!-- The ""element = null"" expression does not refer to the ""element"" template input variable -->
<button (click)=""element = null""></button>
```

PR Close #30026
","['packages/core/schematics/migrations/template-var-assignment/analyze_template.ts', 'packages/core/schematics/migrations/template-var-assignment/angular/html_variable_assignment_visitor.ts', 'packages/core/schematics/migrations/template-var-assignment/angular/property_write_html_visitor.ts', 'packages/core/schematics/test/template_var_assignment_migration_spec.ts']","The `template-var-assignment` migration is incorrectly warning when a component property with the same name as a template variable but different receiver is written to, or when an output writes to a same-named component property in a different template scope."
dee16a4355aac40df0fee6b4dde897beed99d074,1562797893,"fix(ivy): update ICU placeholders format to match Closure compiler (#31459)

Since `goog.getMsg` does not process ICUs (post-processing is required via goog.i18n.MessageFormat, https://google.github.io/closure-library/api/goog.i18n.MessageFormat.html) and placeholder format used for ICUs and regular messages inside `goog.getMsg` are different, the current implementation (that assumed the same placeholder format) needs to be updated. This commit updates placeholder format used inside ICUs from `{$placeholder}` to `{PLACEHOLDER}` to better align with Closure. ICU placeholders (that were left as is prior to this commit) are now replaced with actual values in post-processing step (inside `i18nPostprocess`).

PR Close #31459
","['packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler/src/render3/view/i18n/serializer.ts', 'packages/compiler/src/render3/view/i18n/util.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/compiler/test/render3/view/i18n_spec.ts', 'packages/core/src/render3/i18n.ts', 'packages/core/test/acceptance/i18n_spec.ts']","Current ICU placeholder format doesn't align with `goog.getMsg` implementation, causing inconsistencies and issues in post-processing with `goog.i18n.MessageFormat`."
16c8f55663c30270fcd647b1a8a20ddbc8923349,1665082657,"feat(router): migrate `RouterLinkWithHref` references to `RouterLink` (#47599)

Since Angular v15, the `RouterLink` contains the logic of the `RouterLinkWithHref` directive and now developers can always import and use the `RouterLink` directive when they need to add a `[routerLink]` in templates. This migration finds all imports and usages of the `RouterLinkWithHref` class and rewrites them to `RouterLink` instead.

```ts
import { RouterLinkWithHref } from '@angular/router';

@Component({
  standalone: true,
  template: `<a [routerLink]=""'/abc'"">`,
  imports: [RouterLinkWithHref]
})
export class MyComponent {
  @ViewChild(RouterLinkWithHref) aLink!: RouterLinkWithHref;
}
```

```ts
import { RouterLink } from '@angular/router';

@Component({
  standalone: true,
  template: `<a [routerLink]=""'/abc'"">`,
  imports: [RouterLink]
})
export class MyComponent {
  @ViewChild(RouterLink) aLink!: RouterLink;
}
```

PR Close #47599
","['packages/core/schematics/migrations/router-link-with-href/index.ts', 'packages/core/schematics/migrations/router-link-with-href/util.ts', 'packages/core/schematics/test/router_link_with_href_spec.ts', 'packages/core/schematics/utils/typescript/imports.ts']",The `RouterLinkWithHref` directives are still being used in the Angular components despite their functionalities being integrated into `RouterLink` in Angular v15.
dc6192c8e55edd8c59a66c3eadcf71ced5b0a809,1551898913,"fix(ivy): properly detect ""inputs"" and ""outputs"" field names that should be wrapped in quotes (#29126)

Prior to this change, the RegExp that was used to check for dashes in field names used ""g"" (global) flag that retains lastIndex, which might result in skipping some fields that should be wrapped in quotes (since lastIndex advanced beyond the next ""-"" location). This commit removes this flag and updates the test to make sure there are no regressions.

PR Close #29126
","['packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/compiler/src/render3/view/util.ts']","Existence of dashes in field names used in ""inputs"" and ""outputs"" might be skipped due to RegExp's retained lastIndex, causing improper detection of fields that need to be wrapped in quotes."
c5a1b90b25512e34f79c6ab1ae5aa650ca298cb5,1665176593,"refactor(core): support `EnvironmentProviders` types internally (#47669)

This commit modifies `R3Injector` and other code in Angular that deals with
providers, to handle `EnvironmentProviders` objects as well as normal
`Provider` types. There is no user-visible impact to this change, but it
prepares the core of the DI system for the introduction of
`EnvironmentProviders` as a public feature.

PR Close #47669
","['packages/core/src/di/provider_collection.ts', 'packages/core/src/di/r3_injector.ts', 'packages/core/src/render3/errors_di.ts', 'packages/core/testing/src/test_bed_compiler.ts']","Angular's core Dependency Injection (DI) system and `R3Injector` not able to handle `EnvironmentProviders` objects, failing to prepare the core for introduction of `EnvironmentProviders` as a public feature."
96baff3a856538f5b026b6b6ae703c08fb21b93a,1557852885,"test(ivy): move change detection tests into acceptance (#30425)

Moves most of the r3 change detection tests into `acceptance`. Notes:
* A handful of tests weren't migrated, because they were testing an API that isn't exposed publicly yet.
* The `should throw if bindings in children of current view have changed` and `should NOT throw if bindings in ancestors of current view have changed` tests were removed, because there's not nice way of hitting the same code path with `TestBed` and doing the same assertion as with the raw instructions. I'm open to ideas on how we could do them.
* There were a few tests that assert that the `innerHTML` looks in a particular way. I've switched them to use `textContent`, because Ivy and ViewEngine produce slightly different DOM. The tests were only checking whether the text has changed anyway.

PR Close #30425
","['packages/core/test/acceptance/change_detection_spec.ts', 'packages/core/test/render3/change_detection_spec.ts']","Change detection tests in 'r3' are causing issues due to incompatibility of APIs and difficulty in executing certain tests. Also, there are inconsistencies in how Ivy and ViewEngine generate DOM which affects testing."
72c2567847c37b07e468a501a4b13edc791ae9ed,1658164740,"feat(zone.js): include zone name when sync-test zone reports tasks

The sync-test zone is used in e.g. `describe` to raise an error when
there is asynchronous code scheduled in describe blocks. This commit
includes the zone name in such thrown errors to allow for us to include
the jasmine describe name in the error. This will be wired up in the
jasmine zonejs patches separately.
","['packages/zone.js/lib/zone-spec/sync-test.ts', 'packages/zone.js/test/zone-spec/sync-test.spec.ts']","Asynchronous code scheduled in describe blocks triggers an error in sync-test zone, but it lacks information about which Jasmine describe name caused it."
360730ce594bb840618e3047a97922dee3faa042,1552418894,"refactor(core): static-query migration does not detect external call expressions. (#29133)

Currently the static-query migration does not properly handle functions which
are declared externally. This is because we don't resolve the symbol of the
call-expression through its type. Currently we just determine the symbol of the
call-expression through the given call expression node, which doesn't necessarily
refer to the *value declaration* of the call expression. e.g. the symbol refers to the
import declaration which imports the external function. This means that we currently
can't check the external function as we couldn't find the actual value declaration.
We can fix this by resolving the type of the call expression and using the type in order
to retrieve the symbol containing the *value declaration*

PR Close #29133
","['packages/core/schematics/migrations/static-queries/angular/declaration_usage_visitor.ts', 'packages/core/schematics/test/static_queries_migration_spec.ts']","The static-query migration struggles with correctly handling externally declared functions due to not resolving the symbol of the call-expression through its type, leading to potential errors in identifying value declarations."
168a393589f80bd2fa6fb3fb6235754c5e75a384,1584402244,"refactor(core): misc refactoring to support upcoming changes to improve synthetic host bindings (#35884)

This commit performs a few updates to internal functions that would be required in upcoming changes to support synthetic host bindings in Directives.

* the `elementPropertyInternal` function was refactored to accept renderer as an argument (prior to that, there was a function that loads the renderer in some specific way for animation bindings)
* `elementPropertyInternal`, `elementAttributeInternal` and `listenerInternal` functions were updated to have a fixed set of arguments (for better performance)
* `elementPropertyInternal` and `elementAttributeInternal` functions were updated to take `tNode` as an argument instead of passing node index (that was used to retrieve `tNode` internally), in some cases we already have `tNode` available or we can retrieve it from the state

The refactoring was triggered by the need to pass different renderers to the `elementPropertyInternal` to support synthetic host bindings in Directives (see this comment for additional context: https://github.com/angular/angular/pull/35568/files#r388034584).

PR Close #35884
","['packages/core/src/render3/i18n.ts', 'packages/core/src/render3/instructions/attribute.ts', 'packages/core/src/render3/instructions/attribute_interpolation.ts', 'packages/core/src/render3/instructions/host_property.ts', 'packages/core/src/render3/instructions/property.ts', 'packages/core/src/render3/instructions/property_interpolation.ts', 'packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/state.ts']","The core functions don't have a fixed set of arguments causing performance issues. The elementPropertyInternal and elementAttributeInternal functions retrieve tNode internally, causing latency in certain cases."
4000085a3e479e5df1bad73ce4b99190167df40e,1681837251,"refactor(compiler): variable optimizer for the template pipeline (#49797)

This commit adds a variable optimization pass to the template pipeline. The
pipeline generates all variables which might be referenced within a given
view's template function, regardless of whether other operations will read
those values.

The variable optimizer post-processes the IR and performs several variable-
related optimizations:

* It transforms variable declarations to side effectful expressions when the
  variable is not used, but its initializer has global effects which other
  operations rely upon.
* It removes variable declarations if those variables are not referenced and
  either they do not have global effects, or nothing relies on them.
* It inlines variable declarations when those variables are only used once
  and the inlining is semantically safe.

PR Close #49797
","['packages/compiler/src/template/pipeline/ir/src/expression.ts', 'packages/compiler/src/template/pipeline/ir/src/operations.ts', 'packages/compiler/src/template/pipeline/src/emit.ts', 'packages/compiler/src/template/pipeline/src/phases/chaining.ts', 'packages/compiler/src/template/pipeline/src/phases/variable_optimization.ts']","The compiler's template pipeline generates variables regardless of their use in operations, leading to potential inefficiency and redundancy."
a5d1d1161b3bb45e8cccc6aa8b6c064e574b4865,1588726006,"fix(docs-infra): exit with an error when cleaning up the preview server fails (#36837)

Previously, when the preview server `build-cleanup` script failed, the
error was logged but not reflected to the commands exit code. This seems
to have been accidentally broken in #23576.

This commit fixes it by ensuring the error is re-thrown from the
`BuildCleaner#cleanUp()` method to allow the process to exit with an
error exit code.

PR Close #36837
","['aio/aio-builds-setup/dockerbuild/scripts-js/lib/clean-up/build-cleaner.ts', 'aio/aio-builds-setup/dockerbuild/scripts-js/test/clean-up/build-cleaner.spec.ts']","'build-cleanup' script in preview server does not exit with an error code when cleanup fails, instead it only logs the error."
55748dbc5591ed3574cbfcdc15145815dd7ef549,1574290079,"fix(core): allow css custom variables/properties in the style sanitizer (#33841)

This change enables ""var(--my-var)"" to pass through the style sanitizer.

After consulation with our security team, allowing these doesn't create
new attack vectors, so the sanitizer doesn't need to strip them.

Fixes parts of #23485 related to the sanitizer, other use cases discussed
there related to binding have been addressed via other changes to the
class and style handling in the runtime.

Closes #23485

PR Close #33841
","['packages/core/src/sanitization/style_sanitizer.ts', 'packages/core/test/sanitization/style_sanitizer_spec.ts']","The style sanitizer is stripping out CSS custom variables/properties (ex. ""var(--my-var)""), causing potential styling issues in the application."
0e5f9ba6f427a79a0b741c1780cd2ff72cc3100a,1678383214,"fix(core): generate consistent component IDs (#48253)

Prior to this change the component IDs where generated based on a counter. This is problematic as there is no guarantee that a component will get the same ID that was assigned on the server when generated on the client side.

This is paramount to be able to re-use the component styles generated on the server.

PR Close #48253
","['packages/core/src/render3/definition.ts', 'packages/core/src/render3/jit/module.ts', 'packages/examples/common/test_module.ts', 'packages/platform-server/src/server_renderer.ts']","Component IDs being generated by a counter leads to inconsistency between server and client side, impairing the re-usability of server-generated component styles."
c6e5fc4fbe2af24b02e24fd04071282bad7bf85c,1587055240,"fix(common): format day-periods that cross midnight (#36611)

When formatting a time with the `b` or `B` format codes, the rendered
string was not correctly handling day periods that spanned midnight.
Instead the logic was falling back to the default case of `AM`.

Now the logic has been updated so that it matches times that are within
a day period that spans midnight, so it will now render the correct
output, such as `at night` in the case of English.

Applications that are using either `formatDate()` or `DatePipe` and any
of the `b` or `B` format codes will be affected by this change.

Fixes #36566

PR Close #36611
","['packages/common/src/i18n/format_date.ts', 'packages/common/test/i18n/format_date_spec.ts']","Time formatting with 'b' or 'B' format codes fails to handle day periods crossing midnight, resulting to incorrect default fallback to 'AM'."
b2bd38699b0595d0a35b501f20251f8715a9fd1c,1591292573,"fix(dev-infra): properly determine oauth scopes for git client token (#37439)

We recently added a better reporting mechanism for oauth tokens
in the dev-infra git util. Unfortunately the logic broke as part
of addressing PR review feedback. Right now, always the empty
promise from `oauthScopes` will be used as `getAuthScopes` considers
it as the already-requested API value. This is not the case as
the default promise is also truthy. We should just fix this by making
the property nullable.

PR Close #37439
",['dev-infra/pr/merge/git.ts'],"The dev-infra git util fails to accurately determine the OAuth scopes for the git client token, causing it to always use the empty promise from `oauthScopes` as the already-requested API value.
"
48214e2a0589f59da993c1e0a2e6ce9a736fcad6,1551729065,"fix(service-worker): ignore passive mixed content requests (#25994)

Although [passive mixed content][1] requests (like images) only produce
a warning without a ServiceWorker, fetching it via a ServiceWorker
results in an error. See
https://github.com/angular/angular/issues/23012#issuecomment-376430187
for more details.

This commit makes the ServiceWorker ignore such requests and let them be
handled by the browser directly to avoid breaking apps that would work
without the ServiceWorker.

[1]: https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content#passive_mixed_content

Fixes #23012

PR Close #25994
","['packages/service-worker/worker/src/driver.ts', 'packages/service-worker/worker/test/happy_spec.ts', 'packages/service-worker/worker/testing/scope.ts']","ServiceWorker fetching of passive mixed content, like images, results in an error, even when these requests only produce a warning without a ServiceWorker. This scenario leads to breaking apps that would otherwise work without the ServiceWorker."
19d543f71e012327bc1ecda1ff38728b783904af,1600961564,"fix(zone.js): disable wrap uncaught promise rejection should handle primitive value (#38476)

Close #38334.

zone.js provides a flag DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION to let zone.js
throw the original error instead of wrap it when uncaught promise rejection found.
But the rejection value could be anything includes primitive value such as number.
In that case, we should not attach any additional properties to the value.

PR Close #38476
","['packages/zone.js/lib/common/promise.ts', 'packages/zone.js/lib/zone.ts', 'packages/zone.js/test/common/promise-disable-wrap-uncaught-promise-rejection.spec.ts']",The setting DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION in zone.js throws error when dealing with primitive values as rejection values in uncaught promise rejections.
bc148c30d57a8134a1f315bf1b3339ca20d21f9b,1669145774,"refactor(router): Remove unnecessary logic in enabledBlocking option (#48064)

The `initNavigated` flag is not necessary. The way `enabledBlocking`
works is by blocking any navigations from finishing until the
application has bootstrapped. The bootstrap is unblocked as soon as we
hit the `afterPreactivation` step. After that point,
`afterPreactivation` is always unblocked because the `bootstrapDone`
Subject is completed/stopped. There is no need for an additional
variable to track this information.

PR Close #48064
","['packages/router/src/provide_router.ts', 'packages/router/test/bootstrap.spec.ts']","The `initNavigated` flag in the `enabledBlocking` option is redundant, resulting in unnecessary complexity in the navigation finishing process during application bootstrap."
e179c5827f1c20f55ced778d1025bb44b4a6b2c9,1584381143,"fix(compiler): do not recurse to find static symbols of same module (#35262)

To create the symbols of a module, the static symbol resolver first gets
all the symbols loaded in the module by an export statement. For `export
* from './module'`-like statements, all symbols from `./module` must be
loaded. In cases where the exporting module is actually the same module
that the export statement is in, this causes an unbounded recursive
resolution of the same module.

Exports of the same module are not needed, as their symbols will be
resolved when the symbols in the module metadata's `metadata` key is
explored.

This commit resolves the unbounded recursion by loading exporting
modules only if they differ from the module currently being resolved.

Closes https://github.com/angular/vscode-ng-language-service/issues/593

PR Close #35262
","['packages/compiler/src/aot/static_symbol_resolver.ts', 'packages/compiler/test/aot/static_symbol_resolver_spec.ts']","Unbounded recursion observed when loading symbols from a module, where the exporting module is the same as the module in which the export statement resides."
7e0b3fd953bb02a0a6fd70df8314367dd70c91a9,1599596241,"fix(compiler-cli): compute source-mappings for localized strings (#38645)

Previously, localized strings had very limited or incorrect source-mapping
information available.

Now the i18n AST nodes and related output AST nodes include source-span
information about message-parts and placeholders - including closing tag
placeholders.

This information is then used when generating the final localized string
ASTs to ensure that the correct source-mapping is rendered.

See #38588 (comment)

PR Close #38645
","['packages/compiler-cli/src/ngtsc/translator/src/translator.ts', 'packages/compiler-cli/test/ngtsc/template_mapping_spec.ts', 'packages/compiler/src/i18n/i18n_ast.ts', 'packages/compiler/src/i18n/i18n_parser.ts', 'packages/compiler/src/i18n/message_bundle.ts', 'packages/compiler/src/render3/view/i18n/localize_utils.ts', 'packages/compiler/test/i18n/serializers/i18n_ast_spec.ts']","Localized strings have limited or incorrect source-mapping information, affecting the generated final localized string ASTs."
b6cd38ff055f003f92fff4c3e27d165fb4437057,1611878457,"fix(common): parse `YYYY-MM` strings as UTC dates (#40620)

In 2aba8b0 we fixed the DatePipe so that when it parsed date strings
that looked like `YYYY-MM-DD` it created a UTC date that was not
affected by the local timezone of the JavaScript engine.

This commit does the same for date strings of the form `YYYY-MM`
and `YYYY`.

Fixes #33944

PR Close #40620
","['packages/common/src/i18n/format_date.ts', 'packages/common/test/i18n/format_date_spec.ts']",DatePipe parsing of `YYYY-MM` and `YYYY` date strings is affected by the local timezone of the JavaScript engine.
0bf6e58db2e416603f75bf232b225008b82adeaf,1583864219,"fix(compiler): process `imports` first and `declarations` second while calculating scopes (#35850)

Prior to this commit, while calculating the scope for a module, Ivy compiler processed `declarations` field first and `imports` after that. That results in a couple issues:

* for Pipes with the same `name` and present in `declarations` and in an imported module, Pipe from imported module was selected. In View Engine the logic is opposite: Pipes from `declarations` field receive higher priority.
* for Directives with the same selector and present in `declarations` and in an imported module, we first invoked the logic of a Directive from `declarations` field and after that - imported Directive logic. In View Engine, it was the opposite and the logic of a Directive from the `declarations` field was invoked last.

In order to align Ivy and View Engine behavior, this commit updates the logic in which we populate module scope: we first process all imports and after that handle `declarations` field. As a result, in Ivy both use-cases listed above work similar to View Engine.

Resolves #35502.

PR Close #35850
","['packages/compiler-cli/src/ngtsc/scope/src/local.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/core/src/render3/jit/module.ts', 'packages/core/test/acceptance/directive_spec.ts', 'packages/core/test/acceptance/pipe_spec.ts']","The Ivy compiler's handling of 'declarations' before 'imports' during scope calculation for a module creates discrepancies with the View Engine behavior, especially for duplicate Pipes and Directives present in both fields."
8106084679d453cc0be3cea65dfe6e5d0cb75196,1660671413,"refactor(common): throw an error if an absolute URL is passed to Image Loaders (#47082)

This commit updates the logic of Image Loaders to throw an error in case an absolute URL is provided an an input to the loader function. The loaders can construct URLs based on image paths relative to the bas URL configured for a loader.

PR Close #47082
","['packages/common/src/directives/ng_optimized_image/image_loaders/image_loader.ts', 'packages/common/src/errors.ts', 'packages/common/test/directives/ng_optimized_image_spec.ts', 'packages/common/test/image_loaders/image_loader_spec.ts']","Absolute URLs provided as an input to the Image Loaders function causes malfunctioning, as they are meant to work with relative image paths based on a configured base URL."
c29d2a4f1624627e28ffde71d29ab3bb70cee639,1551837736,"test(ivy): fix export tests to work in IE (#29125)

Some of the export tests had assertions that relied on capitalization
of attributes in the DOM. IE treats capitalization somewhat differently,
so our SauceLabs tests were failing.

This commit tweaks the tests so that the assertions do not rely on
attributes to be capitalized or not.

PR Close #29125
",['packages/core/test/acceptance/exports_spec.ts'],"Attribute capitalization in export tests failing on Internet Explorer due to differences in its handling, leading to SauceLabs test failures."
99886bd159e707bd4527b2da5217f89248998428,1548454977,"fix(ivy): unify checkNoChanges logic with the view engine (#28366)

This commit unifies handling of the ""check no changes"" mode between
ngIvy and the view engine. More specifically:
- check no changes can be invoked before change detection in ivy;
- `undefined` values are considered equal `NO_CHANGES` for the ""check no changes""
mode purposes.

Chanes in this commit enables several tests that were previously running only in ivy
or only in the view engine.

PR Close #28366
","['packages/core/src/render3/bindings.ts', 'packages/core/src/render3/util.ts', 'packages/core/test/linker/change_detection_integration_spec.ts']","""Check no changes"" mode behaves differently between ngIvy and the view engine, also 'undefined' values are not considered equal to 'NO_CHANGES' in this mode."
21b085d22110aef04dca3b8c63aa418ac6236caf,1696962850,"refactor(compiler): capture unknown blocks inside switch (#52136)

Updates the Ivy AST to allow for `@switch` blocks to capture nested blocks that are not `@case` and `@default`. These blocks will be used for autocompletion in the language service.

These changes also update the logic for `@switch` and `@if` blocks so that they produce an AST node even if there are errors. The errors will still be surfaced to users, but producing AST nodes allows us to recover parts of the expression later if necessary.

PR Close #52136
","['packages/compiler/src/render3/r3_ast.ts', 'packages/compiler/src/render3/r3_control_flow.ts', 'packages/compiler/test/render3/r3_template_transform_spec.ts']","The Ivy AST does not capture nested blocks that are not `@case` and `@default` inside `@switch` blocks. Also, `@switch` and `@if` blocks do not produce an AST node when errors are present."
65b6fdb9cd385d038e7d001f951190bbc2c0d0bc,1693331734,"refactor(upgrade): ignore cross relative import for package (#51500)

The upgrade package duplicaes some of code due to relative
imports between entry-points. This caused bundlers to
inline shared functions twice in both FESM outputs.

This is an acceptable limitation and we are not changing this
because the primary entry-point is not synced into G3. It's non-trivial
to remove these cross relative imports right now because the primary
entry-point is not even built in G3 so instead we just ignore the
relative imports using a re-export file.

Note: To simplify this change, we continue using namespace exports
as exporting individual named exports for all these possible usages
is rather cumbersome and also we had existing namespace imports for
e.g. `angular1.ts`. The code of upgrade is rarely edited these days

PR Close #51500
","['packages/upgrade/static/common.ts', 'packages/upgrade/static/public_api.ts', 'packages/upgrade/static/src/downgrade_module.ts', 'packages/upgrade/static/src/upgrade_component.ts', 'packages/upgrade/static/src/upgrade_module.ts', 'packages/upgrade/static/testing/src/create_angular_testing_module.ts', 'packages/upgrade/static/testing/src/create_angularjs_testing_module.ts']","The upgrade package duplicates code due to cross relative imports between entry-points, causing bundlers to inline shared functions twice in the FESM outputs."
7951c4feb29aac062e8a91a095594da90c26efe9,1553622025,"test(platform-browser): fix shadow dom test not working in firefox 65 (#29518)

With 093dc915ae9ad92a3baa602eb7cb7862ca4b6734, Firefox has been updated
to the latest available version within Saucelabs. Firefox added shadow DOM support
in Firefox 63 and therefore the shadow dom test in `platform-browser` now runs as well.

This test currently fails because Firefox does not support computed style property
shorthands. In order to make this test work on Firefox now, we just switch from `border`
to `background` (because of the overhead when comparing each `top`, `bottom`, `left`, `right`-border properties)

PR Close #29518
",['packages/platform-browser/test/dom/shadow_dom_spec.ts'],The shadow dom test in `platform-browser` is failing on the latest Firefox due to lack of support for computed style property shorthands.
9e4520367931268274d28928aaa0cbf8fda4f1d5,1574276652,"test(docs-infra): more thoroughly clean up after `ScrollService` tests (#33937)

By clearing `sessionStorage` and unsubscribing from `Location` events,
after each test, we reduce the possibility of potential
[spooky action at a distance][1]-type of failures in the future.

This does not have an impact on the actual app, since `ScrollService` is
currently expected to live throughout the lifetime of the app. Still,
unsubscribing from `Location` events keeps the code consistent with how
other `ScrollService` listeners are handled (e.g. for `window` events).

[1]: https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming)

PR Close #33937
","['aio/src/app/shared/scroll.service.spec.ts', 'aio/src/app/shared/scroll.service.ts']","`ScrollService` tests do not properly clean up, leading to potential interaction issues with `sessionStorage` and leftover subscriptions to `Location` events."
40975e06c6805f13a87c8ca66d549adc6bf6b2ff,1600890392,"fix(compiler-cli): perform DOM schema checks even in basic mode in g3 (#38943)

In Ivy, template type-checking has 3 modes: basic, full, and strict. The
primary difference between basic and full modes is that basic mode only
checks the top-level template, whereas full mode descends into nested
templates (embedded views like ngIfs and ngFors). Ivy applies this approach
to all of its template type-checking, including the DOM schema checks which
validate whether an element is a valid component/directive or not.

View Engine has both the basic and the full mode, with the same distinction.
However in View Engine, DOM schema checks happen for the full template even
in the basic mode.

Ivy's behavior here is technically a ""fix"" as it does not make sense for
some checks to apply to the full template and others only to the top-level
view. However, since g3 relies exclusively on the basic mode of checking and
developers there are used to DOM checks applying throughout their template,
this commit re-enables the nested schema checks even in basic mode only in
g3. This is done by enabling the checks only when Closure Compiler
annotations are requested.

Outside of g3, it's recommended that applications use at least the full mode
of checking (controlled by the `fullTemplateTypeCheck` flag), and ideally
the strict mode (`strictTemplates`).

PR Close #38943
","['packages/compiler-cli/src/ngtsc/core/src/compiler.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/api.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_check_block.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/test_utils.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_check_block_spec.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","In Ivy's basic mode, DOM schema checks are not being applied to the full template, unlike View Engine's behavior, potentially leading to unvalidated components/directives."
8d6cb830a8e386949f563fd6301cbc09d5ac477b,1656696051,"test: refactor bundle tests to not directly access CommonJS `module.exports` (#46642)

The test apps are bundled using their production ESM JS output using
`esbuild`. ESBuild warns about any CJS usages, like `module.exports.`

```
INFO: From Bundling Javascript packages/core/test/bundling/todo_i18n/index.ts [esbuild]:
▲ [WARNING] The CommonJS ""module"" variable is treated as a global variable in an ECMAScript module and may not work as expected

    bazel-out/k8-fastbuild/bin/packages/core/test/bundling/todo_i18n/index.mjs:494:0:
      494 │ module.exports = {
          ╵ ~~~~~~

  This file is considered to be an ECMAScript module because the file name ends in "".mjs"".
```

Some bundling tests currently use `module.exports` to make
functions/symbols available to specs later requiring the bundle (in
order to run the bundle). Instead of using the CJS global here, the
logic can be attached consistently to `window` (there is currently a
mismatch of window vs. module.exports anyway..).

PR Close #46642
","['packages/core/test/bundling/forms_reactive/forms_e2e_spec.ts', 'packages/core/test/bundling/forms_reactive/index.ts', 'packages/core/test/bundling/forms_template_driven/forms_e2e_spec.ts', 'packages/core/test/bundling/forms_template_driven/index.ts', 'packages/core/test/bundling/todo/index.ts', 'packages/core/test/bundling/todo/todo_e2e_spec.ts', 'packages/core/test/bundling/todo_i18n/index.ts', 'packages/core/test/bundling/todo_i18n/todo_e2e_spec.ts']",The production ESM JS output used for bundling test apps triggers warnings about CommonJS usages (such as `module.exports`) as they do not function as expected in ECMAScript modules.
62e3f3279da12f4788483d24f28b9aae416fa906,1618590785,"fix(compiler): non-literal inline templates incorrectly processed in partial compilation (#41583)

Currently if a component defines a template inline, but not through a
string literal, the partial compilation references the template expression
as is. This is problematic because the component declaration can no longer
be processed by the linker later as there is no static interpretation. e.g.

```js
const myTemplate = `...`;

TestCmp.ɵcmp = i0.ɵɵngDeclareComponent({
  version: ""0.0.0-PLACEHOLDER"",
  type: TestCmp,
  selector: ""test-cmp"",
  ngImport: i0,
  template: myTemplate,
  isInline: true
});
```

To fix this, we use the the resolved template in such cases so that
the linker can process the template/component declaration as expected.

PR Close #41583
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/GOLDEN_PARTIAL.js', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/non_literal_template.js', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/non_literal_template.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/non_literal_template_with_concatenation.js', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/non_literal_template_with_concatenation.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/non_literal_template_with_substitution.js', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/components_and_directives/non_literal_template_with_substitution.ts', 'packages/compiler/src/render3/partial/component.ts']",Non-literal inline templates in partial compilation are not correctly processed leading to issues in static interpretation by the linker.
755d2d572f00efa4b7362c71d0299bef1655788f,1575315324,"refactor(ivy): remove unnecessary fac wrapper (#34076)

For injectables, we currently generate a factory function in the
injectable def (prov) that delegates to the factory function in
the factory def (fac). It looks something like this:

```
factory: function(t) { return Svc.fac(t); }
```

The extra wrapper function is unnecessary since the args for
the factory functions are the same. This commit changes the
compiler to generate this instead:

```
factory: Svc.fac
```

Because we are generating less code for each injectable, we
should see some modest code size savings. AIO's main bundle
is about 1 KB smaller.

PR Close #34076
","['packages/compiler-cli/ngcc/src/analysis/decoration_analyzer.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/test/compliance/r3_view_compiler_di_spec.ts', 'packages/compiler/src/injectable_compiler_2.ts']",Extra wrapper function in injectable definitions creates unnecessary code redundancy and may increase the code size.
dda781ecceb1e1f4649588d8ab8d1c9df5d4a8de,1563484886,"fix(ivy): incorrect type definition for ɵɵdefineComponent (#30993)

Currently the `ɵɵdefineComponent` method has incorrect type
definitions the `directives` and `pipes` metadata property.

The incorrect types allow developers to pass in already instantiated
`DirectiveDef` or `ComponentDef` objects. This can cause unexpected
failures because the definition internally only expects `Type` objects
and now incorrectly tries to read the `ngDirectiveDef` or `ngComponentDef`
of existing definitions.

This issue has been unveiled by enabling the strict function parameter
types flag, where the directive definitions are determined from each array
element in the `directives` or `pipes` property (which can throw).

PR Close #30993
",['packages/core/src/render3/interfaces/definition.ts'],"Incorrect type definitions for `directives` and `pipes` metadata property in `ɵɵdefineComponent` method allow already instantiated `DirectiveDef` or `ComponentDef` objects causing unexpected failures due to improper reads of `ngDirectiveDef` or `ngComponentDef`.
"
5cecd97493025cd940c9ade4ea9f1836d5b05cc8,1576539243,"feat(forms): expand NgModel disabled type to work with strict template type checking (#34438)

NgModel internally coerces any arbitrary value that will assigned
to the `disabled` `@Input` to a boolean. This has been done to
support the common case where developers set the disabled attribute
without a value. For example:

```html
<input type=""checkbox"" [(ngModel)]=""value"" disabled>
```

This worked in View Engine without any errors because inputs were
not strictly checked. In Ivy though, developers can opt-in into
strict template type checking where the attribute would be flagged.

This is because the `NgModel#isDisabled` property type-wise only
accepts a `boolean`. To ensure that the common pattern described
above can still be used, and to reflect the actual runtime behavior,
we should add an acceptance member that makes it work without type
checking errors.

Using a coercion member means that this is not a breaking change.

PR Close #34438
","['packages/forms/src/directives/ng_model.ts', 'tools/public_api_guard/forms/forms.d.ts']","Strict template type checking in Ivy flags common pattern of setting disabled attribute without value in NgModel, since it only accepts a `boolean` for `isDisabled` property, leading to type checking errors."
485ce640fdc7efc8a8729b6d0cda52f52350fe46,1574449552,"ci: use more descriptive names for published build artifacts (#33957)

In efbbae5a4, the `publish_packages_as_artifacts` CircleCI job was
created to publish the build artifacts of PR builds on CI. In a8f4f14bd,
its scope was expanded to also publish build artifacts on non-PR builds.

The published artifacts names are constructed based on the PR number
(e.g. include `-pr12345-`), so on non-PR builds the names do not reflect
the source branch (instead, they include `-prfalse-`).

This commit fixes this by using the current branch name. For example,
artifact names for the `master` or `9.0.x` branch will include
`-master-` and `-9.0.x-` respectively (instead of `-prfalse-`).
(NOTE: For PRs, where branch name is `pull/12345`, the branch name is
transformed to `pr12345`.)

PR Close #33957
",['scripts/ci/create-package-archives.sh'],"Non-PR build artifacts published by the `publish_packages_as_artifacts` CircleCI job are named inaccurately, using `-prfalse-` instead of the actual source branch name."
d5293d2aa3fe7e79f4ebb5de5fc52a5d70b91aef,1588798466,"fix(bazel): ng_package rule should update ""package.json"" of ts_library targets (#36944)

In the past we added support for `ts_library` to `ng_package`. For those
targets we never can determine the ""index"" file. Unlike `ng_module`,
there is no provider data for flat module bundles, so the `ng_package`
rule assumes that the index file is simply called `index`.

This works as expected, but we also added logic in the past that doesn't
allow `ng_package` to add format properties (e.g. `main`, `module`) to a
`package.json` if a package json is handwritten for such a `ts_library` target.

This has been done that way because we assumed that such `package.json` files
might want to set format properties explicitly to different paths due to a
faulty ""index"" guess.

We want to change this behavior as most of the time a `package.json`
file already exists with just the module name. In those cases, the
packager should still set the format properties. We should only warn
and skip automatic insertion of the format properties if such a
`package.json` explicitly sets format properties.

PR Close #36944
",['packages/bazel/src/ng_package/packager.ts'],"`ng_package` rule doesn't add format properties to a `package.json` if it's handwritten for a `ts_library` target, often leading to module path errors."
122c8ba0e30c36ebcd1e876de7fd58fc339a3366,1619105900,"build(docs-infra): fix `StackblitzBuilder` after `jsdom` update (#41725)

In commit c617f1f768bd968e95dd1147293a5a18df3bc770, `jsdom` was updated
from v9 to v16. This includes a breaking change that caused
`StackblitzBuilder` to fail to generate the StackBlitz examples.
However, this failure went unnoticed, because `StackblitzBuilder` still
completed successfully after failing to generate the examples. (This has
been fixed in the previous commit.)

This commit updates `StackblitzBuilder` to use the new `jsdom` API.

PR Close #41725
",['aio/tools/stackblitz-builder/builder.js'],"Breaking change in a recent jsdom update causes StackblitzBuilder to fail generating StackBlitz examples, but completion still signals success."
b8ed03b5ad91a2dd62d600240e9056a360b89b90,1641928578,"fix(compiler): correct spans when parsing bindings with comments (#44678)

When parsing a binding with a comment at the end of the expression, the
parser previously had logic to offset the parsed spans by the length of the
comment. This logic seemed not to serve any useful purpose, and instead
resulted in the corruption of the spans. For example, in the expression
`{{foo // comment}}`, the parser would map the parsed `foo` `PropertyRead`
node at the location of the characters 'ent' from the comment suffix.

This commit removes that logic, correcting the parsed spans of such nodes in
the presence of comments. Removing this logic does not seem to have caused
any tests to fail.

PR Close #44678
","['packages/compiler-cli/src/ngtsc/indexer/test/template_spec.ts', 'packages/compiler/src/expression_parser/parser.ts', 'packages/compiler/test/render3/r3_ast_absolute_span_spec.ts']","Parsing a binding with a comment at the end results in incorrect span offsets, leading to corruption of the spans and misplacement of node locations."
c5d0b76e29d6b53bb3d34b8b3d6cc671c5d77cdf,1634826050,"refactor(service-worker): avoid unnecessary writes to cache when version fails (#43680)

When an app version is detected as broken, the SW calls the
`Driver#versionFailed()` method. Previously, this method would in turn
call the `Driver#sync()` method, which writes some metadata about the
SW's state to the `ngsw:/:db:contol` cache. More specifically,
`Driver#sync()` persists info about all known app versions, which one is
the latest and also what version each client is assigned to.

However, no relevant info is changed inside `Driver#versionFailed()`, so
the call to `Driver#sync()` is redundant (since there are no changes
that need to be synced with the cache). This is a left-over from
before #43518, when `Driver#versionFailed()` used to update version
assignments and thus did require synchronization with the cache.

This commit removes the redundant `Driver#sync()` call to avoid an
unnecessary write to the cache.

PR Close #43680
",['packages/service-worker/worker/src/driver.ts'],"The `Driver#versionFailed()` procedure unnecessarily calls `Driver#sync()`, leading to redundant metadata write attempts to the `ngsw:/:db:control` cache, despite no relevant information being altered."
217db9b216970a400c96a57e2dcd640cc16a8721,1568406235,"feat(bazel): support ts_library targets as entry-points for ng_package (#32610)

Within an Angular package, it can happen that there are
entry-points which do not contain features that belong into
an `@NgModule` or need metadata files to be generated.

For example: the `cdk`, `cdk/testing` and `cdk/coercion`
entry-points. Besides other entry-points in the `cdk`
package, those entry-points do not need metadata to
be generated and no not use the `ng_module` rule.

Currently the ""ng_package"" rule properly picks up such
entry-points and builds bundles, does downleveling etc.
The only thing it misses is that no `package.json` files
are generated for the entry-point. This means that consumers
will not be able to use these entry-points built with ""ts_library""
(except accessing the individual bundlings explicitly).

The ""ng_package"" rule should follow the full APF specification
for such entry-points. Partially building bundles and doing the
downleveling is confusing and a breaking issue.

The motifivation of supporting this (besides making the
rule behavior consistent; the incomplete output is not
acceptable), is that using the ""ng_module"" rule does
not make sense to be used for non-Angular entry-points.

Especially since it depends on Angular packages to
be specified as Bazel action inputs just to compile
vanilla TypeScript with `@angular/compiler-cli`.

PR Close #32610
","['packages/bazel/src/ng_package/ng_package.bzl', 'packages/bazel/src/ng_package/packager.ts', 'packages/bazel/test/ng_package/example-with-ts-library/index.ts', 'packages/bazel/test/ng_package/example-with-ts-library/portal/index.ts', 'packages/bazel/test/ng_package/example-with-ts-library/portal/portal-module.ts', 'packages/bazel/test/ng_package/example-with-ts-library/utils/index.ts', 'packages/bazel/test/ng_package/example-with-ts-library/utils/testing.ts', 'packages/bazel/test/ng_package/example_package.spec.ts']","The ""ng_package"" rule improperly handles ""ts_library"" entry-points, failing to generate necessary `package.json` files, hence preventing these from being used, except by explicitly accessing individual bundles."
9e77bd30875c8bb40e7b7cf11332c5843b845502,1599766835,"feat(compiler-cli): define interfaces to be used for TemplateTypeChecker (#38618)

This commit defines the interfaces which outline the information the
`TemplateTypeChecker` can return when requesting a Symbol for an item in the
`TemplateAst`.
Rather than providing the `ts.Symbol`, `ts.Type`, etc.
information in several separate functions, the `TemplateTypeChecker` can
instead provide all the useful information it knows about a particular
node in the `TemplateAst` and allow the callers to determine what to do
with it.

PR Close #38618
","['packages/compiler-cli/src/ngtsc/typecheck/api/index.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/symbols.ts']","The current structure of `TemplateTypeChecker` lacks defined interfaces for returning Symbol information related to any `TemplateAst` item, causing dispersion and ambiguity in processing node information."
2d386239741945624c965a0d136c4ec5934d24e4,1561654348,"refactor(service-worker): make the caching behavior more explicit (#30977)

This commit doesn't change the behavior wrt caching, but it makes it
more explicit that only non-timed-out responses are cached. In case of a
timeout, `res` would be set to a programmatically created 504
`Response`, so `cacheResponse()` (which checks for `res.ok`) would not
have cached it anyway, but this makes change makes it more explicit (and
more similar to the equivalent part in [handleFetchWithFreshness()][1]).

[1]: https://github.com/angular/angular/blob/2b4d5c754/packages/service-worker/worker/src/data.ts#L379-L388

PR Close #30977
",['packages/service-worker/worker/src/data.ts'],"The caching behavior in the service worker is unclear, specifically regarding non-timed-out responses and programmatically created 504 Responses."
2a0982661cedaa0541b0b116cf5de32fc540f815,1681238812,"refactor(compiler): pipeline phase to name functions/variables in generated code (#48580)

This commit introduces a new pipeline phase `phaseNaming()`, which tags
operations that generate function and variable declarations with generated names
to use when emitting those operations.

Currently this phase is using placeholder names. Eventually, we will want to
align its output with the current `TemplateDefinitionBuilder` names, in order to
pass the existing tests.

PR Close #48580
","['packages/compiler/src/template/pipeline/src/compilation.ts', 'packages/compiler/src/template/pipeline/src/phases/naming.ts']","The compiler does not have a dedicated phase for naming functions and variables in the generated code, causing inconsistencies and placeholder names."
a15c400fe97179b84afbe54700110edeb5319e23,1681238812,"refactor(compiler): pipeline phase to convert semantic operations to statements (#48580)

This commit introduces `phaseReify()` which performs ""reification"" of IR
operations. This converts previously semantic operations (e.g. `ir.Element`)
into generated instruction calls (`element(...)`). At the end of reification,
all operations have been converted into `ir.StatementOp`s, and the IR AST should
be suitable for emitting as generated code.

Note that after reification, more transformations may still be applied. For
example, instruction chaining will be performed post-reification, since it
depends on the exact selected instructions for each operation.

PR Close #48580
","['packages/compiler/src/template/pipeline/src/instruction.ts', 'packages/compiler/src/template/pipeline/src/phases/reify.ts']","Semantic operations in the intermediate representation (IR) AST are not converted into generated instruction calls - they remain as their initial operation type, which prevents them from being suitable for emitting as generated code."
a62416c6e48d3501d41ab18a54c5c430fec26d4a,1609959251,"fix(language-service): include compilerOptions.rootDir in rootDirs (#40243)

When resolving references, the Ivy compiler has a few strategies it could use.

For relative path, one of strategies is [`RelativePathStrategy`](
https://github.com/angular/angular/blob/master/packages/compiler-cli/src/
ngtsc/imports/README.md#relativepathstrategy). This strategy
relies on `compilerOptions.rootDir` and `compilerOptions.rootDirs` to perform
the resolution, but language service only passes `rootDirs` to the compiler,
and not `rootDir`.

In reality, `rootDir` is very different from `rootDirs` even though they
sound the same.
According to the official [TS documentation][1],
> `rootDir` specifies the root directory of input files. Only use to control
> the output directory structure with --outDir.

> `rootDirs` is a list of root folders whose combined content represent the
> structure of the project at runtime. See [Module Resolution documentation](
> https://www.typescriptlang.org/docs/handbook/
> module-resolution.html#virtual-directories-with-rootdirs)
> for more details.

For now, we keep the behavior between compiler and language service consistent,
but we will revisit the notion of `rootDir` and how it is used later.

Fix angular/vscode-ng-language-service#1039

[1]: https://www.typescriptlang.org/docs/handbook/compiler-options.html

PR Close #40243
","['packages/compiler-cli/src/ngtsc/util/src/typescript.ts', 'packages/language-service/ivy/adapters.ts']","The Ivy compiler's RelativePathStrategy for resolving references is not receiving `compilerOptions.rootDir` from the language service, leading to inconsistencies in reference resolution."
5bc39f8c8d5238a9be9bd968cf18ea4b738bd6be,1582921603,"perf(core): use multiple directives in host bindings micro benchmark (#35736)

This commit updates the host bindings micro benchmark to run tests with mutliple directives (where each directive contains host bindings). The number of directives is configurable as a constant in the micro benchmark file. This change is needed to have an ability to measure/compare perf in different scenarios.

PR Close #35736
",['packages/core/test/render3/perf/host_binding/index.ts'],"The host bindings micro benchmark does not have the functionality to run tests with multiple directives, limiting the ability to measure/compare performance in different scenarios."
cbb1d9f2bb1e6a084451d73ed7d2ee8dfcca7920,1573843421,"fix(compiler-cli): Refactor getTsTypeFromBuiltinType (#33778)

This commit fixes a few issues with helper method
`getBuiltInTypeFromTsType`.

1. The function is wrongly named. It should be the other way round.
2. The ts.Type returned by the function should not contain any value.
This is because for some data types like Number and String, the
SourceFile (context.node) is not the correct value. Value is never
needed for program correctness in this case.

PR Close #33778
","['packages/language-service/src/typescript_symbols.ts', 'packages/language-service/test/typescript_symbols_spec.ts']","Helper method 'getBuiltInTypeFromTsType' is incorrectly named and returns a ts.Type with value, which is not needed for program correctness, causing issues with data types like Number and String."
0920a15139fb344b85603e8a03b8972f41e9eb07,1659719173,"docs: update dependency injection content (#44466)

Refactored the DI section to improve doc quality, reduce cognitive load and drive consistency.

- Added an overview with prerequisites and doc cards that point to rest of the DI content
- Added introduction topic with topic purpose, value proposition and ""fail fast""
- Broke apart complex concepts into simpler tasks
- Unified tone and language for each topic
- Added new content based on SME feedback
- Deleted obsolete content

PR Close #44466
","['aio/content/examples/dependency-injection-in-action/src/app/parent-finder.component.ts', 'aio/content/examples/dependency-injection/src/app/app.config.ts', 'aio/content/examples/dependency-injection/src/app/app.module.ts', 'aio/content/examples/dependency-injection/src/app/injector.component.ts', 'aio/content/examples/dependency-injection/src/app/providers.component.ts']","The Dependency Injection (DI) documentation section is complex, lacks overview and introduction, and contains obsolete content, making it hard to comprehend and inconsistent."
446e3573e3d348135294fd061c5c49573e2551c0,1555350834,"refactor(core): add static-query template strategy (#29815)

Introduces a new strategy for the `static-query` schematic that
is enabled by default. In order to provide a migration that works
for the most Angular applications and makes the upgrade as easy
as possible, the template strategy leverages the view engine
Angular compiler logic in order to determine the query timing
that is currently used within applications using view engine.

PR Close #29815
","['packages/core/schematics/migrations/static-queries/angular/query-definition.ts', 'packages/core/schematics/migrations/static-queries/google3/explicitQueryTimingRule.ts', 'packages/core/schematics/migrations/static-queries/index.ts', 'packages/core/schematics/migrations/static-queries/strategies/template_strategy/template_strategy.ts', 'packages/core/schematics/migrations/static-queries/strategies/timing-strategy.ts', 'packages/core/schematics/migrations/static-queries/strategies/usage_strategy/usage_strategy.ts', 'packages/core/schematics/migrations/static-queries/timing-strategy.ts', 'packages/core/schematics/migrations/static-queries/transform.ts', 'packages/core/schematics/test/static_queries_migration_template_spec.ts', 'packages/core/schematics/test/static_queries_migration_usage_spec.ts']","Angular's `static-query` schematic lacks a default strategy, impeding straightforward migration and making it difficult to determine query timing in applications using view engine."
c24924cbd7300ea0c24822ad64d30308621792dc,1643232930,"build(devtools): use ng-dev stamp tooling to stamp the latest git SHA in devtools

Previously, we were using ngx-build-plus with a custom webpack config to determine the git SHA at runtime.

Now, after migrating to bazel and transfering to angular/angular, this commit uses ng-dev to stamp the latest git SHA directly in angular devtools' application environment.

This commit also removes the old webpack configs.
","['devtools/initialize_testbed.ts', 'devtools/packages.bzl', 'devtools/projects/ng-devtools/src/lib/application-environment/index.ts', 'devtools/projects/ng-devtools/src/lib/devtools-tabs/devtools-tabs.component.ts', 'devtools/projects/shell-chrome/shell-chrome-webpack.config.js', 'devtools/projects/shell-chrome/src/environments/environment.prod.ts', 'devtools/projects/shell-chrome/src/environments/environment.ts', 'devtools/shell-dev-webpack.config.js', 'devtools/src/environments/environment.e2e.ts', 'devtools/src/environments/environment.prod.ts', 'devtools/src/environments/environment.ts']",The old method of determining the git SHA at runtime using ngx-build-plus and a custom webpack config is not compatible after migrating to Bazel and transferring to angular/angular.
274dc15452739e4fab2f647804a64d5b797cfed5,1616523784,"fix(core): detect synthesized constructors that have been downleveled using TS 4.2 (#41305)

TypeScript 4.2 has changed its emitted syntax for synthetic constructors
when using `downlevelIteration`, which affects ES5 bundles that have
been downleveled from ES2015 bundles. This is typically the case for UMD
bundles in the APF spec, as they are generated by downleveling the
ESM2015 bundle into ES5. The reflection capabilities in the runtime need
to recognize this new form to correctly deal with synthesized
constructors, as otherwise JIT compilation could generate invalid
factory functions.

Fixes #41298

PR Close #41305
","['packages/core/src/reflection/reflection_capabilities.ts', 'packages/core/test/reflection/reflector_spec.ts']","Synthesized constructors in ES5 bundles, downleveled from ES2015 using TypeScript 4.2's `downlevelIteration`, are not properly recognized by runtime reflection, leading to potential invalid JIT compilation."
27d0e54705744c9aed7accbc9dafd9d74c6f4f3b,1610390350,"fix(compiler-cli): prevent stack overflow in decorator transform for large number of files (#40374)

The decorator downleveling transform patches `ts.EmitResolver.isReferencedAliasDeclaration`
to prevent elision of value imports that occur only in a type-position, which would
inadvertently install the patch repeatedly for each source file in the program.
This could potentially result in a stack overflow when a very large number of files is
present in the program.

This commit fixes the issue by ensuring that the patch is only applied once.
This is also a slight performance improvement, as `isReferencedAliasDeclaration`
is no longer repeatedly calling into all prior installed patch functions.

Fixes #40276

PR Close #40374
","['packages/compiler-cli/src/transformers/downlevel_decorators_transform.ts', 'packages/compiler-cli/src/transformers/patch_alias_reference_resolution.ts', 'packages/compiler-cli/test/transformers/downlevel_decorators_transform_spec.ts']",Repeated installation of decorator downleveling transform patch with large numbers of source files could potentially cause a stack overflow.
1de04b124e1e92ea21a070c9d928664f193d220c,1617403725,"feat(compiler-cli): support transforming component style resources (#41307)

This change introduces a new hook on the `ResourceHost` interface named `transformResource`.
Resource transformation allows both external and inline resources to be transformed prior to
compilation by the AOT compiler. This provides support for tooling integrations to enable
features such as preprocessor support for inline styles.
Only style resources are currently supported. However, the infrastructure is in place to add
template support in the future.

PR Close #41307
","['packages/compiler-cli/ngcc/src/analysis/decoration_analyzer.ts', 'packages/compiler-cli/src/ngtsc/annotations/index.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/api.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/annotations/test/component_spec.ts', 'packages/compiler-cli/src/ngtsc/core/api/src/adapter.ts', 'packages/compiler-cli/src/ngtsc/core/api/src/interfaces.ts', 'packages/compiler-cli/src/ngtsc/core/src/host.ts', 'packages/compiler-cli/src/ngtsc/resource/src/loader.ts']","There is currently no support for transformation of external and inline resources prior to AOT compiler, limiting functionality for tool integrating features like preprocessor support for inline styles."
538286df16390249784a98f9026098e2412db33d,1619464320,"build(docs-infra): add path disambiguation (#41788)

When two documents have the same `outputPath`, only differing by
letter casing, there can be problems on case-insensitive file-systems:
Only one of each of the docs would end up being written.

Moreover, the Webpack 5 bundler will error if it comes across files
that have this kind of ambiguous paths.

This commit adds a new docType: `disambiguator`, which will display
a list of the docs that match an ambiguous path. Each of the ambiguous
docs is then given a unique path and outputPath to ensure there are no
collisions.

PR Close #41788
","['aio/tools/transforms/angular-base-package/index.js', 'aio/tools/transforms/angular-base-package/processors/disambiguateDocPaths.js', 'aio/tools/transforms/angular-base-package/processors/disambiguateDocPaths.spec.js']","When two documents have the same `outputPath`, differentiation only by letter casing, it can cause problems on case-insensitive file systems as only one of the docs is written, also causing Webpack 5 bundler errors due to ambiguous paths."
332461bd0c5f5734a9d7f051f0f4c6c173dd87c9,1669173633,"feat(router): Add ability to override `onSameUrlNavigation` default per-navigation (#48050)

The router providers a configurable `onSameUrlNavigation` value that
allows developers to configure whether navigations to the same URL as
the current one should be processed or ignored. However, this only acts
as a default value and there isn't an API for easily overriding this for
a single navigation. Instead, developers are forced to update the value
of the property on the router instance and remember to reset it.

This feature fills a small gap in the Router APIs that enables
developers to accomplish the task of force reloading a bit easier.

Lengthy discussion about this here: #21115

PR Close #48050
","['packages/router/src/index.ts', 'packages/router/src/models.ts', 'packages/router/src/navigation_transition.ts', 'packages/router/src/router.ts', 'packages/router/src/router_config.ts', 'packages/router/test/integration.spec.ts']","There's no API to override the `onSameUrlNavigation` value for individual navigations, forcing developers to manually update this property on the router instance each time."
645c2ef97331c09827cc3bd86863956762be4ff8,1613493679,"fix(compiler): support multiple selectors in `:host-context()` (#40494)

The previous commits refactored the `ShadowCss` emulator to support
desirable use-cases of `:host-context()`, but it dropped support
for passing a comma separated list of selectors to the `:host-context()` .

This commit rectifies that omission, despite the use-case not being
valid according to the ShadowDOM spec, to ensure backward compatibility
with the previous implementation.

PR Close #40494
","['packages/compiler/src/shadow_css.ts', 'packages/compiler/test/shadow_css_spec.ts']","The `:host-context()` in `ShadowCss` emulator does not support a comma-separated list of selectors, leading to backward compatibility issues."
a91f0f6b82f340cfde5a01bc328d2723dc4248f0,1600473352,"refactor(compiler): refactor ast spans test to be more human readable (#38902)

The current tests print out the span numbers, which are really difficult to verify
since it requires manually going to the template string and looking at what
characters appear within those indexes. The better humanization would be
to use the toString method of the spans, which prints the span text itself

PR Close #38902
",['packages/compiler/test/render3/r3_ast_spans_spec.ts'],"Current AST spans test prints span numbers, making verification difficult as it requires manual inspection of template string and corresponding characters indices."
99f2ffc740279509b89bb96093e2515ce0b46ae1,1619460059,"build: update stemmer to version 2.0.0 (#41724)

NOTE:
`stemmer` v2.0.0 switched to ES modules (see
words/stemmer@03519229c84555a38d3256409d1871edfd43528f), which means
that the only way to consume it in our CommonJS setup (for example, in
[generateKeywords][1]) is via an async `import()`.

This commit makes the `generateKeywords` processor asynchronous in order
to be able to dynamically import and use `stemmer`.

[1]: https://github.com/angular/angular/blob/251bec159af1e8f90c3af9820695c645800207e4/aio/tools/transforms/angular-base-package/processors/generateKeywords.js

PR Close #41724
","['aio/tools/transforms/.eslintrc.js', 'aio/tools/transforms/angular-base-package/processors/generateKeywords.js', 'aio/tools/transforms/angular-base-package/processors/generateKeywords.spec.js']","After the update to `stemmer` v2.0.0, the CommonJS setup is incompatible as this version uses ES modules, causing issues in functions like `generateKeywords`."
4d0e175a6544e7f418b505f83157c894818f37fd,1590792721,"fix(core): reenable decorator downleveling for Angular npm packages (#37317)

In #37221 we disabled tsickle passes from transforming the tsc output that is used to publish all
Angular framework and components packages (@angular/*).

This change however revealed a bug in the ngc that caused __decorate and __metadata calls to still
be emitted in the JS code even though we don't depend on them.

Additionally it was these calls that caused code in @angular/material packages to fail at runtime
due to circular dependency in the emitted decorator code documeted as
https://github.com/microsoft/TypeScript/issues/27519.

This change partially rolls back #37221 by reenabling the decorator to static fields (static
properties) downleveling.

This is just a temporary workaround while we are also fixing root cause in `ngc` - tracked as
FW-2199.

Resolves FW-2198.
Related to FW-2196

PR Close #37317
","['integration/ngcc/test.sh', 'integration/side-effects/snapshots/animations-browser/esm2015.js', 'integration/side-effects/snapshots/common/esm2015.js', 'integration/side-effects/snapshots/core/esm2015.js', 'integration/side-effects/snapshots/forms/esm2015.js', 'integration/side-effects/snapshots/platform-browser/esm2015.js', 'integration/side-effects/snapshots/router/esm2015.js', 'packages/bazel/src/ngc-wrapped/index.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']","TSickle transformation disabled in Angular packages has revealed a bug in ngc that causes unnecessary __decorate and __metadata calls in the JS code, resulting in runtime failures in @angular/material packages due to circular dependencies."
49be32c9315a5c7ff155c5b88191e504006f595b,1588272109,"refactor(common): remove WrappedValue from AsyncPipe (#36633)

`AsyncPipe` only uses `WrappedValue` when the latest value from the `Promise` or `Observable` is different from the previous one. This is already enough to trigger change detection so the `WrappedValue` is not necessary.

Fixes #29927

BREAKING CHANGE:
This change could result in ExpressionChangedAfterItHasBeenChecked errors that
were not detected before. The error could previously have gone undetected
because two WrappedValues are considered ""equal"" in all cases for the purposes
of the check, even if their respective unwrapped values are not.

Additionally, `[val]=(observable | async).someProperty` will no longer
trigger change detection if the value of `someProperty` is identical to
the value in the previous emit. If you need to force change detection,
either update the binding to use an object whose reference changes or
subscribe to the observable and call markForCheck as needed.

PR Close #36633
","['packages/common/src/pipes/async_pipe.ts', 'packages/common/test/pipes/async_pipe_spec.ts']","`AsyncPipe` uses `WrappedValue` unnecessarily during change detection, which could result in undetected ExpressionChangedAfterItHasBeenChecked errors and idle change detection for identical values in subsequent emits."
ad0fb9c6bb28730c83321537a72c10b94fb1b873,1610652639,"fix(ngcc): copy (and update) source-maps for unmodified source files (#40429)

When using the `NewEntryPointWriter` we copy unmodified files over to the new
entry-point in addition to writing out the source files that are processed by ngcc.
But we were not copying over associated source-map files for these unmodified
source files, leading to warnings in downstream tooling.

Now we will also copy over source-maps that reside as siblings of unmodified
source files. We have to make sure that the sources of the source-map point
to the correct files, so we also update the `sourceRoot` property of the copied
source-map.

Fixes #40358

PR Close #40429
","['packages/compiler-cli/ngcc/src/writing/new_entry_point_file_writer.ts', 'packages/compiler-cli/ngcc/test/writing/new_entry_point_file_writer_spec.ts']","Unmodified source files are copied over in `NewEntryPointWriter` without their associated source-map files, causing warnings in downstream tooling."
309ffe7e16960ce5049c824881079d22665ec8a8,1553704918,"fix(ivy): TestBed rewrite to avoid unnecessary recompilations (#29483)

Prior to this change, Ivy version of TestBed was not designed to support the logic to avoid recompilations - most of the Components/Directives/Pipes were recompiled for each test, even if there were no overrides defined for a given Type. Additional checks to avoid recompilation were introduced in one of the previous commits (0244a2433e2d7009d98bc589899edcd5b1fa003f), but there were still some corner cases that required attention. In order to support the necessary logic better, Ivy TestBed was rewritten/refactored. Main results of this rewrite are:

* no recompilation for Components/Directives/Pipes without overrides
* the logic to restore state between tests (isolate tests) was improved
* transitive scopes calculation no longer performs recompilation (it works with compiled defs)

As a result of these changes we see reduction in memory consumption (3.5-4x improvement) and pefromance increase (4-4.5x improvement).

PR Close #29483
","['packages/core/test/test_bed_spec.ts', 'packages/core/testing/src/r3_test_bed.ts', 'packages/core/testing/src/r3_test_bed_compiler.ts', 'packages/core/testing/src/resolvers.ts', 'packages/platform-browser/test/testing_public_spec.ts', 'packages/platform-webworker/test/web_workers/worker/renderer_v2_integration_spec.ts']","TestBed in Ivy recompiles most Components/Directives/Pipes for every test even without any overrides, leading to performance inefficiency and memory consumption."
11a208f55cea6b5dfeeadcfc460c3edd8a2ed7ac,1562092121,"feat(bazel): allow passing and rewriting an old bazel host (#31381)

Updates the decision made in #31341; this is for the Angular indexer
inside Google. The indexer currently passes (and ngc-wrapped#compile
accepts) a bazel host to use, but because many methods are overwritten
specially for Angular compilation a better approach is to pass an old
bazel compiler host and siphon methods needed off of it before creating
a new host. This enables that.

PR Close #31381
",['packages/bazel/src/ngc-wrapped/index.ts'],"The Angular indexer is hindered by using a bazel host due to methods being overwritten for Angular compilation, leading to potentially incorrect functionality."
a391aebbcfa3acd6fd664bee38f52e3cfcd68a52,1568059454,"feat(language-service): add definitions for styleUrls (#32464)

Adds support for `styleUrls` definitions in the same way `templateUrl`
definitions are provided; clicking on styleUrl will take a user to the
respective file.

Unifies some code in determining a URL definition. We first check if a
url is a `templateUrl`; if it's not, we check that it's a `styleUrl` or
return no definitions.

PR Close #32464
","['integration/language_service_plugin/project/app/widget.component.ts', 'integration/language_service_plugin/test.ts', 'packages/language-service/src/definitions.ts', 'packages/language-service/test/definitions_spec.ts', 'packages/language-service/test/test_data.ts']","Clicking on styleUrls does not navigate user to the respective file, similar to how templateUrl does."
a32a317ea14f7ff9c81eb027b3d4dd36484efde5,1599599185,"fix(compiler-cli): ensure that a declaration is available in type-to-value conversion (#38684)

The type-to-value conversion could previously crash if a symbol was
resolved that does not have any declarations, e.g. because it's imported
from a missing module. This would typically result in a semantic
TypeScript diagnostic and halt further compilation, therefore not
reaching the type-to-value conversion logic. In Bazel however, it turns
out that Angular semantic diagnostics are requested even if there are
semantic TypeScript errors in the program, so it would then reach the
type-to-value conversation and crash.

This commit fixes the unsafe access and adds a test that ignores the
TypeScript semantic error, effectively replicating the situation as
experienced under Bazel.

Fixes #38670

PR Close #38684
","['packages/compiler-cli/src/ngtsc/annotations/src/util.ts', 'packages/compiler-cli/src/ngtsc/reflection/src/host.ts', 'packages/compiler-cli/src/ngtsc/reflection/src/type_to_value.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","Type-to-value conversion crashes when a symbol without any declarations, like one imported from a missing module, is resolved, especially under Bazel where Angular semantic diagnostics are run even in the presence of semantic TypeScript errors."
19b88cef71b4c8e046ea751d5470dce5f9e1438b,1603831039,"fix(compiler): do not throw away render3 AST on errors (#39413)

Currently render3's `parseTemplate` throws away the parsed AST and
returns an empty list of HTML nodes if HTML->R3 translation failed. This
is not preferrable in some contexts like that of a language service,
where we would like a well-formed AST even if it is has errors.

PR Close #39413
","['packages/compiler/src/render3/view/template.ts', 'packages/language-service/ivy/test/hybrid_visitor_spec.ts']","On HTML->R3 translation failure, the `parseTemplate` in render3 discards the parsed AST, producing an empty list of HTML nodes, which isn't desirable in certain contexts like language services where a well-formed AST with errors is needed."
15f8638b1cbc376a8a769ea0b1e62a8f4613cd31,1573595790,"fix(ivy): ensure module scope is rebuild on dependent change (#33522)

During incremental compilations, ngtsc needs to know which metadata
from a previous compilation can be reused, versus which metadata has to
be recomputed as some dependency was updated. Changes to
directives/components should cause the NgModule in which they are
declared to be recompiled, as the NgModule's compilation is dependent
on its directives/components.

When a dependent source file of a directive/component is updated,
however, a more subtle dependency should also cause to NgModule's source
file to be invalidated. During the reconciliation of state from a
previous compilation into the new program, the component's source file
is invalidated because one of its dependency has changed, ergo the
NgModule needs to be invalidated as well. Up until now, this implicit
dependency was not imposed on the NgModule. Additionally, any change to
a dependent file may influence the module scope to change, so all
components within the module must be invalidated as well.

This commit fixes the bug by introducing additional file dependencies,
as to ensure a proper rebuild of the module scope and its components.

Fixes #32416

PR Close #33522
","['packages/compiler-cli/src/ngtsc/incremental/src/state.ts', 'packages/compiler-cli/src/ngtsc/transform/src/compilation.ts', 'packages/compiler-cli/test/ngtsc/incremental_spec.ts']","In incremental compilations, changes to directive/component dependencies do not properly trigger an NgModule recompilation, potentially causing outdated NgModule metadata to be used."
cd1b52483e886f6e2ad6cde23ff8a2225cafa219,1633542944,"feat(bazel): expose `esm2020` and `es2020` conditions in APF package exports (#43740)

In addition to the existing `exports` conditional exports we ship
as part of APF v13, we want to expose the non-bundled ESM2020 output
through the `esm2020` conditional name. Additionally we will expose
the flat ES2020 files through the `es2020` conditional field, allowing
consumers (like the CLI) to prioritize certain formats.

e.g. consider the case with RXJS where it currently defaults to
the ESM5 output. The CLI could now set `es2015` as the conditional
to leverage the ES2015 output of RXJS. This unveils a problem though
since this would also mean that `ES2015` output of the framework Angular
packages would be used instead of the available ES2020 output. Here is
the additional `es2020` conditional helpful as it allows the CLI to
prioritize `es2020`, fallback to `es2015` and lastly fallback to `default`.
if none do match for a certain package.

PR Close #43740
","['packages/bazel/src/ng_package/packager.ts', 'packages/bazel/test/ng_package/common_package.spec.ts', 'packages/bazel/test/ng_package/core_package.spec.ts', 'packages/bazel/test/ng_package/test_utils.ts']","Current APF v13 doesn't expose non-bundled ESM2020 output and flat ES2020 files conditionally, causing issues with CLI's ability to prioritize certain output formats."
5a17858c5a03a2f0f193ddb88389310a22520475,1664473719,"refactor(router): unify the `RouterLink` and `RouterLinkWithHref` class logic (#47500)

Currently, the `RouterLink` and `RouterLinkWithHref` classes share a lot of common code (with some special logic around handling `<a>`-related scenarios). This commit unifies the logic of the mentioned directives by moving the necessary handling to the `RouterLink` directive and making it a parent one for the `RouterLinkWithHref` class (i.e. class RouterLinkWithHref extends RouterLink).

This is the first step in upcoming unification to merge both directives and just keep `RouterLink` one (it'd be done in followup PRs).

PR Close #47500
",['packages/router/src/directives/router_link.ts'],"`RouterLink` and `RouterLinkWithHref` classes in the router code are duplicating a lot of the same logic, including special cases for handling `<a>` tags. Unification needed."
42d1091d6a4258476be2a5eb5b006c11ec522415,1588887905,"fix(compiler-cli): don't try to tag non-ts files as shims (#36987)

Some projects include .js source files (via the TypeScript allowJs option).
Previously, the compiler would attempt to tag these files for shims, which
caused errors as the regex used to create shim filenames assumes a .ts file.
This commit fixes the bug by filtering out non-ts files during tagging.

PR Close #36987
","['packages/compiler-cli/src/ngtsc/shims/src/reference_tagger.ts', 'packages/compiler-cli/src/ngtsc/shims/test/reference_tagger_spec.ts', 'packages/compiler-cli/test/ngtsc/env.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']","Compiler tags non-TS files for shims which leads to errors, as the procedure assumes a .ts file structure."
c2c14c2a1f0645afb1124dbe3e755eeeca8a5411,1589827808,"fix(dev-infra): incorrect base revision for merge script autosquash (#37138)

As mentioned in the previous commit, the autosquash strategy has
not been used in the components repo, so we could easily regress.

After thorough manual testing of the autosquash strategy again,
now that the merge script will be moved to framework, it came
to mind that there is a bug with the base revision in the
autosquash merge strategy. The problem is that the base revision
of a given PR is relying on the amount of commits in a PR.

This is prone to error because the amount of commits could easily
change in the autosquash merge strategy, because fixup or squash
commits will be collapsed. Basically invalidating the base revision.

To fix this, we fixate the base revision by determining the actual
SHA. This one is guaranteed to not change after the autosquash rebase.

The current merge script in framework fixates the revision by creating
a separate branch, but there is no benefit in that, compared to just
using an explicit SHA that doesn't need to be cleaned up..

PR Close #37138
",['dev-infra/pr/merge/strategies/autosquash-merge.ts'],"Autosquash merge strategy in the merge script has a bug where the base revision is incorrect due to reliance on the number of commits in a PR, leading to errors as the number of commits can change after autosquash rebase."
39587ad127e9932347f5b456fe336bfb38ff9acb,1571084683,"fix(compiler-cli): resolve type of exported *ngIf variable. (#33016)

Currently, method `getVarDeclarations()` does not try to resolve the type of
exported variable from *ngIf directive. It always returns `any` type.
By resolving the real type of exported variable, it is now possible to use this
type information in language service and provide completions, go to definition
and quick info functionality in expressions that use exported variable.
Also language service will provide more accurate diagnostic errors during
development.

PR Close #33016
","['packages/compiler-cli/src/diagnostics/expression_diagnostics.ts', 'packages/compiler-cli/test/diagnostics/expression_diagnostics_spec.ts', 'packages/language-service/test/completions_spec.ts']","'getVarDeclarations() method does not resolve the type for exported *ngIf directive variable. This inhibits language service from fully utilizing type information, impacting functionality and error diagnostics.'"
e2997ed5ee779842343096f3a7a0a6ca6590c356,1601324884,"build(docs-infra): update TypeScript and other deps to align with latest CLI (#39017)

This commit updates TypeScript and other dependencies used in angular.io
to more closely align with new apps created with the latest Angular CLI.
It also updates `tsconfig.json`, re-ordering some properties around and
introducing some more checks (again to more closely match new CLI apps).

NOTE:
I skipped updating RxJS from 6.5.4 to 6.6.3, because it increased the
main bundle by ~500B.

NOTE:
`tslint.json` will be updated in a subsequent PR, because it requires
more extensive changes.

PR Close #39017
",['aio/src/app/shared/scroll.service.spec.ts'],"Angular.io's TypeScript and other dependencies are out-of-sync with those used in the latest Angular CLI, creating inconsistency with new CLI apps. This could potentially lead to performance issues or bugs."
e39f804f1e28bcdd92d9088e40087e8868f6d552,1641424843,"test(upgrade): fix flaky tests (#44597)

Fixes a couple of tests that have been flaking our test runs. The two tests actually failed consistently when run in isolation, but they passed if at least one test ran before them. My understanding was that they failed, because they were running outside of the `NgZone` which meant that the errors being thrown inside of a `Promise` weren't being flushed.

PR Close #44597
",['packages/upgrade/src/dynamic/test/upgrade_spec.ts'],"A pair of tests are consistently failing when run in isolation, indicating potential issues with the handling of Promise error flushing outside of `NgZone`."
07ea6cf5822ed823774e106e3435ef0b2a9d6981,1578524450,"fix(ngcc): avoid error due to circular dependency in `EsmDependencyHost` (#34512)

Previously, there was circular dependency between `ngcc/src/utils.ts`,
`ngcc/src/dependencies/dependency_host.ts` and
`ngcc/src/dependencies/esm_dependency_host.ts`. More specifically,
`utils.ts` would [import from `esm_dependency_host.ts`][1], which would
[import from `dependency_host.ts`][2], which would in turn
[import from `utils.ts`][3].

This might be fine in some environments/module formats, but it can cause
unclear errors in the transpiled CommonJS/UMD format (given how Node.js
handles [cycles in module resolution][4]).
(An example error can be found [here][5].)

This commit fixes the problem by moving the code that depends on
`EsmDependencyHost` out of `utils.ts` and into a dedicated file under
`dependencies/`. It also converts the `createDtsDependencyHost()`
function to a class for consistency with the rest of the
`DependencyHost`s.

[1]: https://github.com/angular/angular/blob/18d89c9c8/packages/compiler-cli/ngcc/src/utils.ts#L10
[2]: https://github.com/angular/angular/blob/18d89c9c8/packages/compiler-cli/ngcc/src/dependencies/esm_dependency_host.ts#L10
[3]: https://github.com/angular/angular/blob/18d89c9c8/packages/compiler-cli/ngcc/src/dependencies/dependency_host.ts#L9
[4]: https://nodejs.org/api/modules.html#modules_cycles
[5]: https://circleci.com/gh/angular/angular/577581

PR Close #34512
","['packages/compiler-cli/ngcc/src/dependencies/dts_dependency_host.ts', 'packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/src/utils.ts', 'packages/compiler-cli/ngcc/test/dependencies/dependency_resolver_spec.ts', 'packages/compiler-cli/ngcc/test/dependencies/esm_dependency_host_spec.ts', 'packages/compiler-cli/ngcc/test/entry_point_finder/directory_walker_entry_point_finder_spec.ts', 'packages/compiler-cli/ngcc/test/entry_point_finder/targeted_entry_point_finder_spec.ts']","A circular dependency exists between files in the ngcc module, causing unclear errors in transpiled CommonJS/UMD formats due to how Node.js handles module resolution cycles."
7115e7c4277d9dbe18341532d387345668444f9d,1549661856,"build: remove outdated polymer tree benchmark (#28568)

The ""tree/polymer_leaves"" benchmark has no benchmark tests, nor do we install
Polymer anywhere. Polymer was previously installed through `bower`, but since
we removed bower, there is no easy way to run this benchmark with Polymer.

Considering that there are no benchmark tests, nor we have an easy way to
install/vendor Polymer, we should just remove this benchmark app.

This is also based on the assumption that we want to remove the
Polymer benchmarks anyway: see: 8a05199fb9be5ef91ec8094a3c6abc0a65eb6bcd

PR Close #28568
",['modules/benchmarks/src/tree/polymer_leaves/index.ts'],"The ""tree/polymer_leaves"" benchmark has no tests and we've removed the method for installing Polymer, leaving this benchmark unusable."
c2a904da09165609cf408ceee26611f3a8df5326,1576275596,"fix(ivy): inheriting injectable definition from undecorated class not working on IE10 in JIT mode (#34305)

The way definitions are added in JIT mode is through `Object.defineProperty`, but the problem is that in IE10 properties defined through `defineProperty` won't be inherited which means that inheriting injectable definitions no longer works. These changes add a workaround only for JIT mode where we define a fallback method for retrieving the definition. This isn't ideal, but it should only be required until v10 where we'll no longer support inheriting injectable definitions from undecorated classes.

PR Close #34305
","['packages/core/src/di/interface/defs.ts', 'packages/core/src/di/jit/injectable.ts']","In JIT mode on IE10, injectable definitions from undecorated classes are not inherited due to properties defined through `Object.defineProperty` not being inherited."
f6ee1c22194fb7aa6e5662aee82f291785436b55,1555113312,"fix(ivy): use existing 'goog' declaration for goog.getMsg check (#29873)

Previously, this check was done with bracket property access on the
global object: global['goog']

This will not be minified when Closure compiles this code, which:

1) breaks, because 'goog' will have been minified but the check won't have
   taken that into consideration

2) causes build failures in g3, because the actual property 'goog' is
   forbidden in some published JS code (to ensure obfuscation).

A TODO is added to validate that this logic is correct, as it's difficult to
test within the Angular repo.

PR Close #29873
",['packages/core/src/util/ng_i18n_closure_mode.ts'],Use of bracket property access on the global object 'goog' results in build failures and breaks due to misalignment with minified 'goog' in Closure compiled code.
cb2ab26296c79527f4c8e61c670490202abfe794,1594149381,"feat(dev-infra): merge script should link to original commit when cherry-picking with API strategy (#37889)

The merge script uses `git cherry-pick` for both the API merge strategy
and the autosquash strategy. It uses cherry-pick to push commits to
different target branches (e.g. into the `10.0.x` branch).

Those commits never point to the commits that landed in the primary
Github branch though. For the autosquash strategy the pull request number
is always included, so there is a way to go back to the source. On the other
hand though, for commits cherry-picked in the API merge strategy, the
pull request number might not always be included (due to Github's
implementation of the rebase merge method).

e.g.
https://github.com/angular/components/commit/27f52711c0618a9ae4eab4c888c8ab3245638e77

For those cases we'd want to link the cherry-picked commits to the
original commits so that the corresponding PR is easier to track
down. This is not needed for the autosquash strategy (as outlined
before), but it would have been good for consistency. Unfortunately
though this would rather complicate the strategy as the autosquash
strategy cherry-picks directly from the PR head, so the SHAs that
are used in the primary branch are not known.

PR Close #37889
","['dev-infra/pr/merge/strategies/api-merge.ts', 'dev-infra/pr/merge/strategies/strategy.ts']","Cherry-picked commits during API merge strategy do not point back to original commits, making it harder to track the corresponding pull requests, especially when pull request number may not always be included."
91070d951279a4d88816a623cf6d072117bbc272,1653337838,"ci: fix formatting for `babel_ast_host.ts` file after recent changes (#46082)

The formatting of the `babel_ast_host.ts` file is invalid due to a
recently-merged PR. The PR had a passing `lint` state but this seemed
to just appear like this because the Git comparison range on upstream
branches can become invalid (due to a known bug in CircleCI -- reported)

PR Close #46082
",['packages/compiler-cli/linker/babel/src/ast/babel_ast_host.ts'],"Formatting of the `babel_ast_host.ts` file invalidated by a recently merged PR - despite a passing lint state - due to a known bug in CircleCI, resulting in invalid Git comparison range on upstream branches."
73b0275dc2dd64bbb39be3a8079b418a40e89cfd,1624553732,"fix(service-worker): improve ServiceWorker cache names (#42622)

This commit improves the cache names generated by the ServiceWorker by
making them shorter and non-repetitive. In particular, the following
changes are made:

- Data-group cache names no longer include the `dynamic` infix, since it
  does not add any value.
  Before: `ngsw:<...>:data:dynamic:<...>`
  After:  `ngsw:<...>:data:<...>`

- `CacheDatabase` table names no longer include the `ngsw:<path>` prefix
  twice.
  Before: `ngsw:<path>:db:ngsw:<path>:<...>`
  After:  `ngsw:<path>:db:<...>`

NOTE 1:
This change will result in different cache names being generated for the
same app-versions with the new SericeWorker script. This means that some
of the previously cached data will need to be re-downloaded (because the
ServiceWorker will not be able to re-use the old caches), but that
should be transparent for the end user.
While possible, adding logic to allow the ServiceWorker to retrieve data
from the old caches is not worth the extra complecity and maintenance
cost.

NOTE 2:
Generating different cache names for some of the caches means that the
ServiceWorker will not be able to clean-up some of the old caches. This
will be taken care of in a subsequent commit that will rework the
clean-up logic to be more robust (covering changes such as this one and
other edgecases).

PR Close #42622
","['packages/service-worker/worker/src/app-version.ts', 'packages/service-worker/worker/src/assets.ts', 'packages/service-worker/worker/src/data.ts', 'packages/service-worker/worker/test/happy_spec.ts']","ServiceWorker generates lengthy and repetitive cache names, causing potential issues with cache reusability and clean-up. This can lead to unnecessary data re-downloads."
f58ad86e51817f83ff18db790a347528262b850b,1670948918,"feat(router): Add feature provider for enabling hash navigation (#48301)

The argument against this feature:

Firstly, this isn't a navigation strategy that's very commonly desired.
Secondly, the hash strategy is a location configuration in `@angular/common`
and you can use it outside of the Router or with any custom router implementations.
So while the net effect of using the router is that it updates the URL which is
controlled by the strategy, this feature provider doesn't necessarily need to
exist in the Router. The location strategy is an application-wide configuration
and affects anything that imports `Location`.  Of course, the Router does this
in a few places but plenty of other things might as well.

The argument for this feature:

* Discoverability. While `LocationStrategy` is technically in `@angular/common`, the most
  common use-case _is_ when using it with the Router.
* Precedence in the `RouterModule.forRoot([], {useHash: true})`
* Precedence in other routing libraries (`createWebHashHistory` in VueJS
  and `HashRouter` in React, for example)
* The implementation of `withHashLocation` is much more clear than
  `useHash` was. You can look at the function and see that all it's
  doing is adding the `HashLocationStrategy` to the providers list.

resolves #48295 / #47986

PR Close #48301
","['packages/router/src/index.ts', 'packages/router/src/provide_router.ts']",The existing 'useHash' navigation strategy in Angular's Router functionality is not easily discoverable and unclear in its implementation. This may cause confusion or undesired outcomes for developers using or customizing router implementations.
dea7234a76f652c8e9d9b79719e2b170a5a50777,1644430736,"fix(zone.js): async-test should only call done once (#45025)

`AsyncTestZoneSpec` triggers jasmine `done()` function multiple times
and causes warning

```
An asynchronous function called its 'done' callback more than once. This is a bug in the spec, beforeAll, beforeEach, afterAll, or afterEach function in question. This will be treated as an error in a future version. See<https://jasmine.github.io/tutorials/upgrading_to_Jasmine_4.0#deprecations-due-to-calling-done-multiple-times> for more information
```

The reproduce case will be running some `Zone.run()` inside
`waitForAsync()`.

```
it('multiple done', waitForAsync(() => {
  Zone.current.run(() => {});
  Zone.current.run(() => {});
}));
```

The reason the `done()` is called in the `onInvoke()` hook is to handle
the case that the testBody is totally sync, but we should only do this
check for the entry function not for all `Zone.run()` scenario.

Another issue is if we run nested zone inside `waitForAsync()`, the
`onHasTask()` hook will be triggered multiple times, and cause `done()`
be triggered multiple times, so we need to only trigger the `done()`
when the zone is `AsyncTestZone`.

PR Close #45025
","['packages/zone.js/lib/zone-spec/async-test.ts', 'packages/zone.js/test/zone-spec/async-test.spec.ts']","The `AsyncTestZoneSpec` triggers the jasmine `done()` function multiple times when running some `Zone.run()` inside `waitForAsync()`, causing an unnecessary warning."
bde925bd42eeb0c35dda894cb10f9e9d13bc7b6a,1658181738,"refactor(router): Update TitleStrategy to useFactory (#46876)

The implementation of the `DefaultTitleStrategy` was modeled after the
existing strategy patterns in the Router. These patterns were developed
before the `providedIn` syntax for injectables. We can simplify the
model a lot by providing the default in the factory of the abstract
class.

Note that the other strategy patterns aren't touched in this PR due to
how long they've existed. Because they have been there for such a long
time, it's possible there will need to be some adjustments to code
if/when they are refactored to do the same.

PR Close #46876
","['packages/router/src/page_title_strategy.ts', 'packages/router/src/router_module.ts', 'packages/router/testing/src/router_testing_module.ts']","`DefaultTitleStrategy` in Router uses a pre-injectables strategy pattern which has now been outdated with the introduction of `providedIn` syntax, potentially increasing the complexity of the code."
729eea57165f8931f3d2ea7b7c09d6c094968ad4,1624300445,"fix(compiler-cli): transform type references in generic type parameter default (#42492)

When a component/directive has a generic type parameter, the template
type checker attempts to translate the type parameter such that the
type parameters can be replicated in the type constructor that is
emitted into the typecheck file.

Type parameters with a default clause would incorrectly be emitted into
the typecheck file using the original `ts.TypeNode` for the default
clause, such that `ts.TypeReferenceNode`s within the default clause
would likely be invalid (i.e. referencing a type for which no import is
present in the typecheck file). This did not result in user-facing
type-check errors as errors reported in type constructors are not
translated into template positions Regardless, this commit ensures that
`ts.TypeReferenceNode`s within defaults are properly translated into the
typecheck file.

PR Close #42492
","['packages/compiler-cli/src/ngtsc/typecheck/src/type_parameter_emitter.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_parameter_emitter_spec.ts']","Invalid TypeReferenceNodes are present within the default clause of a generic type parameter, causing faulty type constructors in the template type checker file without import references."
08a4f10ee79057ae07043d1235cf12df50cd7ddf,1574283358,"fix(ivy): move setClassMetadata calls into a pure iife (#33337)

This commit transforms the setClassMetadata calls generated by ngtsc from:

```typescript
/*@__PURE__*/ setClassMetadata(...);
```

to:

```typescript
/*@__PURE__*/ (function() {
  setClassMetadata(...);
})();
```

Without the IIFE, terser won't remove these function calls because the
function calls have arguments that themselves are function calls or other
impure expressions. In order to make the whole block be DCE-ed by terser,
we wrap it into IIFE and mark the IIFE as pure.

It should be noted that this change doesn't have any impact on CLI* with
build-optimizer, which removes the whole setClassMetadata block within
the webpack loader, so terser or webpack itself don't get to see it at
all. This is done to prevent cross-chunk retention issues caused by
webpack's internal module registry.

* actually we do expect a short-term size regression while
https://github.com/angular/angular-cli/pull/16228
is merged and released in the next rc of the CLI. But long term this
change does nothing to CLI + build-optimizer configuration and is done
primarly to correct the seemingly correct but non-function PURE annotation
that builds not using build-optimizer could rely on.

PR Close #33337
","['packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/ngcc/test/rendering/renderer_spec.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/metadata.ts', 'packages/compiler-cli/src/ngtsc/annotations/test/metadata_spec.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/compiler/src/compiler.ts']","The calls to setClassMetadata, generated by ngtsc, are not being removed by terser due to containing impure expressions, leading to possible dead code retention."
ba32d6ffd17e626e872656e78139b4ec9885ad0d,1693266812,"refactor(core): add basic prefetching runtime mechanism for defer blocks (#51529)

This commit adds runtime implementation of a basic preloading mechanism for defer blocks. The base prefetching logic invokes a dependency loading function (generated by the compiler) when a corresponding `prefetch when` condition is triggered. The `prefetch on` triggers would be implemented in followup PRs.

We plan to explore additional prefetching techniques and will followup with more PRs later (based on the research).

PR Close #51529
","['packages/core/src/render3/instructions/defer.ts', 'packages/core/test/acceptance/defer_spec.ts']","Defer blocks lack a runtime implementation for basic preloading, leading to inefficient handling of dependency loading when prefetch conditions are triggered."
a7fa25306f8ce47d8aa330531382106efec55a55,1696445889,"feat(compiler): extract api docs for interfaces (#52006)

This adds API doc extraction for interfaces, largely using the same code paths for classes. The primary difference between classes and interfaces is that classes have member _declarations_ while interfaces have member _signatures_. This largely doesn't matter for the purposes of extraction, but the types are distinct with no common base types, so we have to do a fair amount of type unioning and aliasing.

PR Close #52006
","['packages/compiler-cli/src/ngtsc/docs/src/class_extractor.ts', 'packages/compiler-cli/src/ngtsc/docs/src/entities.ts', 'packages/compiler-cli/src/ngtsc/docs/src/extractor.ts', 'packages/compiler-cli/src/ngtsc/docs/src/function_extractor.ts', 'packages/compiler-cli/test/ngtsc/doc_extraction/interface_doc_extraction_spec.ts']","API doc extraction not available for interfaces, resulting in incomplete or inaccurate documentation."
cd5200ea6863445adce24c62f30e49940a926522,1642546313,"refactor(forms): Move FormControl to an overridden exported constructor. (#44316)

This implementation change was originally proposed as part of Typed Forms, and will have major consequences for that project as described in the design doc. Submitting it separately will greatly simplify the risk of landing Typed Forms. This change should have no visible impact on normal users of FormControl.

See the Typed Forms design doc here: https://docs.google.com/document/d/1cWuBE-oo5WLtwkLFxbNTiaVQGNk8ipgbekZcKBeyxxo.

PR Close #44316
","['packages/forms/src/forms.ts', 'packages/forms/src/model.ts', 'packages/forms/test/form_control_spec.ts']",The current implementation of FormControl might impose complexity and risk for the integration of Typed Forms.
97fc45f32a3e0a091636016bf863fd147105178c,1567038170,"fix(language-service): Invalidate Reflector caches when program changes (#32357)

This commit fixes a bug introduced in the recent refactoring whereby
caches become stale when the program changes.
This is because StaticReflector keeps its own caches that are not
clearable. The previous refactoring tried to reuse the same instance,
leading to out-of-sync program state.

Clearing out the *entire* cache is very inefficient. Instead, we could
just invalidate the symbols in the files that have changed. This
requires changes to the API of StaticReflector, but put this on hold
until the refactoring of language service for Ivy commences.

PR closes https://github.com/angular/angular/issues/32301

PR Close #32357
","['packages/language-service/src/typescript_host.ts', 'packages/language-service/test/typescript_host_spec.ts']","Caches in StaticReflector become stale and unable to clear, leading to out-of-sync program state when changes occur in the program."
7dccbdd27be13eb7287f535f482b1de2c13fca74,1632948553,"feat(core): add support for Types in ViewContainerRef.createComponent (#43022)

With Ivy it's possible to create a `ComponentFactory` instance based on the generated Component def, thus the `ViewContainerRef.createComponent` can accept a Component instance and create a factory inside, rather than requiring additional complexity of creating a ComponentFactory outside (by invoking `ComponentFactoryResolver`).

This should simplify the API that is used for creating components dynamically.

DEPRECATION:

Angular no longer requires component factories to dynamically create components. The factory-based signature of the `ViewContainerRef.createComponent` function is deprecated in favor of a different signature that allows passing component classes instead.

PR Close #43022
","['packages/core/src/core_private_export.ts', 'packages/core/src/linker/view_container_ref.ts', 'packages/core/src/render3/component_ref.ts', 'packages/core/src/render3/view_engine_compatibility_prebound.ts', 'packages/core/src/view/provider.ts', 'packages/core/src/view/provider_flags.ts', 'packages/core/src/view/refs.ts', 'packages/core/test/acceptance/view_container_ref_spec.ts']","`ViewContainerRef.createComponent` is currently limited and complex, requiring the creation of a `ComponentFactory` externally through `ComponentFactoryResolver` to dynamically create components."
613dc1122af9db877cc66f3e51ac0f18cb2ec348,1575656850,"fix(language-service): Simplify resolution logic in banner (#34262)

Due to a bug in the existing banner, `typescript` module was require-d
instead of reusing the module passed in from tsserver.
This bug is caused by some source files in language-service that imports
`typescript` instead of `typescript/lib/tsserverlibrary`.
This is not an unsupported use case, it's just that when typescript is
resolved in the banner we have to be very careful about which modules to
""require"".
The convoluted logic in the banner makes it very hard to detect
anomalies. This commit cleans it up and removes a lot of unneeded code.

This commit also removes `ts` import in typescript_host.ts and use `tss`
instead to make it less confusing.

PR Close #34262
","['packages/language-service/bundles/banner.js', 'packages/language-service/src/typescript_host.ts']","Banner in language-service is incorrectly requiring the 'typescript' module instead of reusing the module from tsserver, due to some files importing 'typescript' instead of 'typescript/lib/tsserverlibrary', leading to confusing and hard to detect anomalies."
d805526659e114f02134d37e5476c0f9a5ceeb26,1588351929,"fix(ngcc): provide a unique exit code for timeouts (#36838)

When ngcc fails due to a timeout waiting for another process
to complete, it was not failing with a unique exit code, so that it
was not possible to know if the process can be restarted; compared to
ngcc failing for some more fatal reason.

Now if ngcc exits because of a timeout, the exit code will be 177.

PR Close #36838
","['packages/compiler-cli/ngcc/main-ngcc.ts', 'packages/compiler-cli/ngcc/src/constants.ts', 'packages/compiler-cli/ngcc/src/locking/async_locker.ts']","Ngcc failures due to timeout do not produce a unique exit code, causing inability to distinguish if the process can be safely restarted versus a more fatal error."
35151ea0ca15aa378b2a37be2fbf72cbfe176168,1669743566,"build: hide `--loader` warning when ESM import patch is installed (#48282)

Similar to the Rules NodeJS require patch, we have an ESM import patch
as of the AIO Bazel migration (to support ESM scripts better).

This script uses `--loader`, an experimental NodeJS flag. This is
similar to how `ts-node` uses it. We should disable the warnings
as it results in a lot of unreadable Bazel output and the warnings
are okay to be ignored. Note that we cannot fine-grain disable
the specific warning so all others would be disabled too.

Realistically we haven't seen any in the past and long-term we will
be not relying on patched resolution anyway (looking at `rules_js`).

PR Close #48282
",['tools/defaults.bzl'],Use of experimental NodeJS flag `--loader` in ESM import patch is causing unreadable Bazel output due to warnings that are safe to ignore.
980f6a4958ee3df6007d716a7c32ea7c64700b51,1613177998,"fix(core): address Trusted Types bug in Chrome 83 (#40815)

In Chrome 83 passing a TrustedScript to eval just returns the
TrustedScript back without evaluating it, causing the
newTrustedFunctionFor{Dev,JIT} functions to fail. This is a browser bug
that has been fixed in Chrome 84, and only affects Angular applications
running with JIT (which includes unit tests).

As a temporary workaround for users still on Chrome 83, detect when this
occurs in the newTrustedFunctionFor* functions and fall back to the
straightforward, non-Trusted Types compatible implementation. The only
combination that is left affected consists of Angular applications
running with JIT, that have explicitly configured Trusted Types in
enforcement mode, with users that are still on Chrome 83.

Also correct docstring for newTrustedFunctionForJIT.

PR Close #40815
","['packages/compiler/src/output/output_jit_trusted_types.ts', 'packages/core/src/util/security/trusted_types.ts']","In Chrome 83, TrustedScript passed to eval returns without evaluating, causing newTrustedFunctionFor{Dev,JIT} functions to fail. This primarily affects Angular applications running with JIT, including unit tests."
e526f74dfdfeadb903b448c4a733bb4a561a2c08,1586450696,"refactor(compiler): create a new root `BindingScope` for each template (#36362)

Previously we had a singleton `ROOT_SCOPE` object, from
which all `BindingScope`s derived. But this caused ngcc to
produce non-deterministic output when running multiple workers
in parallel, since each process had its own `ROOT_SCOPE`.

In reality there is no need for `BindingScope` reference names
to be unique across an entire application (or in the case of ngcc
across all the libraries). Instead we just need uniqueness within
a template.

This commit changes the compiler to create a new root `BindingScope`
each time it compiles a component's template.

Resolves #35180

PR Close #36362
","['packages/compiler/src/render3/view/compiler.ts', 'packages/compiler/src/render3/view/template.ts']","Singleton `ROOT_SCOPE` object in `BindingScope` causes non-deterministic output in ngcc when running parallel workers, due to each process having its own `ROOT_SCOPE`."
13c2fad240cb87be58df299764adc8ba47fdb8c8,1575920230,"fix(ivy): throw a better error when DI can't inject a ctor param (#33739)

Occasionally a factory function needs to be generated for an ""invalid""
constructor (one with parameters types which aren't injectable). Typically
this happens in JIT mode where understanding of parameters cannot be done in
the same ""up-front"" way that the AOT compiler can.

This commit changes the JIT compiler to generate a new `invalidFactoryDep`
call for each invalid parameter. This instruction will error at runtime if
called, indicating both the index of the invalid parameter as well as (via
the stack trace) the factory function which was generated for the type being
constructed.

Fixes #33637

PR Close #33739
","['packages/compiler/src/compiler_facade_interface.ts', 'packages/compiler/src/render3/r3_factory.ts', 'packages/compiler/src/render3/r3_identifiers.ts', 'packages/core/src/compiler/compiler_facade_interface.ts', 'packages/core/src/di/index.ts', 'packages/core/src/di/injector_compatibility.ts', 'packages/core/src/di/jit/environment.ts', 'packages/core/src/di/jit/util.ts', 'packages/core/src/render3/jit/environment.ts', 'packages/core/test/render3/ivy/jit_spec.ts', 'tools/public_api_guard/core/core.d.ts']",JIT compiler produces unclear error when attempting to generate a factory function for a constructor with non-injectable parameters.
142553abc61b76bfc2cd2ab4651ba940ba62461c,1547146069,"feat(ivy): accept multiple values for exportAs in the compiler (#28001)

exportAs in @Directive metadata supports multiple values, separated by
commas. Previously it was treated as a single value string.

This commit modifies the compiler to understand that exportAs is a
string[]. It stops short of carrying the multiple values through to the
runtime. Instead, it only emits the first one. A future commit will modify
the runtime to accept all the values.

PR Close #28001
","['packages/compiler-cli/src/ngtsc/annotations/src/directive.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/selector_scope.ts', 'packages/compiler/src/compiler_facade_interface.ts', 'packages/compiler/src/render3/view/api.ts', 'packages/compiler/src/render3/view/compiler.ts', 'packages/compiler/src/render3/view/t2_api.ts', 'packages/compiler/src/render3/view/t2_binder.ts', 'packages/core/src/render3/interfaces/definition.ts', 'packages/core/src/render3/jit/compiler_facade_interface.ts', 'packages/core/src/render3/jit/directive.ts']","The compiler incorrectly interprets the comma-separated values in the @Directive metadata's exportAs as a single string value, not processing it as an array."
f937f8f6040354479ccfa988dd8acdf66532a0e3,1568143171,"ci: update material-unit-tests commit (#32485)

Updates the SHA that will be tested against in the `material-unit-tests` job
to the latest commit in the components repository. SHA 2817c9e2faa4140342336987a692d5dd30bf24c2
is needed in order to make the `material-unit-tests` job pass after the remove
of the `protractor_web_test_suite` bazel rule from @angular/bazel. `protractor_web_test_suite` is
now provided by the @bazel/protractor npm package.

PR Close #32485
",['.circleci/env.sh'],"The `material-unit-tests` job fails due to the removal of the `protractor_web_test_suite` bazel rule from @angular/bazel, requiring an updated SHA for the components repository."
16497438d6656c044c4974cbbe4ed32a9127f392,1585333017,"fix(core): run `APP_INITIALIZER`s before accessing `LOCALE_ID` token in Ivy TestBed (#36237)

Prior to this commit, Ivy TestBed was accessing locale ID before `APP_INITIALIZER` functions were called. This execution order is not consistent with the app bootstrap logic in `application_ref.ts`. This commit updates Ivy TestBed execution order to call initializers first (since they might affect `LOCALE_ID` token value) and accessing and setting locale ID after that.

Fixes #36230.

PR Close #36237
","['packages/core/test/test_bed_spec.ts', 'packages/core/testing/src/r3_test_bed_compiler.ts']","Inconsistent execution order of `APP_INITIALIZER` functions and accessing `LOCALE_ID` token in Ivy TestBed, compared to application bootstrap logic."
0984fbc74804f69ed7a265bf46f13f5ca156e3f1,1576024283,"fix(compiler-cli): allow declaration-only template type check members (#34296)

The metadata collector for View Engine compilations emits error symbols
for static class members that have not been initialized, which prevents
a library from building successfully when `strictMetadataEmit` is
enabled, which is recommended for libraries to avoid issues in library
consumers. This is troublesome for libraries that are adopting static
members for the Ivy template type checker: these members don't need a
value assignment as only their type is of importance, however this
causes metadata errors. As such, a library used to be required to
initialize the special static members to workaround this error,
undesirably introducing a code-size overhead in terms of emitted
JavaScript code.

This commit modifies the collector logic to specifically ignore
the special static members for Ivy's template type checker, preventing
any errors from being recorded during the metadata collection.

PR Close #34296
","['packages/compiler-cli/src/metadata/collector.ts', 'packages/compiler-cli/test/metadata/collector_spec.ts']","View Engine compilations throw error symbols for uninitialized static class members with enabled `strictMetadataEmit`, causing build issues for libraries adopting these members for Ivy template type checking."
04587a33c5eca98fc0aa346d7ce35a5616de83db,1559854036,"fix(ivy): DebugNode.attributes not preserving attribute name casing (#30864)

In Ivy the `DebugNode.attributes` is populated directly from the DOM, but the problem is that the browser will lowercase all attribute names. These changes preserve the case by first going through the `TNode.attrs`, populating the map with the case-sensitive names and saving a reference to the lower case name. Afterwards when we're going through the attributes from the DOM, we can check whether we've mapped the attribute by its case-sensitive name already.

This PR resolves FW-1358.

PR Close #30864
","['packages/core/src/debug/debug_node.ts', 'packages/core/test/debug/debug_node_spec.ts']","DebugNode.attributes in Ivy lowercases attribute names due to direct DOM population, failing to preserve attribute name casing."
f8b995dbf9667df3dace99a80f7dac6d3bf228c1,1566320125,"fix(ngcc): ignore format properties that exist but are undefined (#32205)

Previously, `ngcc` assumed that if a format property was defined in
`package.json` it would point to a valid format-path (i.e. a file that
is an entry-point for a specific format). This is generally the case,
except if a format property is set to a non-string value (such as
`package.json`) - either directly in the `package.json` (which is unusual)
or in ngcc.config.js (which is a valid usecase, when one wants a
format property to be ignored by `ngcc`).

For example, the following config file would cause `ngcc` to throw:

```
module.exports = {
  packages: {
    'test-package': {
      entryPoints: {
        '.': {
          override: {
            fesm2015: undefined,
          },
        },
      },
    },
  },
};
```

This commit fixes it by ensuring that only format properties whose value
is a string are considered by `ngcc`.

For reference, this regression was introduced in #32052.

Fixes #32188

PR Close #32205
","['packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']",Non-string value (such as undefined) for a format property in package.json or ngcc.config.js causes `ngcc` to throw an error.
ad9085f3d62aac8b3e0af93254465bd119d20f5e,1625765302,"refactor(service-worker): move mock client classes to their own file (#42736)

In the ServiceWorker tests, we use mock implementations of the various
client APIs that the ServiceWorker interacts with. Previously, these
mock implementations were defined in the `testing/scope.ts` file. This
added several extra classes to a file that already contains a few,
making it harder to maintain.

Therefore, this commit moves these mock client classes to a separate
`testing/clients.ts` file.

PR Close #42736
","['packages/service-worker/worker/test/happy_spec.ts', 'packages/service-worker/worker/testing/clients.ts', 'packages/service-worker/worker/testing/scope.ts']",The mock client API implementations within ServiceWorker tests are causing `testing/scope.ts` to be cluttered increasing difficulty in maintenance.
57a049952904c920994e5d146b5120b422863306,1671479442,"build: bundle tests for karma web test suites (#48521)

Since Karma with Bazel does not support ESM natively, we bundle the
tests using ESBuild into a single AMD file. This not only solves the
ESM issue until we can run browser ESM tests natively (also pending
in the components repo - the esbuild generation follows ESM semantics
but since collapsed we don't rely on the real module system).

A benefit of bundling is also faster and more reliable Karma browser
tests since only a single file needs to be loaded- compared to hundreds
of individual files.

PR Close #48521
","['tools/defaults.bzl', 'tools/testing/browser_tests.init.ts', 'tools/testing/node_tests.init.ts', 'tools/testing/zone_base_setup.ts']","Karma with Bazel lacks native support for ESM, resulting in issues during the ESBuild bundling of tests into a single AMD file. This affects the speed and reliability of Karma browser tests due to numerous files needing to be loaded individually."
34d2292323a5b5c0751a5f2a3c85ccfe4427bfb5,1642612922,"docs: update deprecated form of the tap operator in http example (#44738)

update deprecated form of the tap operator. Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments

DEPRECATED: tap operator subscribe signature is deprecated

Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments

Closes #44708

PR Close #44738
","['aio/content/examples/http/src/app/downloader/downloader.service.ts', 'aio/content/examples/http/src/app/http-interceptors/logging-interceptor.ts', 'aio/content/examples/http/src/app/http-interceptors/retry-interceptor.ts']","The HTTP example in the documentation uses a deprecated form of the tap operator with individual callback arguments, which will be removed in version 8."
6dc43a475bf72a81ddc7d226f722488b04ed2582,1607457768,"fix(upgrade): avoid memory leak when removing downgraded components (#39965)

Previously, due to the way the AngularJS and Angular clean-up processes
interfere with each other when removing an AngularJS element that
contains a downgraded Angular component, the data associated with the
host element of the downgraded component was not removed. This data was
kept in an internal AngularJS cache, which prevented the element and
component instance from being garbage-collected, leading to memory
leaks.

This commit fixes this by ensuring the element data is explicitly
removed when cleaning up a downgraded component.

NOTE:
This is essentially the equivalent of #26209 but for downgraded (instead
of upgraded) components.

Fixes #39911
Closes #39921

PR Close #39965
","['packages/upgrade/src/common/src/angular1.ts', 'packages/upgrade/src/common/src/downgrade_component_adapter.ts', 'packages/upgrade/src/dynamic/test/upgrade_spec.ts', 'packages/upgrade/static/test/integration/downgrade_component_spec.ts', 'packages/upgrade/static/test/integration/downgrade_module_spec.ts']",Removal of AngularJS elements containing downgraded Angular components causes memory leaks due to data associated with the host element not being cleaned up properly.
b015d3e9505b530bff1f4a0424394a785a013a0a,1605209820,"fix(core): not inserting ViewContainerRef nodes when inside root of a component (#39599)

When a `ViewContainerRef` is injected, we dynamically create a comment node next to the host
so that it can be used as an anchor point for inserting views. The comment node is inserted
through the `appendChild` helper from `node_manipulation.ts` in most cases.

The problem with using `appendChild` here is that it has some extra logic which doesn't return
a parent `RNode` if an element is at the root of a component. I __think__ that this is a performance
optimization which is used to avoid inserting an element in one place in the DOM and then
moving it a bit later when it is projected. This can break down in some cases when creating
a `ViewContainerRef` for a non-component node at the root of another component like the following:

```
<root>
  <div #viewContainerRef></div>
</root>
```

In this case the `#viewContainerRef` node is at the root of a component so we intentionally don't
insert it, but since its anchor element was created manually, it'll never be projected. This will
prevent any views added through the `ViewContainerRef` from being inserted into the DOM.

These changes resolve the issue by not going through `appendChild` at all when creating a comment
node for `ViewContainerRef`. This should work identically since `appendChild` doesn't really do
anything with the T structures anyway, it only uses them to reach the relevant DOM nodes.

Fixes #39556.

PR Close #39599
","['packages/core/src/render3/node_manipulation.ts', 'packages/core/src/render3/view_engine_compatibility.ts', 'packages/core/test/acceptance/component_spec.ts']","`ViewContainerRef` nodes not inserted when inside root of a component. This prevents any views added through the `ViewContainerRef` from being inserted into the DOM, breaking functionality."
53d019ab7da4992f9cca25c65ed25e009749b736,1681317355,"fix(core): catch errors from source signals outside of .next (#49769)

From Ben:

> When dealing with any reactive function call you don't control
> like `observer.next()` (or anything similar), you want to catch the error
> in the producer call, in this case `signal()`. You don't want to catch errors
> in the `observer.next` call itself.

PR Close #49769
",['packages/core/rxjs-interop/src/to_observable.ts'],"Errors from source signals outside of 'next' in the observer are not being caught, causing disruption in the signal() function calls."
c7926b57730c23f765a00d3dd9f92079c95e87e0,1675865886,"fix(migrations): move standalone migrations into imports (#48987)

Normally having a standalone declaration in the `imports` array is an error and something we handle in the conversion to standalone, but tests can end up in this situation, because apps may have separate tsconfigs for the main app and for tests.

These changes make it so that we move any incorrectly-defined standalone declarations, even if they aren't part of the current migration.

PR Close #48987
","['packages/core/schematics/ng-generate/standalone-migration/standalone-bootstrap.ts', 'packages/core/schematics/ng-generate/standalone-migration/to-standalone.ts', 'packages/core/schematics/test/standalone_migration_spec.ts']","Standalone declarations inaccurately defined in the `imports` array, particularly in testing scenarios with separate tsconfigs, are not properly migrated."
ce8720910d34ed30c9c854b57d9faab054e98417,1622745538,"refactor(compiler-cli): remove `ModuleWithProviders` generic type transform (#41996)

The `ModuleWithProviders` type has required a generic type since Angular 10,
so it is no longer necessary for the compiler to transform usages of the
`ModuleWithProviders` type without the generic type, as that should have
been reported as a compile error. This commit removes the detection logic
from ngtsc.

PR Close #41996
","['packages/compiler-cli/src/ngtsc/core/src/compiler.ts', 'packages/compiler-cli/src/ngtsc/modulewithproviders/index.ts', 'packages/compiler-cli/src/ngtsc/modulewithproviders/src/scanner.ts', 'packages/compiler-cli/test/ngtsc/modulewithproviders_spec.ts']","The compiler unnecessarily transforms usages of the `ModuleWithProviders` type without a generic type, despite such cases now being considered as a compile error.
"
5bda62c51d8f5590755c04acb50b49cd8cd84bbd,1602796644,"refactor(language-service): Return directive defs when input name is part of selector (#39243)

When an input name is part of the directive selector, it would be good to return the directive as well
when performing 'go to definition' or 'go to type definition'. As an example, this would allow
'go to type definition' for ngIf to take the user to the NgIf directive.
'Go to type definition' would otherwise return no results because the
input is a generic type. This would also be the case for all primitive
input types.

PR Close #39243
","['packages/language-service/ivy/definitions.ts', 'packages/language-service/ivy/hybrid_visitor.ts', 'packages/language-service/ivy/test/definitions_spec.ts', 'packages/language-service/ivy/test/type_definitions_spec.ts', 'packages/language-service/ivy/utils.ts', 'packages/language-service/test/project/app/main.ts', 'packages/language-service/test/project/app/parsing-cases.ts']","'Go to definition' or 'go to type definition' does not return appropriate results when an input name is part of the directive selector, particularly for generic or primitive input types like ngIf."
84ef1b0719d8cbea066a7ef187b6e83e252afbee,1671479444,"build: update build-tooling and adjust benchmark macros for ESM (#48521)

* The benchmark macro should also use devmode ESM 2020. No CommonJS
* The benchmark macro should always add `benchpress` as runtime
  dependency because it is loaded asynchronously.
* The protractor `nodejs_binary` should use our ESM-interop binary
so that ESM resolution works (e.g. when `await import(benchpress)` from
the driver utilities is invoked).

PR Close #48521
",['tools/defaults.bzl'],"The benchmark macro isn't using devmode ESM 2020, instead it's using CommonJS. Also, it's not adding `benchpress` as a runtime dependency and ESM resolution isn't working in the protractor `nodejs_binary`."
2b7553db6f59e64b73fc2e5601db278f815a67a2,1646763787,"fix(compiler): compute correct offsets when interpolations have HTML entities (#44811)

When parsing interpolations, the input string is _decoded_ from what was
in the orginal template. This means that we cannot soley rely on the input
string to compute source spans because it does not necessarily reflect
the exact content of the original template. Specifically, when there is
an HTML entity (i.e. `&nbsp;`), this will show up in its decoded form
when processing the interpolation (' '). We need to compute offsets
using the original _encoded_ string.

Note that this problem only surfaces in the splitting of interpolations.
The spans to this point have already been tracked accurately. For
example, given the template `&nbsp;<div></div>`, the source span for the
`div` is already correctly determined to be 6. Only when we encounter
interpolations with many parts do we run into situations where we need
to compute new spans for the individual parts of the interpolation.

PR Close #44811
","['packages/compiler-cli/src/ngtsc/indexer/test/template_spec.ts', 'packages/compiler/src/expression_parser/parser.ts', 'packages/compiler/src/render3/r3_template_transform.ts', 'packages/compiler/src/template_parser/binding_parser.ts', 'packages/compiler/test/expression_parser/parser_spec.ts', 'packages/compiler/test/render3/r3_ast_absolute_span_spec.ts', 'packages/compiler/test/render3/view/i18n_spec.ts']",The compiler incorrectly computes the offsets in interpolations containing HTML entities due to reliance on a decoded string instead of the original encoded template string.
c2cf500da9fc81935e0cb1347253b4477bdaa7d1,1556566640,"test(ivy): ngcc - check private dependency in integration test (#29643)

The test now attempts to compile an entry-point (@angular/common/http/testing)
that has a transient ""private"" dependency. A private dependency is one that is
only visible by looking at the compiled JS code, rather than the generated TS
typings files.

This proves that we can't rely on typings files alone for computing the
dependencies between entry-points.

PR Close #29643
",['packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts'],"Current ngcc integration tests only consider generated TS typings files, causing overlooked ""private"" dependencies visible only in compiled JS code."
3d06a8133c5c024b3f63b975c9cdbc7355c878c6,1695049195,"refactor(core): flatten and resolve ng-module bootstrap info in local compilation mode (#51767)

This change contains runtime logic needed to flatten the NgModule bootstrap field in local compilation mode. While it is quite odd to pass a ""nested"" array as NgModule bootstrap, it is still required to support this case in local compilation mode since it is supported in full compilation mode.

PR Close #51767
","['packages/core/src/metadata/ng_module_def.ts', 'packages/core/src/render3/interfaces/definition.ts', 'packages/core/src/render3/scope.ts', 'packages/core/test/acceptance/local_compilation_spec.ts']","Nested array passed as NgModule bootstrap in local compilation mode is not properly flattened, leading to inconsistencies between local and full compilation modes."
edf3e5a9cf0765fc12cea280bb4fd2272fd536b8,1623689648,"build(docs-infra): align code with new CLI v12 apps (#42259)

This commit aligns the angular.io config files more closely to how a
newly generated CLI v12 app would look like. This helps validate the
setup and makes it easier to apply new chages in the future (by
preventing the angular.io layout from deviating too much from the
default new app layout).

PR Close #42259
",['aio/src/environments/environment.ts'],"The angular.io config files are not aligned with the newly generated CLI v12 app layout, making it difficult to validate the setup and implement future changes."
6a88bad0192516f26a5a008c0634b73456b9447c,1664300994,"fix(router): Ensure ActivatedRouteSnapshot#title has correct value (#47481)

ActivatedRouteSnapshot data gets mutated in the resolve phase of the Router. The title is assigned as part of this.
As a result, the title must be a getter in order to pick up the value that was note available during the class creation.

fixes #47459

BREAKING CHANGE: The title property is now required on ActivatedRouteSnapshot

PR Close #47481
","['packages/router/src/router_state.ts', 'packages/router/test/page_title_strategy_spec.ts']","Mutation in resolve phase of Router causes wrong assignment to ActivatedRouteSnapshot's title, which cannot get updated value during class creation."
e3d6e97050ef7637b7dd80d5c018a24cabb9caee,1633485115,"docs: deprecate ViewEngine-based JIT Compiler symbols (#43710)

DEPRECATION:

In ViewEngine, [JIT compilation](https://angular.io/guide/glossary#jit) required special providers (like `Compiler`, `CompilerFactory`, etc) to be injected in the app and corresponding methods to be invoked. With Ivy, JIT compilation takes place implicitly if the Component, NgModule, etc have not already been [AOT compiled](https://angular.io/guide/glossary#aot). Those special providers were made available in Ivy for backwards-compatibility with ViewEngine to make the transition to Ivy smoother. Since ViewEngine is deprecated and will soon be removed, those symbols are now deprecated as well:

- `ModuleWithComponentFactories`
- `Compiler`
- `CompilerFactory`
- `JitCompilerFactory`
- `NgModuleFactory`

Important note: this deprecation doesn't affect JIT mode in Ivy (JIT remains available with Ivy).

PR Close #43710
","['packages/core/src/linker/compiler.ts', 'packages/core/src/linker/ng_module_factory.ts', 'packages/platform-browser-dynamic/src/compiler_factory.ts']","ViewEngine's JIT compilation requires explicit injection of special providers in the app, such as Compiler and CompilerFactory. These symbols, now deprecated, may cause confusion and issues due to their obsolescence."
a3849611b7e65dd5745e1d182df6d526fddb302c,1609874108,"fix(forms): clean up connection between FormControl/FormGroup and corresponding directive instances (#39235)

Prior to this commit, removing `FormControlDirective` and `FormGroupName` directive instances didn't clear
the callbacks previously registered on FromControl/FormGroup class instances. As a result, these callbacks
were executed even after `FormControlDirective` and `FormGroupName` directive instances were destroyed. That was
also causing memory leaks since these callbacks also retained references to DOM elements.

This commit updates the cleanup logic to take care of properly detaching FormControl/FormGroup/FormArray instances
from the view by removing view-specific callback at destroy time.

Closes #20007, #37431, #39590.

PR Close #39235
","['goldens/public-api/forms/forms.d.ts', 'packages/forms/src/directives/reactive_directives/form_control_directive.ts', 'packages/forms/src/directives/reactive_directives/form_group_directive.ts', 'packages/forms/src/directives/shared.ts', 'packages/forms/test/reactive_integration_spec.ts']",Removal of `FormControlDirective` and `FormGroupName` directive instances does not clear previously registered callbacks on FromControl/FormGroup class instances leading to unwanted callback executions and possible memory leaks.
7efa47075cc5927a8a8e2a2e0304372e23754744,1631807945,"docs: remove http example dependency on 3rd party service (#43475)

Previously the `http` example did accessed the npmsearch.com website to demonstrate response caching.
But if this service became unavailable then the example (and its e2e tests) would fail.

This commit changes the example to use the in-memory-web-api for this lookup, which will not be affected by 3rd party outages.

The guide that references this example has been updated to avoid references to the original npm search service.

PR Close #43475
","['aio/content/examples/http/e2e/src/app.e2e-spec.ts', 'aio/content/examples/http/src/app/http-interceptors/caching-interceptor.ts', 'aio/content/examples/http/src/app/in-memory-data.service.ts', 'aio/content/examples/http/src/app/package-search/package-search.service.ts']",`http` example and its e2e tests fail when the third-party service (npmsearch.com) used for demonstrating response caching becomes unavailable.
71f008f9069c731bbf9b762da272398984c2c63e,1592521339,"fix(router): remove parenthesis for primary outlet segment after removing auxiliary outlet segment (#24656) (#37163)

For URLs that use auxiliary route outlets in the second or following path segments,
when removing the auxiliary route segment, parenthesis remain for the primary outlet segment.
This causes the following error when trying to reload an URL: ""Cannot match any route"".
The commit adds a check for this scenario, serializing the URL as ""a/b"" instead of ""a/(b)"".

PR Close #24656

PR Close #37163
","['packages/router/src/url_tree.ts', 'packages/router/test/create_url_tree.spec.ts', 'packages/router/test/integration.spec.ts']","When removing the auxiliary route segment from a URL using auxiliary route outlets, remaining parentheses for the primary outlet segment cause a ""Cannot match any route"" error on URL reload."
12644486f4cd68a8ff2fa6cf1ccf907881766183,1624037546,"ci: start tracking CSS payload sizes for angular.io (#42584)

Previously, we only tracked the sizes of the eagerly loaded JS bundles.
However, the CSS styles (which also have a non-negligible size) must
also be downloaded and parsed by the browser, thus affecting the initial
rendering time.

This commit starts tracking the CSS styles payload sizes.
(Originally discussed in
https://github.com/angular/angular/pull/42584#discussion_r653787961)

PR Close #42584
",['aio/scripts/payload.sh'],The payload sizes of CSS styles for angular.io are not being tracked despite their significant effect on the initial rendering time.
dc6406e5e825bd527852903f2f8a6f8005f57a0d,1558722695,"refactor(ivy): evaluate map-based styling bindings with a new algorithm (#30543)

This patch in the second runtime change which refactors how styling
bindings work in Angular. This patch refactors how map-based
`[style]` and `[class]` bindings work using a new algorithm which
is faster and less complex than the former one.

This patch is a follow-up to an earlier refactor which enabled
support for prop-based `[style.name]` and `[class.name]`
bindings (see f03475cac8bbc79aaf13caf94b099b0c234028bc).

PR Close #30543
","['packages/compiler/src/render3/view/styling_builder.ts', 'packages/core/src/render3/instructions/styling.ts', 'packages/core/src/render3/styling_next/bindings.ts', 'packages/core/src/render3/styling_next/instructions.ts', 'packages/core/src/render3/styling_next/interfaces.ts', 'packages/core/src/render3/styling_next/map_based_bindings.ts', 'packages/core/src/render3/styling_next/styling_debug.ts', 'packages/core/src/render3/styling_next/util.ts', 'packages/core/test/acceptance/styling_next_spec.ts', 'packages/core/test/render3/styling_next/map_based_bindings_spec.ts', 'packages/core/test/render3/styling_next/styling_context_spec.ts', 'packages/core/test/render3/styling_next/styling_debug_spec.ts']",The existing algorithm for evaluating map-based `[style]` and `[class]` bindings in Angular is slower and more complex than desired.
e27ac018ed7848f61c09146ccce2184272f4d1ef,1619817347,"fix(animations): ensure consistent transition namespace ordering (#19854)

When including a component in a template, the component's host element
is immediately appended as child of the parent node upon creation.
Hence, `hostElement.parentNode` will be a valid reference. However, if
the parent component is being inserted as an embedded view—through
`ngIf` for example—then the parent's node itself will not have been
inserted yet. This means that we cannot properly determine the position
of the transition namespace, as any `containsElement` check will return
false given that the partial DOM tree has not been inserted yet, even
though it will be contained within an existing transition namespace once
the partial tree is attached.

This commit fixes the issue by not just looking at the existence of a
parent node, but rather a more extensive check using the driver's
`containsElement` method.

PR Close #19854
","['packages/animations/browser/src/render/transition_animation_engine.ts', 'packages/core/test/animation/animation_query_integration_spec.ts']","The position of a transition namespace cannot be accurately determined when a parent component is inserted as an embedded view, causing any `containsElement` checks to incorrectly return false."
925dd73c7e8dae05178b8c7d2ebd87e4a8de26dd,1667303168,"perf(platform-browser): resolve memory leak when using animations with shadow DOM (#47903)

`AnimationRendererFactory` maintains a map between a renderer delegate and the animations renderer it corresponds to, but the renderers are never removed from the map. This leads to memory leaks when used with the `ShadowDom` view encapsulation, because the specific renderer keeps a references to its shadow root which in turn references all the elements in the view.

These changes resolve the leak by clearing the reference when the animations renderer is destroyed.

Fixes #47892.

PR Close #47903
",['packages/platform-browser/animations/src/animation_renderer.ts'],Using animations with `ShadowDom` view encapsulation leads to a memory leak because AnimationRendererFactory does not remove renderers from the map; the specific renderer retains references to all view elements.
288f2c84682d2b57efb49ec749d6503b320d973c,1681740266,"refactor(docs-infra): cleanup deprecated code (#49671)

This commit replaces (non material-related) deprecated code present in the aio app.

* `pageYOffset` can be replaced by `scrollY`
*  RxJs' `mapTo()` is just a `map()`
* `createNgModuleRef` can be replaced by `createNgModule`
* HttpEmits `ProgressEvent` not `ErrorEvent`  (see #34748)
* `SwUpdate.available` is replaced by  `versionUpdates` with a `filter`
* `SwUpdate.activated` is replaced by the returned promised of `SwUpdate.activateUpdate`.

PR Close #49671
","['aio/src/app/app.component.spec.ts', 'aio/src/app/app.component.ts', 'aio/src/app/custom-elements/announcement-bar/announcement-bar.component.spec.ts', 'aio/src/app/custom-elements/elements-loader.ts', 'aio/src/app/custom-elements/events/events.service.spec.ts', 'aio/src/app/shared/scroll-spy.service.ts', 'aio/src/app/shared/scroll.service.spec.ts', 'aio/src/app/shared/scroll.service.ts', 'aio/src/app/sw-updates/sw-updates.service.spec.ts', 'aio/src/app/sw-updates/sw-updates.service.ts']","Deprecated code is present in the aio app, using redundant or outdated methods and modules. This includes improper use of scrolling, event emission, and service worker update functions."
c8958d76db5354249b0bbddf8c997d9eb9f19a54,1601472000,"build(docs-infra): simplify updating dependencies in docs examples boilerplate (#38992)

Previously, when updating the dependency versions in
`aio/tools/examples/shared/package.json` (which contains all
dependencies used in docs examples projects), one had to manually go
through all boilerplate directories and update the `package.json` files
with the same versions.

This commit simplifies this task by automating it via a Node.js script.

PR Close #38992
",['aio/tools/examples/shared/sync-boilerplate-dependencies.js'],Manual updating of dependency versions in `aio/tools/examples/shared/package.json` across all docs examples projects' boilerplate directories is tedious and prone to errors.
1bc53eb303435e34d292ad4ea2e7c5bfccfa7527,1605202699,"fix(forms): more precise control cleanup (#39623)

Currently when an instance of the `FormControlName` directive is destroyed, the Forms package invokes
the `cleanUpControl` to clear all directive-specific logic (such as validators, onChange handlers,
etc) from a bound control. The logic of the `cleanUpControl` function should revert all setup
performed by the `setUpControl` function. However the `cleanUpControl` is too aggressive and removes
all callbacks related to the onChange and disabled state handling. This is causing problems when
a form control is bound to multiple FormControlName` directives, causing other instances of that
directive to stop working correctly when the first one is destroyed.

This commit updates the cleanup logic to only remove callbacks added while setting up a control
for a given directive instance.

The fix is needed to allow adding `cleanUpControl` function to other places where cleanup is needed
(missing this function calls in some other places causes memory leak issues).

PR Close #39623
","['packages/forms/src/directives/abstract_control_directive.ts', 'packages/forms/src/directives/ng_form.ts', 'packages/forms/src/directives/reactive_directives/form_group_directive.ts', 'packages/forms/src/directives/shared.ts', 'packages/forms/src/model.ts', 'packages/forms/test/reactive_integration_spec.ts']","The `cleanUpControl` function in the Forms package removes all callbacks related to onChange and disabled state handling, causing other instances of `FormControlName` directives bound to a form control to stop working correctly when the first one is destroyed."
f3f139942cf80704f7a70e3bc5b7ab94566736c5,1676590252,"refactor(compiler): remove remaining usage of getMutableClone (#49070)

Uses an alternate approach of preserving default imports that doesn't involve the `getMutableClone` function that is being removed in TypeScript 5.0.

The alternate approach was already used in the downlevel transform and it works by patching the EmitResolver of the current transformation context to tell TypeScript to preserve the import.

PR Close #49070
","['packages/compiler-cli/src/ngtsc/imports/index.ts', 'packages/compiler-cli/src/ngtsc/imports/src/default.ts', 'packages/compiler-cli/src/ngtsc/imports/src/patch_alias_reference_resolution.ts', 'packages/compiler-cli/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.ts']",The upcoming TypeScript 5.0 version is removing `getMutableClone` function which is currently being used in the compiler to preserve default imports.
c90eb5450d8e2089145f1c9506fb787760e5d682,1599166955,"refactor(compiler-cli): make template parsing errors into diagnostics (#38576)

Previously, the compiler was not able to display template parsing errors as
true `ts.Diagnostic`s that point inside the template. Instead, it would
throw an actual `Error`, and ""crash"" with a stack trace containing the
template errors.

Not only is this a poor user experience, but it causes the Language Service
to also crash as the user is editing a template (in actuality the LS has to
work around this bug).

With this commit, such parsing errors are converted to true template
diagnostics with appropriate span information to be displayed contextually
along with all other diagnostics. This majorly improves the user experience
and unblocks the Language Service from having to deal with the compiler
""crashing"" to report errors.

PR Close #38576
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/compiler/src/render3/r3_template_transform.ts', 'packages/compiler/test/render3/view/util.ts']","Compiler unable to display template parsing errors as ts.Diagnostics inside the template, crashes with stack trace containing template errors, negatively impacting user experience and causing Language Service interruptions during template editing."
abb44f7db050aacc15be14ae3f591228b4805900,1565974680,"perf(ivy): avoid for-of loops at runtime (#32157)

TypeScript downlevels `for-of` loops for ES5 targets. As a result, generated output contains extra code, including a try-catch block, which has code size and performance implications. This is especially important for runtime code where we want to keep it as small as possible. This commit changes `for-of` loops in runtime code to regular `for` loops.

PR Close #32157
","['packages/core/src/render3/features/inherit_definition_feature.ts', 'packages/core/src/render3/query.ts']","Use of `for-of` loops in TypeScript for ES5 targets results in extra generated output code including try-catch blocks, leading to greater code size and potential performance implications."
dbfb50e9f4fe48050b2ab59d19ccd2438c14cc97,1597771309,"fix(router): ensure routerLinkActive updates when associated routerLinks change (#38511)

This commit introduces a new subscription in the `routerLinkActive` directive which triggers an update
when any of its associated routerLinks have changes. `RouterLinkActive` not only needs to know when
links are added or removed, but it also needs to know about if a link it already knows about
changes in some way.

Quick note that `from...mergeAll` is used instead of just a simple
`merge` (or `scheduled...mergeAll`) to avoid introducing new rxjs
operators in order to keep bundle size down.

Fixes #18469

PR Close #38511
","['goldens/public-api/router/router.d.ts', 'packages/router/src/directives/router_link.ts', 'packages/router/src/directives/router_link_active.ts', 'packages/router/test/integration.spec.ts', 'packages/router/test/regression_integration.spec.ts']","The `routerLinkActive` directive is not updating when changes occur within its associated routerLinks, causing inconsistencies in link status."
4f04d1cdab2fc5217566c0c01b7df10c74a93afa,1696387235,"feat(core): add new list reconcilation algorithm (#51980)

The new list reconcilation algorithm, an alternative to
the DefaultIterableListDiffer. It works by performing updates
in place instead of creating intermediate data describing changes
to apply. For lists expressed as an Array it performs additional
optimizations for the moves and swap scenarios.

The new list diffing approach is meant to be used in the new control
flow and should me much faster as compared to the ngFor with the
DefaultIterableListDiffer.

PR Close #51980
","['packages/core/src/render3/list_reconciliation.ts', 'packages/core/test/render3/list_reconciliation_spec.ts']","The DefaultIterableListDiffer in ngFor is not efficient in performing list updates, especially for arrays, resulting in slow control flow."
e1fe9ecffe05294becee1637971451d265ca9dc8,1607126879,"perf(core): use `ngDevMode` to tree-shake `checkNoChanges` (#39964)

This commit adds `ngDevMode` guard to run `checkNoChanges` only
in dev mode (similar to how things work in other parts of Ivy runtime code).
The `ngDevMode` flag helps to tree-shake this code from production builds
(in dev mode everything will work as it works right now) to decrease production bundle size.

PR Close #39964
",['packages/core/src/application_ref.ts'],"`checkNoChanges` function is running not just in development mode, leading to an increase in production bundle size."
8b7acc4f8f4f1f91f9dd94a2653644209da6f4cc,1601472704,"refactor(compiler): Binding parser sets binding span as source span in Ivy (#39036)

Currently it is impossible to determine the source of a binding that
generates `BoundAttribute` because all bound attributes generated from a
microsyntax expression share the same source span.

For example, in
```html
<div *ngFor=""let item of items; trackBy: trackByFn""></div>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source span for all `BoundAttribute`s generated from microsyntax
```
the `BoundAttribute` for both `ngForOf` and `ngForTrackBy`
share the same source span.

A lot of hacks were necessary in View Engine language service to work
around this limitation. It was done by inspecting the whole source span
then figuring out the relative position of the cursor.

With this change, we introduce a flag to set the binding span as the
source span of the `ParsedProperty` in Ivy AST.
This flag is needed so that we don't have to change VE ASTs.

Note that in the binding parser, we already set `bindingSpan` as the
source span for a `ParsedVariable`, and `keySpan` as the source span for
a literal attribute. This change makes the Ivy AST more consistent by
propagating the binding span to `ParsedProperty` as well.

PR Close #39036
","['packages/compiler/src/render3/r3_template_transform.ts', 'packages/compiler/src/template_parser/binding_parser.ts', 'packages/compiler/src/template_parser/template_parser.ts', 'packages/compiler/test/render3/r3_ast_spans_spec.ts']","BoundAttributes generated from a microsyntax expression share the same source span, causing difficulty in determining the source of individual bindings."
131468ec18c8652e4e3c565d19382bf3b5d759b5,1657297196,"ci: use actual `main` branch for components repo unit test job (#46743)

For the branch rename migration we temporarily had to work
from a forked-off branch. Now that all the migration and cleanup
Is complete, we can switch to the actual new main branch.

This is the last remaining cleanup in the organization as it seems.
PR Close #46743
",['.circleci/env.sh'],The unit test job for the components repo is incorrectly using a temporary forked-off branch instead of the new main branch.
5e694e519b9be3c9b770ac6178e8cba7909ec905,1571084757,"build: update to nodejs rules 0.38.2 (#33073)

Some changes in rules_nodejs providers folded into @angular/bazel package:
* `NodeModuleSources` renamed to `NpmPackageInfo` and now loaded from `//internal/common:npm_package_info.bzl`
* `collect_node_modules_aspect` renamed to `node_modules_aspect`
* new JS provider `JSNamedModuleInfo` now available and ng_module provides it using the `js_named_module_info` factory function
* sources_aspect has also been removed so the use of the `node_sources` legacy provider has been replaced with `JSNamedModuleInfo`.

PR Close #33073
","['packages/bazel/src/external.bzl', 'packages/bazel/src/ng_module.bzl', 'packages/bazel/src/ng_package/ng_package.bzl', 'packages/bazel/src/schematics/ng-add/index.ts']","Renaming and reorganization of rules_nodejs providers in @angular/bazel package caused problems with loading certain modules and aspects, leading to potential failure in builds."
e6afcf1f94b274a6a9ca141fb1c0e1933db0cb4a,1594403968,"build: split dev-infra configuration into individual files (#37890)

Splits the dev-infra configurations into individual files inside the
`.ng-dev/` folder. This helps with clarity as there is no single
configuration file that becomes extremely large and difficult to
maintain.

Additionally, more explicit configuration types are now used. This
fixed the max-line length setting for commit message validation.
This option is currently named incorrectly and a noop.

PR Close #37890
","['.ng-dev/commit-message.ts', '.ng-dev/config.ts', '.ng-dev/format.ts', '.ng-dev/github.ts', '.ng-dev/merge.ts']","The current dev-infra configuration is housed in a large, single file making it difficult to maintain, additionally a setting for commit message validation is incorrectly named and non-functional."
f60687220b9f73cc3bfe183456408533e5f3f7e3,1604683906,"test(elements): simplify creation of `FakeComponentFactory#componentRef` (#39452)

Previously, the `componentRef` property of `FakeComponentFactory` used
in `elements` tests was initialy set to a spy object with all mock
properties defined as spied methods. Later, the properties where
overwritten to the actual mock values.

This commit simplifies the creation of `componentRef` by correctly using
the arguments of [jasmine.createSpyObj()][1] to specify the desired
shape of the spy object (separating spied properties from methods and
directly providing the mock values).

[1]: https://jasmine.github.io/api/3.5/jasmine.html#.createSpyObj

PR Close #39452
",['packages/elements/test/component-factory-strategy_spec.ts'],"The `componentRef` property in `FakeComponentFactory` employed in `elements` tests is initially constructed as a spy object with mock properties, causing a subsequent overwrite with actual mock values."
acf6075ca9aa92121bb0166b2b7560aeb2c167ff,1587490225,"fix(core): do not use unbound attributes as inputs to structural directives (#36441)

Prior to this commit unbound attributes were treated as possible inputs to structural directives. Since structural directives can only accepts inputs defined using microsyntax expression (e.g. `<div *dir=""exp"">`), such unbound attributes should not be considered as inputs. This commit aligns Ivy and View Engine behavior and avoids using unbound attributes as inputs to structural directives.

PR Close #36441
","['packages/core/src/render3/instructions/shared.ts', 'packages/core/src/render3/node_selector_matcher.ts', 'packages/core/test/acceptance/directive_spec.ts']","Unbound attributes are mistakenly treated as possible inputs to structural directives, causing discrepancies between Ivy and View Engine behavior."
fcb68cc139430ef642018ebcc64386cc9f2f118d,1589822660,"fix(docs-infra): better detect failed attempts to update the preview server Docker container (#37015)

In order to avoid unnecessary operations, the `update-preview-server.sh`
script, that is used to update the PR preview server Docker container,
will only try to update the Docker container if either any files in the
`aio/aio-builds-setup/` directory have changed since the last update or
if a previous update failed. A failed previous update is detected by
checking whether the temporary `aio-builds:provisional` Docker image
still exists. This temporary image is created during the update
operation and is renamed to `aio-builds:latest` if the update goes well.

Previously, the update script was not able to detect a previous failed
attempt if the operation failed before creating the
`aio-builds:provisional` Docker image, such as if the `create-image.sh`
script failed. This could lead to a situation where the preview server
Docker container would not be updated after a failed attempt.

This commit improves the logic for detecting failed attempts to account
for this type of failures. It does this by not removing an older
`aio-builds:provisional` Docker image until a new one is successfully
created.

NOTE: While this is not full-proof, it is an improvement as it
      eliminates a certain kind of failures.

PR Close #37015
",['aio/aio-builds-setup/scripts/update-preview-server.sh'],The `update-preview-server.sh` script fails to detect failed previous attempts to update PR preview server Docker container if the operation fails before creating the `aio-builds:provisional` Docker image.
ddc9e8e47a38ea63eeac3a1eff65f6b3c3f0032d,1601472864,"refactor(compiler): refactor template symbol builder (#39047)

* Add `templateNode` to `ElementSymbol` and `TemplateSymbol` so callers
can use the information about the attributes on the
`TmplAstElement`/`TmplAstTemplate` for directive matching
* Remove helper function `getSymbolOfVariableDeclaration` and favor
more specific handling for scenarios. The generic function did not
easily handle different scenarios for all types of variable declarations
in the TCB

PR Close #39047
","['packages/compiler-cli/src/ngtsc/typecheck/api/symbols.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/template_symbol_builder.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__get_symbol_of_template_node_spec.ts']","Lack of attribute information on `TmplAstElement`/`TmplAstTemplate` for directive matching, and improper handling of different types of variable declarations in the Type Check Block (TCB)."
40025f55adb566cd84929035c22b832cc265d273,1589220470,"refactor(language-service): move TS utils to separate file (#36984)

This commit refactors TS-only utility functions to a separate file so
that they could be shared with Ivy language service.
A separate ts_library rule is created so that there is no dependency on
`compiler` and `compiler-cli` to make the compilation fast and
light-weight.
The method `getPropertyAssignmentFromValue` is modified slightly to
improve the ergonomics of the function.

PR Close #36984
","['packages/language-service/src/definitions.ts', 'packages/language-service/src/diagnostics.ts', 'packages/language-service/src/ts_utils.ts', 'packages/language-service/src/typescript_host.ts', 'packages/language-service/src/utils.ts', 'packages/language-service/test/utils_spec.ts']",Utility functions in TypeScript are tied up within a larger file preventing them from being leveraged by the Ivy language service; creating undesirable dependency on `compiler` and `compiler-cli` slowing compilation.
c2da29065926f110cf47ef92a0e866c73914a2e2,1642104142,"feat(docs-infra): Add a new processor for `@overriddenImplementation`. (#44689)

This new processor, named `mergeOverriddenImplementation`, allows Dgeni to produce correct documentation for symbols with overridden exported constructors. For example, in the following example, the implementation documentation will be used, including the constructor signature:

```
export const Foo: FooCtor = FooImpl as FooCtor;
```

This is a major improvement over the current situation, in which no constructor signature is documented whatsoever.

PR Close #44689
","['aio/tools/transforms/angular-api-package/index.js', 'aio/tools/transforms/angular-api-package/processors/mergeOverriddenImplementation.js', 'aio/tools/transforms/angular-api-package/processors/mergeOverriddenImplementation.spec.js', 'aio/tools/transforms/angular-api-package/tag-defs/overriddenImplementation.js']","In the current Dgeni implementation, no constructor signature is getting documented for symbols with overridden exported constructors."
47e7a2850b6e51eeb455ebb6f54339fd2c71b6cd,1649870348,"refactor(router): Add warning for `relativeLinkResolution: 'legacy'` (#45523)

This change adds code to compute the corrected value for a link,
regardless of the `relativeLinkResolution` value. Then, if the
`relativeLinkResolution` is set to `legacy` and differs from the correct
value, a warning is printed to the console in dev mode.

This change is meant to assist in notifying developers that they have
code which relies on the deprecated, broken behavior so they can fix and
update the code before the `relativeLinkResolution` option is fully
removed.

PR Close #45523
","['packages/router/src/create_url_tree.ts', 'packages/router/src/recognize.ts', 'packages/router/src/router_state.ts', 'packages/router/src/url_tree.ts', 'packages/router/src/utils/config_matching.ts', 'packages/router/test/integration.spec.ts']","The `relativeLinkResolution` set to `legacy` results in incorrect computations for a link, causing potentially deprecated and broken behaviour."
e47b129070655f2e9eeac58bc2d0ea5648f41045,1665082965,"feat(http): introduce the `provideHttpClient()` API (#47502)

This commit introduces the main components of the `provideHttpClient()`
provider API, designed in the style of `provideRouter()`. Initial features
are defined for including legacy class-based interceptors, JSONP support,
and configuring or disabling the builtin XSRF protection.

This API is an alternative to providing `HttpClient` via the
`HttpClientModule`, and is more tree-shakable and more capable than the
NgModule implementation.

Tests are included to validate the new configuration format as well as the
interoperability of the two styles of providing and configuring
`HttpClient`.

PR Close #47502
","['packages/common/http/public_api.ts', 'packages/common/http/src/module.ts', 'packages/common/http/src/provider.ts', 'packages/common/http/test/provider_spec.ts']","Current `HttpClient` provision via `HttpClientModule` is less efficient in terms of tree-shaking and capabilities, hence a need for a more robust and efficient way to provide `HttpClient` in the application."
e26080be0be1c1f371ac994589b98aeec6ef7ae6,1691528328,"refactor(compiler-cli): ng module injector compilation in local mode (#51089)

In local mode the compiler combines the raw imports and exports and pass them to the injector definition as the imports field. It is not possible to filter out ng modules at compile time though, and it will be done in runtime.

Unit tests also added, and since that was the first time adding tests for local compilation some tweaks had to be made in order to disable diagnostics in local compilation mode in order for tests to run (such situation is also the case in real compilation where we ignore all teh diagnostics basically)

PR Close #51089
","['packages/compiler-cli/src/ngtsc/annotations/ng_module/src/handler.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_compiler_compliance/ng_modules/imports_exports.local.js', 'packages/compiler-cli/test/ngtsc/local_compilation_spec.ts']","In local mode, raw imports and exports cannot be filtered out at compile time for the injector definition, and this operation is performed at runtime instead. Additionally, there are issues with disabling diagnostics in the local compilation mode for unit testing."

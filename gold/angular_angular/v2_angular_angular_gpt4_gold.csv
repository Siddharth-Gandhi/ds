commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
348615be62cd0823cdcbd470bca76ea65541e0f4,1572020533,"build: update to @bazel/bazel 1.0.0 (#33367)

Also removes `build:remote --spawn_strategy=remote` from .bazelrc. It seems that with Bazel 1.0.0 setting `--incompatible_list_based_execution_strategy_selection=false` no longer works around the issue with npm_package that it did when it was added. The error that was originally observed has returned after updating to Bazel 1.0.0:

```
ERROR: /home/circleci/ng/packages/angular_devkit/build_optimizer/BUILD:66:1: Assembling npm package packages/angular_devkit/build_optimizer/npm_package failed: No usable spawn strategy found for spawn with mnemonic Action. Your --spawn_strategy, --genrule_strategy or --strategy flags are probably too strict. Visit https://github.com/bazelbuild/bazel/issues/7480 for migration advice
```

This commit removes both `â€”incompatible_list_based_execution_strategy_selection=false` as well as `build:remote --spawn_strategy=remote` which means that Bazel will do the default behavior of picking the first available strategy from the default list, which is `remote,worker,sandboxed,local`. See https://github.com/bazelbuild/bazel/issues/7480 for more details.

PR Close #33367
",['packages/bazel/package.bzl'],"Updating to Bazel 1.0.0 revives an error previously observed with npm_package, as the current workaround flags (--incompatible_list_based_execution_strategy_selection=false and build:remote --spawn_strategy=remote) are no longer effective."
6ceb9034dc99e5e9f791c988eda2cc9ce99bc2e1,1557867883,"fix(core): static-query migration errors not printed properly (#30458)

Apparently the devkit logger is not able to properly print
out error objects, so we need to convert them to a string
before in order to make the error visible to the user.

This is not testable without an e2e test that validates the CLI
terminal output.

PR Close #30458
",['packages/core/schematics/migrations/static-queries/index.ts'],"The Devkit logger does not display error objects properly, making it difficult for users to see visible errors during the static-query migration."
96b7fe93af361a1cf2ea5477970f64ba6f3d8cd5,1665504181,"fix(forms): call `setDisabledState` on `ControlValueAcessor` when control is enabled (#47576)

Previously, `setDisabledState` was never called when attached if the control is enabled. This PR fixes the bug, and creates a configuration option to opt-out of the fix.

Fixes #35309.

BREAKING CHANGE: setDisabledState will always be called when a `ControlValueAccessor` is attached. You can opt-out with `FormsModule.withConfig` or `ReactiveFormsModule.withConfig`.

PR Close #47576
","['.circleci/env.sh', 'packages/forms/src/directives.ts', 'packages/forms/src/directives/ng_form.ts', 'packages/forms/src/directives/ng_model.ts', 'packages/forms/src/directives/reactive_directives/form_control_directive.ts', 'packages/forms/src/directives/reactive_directives/form_group_directive.ts', 'packages/forms/src/directives/shared.ts', 'packages/forms/src/form_providers.ts', 'packages/forms/src/forms.ts', 'packages/forms/test/value_accessor_integration_spec.ts']","`setDisabledState` on `ControlValueAcessor` is not invoked upon attaching when the control is enabled, leading to undesirable state management."
8d3da56eda12070df1fb473c8609f3a94d77bfd6,1616523784,"fix(ngcc): detect synthesized constructors that have been downleveled using TS 4.2 (#41305)

TypeScript 4.2 has changed its emitted syntax for synthetic constructors
when using `downlevelIteration`, which affects ES5 bundles that have
been downleveled from ES2015 bundles. This is typically the case for UMD
bundles in the APF spec, as they are generated by downleveling the
ESM2015 bundle into ES5. ngcc needs to detect the new syntax in order to
correctly identify synthesized constructor functions in ES5 bundles.

Fixes #41298

PR Close #41305
","['packages/compiler-cli/ngcc/src/host/esm5_host.ts', 'packages/compiler-cli/ngcc/test/host/commonjs_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/esm5_host_spec.ts', 'packages/compiler-cli/ngcc/test/host/umd_host_spec.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']","The ngcc fails to detect synthesized constructors in ES5 bundles, due to a change in emitted syntax for synthetic constructors with TypeScript 4.2 in combination with `downlevelIteration`."
f7471eea3c09dff38c57acf0286cd01b455243e8,1567107482,"fix(ngcc): handle compilation diagnostics (#31996)

Previously, any diagnostics reported during the compilation of an
entry-point would not be shown to the user, but either be ignored or
cause a hard crash in case of a `FatalDiagnosticError`. This is
unfortunate, as such error instances contain information on which code
was responsible for producing the error, whereas only its error message
would not. Therefore, it was quite hard to determine where the error
originates from.

This commit introduces behavior to deal with error diagnostics in a more
graceful way. Such diagnostics will still cause the compilation to fail,
however the error message now contains formatted diagnostics.

Closes #31977
Resolves FW-1374

PR Close #31996
","['packages/compiler-cli/ngcc/src/analysis/decoration_analyzer.ts', 'packages/compiler-cli/ngcc/src/analysis/util.ts', 'packages/compiler-cli/ngcc/src/main.ts', 'packages/compiler-cli/ngcc/src/packages/transformer.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts']",Diagnostics reported during the compilation of an entry-point are not shown to the user leading to potential ignored errors or hard crashes during `FatalDiagnosticError`. The origin of these errors becomes hard to identify.
eda09e69eae9513d368d7e4b2838b03ac2b3479a,1558112146,"fix(ivy): ngtsc - do not wrap arguments unnecessarily (#30349)

Previously we defensively wrapped expressions in case they ran afoul of
precedence rules. For example, it would be easy to create the TS AST structure
Call(Ternary(a, b, c)), but might result in printed code of:

```
a ? b : c()
```

Whereas the actual structure we meant to generate is:

```
(a ? b : c)()
```

However the TypeScript renderer appears to be clever enough to provide
parenthesis as necessary.

This commit removes these defensive paraenthesis in the cases of binary
and ternary operations.

FW-1273

PR Close #30349
","['packages/compiler-cli/src/ngtsc/translator/src/translator.ts', 'packages/compiler-cli/test/compliance/r3_compiler_compliance_spec.ts', 'packages/compiler-cli/test/compliance/r3_view_compiler_i18n_spec.ts', 'packages/compiler-cli/test/compliance/r3_view_compiler_listener_spec.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/compiler-cli/test/ngtsc/template_mapping_spec.ts']","Expressions wrapped defensively might conflict with precedence rules, resulting in generating incorrect TypeScript Abstract Syntax Tree (AST) structure."
a33d630a219d871c0ca32534c094920f312561c6,1600360339,"fix(zone.js): should have better backward compatibilities (#38797)

Close #38561, #38669

zone.js 0.11.1 introduces a breaking change to adpat Angular package format,
and it breaks the module loading order, before 0.11, in IE11, the `zone.js` es5
format bundle will be imported, but after 0.11, the `fesm2015` format bundle will
be imported, which causes error.

And since the only purpose of the `dist` folder of zone.js bundles is to keep backward
 compatibility, in the original commit, I use package redirect to implement that, but
it is not fully backward compatible, we should keep the same dist structure as `0.10.3`.

PR Close #38797
","['packages/zone.js/dist/tools.bzl', 'packages/zone.js/test/npm_package/npm_package.spec.ts']","After zone.js 0.11.1 update, there's a breaking change impacting Angular module loading order causing errors on IE11 due to a different format bundle being imported, which disrupts backward compatibility."
ffea31f433c1f71b78a2245d52d2969503db1784,1618286606,"perf(compiler-cli): allow incremental compilation in the presence of redirected source files (#41448)

When multiple occurrences of the same package exist within a single
TypeScript compilation unit, TypeScript deduplicates the source files
by introducing redirected source file proxies. Such proxies are
recreated during an incremental compilation even if the original
declaration file did not change, which caused the compiler not to reuse
any work from the prior compilation.

This commit changes the incremental driver to recognize a redirected
source file and treat them as their unredirected source file.

PR Close #41448
","['packages/compiler-cli/src/ngtsc/incremental/src/state.ts', 'packages/compiler-cli/src/ngtsc/program_driver/src/ts_create_program_driver.ts', 'packages/compiler-cli/src/ngtsc/util/src/typescript.ts', 'packages/compiler-cli/test/ngtsc/incremental_spec.ts']",Multiple occurrences of same package in TypeScript compilation unit leads to creation of redirected source file proxies that prevent reusing work from prior compilation during an incremental compilation.
ddb95c51844c5d8aee2187712ba948e41baaf0aa,1661190050,"refactor(compiler): replace most usages of getMutableClone (#47167)

Replaces (almost) all of the usages of the deprecated `getMutableClone` function from TypeScript which has started to log deprecation warnings in version 4.8 and will likely be removed in version 5.0. The one place we have left is in the default import handling of ngtsc which will be more difficult to remove.

PR Close #47167
","['packages/compiler-cli/src/ngtsc/annotations/common/src/metadata.ts', 'packages/compiler-cli/src/ngtsc/imports/src/default.ts', 'packages/compiler-cli/src/ngtsc/reflection/src/type_to_value.ts', 'packages/compiler-cli/src/ngtsc/ts_compatibility/src/ts_cross_version_utils.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_check_block.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_emitter.ts', 'packages/compiler-cli/src/ngtsc/util/src/visitor.ts', 'packages/compiler-cli/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.ts', 'packages/compiler-cli/test/downlevel_decorators_transform_spec.ts']","Deprecation warnings appearing due to usage of `getMutableClone` function from TypeScript, suggesting its likely removal in future version. Default import handling of ngtsc is particularly problematic."
6910118b0d82255be60a8580957383d227bcd58e,1618846723,"test(zone.js): should invoke XHR task even onload handler throw error. (#41562)

Close #41520.

This case related to the issue #41522.

```
Zone.root
  .fork({
    name: 'xhr',
    onHasTask(delegate, currentZone, zone, taskState) {
      console.log('hasMacrotask', taskState.macroTask);
      return delegate.hasTask(zone, taskState);
    },
  })
  .run(() => {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', 'https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.11.4/zone.min.js');
    xhr.addEventListener('load', () => {
      throw new Error();
    });
    xhr.send();
  });
```

zone.js invoke all `onload` event handlers before change the XHR task's state from
`scheduled` to `notscheduled`, so if any `onload` listener throw error, the XHR task
wlll be hang to `scheduled`, and leave the macroTask status in the zone wrongly.

This has been fixed in the previous commit, this commit add test to verify the case.

PR Close #41562
",['packages/zone.js/test/browser/XMLHttpRequest.spec.ts'],"On invoking 'onload' event handlers, if any handler throws an error, it leads to the XHR task hanging in a 'scheduled' state which misrepresents the macroTask status in the zone."
15b4173a76216aa9e6076d009946ef342f3300c1,1578956677,"refactor(language-service): create attr for missing attr, bound tmpl (#34743)

Currently the language service constructs an `AttrAst` anytime it is
missing from a `TemplateAst` path. However, this should only be done
when the path does not contain an ""attribute-like"" AST, which can
includes bound properties or bound events.

This commit also refactors `visitAttr` to parse bindings only for
microsyntax expressions and does some other minor cleanup to make
linters happy.

This is some cleanup to help the language service eventually use
`BoundDirectivePropertyAst`s for providing completions for template
bindings rather than performing the manual parsing currently done.

PR Close #34743
",['packages/language-service/src/completions.ts'],"The language service constructs an `AttrAst` even when the path contains an ""attribute-like"" AST including bound properties or events, leading to potential attribute mislabelling."
605775398f0ae1893a0a02a6eb3c1200f20475e9,1609883681,"docs(router): Clarify 'parent' for params inheritance (#40304)

When talking about parameter inheritance, one might think that matrix
parameters can be inherited from the ""parent"" segment, or the segment
which appears immediately to the left. In reality, when we talk about
a ""parent"" in the `Router`, we mean the parent `Route` config. This
config may contain more than one segment and matrix parameters must
appear at the end or they do not ""belong"" to any config.

PR Close #40304
",['packages/router/src/router_module.ts'],"Confusion arises with parameter inheritance in `Router` as it's unclear that a ""parent"" refers to the parent `Route` config, not the immediate left segment, causing misunderstanding with matrix parameter placements."
11506491393d33ac808da78a3bbb3a8bc9fb5588,1599590503,"perf(core): use `ngDevMode` to tree-shake error messages (#38612)

This commit adds `ngDevMode` guard to throw some errors only in dev mode
(similar to how things work in other parts of Ivy runtime code). The
`ngDevMode` flag helps to tree-shake these error messages from production
builds (in dev mode everything will work as it works right now) to decrease
production bundle size.

PR Close #38612
","['packages/core/src/di/r3_injector.ts', 'packages/core/src/render3/instructions/shared.ts']","Error messages are not being tree-shaken from production builds, leading to an unnecessarily large production bundle size."
2484ba4f0561bf337611f5f4aa28e262bf3fb5e0,1606251944,"refactor(compiler-cli): prepare linker options for compilation of components (#39707)

This commit adds the `i18nUseExternalIds` option to the linker options,
as the compliance tests exercise compilation results with and without
this flag enabled. We therefore need to configure the linker to take
this option into account, as otherwise the compliance test output would
not be identical.

Additionally, this commit switches away from spread syntax to set
the default options. This introduced a problem when the user-provided
options object did specify the keys, but with an undefined value. This
would have prevented the default options from being applied.

PR Close #39707
","['packages/compiler-cli/linker/src/file_linker/linker_environment.ts', 'packages/compiler-cli/linker/src/file_linker/linker_options.ts']","The linker fails to consider 'i18nUseExternalIds' configuration during compliance testing leading to non-identical output. Additionally, issues arise when user-provided options with undefined values prevent the application of default options."
9e5016c845824466fef1c95d399d93fa7a994730,1548187329,"feat(ivy): DynamicValue now indicates why the value is dynamic (#27697)

This commit changes the partial evaluation mechanism to propagate
DynamicValue errors internally during evaluation, and not to ""poison""
entire data structures when a single value is dynamic. For example,
previously if any entry in an array was dynamic, evaluating the entire
array would return DynamicValue. Now, the array is returned with only
the specific dynamic entry as DynamicValue.

Instances of DynamicValue also report the node that was determined to
be dynamic, as well as a potential reason for the dynamic-ness. These
can be nested, so an expression `a + b` may have a DynamicValue that
indicates the 'a' term was DynamicValue, which will itself contain a
reason for the dynamic-ness.

This work was undertaken for the implementation of listLazyRoutes(),
which needs to partially evaluate provider arrays, parts of which are
dynamic and parts of which contain useful information.

PR Close #27697
","['packages/compiler-cli/src/ngtsc/partial_evaluator/index.ts', 'packages/compiler-cli/src/ngtsc/partial_evaluator/src/builtin.ts', 'packages/compiler-cli/src/ngtsc/partial_evaluator/src/dynamic.ts', 'packages/compiler-cli/src/ngtsc/partial_evaluator/src/interpreter.ts', 'packages/compiler-cli/src/ngtsc/partial_evaluator/src/result.ts']","Partial evaluation mechanism returns entire array as DynamicValue if any entry is dynamic, which can hinder the extraction of useful information from non-dynamic parts."
e0ad9ecda0b8a541b405d2ab35335b90ceb21fd1,1579296229,"fix(ivy): ensure that `LOCALE_ID` is set after app initializers (#34830)

Before ivy it was possible to configure a mutable service value
in an application initializer (by providing an `APP_INITIALIZER`)
that could be read in the provider of `LOCALE_ID`. This is a common
scenario if you wanted to load the locale id asynchronously from
an HTTP request for instance.

When using the ivy, the runtime needs to be told what the current
locale is, which is done by calling the `setLocaleId()` function with
the value injected by the `LOCALE_ID` token. Previously this was
being done before the application initializers were run, which meant
that the `LOCALE_ID` provider was being executed before the
app initializers had a chance to get a new value for it.

Now this initalization of the locale for the ivy runtime is done after the
application initializers have been run.

Closes #34701

PR Close #34830
","['packages/core/src/application_ref.ts', 'packages/core/test/application_ref_spec.ts']","In Ivy, `LOCALE_ID` provider gets executed before the app initializers have a chance to load a new LOCALE value, creating problems for apps needing to load `LOCALE_ID` asynchronously."
55f7f1d446e6280541ea525490ba36fe1db2d7ab,1617303757,"feat(docs-infra): improve search query processing (#41368)

This commit tries to improve the search results by processing
the query and attempting progressively less restrictive searches
until a non-zero set of pages is matched.

The new procesing includes:

* stripping off quote marks, which were causing searches to fail
* first attempting to match pages where ALL the query terms exist
* second attempting to match pages where ANY of the query terms exist
* third attempting to match pages where the title contains partial word matches

The first query attempt approximates, quite well, the idea of searching
for multi-word phrases. This is given the technical nature of the terms
and the fairly small size of the corpus.

PR Close #41368
","['aio/src/app/search/search.worker.ts', 'aio/tests/deployment/e2e/smoke-tests.e2e-spec.ts', 'aio/tests/e2e/src/app.e2e-spec.ts']",Search query processing in docs-infra yields zero results for valid queries; quote marks causing search failure and inability to match pages with partial word matches in title.
b50283ed6750dc20c38d94fbe475fee8c2f1ef5a,1551482293,"fix(ivy): support dynamic host attribute bindings (#29033)

In the @Component decorator, the 'host' field is an object which represents
host bindings. The type of this field is complex, but is generally of the
form {[key: string]: string}. Several different kinds of bindings can be
specified, depending on the structure of the key.

For example:

```
@Component({
  host: {'[prop]': 'someExpr'}
})
```

will bind an expression 'someExpr' to the property 'prop'. This is known to
be a property binding because of the square brackets in the binding key.

If the binding key is a plain string (no brackets or parentheses), then it
is known as an attribute binding. In this case, the right-hand side is not
interpreted as an expression, but is instead a constant string.

There is no actual requirement that at build time, these constant strings
are known to the compiler, but this was previously enforced as a side effect
of requiring the binding expressions for property and event bindings to be
statically known (as they need to be parsed). This commit breaks that
relationship and allows the attribute bindings to be dynamic. In the case
that they are dynamic, the references to the dynamic values are reflected
into the Ivy instructions for attribute bindings.

PR Close #29033
","['packages/compiler-cli/src/ngtsc/annotations/src/directive.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/compiler/src/compiler.ts', 'packages/compiler/src/jit_compiler_facade.ts', 'packages/compiler/src/render3/view/api.ts', 'packages/compiler/src/render3/view/compiler.ts', 'packages/compiler/src/render3/view/styling_builder.ts']","In the @Component decorator, 'host' field does not support dynamic bindings in host attribute fields, forcing the attribute bindings to be statically known at build time."
91cdc11aa0347d1b71f2f732e00af9c3ff8078fc,1614369830,"fix(common): allow number or boolean as http params (#40663)

This change fixes an incompatibility between the old `@angular/http` package
and its successor (`@angular/common/http`) by re-introducing the types that were supported before.

It now allows to use number and boolean directly as HTTP params, instead of having to convert it to string first.

Before:

    this.http.get('/api/config', { params: { page: `${page}` } });

After:

    this.http.get('/api/config', { params: { page }});

`HttpParams` has also been updated to have most of its methods accept number or boolean values.

Fixes #23856

BREAKING CHANGE:

The methods of the `HttpParams` class now accept `string | number | boolean`
instead of `string` for the value of a parameter.
If you extended this class in your application,
you'll have to update the signatures of your methods to reflect these changes.

PR Close #40663
","['goldens/public-api/common/http/http.d.ts', 'packages/common/http/src/client.ts', 'packages/common/http/src/params.ts', 'packages/common/http/test/client_spec.ts', 'packages/common/http/test/params_spec.ts']",Incompatibility exists between old and new Angular HTTP packages causing HTTP parameters of number or boolean type to require conversion to string type before use.
7e82df45c5bb72ec3dafaa07dc1eaa5d463b006c,1695032959,"feat(compiler): initial skeleton for API doc extraction (#51733)

This commit adds a barebones skeleton for extracting information to be used for extracting info that can be used for API reference generation. Subsequent PRs will expand on this with increasingly real extraction. I started with @alxhub's #51615 and very slightly polished to get to this minimal commit.

PR Close #51733
","['packages/compiler-cli/src/ngtsc/core/src/compiler.ts', 'packages/compiler-cli/src/ngtsc/docs/index.ts', 'packages/compiler-cli/src/ngtsc/docs/src/entities.ts', 'packages/compiler-cli/src/ngtsc/docs/src/extractor.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/test/ngtsc/docs_spec.ts', 'packages/compiler-cli/test/ngtsc/env.ts']","Initial stages of API reference generation lack an extraction system for relevant information, making it difficult to proceed with further development of this feature."
ef95da6d3b88f58f3e2f415f8afef27aa3108a3d,1579896952,"fix(ivy): don't detect changes on detached child embedded views (#34846)

Fixes Ivy detecting changes inside child embedded views, even though they're detached.

Note that there's on subtlety here: I made the changes inside `refreshDynamicEmbeddedViews` rather than `refreshView`, because we support detecting changes on a detached view (evidenced by a couple of unit tests), but only if it's triggered directly from the view's `ChangeDetectorRef`, however we shouldn't be detecting changes in the detached child view when something happens in the parent.

Fixes #34816.

PR Close #34846
","['packages/core/src/render3/instructions/shared.ts', 'packages/core/test/acceptance/change_detection_spec.ts']",Ivy is erroneously detecting changes within detached child embedded views when parent view changes occur.
c7d37f74cffb2852f482b909577dcd15681e182b,1633112924,"build: expose locales as package export for ES module resolution (#43431)

As part of v13, all APF packages use the `exports` field which defines
the public entry-points/mappings for a package. so-called package exports.

The `ng_package` rule creates all the necessary mappings/sub-path exports
for the entry-points of `@angular/common`. Though, since the locale files are
generated separately and are not an actual entry-point, we need to expose these
files publicly so that they can be imported/resolved by consumers.

PR Close #43431
",['packages/bazel/test/ng_package/common_package.spec.ts'],"Locale files in `@angular/common` not being correctly exposed due to their generation as separate entities, causing import resolution issues for consumers."
c4c340a7c4a87fdfc0bc5dff3723629f15f20b32,1562953574,"fix(zone.js): fix zone for Jasmine 3.3. (#31497)

If zonejs is sent undefined callbacks it proceeds to attempt to call them, then fails, catches it own fail, rewrites the stack to hide the mistake, and reports a TypeError with a callstack unrelated to inputs.

Throw early if the callback is undefined (as can happen if JS or any-ified TS calls zone invokeTask).

Check for undefined onCommplete callback to zonejs jasmine wrapper.

PR Close #31497
","['packages/zone.js/lib/jasmine/jasmine.ts', 'packages/zone.js/lib/zone.ts']","Zone.js is throwing a TypeError with an inaccurate callstack when it receives undefined callbacks, likely from 'zone invokeTask' call in JavaScript or TypeScript."
6e7bd939f6901539305de0917350c5ebc328e775,1591287578,"perf(ngcc): cache parsed tsconfig between runs (#37417)

This commit will store a cached copy of the parsed tsconfig
that can be reused if the tsconfig path is the same.

This will improve the ngcc ""noop"" case, where there is no processing
to do, when the entry-points have already been processed.
Previously we were parsing this config every time we checked for
entry-points to process, which can take up to seconds in some
cases.

Resolves #36882

PR Close #37417
","['packages/compiler-cli/ngcc/index.ts', 'packages/compiler-cli/ngcc/src/ngcc_options.ts', 'packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/ngcc/test/ngcc_options_spec.ts']","Parsing tsconfig repeatedly, even when the path is the same, results in unnecessary processing time, notably impacting the ngcc ""noop"" performance when entry-points have already been processed."
5b864ede13487458bee286d188da2fdade49289f,1578339482,"fix(ivy): TestBed not unwrapping imports array function when overriding provider (#34629)

Fixes an error that is thrown when a provider is overridden in `TestBed`, if the module definition of one of the imported modules uses a function for the `imports` that is set via `setNgModuleScope`. The problem was that we have a `for...of` loop that assumes that the imports are an array, but they can also be a function. This was handled correctly in other places, but this one was missed.

Note that the above-mentioned error is only thrown at runtime when the code is transpiled to es6. In es5 TS generates a call to a helper that handles the error silently so the attached unit test only fails in es6.

Fixes #34623.

PR Close #34629
","['packages/core/test/test_bed_spec.ts', 'packages/core/testing/src/r3_test_bed_compiler.ts']","An error is thrown at runtime when a provider is overridden in TestBed if the imports in a module definition is a function set via setNgModuleScope, particularly under ES6 transpilation."
53fc2ed8bf345222e0c3d53ce7f13a4f27f3052e,1573863366,"feat(language-service): completions support for indexed types (#33775)

Previously, indexing a container type would not return completions for
the indexed type because for every TypeScript type, the recorded index
type was always marked as `undefined`, regardless of the index
signature.

This PR now returns the index type of TypeScript containers with numeric
or string index signatures. This allows use to generate completions for
arrays and defined index types:

```typescript
interface Container<T> {
  [key: string]: T;
}
const ctr: Container<T>;
ctr['stringKey']. // gives `T.` completions

const arr: T[];
arr[0]. // gives `T.` completions
```

Note that this does _not_ provide completions for properties indexed by
string literals, e.g.

```typescript
interface Container<T> {
  foo: T;
}
const ctr: Container<T>;
ctr['foo']. // does not give `T.` completions
```

Closes angular/vscode-ng-language-service#110
Closes angular/vscode-ng-language-service#277

PR Close #33775
","['packages/language-service/src/typescript_symbols.ts', 'packages/language-service/test/completions_spec.ts', 'packages/language-service/test/diagnostics_spec.ts', 'packages/language-service/test/project/app/parsing-cases.ts']","The language service doesn't provide completions for indexed types, resulting in undefined index values and lack of proper support for arrays and defined index types."
349935a4345a1f0eb66d9119d30ba3d546b6b32a,1557341673,"fix(core): migrations not always migrating all files (#30269)

In an Angular CLI project scenario where projects only reference
top-level source-files through the `tsconfig` `files` option, we currently
do not migrate referenced source-files. This can be fixed checking all
referenced source-files which aren't coming from an external library.

This is similar to how `tslint` determines project source-files.

PR Close #30269
","['packages/core/schematics/migrations/injectable-pipe/index.ts', 'packages/core/schematics/migrations/move-document/index.ts', 'packages/core/schematics/migrations/static-queries/index.ts', 'packages/core/schematics/migrations/template-var-assignment/index.ts']","In an Angular CLI project, referenced source-files are not migrated if they are only specified through the `tsconfig` `files` option, excluding files from external libraries."
fe343d8d96a727c7f48f7951a630ef008a9e0b9f,1604012870,"refactor(compiler): clean up i18n attribute generation logic (#39498)

This is follow-up from [an earlier discussion](https://github.com/angular/angular/pull/39408#discussion_r511908358).
After some testing, it looks like the type of `Element.attributes` was correct in specifying that it
only has `TextAttribute` instances. This means that the extra checks that filter out `BoundAttribute`
instances from the array isn't necessary. There is another loop a bit further down that actually
extracts the bound i18n attributes.

PR Close #39498
","['packages/compiler/src/render3/view/i18n/util.ts', 'packages/compiler/src/render3/view/template.ts']",Unnecessary checks are filtering out `BoundAttribute` instances from `Element.attributes` array in i18n attribute generation. This results in repetitive code and inefficient handling of bound i18n attributes.
6a0dadf46fbbf03c1e1a6f7b6c1d3db2042e2742,1639589226,"fix(forms): `_reduceValue` arrow function now has correct types. (#44483)

I previously strengthened some weak types in #44370. One of these fixes exposed an incorrect call into `_reduceChildren` from `_reduceValue`. This was caught in google3 by a caller who was extending `FormGroup` and overriding these methods.

Special thanks to Bart G for catching this issue and suggesting a fix.

PR Close #44483
",['packages/forms/src/model.ts'],"Incorrect call into `_reduceChildren` from `_reduceValue` due to recently strengthened weak types, as identified by caller extending `FormGroup` and overriding these methods."
c77656e2dd959cf70d4999f0cfc419f20a6f9e9e,1576099249,"fix(ngcc): handle imports in dts files when processing UMD (#34356)

When statically evalulating UMD code it is possible to find
that we are looking for the declaration of an identifier that
actually came from a typings file (rather than a UMD file).

Previously, the UMD reflection host would always try to use
a UMD specific algorithm for finding identifier declarations,
but when the id is actually in a typings file this resulted in the
returned declaration being the containing file of the declaration
rather than the declaration itself.

Now the UMD reflection host will check to see if the file containing
the identifier is a typings file and use the appropriate stategy.

PR Close #34356
","['packages/compiler-cli/ngcc/src/host/umd_host.ts', 'packages/compiler-cli/ngcc/test/host/umd_host_spec.ts']","When processing UMD, identifier declarations from typings files are incorrectly returned as the containing file, not the declaration itself, causing incorrect static evaluation."
bf1bcd1e081b3678bae033dcee5e82a70960dfe7,1574362499,"fix(ngcc): render localized strings when in ES5 format (#33857)

Recently the ngtsc translator was modified to be more `ScriptTarget`
aware, which basically means that it will not generate non-ES5 code
when the output format is ES5 or similar.

This commit enhances that change by also ""downleveling"" localized
messages. In ES2015 the messages use tagged template literals, which
are not available in ES5.

PR Close #33857
","['packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/src/ngtsc/translator/src/translator.ts']","Localized messages in ES5 output format aren't rendering as the ngtsc translator doesn't generate non-ES5 code. Performance issue due to tagged template literals, unavailable in ES5."
364c0eaaaecf3abaea4658062dca1751c66c98b9,1633112923,"refactor(platform-server): switch from dynamic require to import statement (#43431)

In order to support ESM for the `platform-server` package, we need to
remove two usages of dynamic imports and replace them with their
corresponding/equivalent import statement. This will also allow ESBuild
to recognize this import. Note that we want to keep these imports external, so
we explicitly specify the `externals` option for the `ng_package` rule.

PR Close #43431
","['packages/core/test/render3/domino.d.ts', 'packages/platform-server/src/domino_adapter.ts', 'packages/platform-server/src/http.ts', 'packages/platform-server/src/types.d.ts']",Dynamic imports in `platform-server` package inhibit ESM support and prevent ESBuild from recognizing these imports.
326240eb91fe5eee2b12755d4aa70684130008cf,1585773152,"fix(ngcc): allow ngcc configuration to match pre-release versions of packages (#36370)

Ngcc supports providing a project-level configuration to affect how
certain dependencies are processed and also has a built-in fallback
configuration for some unmaintained packages. Each entry in these
configurations could be scoped to specific versions of a package by
providing a version range. If no version range is provided for a
package, it defaults to `*` (with the intention of matching any
version).

Previously, the installed version of a package was tested against the
version range using the [semver][1] package's `satisfies()` function
with the default options. By default, `satisfies()` does not match
pre-releases (see [here][2] for more details on reasoning). While this
makes sense when determining what version of a dependency to install
(trying to avoid unexpected breaking changes), it is not desired in the
case of ngcc.

This commit fixes it by explicitly specifying that pre-release versions
should be matched normally.

[1]: https://www.npmjs.com/package/semver
[2]: https://github.com/npm/node-semver#prerelease-tags

PR Close #36370
","['packages/compiler-cli/ngcc/src/packages/configuration.ts', 'packages/compiler-cli/ngcc/test/packages/configuration_spec.ts']","Ngcc configuration doesn't match pre-release versions of packages even when no version range is provided, making it default to '*' (expected to match any version)."
eb4b7d2d8be13c4cd8489a53b3a49790fd6a3721,1579808483,"build: vendor yarn using the .yarnrc yarn-path value (#34902)

Rather than enforcing yarn versioning using `package.json`'s
engines value.  We can utilize yarn's `yarn-path` value to
ensure that the version of yarn used at execution time is
consistent for everyone who uses our repo.  This is the first
step in this wider vendoring process.  We will use this same
vendoring mechanism for CI after
https://github.com/bazelbuild/rules_nodejs/pull/1569 lands

PR Close #34902
",['.yarn/releases/yarn-1.21.1.js'],"Inconsistent yarn version used at execution time due to reliance on `package.json`'s engines value, leading to potential discrepancies among users and CI."
e4538e03d6baf3e0968a9491b70a209fb6ba5053,1651707052,"refactor(docs-infra): Redirect old document title guide to new router feature (#45857)

The ""set-document-title"" guide was in place to direct developers to the
`Title` service for managing page titles. Managing the title is now
available in the `Router` package and is much easier. This change
deletes the old guide and redirects it to the section in the router
guide about setting the page title.

PR Close #45857
","['aio/content/examples/set-document-title/e2e/src/app.e2e-spec.ts', 'aio/content/examples/set-document-title/src/app/app.component.ts', 'aio/content/examples/set-document-title/src/app/app.module.ts', 'aio/content/examples/set-document-title/src/main.ts']","Old ""set-document-title"" guide is obsolete and thus may direct developers to the outdated way of managing page titles through the `Title` service."
d80ae6ba0de9ac669130b036374c5d43cfc63b51,1557514599,"build(docs-infra): ensure hidden cli commands are excluded from `sitemap.xml` (#30395)

Previously, the processor that excludes certain cli commands
(`filterHiddenCommand`) was being run after the `createSitemap`
processor, resulting in those commands to be present in `sitemap.xml`,
while the actual pages where missing. This also resulted in 404s, when
search engine crawlers tried to index the missing URLs.

This commit fixes it by ensuring that the `filterHiddenCommand`
processor is run before the `createSitemap` processor.

PR Close #30395
","['aio/tools/transforms/cli-docs-package/processors/filterHiddenCommands.js', 'aio/tools/transforms/cli-docs-package/processors/filterHiddenCommands.spec.js']",Hidden CLI commands are not excluded from `sitemap.xml` properly causing 404 errors when search engine crawlers try to index the missing URLs.
fafa50d97fc45307f8e8bb19a7f9ba7dd16c5079,1588797348,"fix(ngcc): support ModuleWithProviders functions that delegate (#36948)

In #36892 the `ModuleWithProviders` type parameter becomes required.
This exposes a bug in ngcc, where it can only handle functions that have a
specific form:

```
function forRoot() {
  return { ... };
}
```

In other words, it only accepts functions that return an object literal.

In some libraries, the function instead returns a call to another function.
For example in `angular-in-memory-web-api`:

```
InMemoryWebApiModule.forFeature = function (dbCreator, options) {
  return InMemoryWebApiModule_1.forRoot(dbCreator, options);
};
```

This commit changes the parsing of such functions to use the
`PartialEvaluator`, which can evaluate these more complex function
bodies.

PR Close #36948
","['packages/compiler-cli/ngcc/src/analysis/module_with_providers_analyzer.ts', 'packages/compiler-cli/ngcc/src/packages/transformer.ts', 'packages/compiler-cli/ngcc/src/rendering/esm_rendering_formatter.ts', 'packages/compiler-cli/ngcc/test/analysis/module_with_providers_analyzer_spec.ts', 'packages/compiler-cli/ngcc/test/rendering/dts_renderer_spec.ts', 'packages/compiler-cli/ngcc/test/rendering/esm_rendering_formatter_spec.ts']","ngcc fails to handle `ModuleWithProviders` functions that delegate return to another function, can only process functions returning an object literal. Impacts libraries like `angular-in-memory-web-api`."
28995dba19b43160249a15b2bec879aa82314b95,1587488064,"fix(core): missing-injectable migration should not migrate `@NgModule` classes (#36369)

Based on the migration guide, provided classes which don't have
either `@Injectable`, `@Directive`, `@Component` or `@Pipe` need
to be migrated.

This is not correct as provided classes with an `@NgModule` also
have a factory function that can be read by the r3 injector. It's
unclear in which cases the `@NgModule` decorator is used for
provided classes, but this scenario has been reported.

Either we fix this in the migration, or we make sure to report
this as unsupported in the Ivy compiler.

Fixes #35700.

PR Close #36369
","['packages/core/schematics/migrations/missing-injectable/transform.ts', 'packages/core/schematics/test/missing_injectable_migration_spec.ts']","Classes marked with `@NgModule` are incorrectly being migrated due to absence of `@Injectable`, `@Directive`, `@Component`, or `@Pipe`, despite having a factory function usable by the r3 injector."
1eb4066c2e50e71475e158108a727cfbc505dfe1,1605816922,"refactor(compiler-cli): Expose API for mappping from TCB to template location (#39715)

Consumers of the `TemplateTypeChecker` API could be interested in
mapping from a shim location back to the original source location in the
template. One concrete example of this use-case is for the ""find
references"" action in the Language Service. This will return locations
in the TypeScript shim file, and we will then need to be able to map the
result back to the template.

PR Close #39715
","['packages/compiler-cli/src/ngtsc/typecheck/api/api.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/context.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/diagnostics.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/dom.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/oob.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/source.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/tcb_util.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_check_block.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__get_symbol_of_template_node_spec.ts']","Consumers of the `TemplateTypeChecker` API need a mechanism to map back from a shim location to the original source location in the template, for use-cases like the ""find references"" action in the Language Service."
228beeabd1542941cbfff46ad78d52c1df3d283a,1623705046,"fix(language-service): Use last child end span for parent without close tag (#42554)

Unclosed element tags are not assigned an `endSourceSpan` by the parser.
As a result, the visitor which determines the target node at a position
for the language service was unable to determine that a given position
was inside an unclosed parent. This happens because we update the
`endSourceSpan` of template/element nodes to be the end tag (and there
is not one for unclosed tags). Consequently, the visitor then cannot
match a position to any child node location.

This change updates the visitor logic to check if there are any
`children` of a template/element node and updates the end span to be the
end span of the last child. This allows our `isWithin` logic to identify
that a child position is within the unclosed parent.

Addresses one of the issues found during investigation of https://github.com/angular/vscode-ng-language-service/issues/1399

PR Close #42554
","['packages/language-service/ivy/template_target.ts', 'packages/language-service/ivy/test/legacy/template_target_spec.ts']",The language service fails to recognize that a given position is within an unclosed parent node due to the parser not assigning an `endSourceSpan` for unclosed tags.
7954c8dfa3c85d12780949c75f1448c8d783a8cf,1607126882,"perf(forms): use `ngDevMode` to tree-shake `_ngModelWarning` (#39964)

This commit adds `ngDevMode` guard to call `_ngModelWarning` only
in dev mode (similar to how things work in other parts of Ivy runtime code).
The `ngDevMode` flag helps to tree-shake this function from production builds
(since it will act as no-op, in dev mode everything will work as it works right now)
to decrease production bundle size.

PR Close #39964
","['packages/forms/src/directives/reactive_directives/form_control_directive.ts', 'packages/forms/src/directives/reactive_directives/form_control_name.ts', 'packages/forms/src/directives/shared.ts']","The `_ngModelWarning` function isn't being properly tree-shaken from production builds, resulting in larger bundle size."
52a6785a82186cc9dda0b5957b5c138d3eb10e9a,1634685981,"test(compiler-cli): run watch mode tests using Ivy compiler (#43893)

This commit re-enables the `perform_watch` test target and updates the
test to run with the Ivy compiler.

Additionally, this target was switched over to use Angular v12 packages
as input to the test, to allow the ViewEngine tests to continue working
with v13 packages which are Ivy-only. This commit reverts those changes
now that View Engine tests are disabled, as it's desirable to test
against local artifacts that are build within the monorepo instead of
depending on NPM packages.

PR Close #43893
","['packages/compiler-cli/test/perform_watch_spec.ts', 'packages/compiler-cli/test/test_support.ts']","Watch mode tests within the compiler-cli, which are currently disabled, are not running using Ivy compiler and are not testing against local artifacts built within the monorepo."
acf3cff9eedbcfbc4476e0597d0a3c7a883bd05f,1593195189,"ci: exclude ""docs"" commit type from minBodyLength commit message validation (#37764)

docs commits are sometimes trivial (e.g. an obvious typo fix) and in such cases its very
akward to to write up 100 chars worth of text about why this typo fix is the best thing in the
world and why it is so important and crucial that we must know why we are fixing the typo
at all. After all most typos are not just typos. Or are they? We'll shall see...

PR Close #37764
",['.ng-dev/config.ts'],"The commit message validation inconveniences trivial ""docs"" type commits by requiring them to have a minimum body length of 100 characters."
d04b550f2e73ff89939a8a747fa8665c6ee5d2c4,1633368426,"docs: Deprecate longhand binding prefixes (#43671)

DEPRECATION:

The template prefixes `bind-`, `on-`, `bindon-`, and `ref-` have been deprecated
in v13. Templates should use the more widely documented syntaxes for binding and references:

* `[input]=""value""` instead of `bind-input=""value""`
* `[@trigger]=""value""` instead of `bind-animate-trigger=""value""`
* `(click)=""onClick()""` instead of `on-click=""onClick()""`
* `[(ngModel)]=""value""` instead of `bindon-ngModel=""value""`
* `#templateRef` instead of `ref-templateRef`

PR Close #43671
","['aio/content/examples/built-in-directives/e2e/src/app.e2e-spec.ts', 'aio/content/examples/property-binding/e2e/src/app.e2e-spec.ts', 'aio/content/examples/template-reference-variables/e2e/src/app.e2e-spec.ts']","The longhand binding prefixes `bind-`, `on-`, `bindon-`, and `ref-` are not in sync with the most updated and documented syntaxes for binding and references."
caccb125e6a135ab7b35b2eee844a53bb409c94e,1660671411,"refactor(common): drop the `loader` input in favor of `IMAGE_LOADER` token (#47082)

This commit updates the `NgOptimizedImage` directive to drop the `loader` input. Component-specific loaders can still be configured via `IMAGE_LOADER` token and the `loader` input was only useful in case different loaders have to be present in a single template, which doesn't seem to be a common case. We'll be able to re-introduce the input later if needed.

PR Close #47082
","['packages/common/src/directives/ng_optimized_image.ts', 'packages/common/test/directives/ng_optimized_image_spec.ts']","`NgOptimizedImage` directive's `loader` input may cause redundancies, given the existence of `IMAGE_LOADER` token, especially since having different loaders in a single template is uncommon."
5bf180afb89b9a11fe8dd7bbbd7b5ca827d2719d,1622053068,"fix(devtools): skip node if there is no associated TViewData (rangle/angular-devtools#804)

* fix(backend): skip node if there is no associated TViewData

The code was assuming that the TViewData item at the same index as the node
in LView would contain a data entry. This value can be `null` (which is the
case in our app), which causes a catastrophic failure in the dev tool. By
checking for null, the node is skipped because it cannot determine the
associated component or directive and the dev tool does not die.

fixes issue rangle/angular-devtools#801

* chore: style tweak - add early return to avoid nesting",['projects/ng-devtools-backend/src/lib/directive-forest/ltree.ts'],Nodes without associated TViewData in the backend are leading to catastrophic failures in the dev tools.
9a3cf661a2f464503acde5eac6f0b3de949b292c,1627937701,"refactor(core): update peerDependencies to allow rxjs7 (#42991)

We can't update the framework to rxjs7 until version 13, because it contains breaking changes, but we can allow users to opt into it since all of our code should be compatible.

These changes expand the allowed version range of rxjs and add an integration test to verify that we don't get compilation errors. Note that we also have a test that runs the AIO examples against rxjs 7 already (#42660).

Fixes #41897.

PR Close #42991
","['integration/typings_test_rxjs7/include-all.ts', 'packages/common/test/pipes/async_pipe_spec.ts', 'packages/core/test/acceptance/property_binding_spec.ts']","The framework is incompatible with rxjs7 due to breaking changes, but all the existing project code should be compatible and there is a need for users to opt into rxjs7."
6b731a067ad293866ca4df08a2dd451dba6fe0d7,1594249413,"test: fix test failure in saucelabs ivy ie10 (#37892)

One of the ivy acceptance tests currently fails in IE10. This
is because we recently added a new test that asserts that injecting
`ViewRef` results in a `NullInjectorError`.

Due to limitations in TypeScript and in polyfills for `setPrototypeOf`,
the error cannot be thrown as `ViewRef` is always considered injectable.
In reality, `ViewRef` should not be injectable, as explicitly noted
in https://github.com/angular/angular/commit/c00f4ab2ae703e8a3ee4a3850170c9bbf0f9bc42.

There seems no way to simulate the proper prototype chain in such
browsers that do not natively support `__proto__`, so TypeScript
and `core-js` polyfills simply break the prototype chain and
assign inherited properties directly on `ViewRef`. i.e. so that
`ViewRef.__NG_ELEMENT_ID__` exists and DI picks it up.

There is a way for TypeScript to theoretically generate proper
prototype chain in ES5 output, but they intend to only bother
about the proper prototype chain in ES6 where `setPrototypeOf`
etc. are offically standarized. See the response:

https://github.com/microsoft/TypeScript/issues/1601#issuecomment-94892833.

PR Close #37892
",['packages/core/test/acceptance/di_spec.ts'],"Ivy acceptance test failing in IE10 due to new test asserting `ViewRef` injection, but it results in `NullInjectorError` due to limitations in TypeScript and lack of native support for `__proto__` in IE10."
ce76103e8fc22240870c31e1f1972bba0257202f,1660850564,"refactor(compiler): /a/.exec() returns RegExpExecArray (#47169)

Fix compilation issue with TypeScript nightly. TypeScript added a field
`0` to `RegExpMatchArray` in
https://github.com/microsoft/TypeScript/commit/3b80ddca212959ae5dcf2f48704be627283c6468.
Before that, `RegExpMatchArray` and `RegExpExecArray` were identical.

In one place Angular incorrectly expects `RegExpMatchArray` as the
result of a RegExp#exec() call. This assignment fails on TypeScript
nightly with the error:

    Property '0' is missing in type 'RegExpExecArray' but required in type 'RegExpMatchArray'.

Fix the issue by using the type `RegExpExecArray` instead. This also
works for older TypeScript versions.

PR Close #47169
",['packages/compiler/src/shadow_css.ts'],"Recent TypeScript update introduces an incompatibility with Angular due to an extra field added to 'RegExpMatchArray', causing compilation failure with RegExp#exec() calls."
ea8256f43d1bac1888424b29c03bf530a222bef2,1650323145,"refactor(router): Move config loader tracking to the RouterConfigLoader (#45656)

This wasn't exactly possible before because the `RouterConfigLoader` was
not an Injectable so there wasn't a straightforward way to share
information between `ApplyRedirects` and the preloader. They each had
their own implementation so they needed to store the values on the
`Route` so they both had access to them. I imagine this was the case
because trying to inject `Router` (to get access to the events) into the
preloader would have caused a circular dependency.

This refactor co-locates the loading details with the loader itself
rather than leaking implementation into the public route config and
mutating the object in an awkward way. This also promotes
`RouterConfigLoader` to a proper `Injectable` so data can be shared
throughout the system.

PR Close #45656
","['packages/router/src/models.ts', 'packages/router/src/router.ts', 'packages/router/src/router_config_loader.ts', 'packages/router/src/router_module.ts', 'packages/router/src/router_preloader.ts']","The `RouterConfigLoader` is not an Injectable, causing information sharing issues between `ApplyRedirects` and preloader, which leads to storing values on `Route` that can result in awkward object mutation and potential circular dependencies."
8eb05964639ea66e602f3c145728cb63ced706cd,1576275596,"fix(ivy): unknown property and element checks not working correctly in IE (#34305)

We have a couple of cases where we use something like `typeof Node === 'function'` to figure out whether we're in a worker context. This works in most browsers, but IE returns `object` instead of `function`. I've updated all the usages to account for it.

PR Close #34305
","['packages/core/src/render3/instructions/element.ts', 'packages/core/src/render3/instructions/shared.ts']","IE incorrectly returns 'object' instead of 'function' when checking the type of Node for determining worker context, causing unknown property and element checks to fail."
310ce6dcc2df3c2f2ab7fbebccb494ef03553b40,1574444404,"fix(ngcc): do not crash on packages that specify typings as an array (#33973)

In a package.json file, the ""typings"" or ""types"" field could be an array
of typings files. ngcc would previously crash unexpectedly for such
packages, as it assumed that the typings field would be a string. This
commit lets ngcc skip over such packages, as having multiple typing
entry-points is not supported for Angular packages so it is safe to
ignore them.

Fixes #33646

PR Close #33973
","['packages/compiler-cli/ngcc/src/packages/entry_point.ts', 'packages/compiler-cli/ngcc/test/packages/entry_point_spec.ts']","ngcc crashes on packages with the ""typings"" or ""types"" field as an array in package.json, assuming it should be a string."
0a8b943d106a8bd49e22796a3b7f1c0597993692,1669051440,"Revert ""refactor(router): Remove promise catch and re-reject (#48067)"" (#48135)

This reverts commit 07c9396824f6270872fce86498113c96a5ce6763. This
change caused test failures (both unit and integration). Though the code
looks like it should be a no-op update, it's possible it affecting
something to do with microtasks, zoneJS, and change detection. More
investigation would need to be done into the exact nature of the
failures.

PR Close #48135
",['packages/router/src/router.ts'],"'Refactor of router resulted in unexpected test failures (both unit and integration), possibly related to microtasks, zoneJS and change detection issue.'"
a82fddf1ce6166e0f697e429370eade114094670,1613754797,"feat(router): Allow for custom router outlet implementations (#40827)

This PR formalizes, documents, and makes public the router outlet contract.

The set of `RouterOutlet` methods used by the `Router` has not changed
in over 4 years, since the introduction of route reuse strategies.

Creation of custom router outlets is already possible and is used by the
Ionic framework
(https://github.com/ionic-team/ionic-framework/blob/master/angular/src/directives/navigation/ion-router-outlet.ts).
There is a small ""hack"" that is needed to make this work, which is that
outlets must register with `ChildrenOutletContexts`, but it currently
only accepts our `RouterOutlet`.

By exposing the interface the `Router` uses to activate and deactivate
routes through outlets, we allow for developers to more easily and safely
extend the `Router` and have fine-tuned control over navigation and component
activation that fits project requirements.

PR Close #40827
","['goldens/public-api/router/router.d.ts', 'packages/router/src/directives/router_outlet.ts', 'packages/router/src/index.ts', 'packages/router/src/router_outlet_context.ts']","There's currently no official and documented way to use custom router outlets in an Angular application, hindering fine-tuned control over navigation and component activation."
1bce51c0ed42621b2f9623d2f083424d76d1acfd,1643148944,"fix(compiler-cli): Handle `ng-template` with structural directive in indexer (#44788)

An `ng-template` with an inline template (i.e. has a structural
directive) would previously not get an `undefined` `tagName` because the
logic assumed the element would be `t.Element` or `t.Content` and read
the tag name from the `name` property. For a `t.Template`, this exists
instead on the `t.tagName`. The final result would be an `tagName` of `undefined`
for the parent `t.Template`, causing failures in the indexer downstream.

This `undefined` value is actually expected in the renderer code, even
though the type does not specify this possibility. This change updates
the type of `tagName` to be `string|null` and explicitly handles the
case where there is a structural directive on an `ng-template`. You can
see how the two are differentiated in the compliance code that was
modified in this commit.

PR Close #44788
","['packages/compiler-cli/src/ngtsc/indexer/src/template.ts', 'packages/compiler-cli/src/ngtsc/indexer/test/template_spec.ts', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/element_attributes/ng-template_interpolation_structural.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/element_attributes/ng-template_structural.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_i18n/ng-container_ng-template/structural_directives.js', 'packages/compiler-cli/test/compliance/test_cases/r3_view_compiler_template/ng_template_interpolated_prop_with_structural_directive_outer_template.js', 'packages/compiler/src/render3/r3_ast.ts', 'packages/compiler/src/render3/r3_template_transform.ts', 'packages/compiler/test/render3/r3_template_transform_spec.ts', 'packages/language-service/src/utils.ts']","An error occurs in the indexer when handling an `ng-template` with a structural directive, as the `tagName` of the parent `t.Template` returns as `undefined`."
751cd83ae3ee5c971f2d4b72af1aaa691305a866,1622745286,"fix(forms): the `min` and `max` validators should work correctly with `0` as a value (#42412)

Prior to this change the `min` and `max` validator directives would not
set the `min` and `max` attributes on the host element. The problem was
caused by the truthy check in host binding expression that was
calculated as `false` when `0` is used as a value. This commit updates
the logic to leverage nullish coalescing operator in these host binding
expressions, so `0` is treated as a valid value, thus the `min` and
`max` attributes are set correctly.

Partially closes #42267

PR Close #42412
","['packages/forms/src/directives/validators.ts', 'packages/forms/test/reactive_integration_spec.ts', 'packages/forms/test/template_integration_spec.ts']",'Min' and 'max' validator directives fail to set the respective attributes on the host element when '0' is used as a value.
be46d2b9b7e0d9fe9111f84c1ccae3b876394db8,1681238811,"refactor(compiler): pipeline phase to resolve view contexts (#48580)

`phaseResolveContexts()` resolves `ir.ContextExpr` expressions within views.
Each `ir.ContextExpr` represents a reference to a particular view context. For
the context of the view being compiled, this is available in the view's template
function `ctx` parameter. For parent views, this is available in context
variables which were added previously.

`phaseResolveContexts()` replaces these `ir.ContextExpr` operations with
resolved references to the requested views.

PR Close #48580
",['packages/compiler/src/template/pipeline/src/phases/resolve_contexts.ts'],"`ir.ContextExpr` expressions within views are not being appropriately resolved, leading to referencing issues in the current and parent views."
9bd9a11f4e21e5a7cc9da18f150f6dd520e7cd1e,1680724825,"refactor(platform-browser): remove deprecated `BrowserTransferStateModule` symbol (#49718)

The `TransferState` class was updated in v14 in a way that the `BrowserTransferStateModule` was no longer required. The `BrowserTransferStateModule` was deprecated in v14.1 and it's currently empty. This commit removes the `BrowserTransferStateModule`.

BREAKING CHANGE: The deprecated `BrowserTransferStateModule` was removed, since it's no longer needed. The `TransferState` class can be injected without providing the module. The `BrowserTransferStateModule` was empty starting from v14 and you can just remove the reference to that module from your applications.

PR Close #49718
","['packages/platform-browser/src/browser/transfer_state_module.ts', 'packages/platform-browser/src/platform-browser.ts']","The deprecated `BrowserTransferStateModule` remains present in the code, despite being empty and no longer necessary after updates to `TransferState` class."
d966fdd4389185ae25707124bb46cc638ace2aeb,1681317191,"refactor(router): Ensure data is bound to components in change detection following navigation (#49741)

`RouterOutlet` components can initialize _during_ change detection (for
example, if they exist in an embedded view). When this happens, data
from the router should be bound immediately to the routed components
rather than not being available until the next round of change
detection. This is mostly just a problem for testing because change
detection is triggered manually. It would be surprising to have to
detect changes _twice_ on the fixture in order to get data bound to the
routed component.

PR Close #49741
","['packages/router/src/directives/router_outlet.ts', 'packages/router/test/directives/router_outlet.spec.ts']","Data from the router isn't immediately bound to the routed components when RouterOutlet components initialize during change detection, resulting in data unavailability until the next round of change detection."
2e4244d521f68dcfd66245ba32c6a1124f6dbaf3,1586464527,"fix(docs-infra): fix `elements` example when used with ES5 (#36536)

Previously, the `elements` docs example only worked in browsers that
natively supported Custom Elements and ES2015 modules. Furthermore, it
didn't work on StackBlitz, because StackBlitz ignores the specified
`target` in `tsconfig.json` and uses the UMD bundles (i.e. ES5 code)
even on browsers that do support ES2015.
(NOTE: In the past, this was not a problem, because we explicitly did
not provide a StackBlitz example. This has changed in #36067.)

This commit ensures the example works on all browsers and also on
StackBlitz by providing the necessary Custom Elements polyfills.

Fixes #36532

PR Close #36536
","['aio/tools/examples/example-boilerplate.js', 'aio/tools/examples/shared/boilerplate/elements/src/polyfills.ts']","The `elements` docs example only works on browsers that support Custom Elements and ES2015 modules, and is not functional on StackBlitz due to it ignoring the `target` in `tsconfig.json` and using UMD bundles even on ES2015-supporting browsers."
6feef368f6611e2780f4f56599fe7394a1cfcd71,1553546868,"test(ivy): add tests for component factory projectable node corner cases (#27791)

In some cases ivy expects projectable nodes to be passed in a different order
to ViewEngine. Specifically, ivy expects the catch-all (""*"") to be at index
0, whereas ViewEngine expects it to be at its position at which it was parsed
in the template.

This commit adds one test that breaks under ivy and others that just describe
more accurately what happens in corner cases.

PR Close #27791
","['packages/compiler/test/aot/compiler_spec.ts', 'packages/core/test/linker/projection_integration_spec.ts']","Ivy and ViewEngine have inconsistent expectations for the order of projectable nodes, specifically the position of the catch-all (""*""). This results in unexpected behavior in certain edge cases."
5ba7bcd2a6cf500ff5ac9262e3286b8a0f01baf3,1608589335,"docs: fix `SpyDirective` in `lifecycle-hooks` docs example to use one ID per instance (#40208)

Previously, the `SpyDirective` in the `lifecycle-hooks` docs example
would use a different ID when logging `onInit` and when logging
`onDestroy` for the same instance, making it impossible to associate the
two calls. This was not helpful and came in constrast with how the
directive was described in the corresponding guide and shown in the
accompanying `spy-directive.gif` image.

This commit fixes the logic of the `SpyDirective` class to use the same
ID for all log operations of an instance.

Partially addresses #40193.

PR Close #40208
",['aio/content/examples/lifecycle-hooks/src/app/spy.directive.ts'],"'SpyDirective' in the 'lifecycle-hooks' docs example uses different IDs when logging 'onInit' and 'onDestroy' for the same instance, making it impossible to associate the two calls."
c2f13a1e3a537b970f7308d5b8b1917d4f0b06b4,1572304833,"refactor(ivy): i18n - share `MessageSerializer` across `TranslationParsers` (#33444)

Each of the XML based `TranslationParsers` was providing its own
`MessageSerializer`, but they are all very similar. So these have been
consolidated into a single more generic `MessageSerializer.

As a result of this, the extra layers of folders in the project seemed
unnecessary, so they have been flattened.

PR Close #33444
","['packages/localize/src/tools/src/translate/main.ts', 'packages/localize/src/tools/src/translate/translation_files/base_visitor.ts', 'packages/localize/src/tools/src/translate/translation_files/message_serialization/message_renderer.ts', 'packages/localize/src/tools/src/translate/translation_files/message_serialization/message_serializer.ts', 'packages/localize/src/tools/src/translate/translation_files/message_serialization/target_message_renderer.ts', 'packages/localize/src/tools/src/translate/translation_files/translation_parsers/simple_json_translation_parser.ts', 'packages/localize/src/tools/src/translate/translation_files/translation_parsers/xliff1/xliff1_message_serializer.ts', 'packages/localize/src/tools/src/translate/translation_files/translation_parsers/xliff1_translation_parser.ts', 'packages/localize/src/tools/src/translate/translation_files/translation_parsers/xliff2_translation_parser.ts', 'packages/localize/src/tools/test/translate/translation_files/translation_parsers/simple_json_spec.ts', 'packages/localize/src/tools/test/translate/translation_files/translation_parsers/xliff1_translation_parser_spec.ts', 'packages/localize/src/tools/test/translate/translation_files/translation_parsers/xliff2_translation_parser_spec.ts']","Each XML-based `TranslationParsers` provides its own `MessageSerializer` though they are similar, leading to redundancy and unnecessary project folder layers."
7561698675980966898c0c042fec43763d97a4b2,1552667794,"fix(ivy): add temporary hack for deprecatedOverrideProvider (#29324)

HACK: This is NOT the correct implementation for deprecatedOverrideProvider.
We do not plan to implement this at all since the API is deprecated and
scheduled for removal in V8. This hack is here temporarily for Ivy testing
until we transition apps inside Google to the overrideProvider API. At that
point, we will be able to remove this method entirely. In the meantime, we
can use overrideProvider here to test apps with Ivy that don't care about
eager instantiation. This fixes 97% of cases in our blueprint.

PR Close #29324
",['packages/core/testing/src/r3_test_bed.ts'],DeprecatedOverrideProvider API is in use while it is deprecated and scheduled for removal. It causes problems in Ivy testing and  prevents testing of apps without caring about eager instantiation.
48f49bacb43f9acc9204be178754743c3f6238df,1621371854,"refactor(dev-infra): improve type safety of NPM dist tags in release tool (#42133)

Instead of passing `string` in the release tool for NPM dist tags, we
should use a union string type that limits the tags to `latest`, `next`
and anything matching `v{number}-lts`. This avoids mistakes at
compilation-level if an invalid/unknown tag would be set by a release
action.

PR Close #42133
","['dev-infra/ng-dev.js', 'dev-infra/release/publish/actions.ts', 'dev-infra/release/publish/actions/cut-lts-patch.ts', 'dev-infra/release/publish/external-commands.ts', 'dev-infra/release/publish/test/common.spec.ts', 'dev-infra/release/publish/test/test-utils.ts', 'dev-infra/release/versioning/long-term-support.ts', 'dev-infra/release/versioning/npm-publish.ts', 'dev-infra/release/versioning/npm-registry.ts']","Release tool permits any string for NPM dist tags, increasing the risk of compilation-level mistakes if an invalid/unknown tag is set by a release action."
cdf50ff9318ff5cdb4cbb1272d9113de8160065c,1638987868,"refactor(forms): Move FormControl to an overridden exported constructor. (#44316)

This implementation change was originally proposed as part of Typed Forms, and will have major consequences for that project as described in the design doc. Submitting it separately will greatly simplify the risk of landing Typed Forms. This change should have no visible impact on normal users of FormControl.

See the Typed Forms design doc here: https://docs.google.com/document/d/1cWuBE-oo5WLtwkLFxbNTiaVQGNk8ipgbekZcKBeyxxo.

PR Close #44316
","['packages/forms/src/forms.ts', 'packages/forms/src/model.ts', 'packages/forms/test/form_control_spec.ts']",The current implementation of FormControl is complicating the integration and risk management of the Typed Forms project.
19cfaf7f4cf3bdbc6676812ae804c4d897f1dce0,1583888287,"fix(core): don't re-invoke pure pipes that throw and arguments are the same (#35827)

Pure pipes are not invoked again until their arguments are modified. The same
rule should apply to pure pipes that throw an exception. This fix ensures that
a pure pipe is not re-invoked if it throws an exception and arguments are not
changed.

PR Close #35827
","['packages/core/src/render3/pure_function.ts', 'packages/core/test/acceptance/pipe_spec.ts']","Pure pipes that throw exceptions are being re-invoked despite no changes to their arguments, causing unnecessary invocations."
f53d0fd2d01a323e122eaf27c2c6263f758e35e0,1555948088,"fix(ivy): classes should not mess up matching for bound dir attributes (#30002)

Previously, we had a bug where directive matching could fail if the directive
attribute was bound and followed a certain number of classes. This is because
in the matching logic, we were treating classes like normal attributes. We
should instead be skipping classes in the attribute matching logic. Otherwise
classes will match for directives with attribute selectors, and as we are
iterating through them in twos (when they are stored as name-only, not in
name-value pairs), it may throw off directive matching for any bound attributes
that come after. This commit changes the directive matching logic to skip
classes altogether.

PR Close #30002
","['packages/core/src/render3/node_selector_matcher.ts', 'packages/core/test/acceptance/directive_spec.ts', 'packages/core/test/render3/node_selector_matcher_spec.ts']","Directive matching fails when the directive attribute is bound and follows a certain number of classes, as classes are mistakenly treated as normal attributes in the matching logic."
29f57e315edf09b8657909ba83293a307d64c2b4,1551972644,"build: enable bundle_dts for router package (#28833)

This PR also changes the name of `EmptyOutletComponent` to `ÉµEmptyOutletComponent`. This is because `ngcc` requires the node to retain the original name while dts bundler will rename the node is it's only exported using the aliases.

Example typings files:
```ts
declare class EmptyOutletComponent {
}
export {EmptyOutletComponent as ÉµEmptyOutletComponent}
```

will be emitted as
```ts
export declare class ÉµEmptyOutletComponent {
}
```

PR Close #28833
","['packages/router/src/components/empty_outlet.ts', 'packages/router/src/private_export.ts']","'ngcc' requires original node name retention while dts bundler renames node when only alias exports are used, causing inconsistencies in the emitted typings file for the 'router' package."
5268ae61a072b471b92e20360173da0b88c88f69,1555697725,"feat(ivy): support for template type-checking pipe bindings (#29698)

This commit adds support for template type-checking a pipe binding which
previously was not handled by the type-checking engine. In compatibility
mode, the arguments to transform() are not checked and the type returned
by a pipe is 'any'. In full type-checking mode, the transform() method's
type signature is used to check the pipe usage and infer the return type
of the pipe.

Testing strategy: TCB tests included.

PR Close #29698
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/program.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/api.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/context.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/environment.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_check_block.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/type_check_file.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_check_block_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_constructor_spec.ts', 'packages/compiler-cli/test/ngtsc/fake_core/index.ts', 'packages/compiler-cli/test/ngtsc/template_typecheck_spec.ts']","The type-checking engine fails to support type-checking for pipe bindings in the template, leading to unchecked transform() arguments in compatibility mode and a return type of 'any'."
7f51f1dcae577662f917c7b1c9ce3f237c1a7a6d,1641494206,"docs(docs-infra): improve the content of attribute directives (#44628)

Improve docs ""Understanding Angular-Directives-Attribute Directives""

In `highlight.directive.1.ts`, add the `private` keyword for `el` property
to make it correct and consistent with subsequent examples.

For section ""Setting the value with user input"", add a step to tell the
reader change the method `onMouseEnter`, thus more readable.

For section ""Binding to a second property"", delete the aliase for the
`Input` property, and changes the name back to `appHighlight` in the code
to make it consistent with the whole tutorial.

PR Close #44628
","['aio/content/examples/attribute-directives/src/app/highlight.directive.1.ts', 'aio/content/examples/attribute-directives/src/app/highlight.directive.3.ts', 'aio/content/examples/attribute-directives/src/app/highlight.directive.ts']","The content in the 'Understanding Angular-Directives-Attribute Directives' section is inconsistent and unclear, specifically in the 'highlight.directive.1.ts' example and sections 'Setting the value with user input' and 'Binding to a second property'."
dbd0f8e6990204b8f0cc44347a45fb6cca3bced8,1588705260,"feat(language-service): [ivy] Parse Angular compiler options (#36922)

Parse Angular compiler options in Angular language service.

In View Engine, only TypeScript compiler options are read, Angular
compiler options are not. With Ivy, there could be different modes of
compilation, most notably how strict the templates should be checked.
This commit makes the behavior of language service consistent with the
Ivy compiler.

PR Close #36922
","['packages/language-service/ivy/language_service.ts', 'packages/language-service/ivy/test/language_service_spec.ts', 'packages/language-service/ivy/ts_plugin.ts']","Angular language service in Ivy is not considering Angular compiler options, resulting in inconsistent behaviors comparing to View Engine due to different modes of template checks."
bd04fbc05b0397de966a493a863e1054203c86d9,1646339344,"feat(service-worker): emit a notification when the service worker is already up to date after check (#45216)

When the service worker checks for an update and finds that the version on the server is the same as
the version locally installed, it currently noops.  This change introduces an event which it emits
in this situation which notifies clients a check has occurred without error and no update was found.

PR Close #45216
","['packages/service-worker/src/low_level.ts', 'packages/service-worker/src/update.ts', 'packages/service-worker/test/comm_spec.ts', 'packages/service-worker/worker/src/driver.ts', 'packages/service-worker/worker/test/happy_spec.ts']","The service worker silently ignores when it checks for an update and find the same version locally installed, leading to no feedback for clients."
ee6c915c82b838ee1b3a1e979ab8dc70b3986485,1695401452,"feat(devtools): added instances count and total time in bar chart (#50866)

In Devtools bar chart we can see the total time for all the directive instances in one change detection run.

This PR changes the bar chart to display the total count and time for all directive instances instead of showing the time for each directive instance separately in one change detection run.

PR Close #50866
","['devtools/projects/ng-devtools/src/lib/devtools-tabs/profiler/timeline/record-formatter/bargraph-formatter/bargraph-formatter.ts', 'devtools/projects/ng-devtools/src/lib/devtools-tabs/profiler/timeline/recording-visualizer/bar-chart.component.ts', 'devtools/projects/ng-devtools/src/lib/devtools-tabs/profiler/timeline/recording-visualizer/bargraph-visualizer.component.ts']","Devtools bar chart displays time for each directive instance separately during a change detection run, making it difficult to assess cumulative performance metrics."
0f10d75228c234253616fae222c53e43dd86d949,1694106467,"refactor(compiler): use native BigInt when calculating i18n digests (#48321)

To further modernize and improve the performance of the i18n digest generation,
The 64-bit aspects of the process now use the native `BigInt` instead of a
custom JavaScript implementation. This removes the need for the big_integer
helper code and associated tests as the code was not used anywhere else in the
framework. Only the `BigInt` constructor, `BigInt.asUintN` function, and
`.toString` function are currently used. `BigInt` literals can unfortunately
not yet be used due to the bazel test devmode setup which compiles the TypeScript
code at an EcmaScript level that does not yet support the literals.

Browser support information:
- BigInt constructor: https://caniuse.com/mdn-javascript_builtins_bigint_bigint
- BigInt asUintN: https://caniuse.com/mdn-javascript_builtins_bigint_asuintn
- BigInt toString: https://caniuse.com/mdn-javascript_builtins_bigint_tostring

PR Close #48321
","['packages/compiler/src/i18n/big_integer.ts', 'packages/compiler/src/i18n/digest.ts', 'packages/compiler/test/i18n/big_integer_spec.ts']","The i18n digest generation relies on a custom JavaScript implementation for its 64-bit processes, contributing to performance slowdown and necessitating the use of redundant helper code."
bd91572986e8672f65728ef76b0c7f340d5f981c,1653081489,"build: lock file maintenance to avoid node module differences for babel types (#45967)

We recently updated Babel and the Bazel types but this actually
resulted in duplicates, causing differences between what people
seen in their IDE vs. what Bazel builds.

This commit removes the lock file and generates it fully fresh,
deduping dependencies and also fixing the differences between
local IDE and Bazel.

As part of this we also need to update/fixup one assertion on the
Babel node path types, because the node start/end can now also
be `undefined`.

PR Close #45967
","['packages/bazel/src/ngc-wrapped/index.ts', 'packages/localize/tools/src/source_file_utils.ts']","Updating Babel and Bazel types resulted in duplicate dependencies, causing discrepancies between local IDE and Bazel builds."
530e45f093508345be38f412af071a560a1abedb,1620247563,"fix(dev-infra): publish script python check not working on windows (#41943)

We recently added a sanity check that ensures that `python` is
available for Bazel. The check relies on `/usr/bin/python` to check
if python is available w/ the correct version. The problem is
that on Windows there is no guarantee that the `/usr/bin` folder
exists, so the `ng-dev release publish` command always fails.

We fix this by just accessing the `env` binary that is also consulted
by scripts executed within Bazel actions. The `env` binary can be
assumed exist in the shell's `$PATH` and can point us to Python
as if it would be executed within Bazel.

PR Close #41943
","['dev-infra/ng-dev.js', 'dev-infra/release/publish/index.ts']","The ""ng-dev release publish"" command fails on Windows, as it assumes the presence of a ""/usr/bin"" directory that may not exist, interfering with the Python sanity check for Bazel."
230e9766f6e6b8ce30b0cf8c39a891c3ba28d5be,1560271039,"test(ivy): fix strict null checks failures in ngcc tests (#30967)

9d9c9e43e544ac2ecf74e20d31ba3bd1064db6c9 has been created a few days ago
and wasn't rebased on top of recent changes that introduces a commonjs host.

This means that tests for the commonjs host haven't been updated to work with
the changes from from #30492 and now fail in `master`.

PR Close #30967
",['packages/compiler-cli/ngcc/test/host/commonjs_host_spec.ts'],"Recent changes introducing a commonjs host have led to failing tests in ngcc, particularly concerning strict null checks."
616c8a89b8313b04306ff50fe283fa7065cf7286,1656696051,"test: update schematics workspace test to no longer verify JSON5 features (#46642)

The Angular CLI has removed the JSON5 parsing and now always uses
`jsonc-parser`. Our test checks if JSON5 features can be parsed, but
this now breaks and the test needs to be adjusted.

We still want to keep the test to ensure we do not parse the Angular
CLI workspace file in a different way, not e.g. supporting jsonc.

PR Close #46642
",['packages/core/schematics/test/project_tsconfig_paths_spec.ts'],"The test checking if JSON5 features are parsed is failing because Angular CLI now always uses `jsonc-parser`, leading to potential discrepancy in parsing Angular CLI workspace files."
044e0229bde8edb86e0d9e318bc358299ea6f814,1623689986,"build: generate alias locale data for closure locale (#42230)

Within Google, closure compiler is used for dealing with translations.
We generate a closure-compatible locale file that allows for
registration within Angular, so that Closure i18n works well together
with Angular applications. Closure compiler does not limit its
locales to BCP47-canonical locale identifiers. This commit updates
the generation logic so that we also support deprecated (but aliased)
locale identifiers, or other aliases which are likely used within
Closure. We use CLDR's alias supplemental data for this. It instructs
us to alias `iw` to `he` for example. `iw` is still supported in Closure.

Note that we do not manually extract all locales supported in Closure;
instead we only support the CLDR canonical locales (as done before) +
common aliases that CLDR provides data for. We are not aware of other
locale aliases within Closure that wouldn't be part of the CLDR aliases.
If there would be, then Angular/Closure would fail accordingly.

PR Close #42230
","['packages/common/locales/closure-locale.ts', 'packages/common/locales/generate-locales-tool/cldr-data.ts', 'packages/common/locales/generate-locales-tool/closure-locale-file.ts', 'packages/common/locales/generate-locales-tool/locale-file.ts', 'packages/common/locales/generate-locales-tool/locale-global-file.ts', 'packages/common/locales/generate-locales-tool/plural-function.ts']","Closure compiler in Angular application does not limit its locales, causing a mismatch with Angular's BCP47 restriction on locale identifiers."
d12cdb50195b530d9fee1a06f4b0494084b5cf76,1593120128,"fix(migrations): do not incorrectly add todo for @Injectable or @Pipe (#37732)

As of v10, the `undecorated-classes-with-decorated-fields` migration
generally deals with undecorated classes using Angular features. We
intended to run this migation as part of v10 again as undecorated
classes with Angular features are no longer supported in planned v11.

The migration currently behaves incorrectly in some cases where an
`@Injectable` or `@Pipe` decorated classes uses the `ngOnDestroy`
lifecycle hook. We incorrectly add a TODO for those classes. This
commit fixes that.

Additionally, this change makes the migration more robust to
not migrate a class if it inherits from a component, pipe
injectable or non-abstract directive. We previously did not
need this as the undecorated-classes-with-di migration ran
before, but this is no longer the case.

Last, this commit fixes an issue where multiple TODO's could be
added. This happens when multiple Angular CLI build targets have
an overlap in source files. Multiple programs then capture the
same source file, causing the migration to detect an undecorated
class multiple times (i.e. adding a TODO twice).

Fixes #37726.

PR Close #37732
","['integration/ng_update_migrations/src/app/migration-tests/undecorated-classes-with-fields.ts', 'integration/ng_update_migrations/src/app/migration-tests/undecorated-classes-with-fields_expected.ts', 'packages/core/schematics/migrations/undecorated-classes-with-decorated-fields/transform.ts', 'packages/core/schematics/test/google3/undecorated_classes_with_decorated_fields_spec.ts', 'packages/core/schematics/test/helpers.ts', 'packages/core/schematics/test/undecorated_classes_with_decorated_fields_migration_spec.ts']","The `undecorated-classes-with-decorated-fields` migration is incorrectly adding TODOs on classes decorated with `@Injectable` or `@Pipe` that use `ngOnDestroy`, and can add multiple TODOs on undecorated classes due to overlaps in Angular CLI build targets."
bd9c1e6cfcfc4fb7da242134b80424e67cca2c65,1591815825,"build: add commit message scope for migration changes (#36390)

This is a proposal commit that adds a separate scope for
migration changes. The motiviation is that migrations aren't
necessarily always affecting `@angular/core`, but are just
stored in the core package for a canonical location when
someone runs `ng update`. Additionally, it rather seems confusing in the
changelog if migration changes are listed under `core`.

PR Close #36390
",['.ng-dev/config.ts'],"Migration changes affecting `@angular/core` causing confusion when reported under the `core` section in the changelog, despite their storage in core package only for canonical reasons."
3b2f607cdad4edd01f08bab502db16849bbd8d95,1626464699,"build: generate closure locale files using hard-coded list of locales (#42230)

With the refactoring from a Gulp task to a Bazel too, we tried switching
away from the hard-coded list of locales and aliases for the Closure
Locale file generation. After multiple attempts of landing this, it
turned out that Closure Compiler/Closure Library relies on locale
identifiers CLDR does not capture within it's `availableLocales.json`
or `aliases.json` data.

Closure Library does not use any unknown locale identifiers here. The
locale identifiers can be resolved within CLDR using the bundle lookup
algorithm that is specified as part of CLDR; instead the problem is that
the locale identifiers do not follow any reasonable pattern and
therefore it's extremely difficult to generate them automatically (it's
almost like we'd need to build up _all_ possible combinations). Instead
of doing that, we just use the hard-coded locales and aliases from the
old Closure Locale generation script.

PR Close #42230
","['packages/common/locales/closure-locale.ts', 'packages/common/locales/generate-locales-tool/closure-locale-file.ts']","There are issues in generating locale files for Closure Compiler/Library as it relies on locale identifiers which are not captured by CLDR in its `availableLocales.json` or `aliases.json`, making them challenging to generate automatically."
5b31a0a2942c50059cac4c7ccb92047a50473347,1595269004,"docs: separate template syntax into multiple docs (#36954)

This is part of a re-factor of template syntax and
structure. The first phase breaks out template syntax
into multiple documents. The second phase will be
a rewrite of each doc.

Specifically, this PR does the following:

- Breaks sections of the current template syntax document each into their own page.
- Corrects the links to and from these new pages.
- Adds template syntax subsection to the left side NAV which contains all the new pages.
- Adds the new files to pullapprove.

PR Close #36954
","['packages/common/src/directives/ng_for_of.ts', 'packages/common/src/directives/ng_if.ts', 'packages/core/src/metadata/directives.ts']","Current template syntax documentation is bulky and not well-structured, making it difficult for users to find specific information."
db97453ca0d4c4dd011eef8df18cf6a482f0b272,1608067852,"refactor(compiler-cli): move template parse errors to TemplateData (#40026)

Durring analysis we find template parse errors. This commit changes
where the type checking context stores the parse errors. Previously, we
stored them on the AnalysisOutput this commit changes the errors to be
stored on the TemplateData (which is a property on the shim). That way,
the template parse errors can be grouped by template.

Previously, if a template had a parse error, we poisoned the module and
would not procede to find typecheck errors. This change does not poison
modules whose template have typecheck errors, so that ngtsc can emit
typecheck errors for templates with parse errors.

Additionally, all template diagnostics are produced in the same place.
This allows requesting just the template template diagnostics or just
other types of errors.

PR Close #40026
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/annotations/test/component_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/context.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/context.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/test_utils.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts', 'packages/language-service/ivy/test/diagnostic_spec.ts']","Template parse errors during analysis are stored on the AnalysisOutput instead of being grouped by template, leading to module poisoning and inability to find typecheck errors in templates with parse errors."
627cecdfe2253c73279f8ed3bc025d15a92ec3cf,1550172205,"fix(ivy): ensure host bindings and host styling works on a root component (#28664)

Prior to this fix if a root component was instantiated it create host
bindings, but never render them once update mode ran unless one or more
slot-allocated bindings were issued. Since styling in Ivy does not make
use of LView slots, the host bindings function never ran on the root
component.

This fix ensures that the `hostBindings` function does run for a root
component and also renders the schedlued styling instructions when
executed.

Jira Issue: FW-1062

PR Close #28664
","['packages/core/src/render3/component.ts', 'packages/core/src/render3/instructions.ts', 'packages/core/src/render3/interfaces/view.ts', 'packages/core/src/render3/styling/util.ts', 'packages/core/src/render3/util.ts', 'packages/core/test/acceptance/integration_spec.ts', 'packages/core/test/bundling/animation_world/index.ts', 'packages/core/test/render3/render_util.ts']","Root component instantiated does not render host bindings when update mode runs, unless one or more slot-allocated bindings are issued. This issue impacts styling in Ivy as it doesn't use LView slots."
bdb5371033d8e9a110619861323e8383a32d5900,1665159360,"feat(common): add injection token for default DatePipe configuration (#47157)

This commit introduces a new `DATE_PIPE_DEFAULT_OPTIONS` token, which
can be used to configure default DatePipe options, such as date
format and timezone.

DEPRECATED:

The `DATE_PIPE_DEFAULT_TIMEZONE` token is now deprecated in favor
of the `DATE_PIPE_DEFAULT_OPTIONS` token, which accepts an object
as a value and the timezone can be defined as a field (called `timezone`)
on that object.

PR Close #47157
","['packages/common/src/common.ts', 'packages/common/src/pipes/date_pipe.ts', 'packages/common/src/pipes/date_pipe_config.ts', 'packages/common/src/pipes/index.ts', 'packages/common/test/pipes/date_pipe_spec.ts']","Lack of a centralized configuration for DatePipe options requiring a separate injection token for each setting, resulting in inefficiency and fragmentation of configuration data."
f0f426b2d06929e3675a5beacf75295f4bed1d4b,1574803647,"fix(ivy): support inserting a `viewRef` that is already present (#34052)

When inserting a `viewRef` it is possible to not provide
an `index`, which is regarded as appending to the end of
the container.

If the `viewRef` already exists in the container, then
this results in a move. But there was a fault in the logic
that computed where to insert the `viewRef` that did not
account for the fact that the `viewRef` was already in
the container, so the insertion `index` was outside the
bounds of the array.

Fixes #33924

PR Close #34052
","['packages/core/src/render3/view_engine_compatibility.ts', 'packages/core/test/acceptance/view_container_ref_spec.ts']",Faulty logic when inserting a `viewRef` already existing in the container can cause the insertion index to be outside the bounds of the array when no `index` is provided.
e9cb0454dce2113cfd5ba11deeca6cdcf47d47f0,1654276565,"feat(upgrade): more closely align `UpgradeModule#bootstrap()` with `angular.bootstrap()` (#46214)

Previously, [UpgradeModule#bootstrap()][1], while being a replacement
for and accepting the same arguments as [angular.bootstrap()][2], did
not return the same value as `angular.bootstrap()` (i.e. the AngularJS
injector in most cases). This made it less straight forward to migrate
some usecases that relied on the return value of `.bootstrap()`. The
work-around was to access the injector via [UpgradeModule#$injector][3]
(after the app had been bootstrapped with `UpgradeModule#bootstrap()`).

This commit addresses this by ensuring `UpgradeModule#bootstrap()`
returns the same value as `angular.bootstrap()`, making it easier to
replace the latter with the former.

[1]: https://angular.io/api/upgrade/static/UpgradeModule#bootstrap
[2]: https://docs.angularjs.org/api/ng/function/angular.bootstrap
[3]: https://angular.io/api/upgrade/static/UpgradeModule#%24injector

Fixes #46211

PR Close #46214
","['packages/upgrade/static/src/upgrade_module.ts', 'packages/upgrade/static/test/integration/upgrade_module_spec.ts']","The method `UpgradeModule#bootstrap()` doesn't return the same value as `angular.bootstrap()`, complicating the migration process for use cases relying on the return value of `.bootstrap()`."
0847a0353b87cd181ef2a257e36126a888f02d75,1614806038,"fix(language-service): Always attempt HTML AST to template AST conversion for LS (#41068)

The current logic in the compiler is to bail when there are errors when
parsing a template into an HTML AST or when there are errors in the i18n
metadata. As a result, a template with these types of parse errors
_will not have any information for the language service_. This is because we
never attempt to conver the HTML AST to a template AST in these
scenarios, so there are no template AST nodes for the language service
to look at for information. In addition, this also means that the errors
are never displayed in the template to the user because there are no
nodes to map the error to.

This commit adds an option to the template parser to temporarily ignore
the html parse and i18n meta errors and always perform the template AST
conversion. At the end, the i18n and HTML parse errors are appended to
the returned errors list. While this seems risky, it at least provides
us with more information than we had before (which was 0) and it's only
done in the context of the language service, when the compiler is
configured to use poisoned data (HTML parse and i18n meta errors can be
interpreted as a ""poisoned"" template).

fixes angular/vscode-ng-language-service#1140

PR Close #41068
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler/src/render3/view/template.ts', 'packages/compiler/test/render3/r3_template_transform_spec.ts', 'packages/language-service/ivy/test/completions_spec.ts', 'packages/language-service/ivy/test/diagnostic_spec.ts', 'packages/language-service/ivy/test/legacy/template_target_spec.ts']","When there are parse errors in a template, no conversion from HTML AST to template AST is attempted leading to lack of information for the language service, and errors are not displayed to the user."
d3c0fa3b1a7fa59df5651a925364602bc3772734,1650458757,"refactor(compiler-cli): propagate standalone flag in .d.ts metadata (#45672)

This commit adds a type field to .d.ts metadata for directives, components,
and pipes which carries a boolean literal indicating whether the given type
is standalone or not. For backwards compatibility, this flag defaults to
`false`.

Tests are added to validate that standalone types coming from .d.ts files
can be correctly imported into new standalone components.

PR Close #45672
","['packages/compiler-cli/ngcc/test/integration/ngcc_spec.ts', 'packages/compiler-cli/src/ngtsc/metadata/src/dts.ts', 'packages/compiler-cli/src/ngtsc/metadata/src/util.ts', 'packages/compiler-cli/test/ngtsc/standalone_spec.ts', 'packages/compiler/src/render3/r3_pipe_compiler.ts', 'packages/compiler/src/render3/view/compiler.ts', 'packages/core/src/render3/interfaces/public_definitions.ts']","The .d.ts metadata for directives, components, and pipes is lacking a type field to indicate whether a given type is standalone, possibly affecting the import into new standalone components."
9da68a77e612d8f9e8ecdc9f77a43444d0e95461,1625867415,"refactor(bazel): compatibility with `rules_nodejs` v4.0.0 (#42760)

This commit applies changes to `@angular/bazel` which are necessary
to support the Bazel NodeJS rules v4.0.0. The Bazel NodeJS rules
no longer support the `_tslibrary` option for the `LinkablePackageInfo`
provider and therefore we need to stop using it. Due to this removal,
we also need to add two new attributes called `package_name` and
`package_path` so that the API of `ng_module` matches `ts_library`.

Note: This is denoted as `refactor` as we currently are not able to
merge feature commits into patch branches, but we want the tooling
to not diverge significantly between the patch and next branch. It is
planned to update the merge tooling to allow for such changes to land.

PR Close #42760
",['packages/bazel/src/ng_module.bzl'],"`@angular/bazel` is incompatible with `rules_nodejs` v4.0.0 due to the deprecated `_tslibrary` option for `LinkablePackageInfo` provider, and the API mismatch between `ng_module` and `ts_library`."
e7cf1e05802a61bda9cbe619ed86a491ba067d04,1575658689,"feat(docs-infra): add the ability to expose globals (#34237)

Adds the ability to expose global symbols in the API docs via the `@globalApi` tag. Also supports optionally setting a namespace which will be added to the name automatically (e.g. `foo` will be renamed to `ng.foo`). Relevant APIs should also be exported through the `global.ts` file which will show up under `core/global`.

PR Close #34237
","['aio/tools/transforms/angular-api-package/index.js', 'aio/tools/transforms/angular-api-package/processors/addGlobalApiData.js', 'aio/tools/transforms/angular-api-package/processors/addGlobalApiData.spec.js', 'aio/tools/transforms/angular-api-package/processors/updateGlobalApiPath.js', 'aio/tools/transforms/angular-api-package/processors/updateGlobalApiPath.spec.js', 'aio/tools/transforms/angular-api-package/tag-defs/globalApi.js', 'packages/core/global.ts']","Global symbols in API documentation are not exposed and cannot be renamed automatically in a specified namespace, which doesn't support exporting relevant APIs through a specific file."
fd83d9479af1825c1ee3805e7b3751b016c90a62,1574290227,"fix(ivy): avoid using stale cache in TestBed if module overrides are defined (#33787)

NgModule compilation in JIT mode (that is also used in TestBed) caches module scopes on NgModule defs (using `transitiveCompileScopes` field). Module overrides (defined via TestBed.overrideModule) may invalidate this data by adding/removing items in `declarations` list. This commit forces TestBed to recalculate transitive scopes in case module overrides are present, so TestBed always gets the most up-to-date information.

PR Close #33787
","['packages/core/src/render3/jit/module.ts', 'packages/core/test/test_bed_spec.ts', 'packages/core/testing/src/r3_test_bed_compiler.ts']","TestBed in JIT mode uses stale cache data when module overrides are defined, resulting in invalid module scopes and incorrect `declarations` list."
10aa5641dd85a5eb89f1d1590b9df4119015c29f,1614793151,"fix(language-service): only provide template results on reference requests (#41041)

VSCode only de-duplicates references results for ""go to references"" requests
but does not de-duplicate them for ""find all references"" requests. The
result is that users see duplicate references for results in TypeScript
files - one from the built-in TS extension and one from us.
While this is an issue in VSCode (see https://github.com/microsoft/vscode/issues/117095)
this commit provides a quick workaround on our end until it can be addressed there.

This commit should be reverted when microsoft/vscode/issues/117095 is resolved.

fixes https://github.com/angular/vscode-ng-language-service/issues/1124

PR Close #41041
","['packages/language-service/ivy/references.ts', 'packages/language-service/ivy/test/references_spec.ts']","""Find all references"" requests in VSCode are resulting in duplicate references for results in TypeScript files due to lack of de-duplication."
a8569e38029724a7d77935bccce99117a7e1aefa,1665431006,"feat(forms): export forms utility functions: isFormArray, isFormGroupâ€¦ (#47718)

This commit exports existing utility functions to check for control instances:
isFormControl, isFormGroup, isFormRecord, isFormArray
Those are useful when implementing validators that use the specifics of one of those control types.
To narrow down the type to what it actually is, we can now use the util functions in validators:

```
export const myArrayValidator: ValidatorFn = (control) => {
  if (!isFormArray(control)) { return null; }

  // now you can use FormArray-specific members, e.g.:
  if (control.controls.every(c => !!c.value) {
    return { myerror: true }
  } else { return null; }
}
```

PR Close #47718
","['packages/forms/src/forms.ts', 'packages/forms/src/model/form_array.ts', 'packages/forms/src/model/form_control.ts', 'packages/forms/src/model/form_group.ts']","Lack of exported utility functions to correctly check for different control instances (FormControl, FormGroup, FormRecord, FormArray) in forms implementation is leading to issues during validators implementation."
a3b08644280fb43d9dfd037927c4e6a48a2c9a46,1612311897,"refactor(compiler-cli): remove the overrideComponentTemplate API (#40585)

The `TemplateTypeChecker.overrideComponentTemplate` operation was originally
conceived as a ""fast path"" for the Language Service to react to a template
change without needing to go through a full incremental compilation step. It
served this purpose until the previous commit, which switches the LS to use
the new resource-only incremental change operation provided by `NgCompiler`.

`overrideComponentTemplate` is now no longer utilized, and is known to have
several hard-to-overcome issues that prevent it from being useful in any
other situations. As such, this commit removes it entirely.

PR Close #40585
","['packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/typecheck/api/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/checker.ts', 'packages/compiler-cli/src/ngtsc/typecheck/src/context.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__completion_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker__get_symbol_of_template_node_spec.ts', 'packages/compiler-cli/src/ngtsc/typecheck/test/type_checker_spec.ts', 'packages/language-service/ivy/test/legacy/template_target_spec.ts']","`TemplateTypeChecker.overrideComponentTemplate` operation is not utilized anymore and is found to have several unresolved issues, making it unbeneficial in various situations."
302ab340e07a4a7d5639b6fc9997a101af39cb57,1697473335,"fix(compiler): avoid error in template parser for tag names that can occur in object prototype (#52225)

Fixes that the compiler was throwing an error if an element tag name is the same as a built-in prototype property (e.g. `constructor` or `toString`). The problem was that we were storing the tag names in an object literal with the `Object` prototype. These changes resolve the issue by creating an object without a prototype.

Fixes #52224.

PR Close #52225
","['packages/compiler/src/ml_parser/html_tags.ts', 'packages/compiler/test/ml_parser/html_parser_spec.ts']","Compiler throws an error when an element tag name in the template coincides with a built-in prototype property, like 'constructor' or 'toString'.
"
3a7bfc721efd61809ec16b950549f14ad4f9e75d,1557772015,"fix(ivy): handle windows drives correctly (#30297)

At the moment the module resolver will end up in an infinite loop in Windows because we are assuming that the root directory is always `/` however in windows this can be any drive letter example `c:/` or `d:/` etc...

With this change we also resolve the drive letter in windows, when using `AbsoluteFsPath.from` for consistence so under `/foo` will be converted to `c:/foo` this is also needed because of relative paths with different drive letters.

PR Close #30297
","['packages/compiler-cli/ngcc/src/dependencies/module_resolver.ts', 'packages/compiler-cli/ngcc/src/packages/ngcc_compiler_host.ts', 'packages/compiler-cli/ngcc/test/helpers/mock_file_system.ts', 'packages/compiler-cli/src/ngtsc/path/src/types.ts']","The module resolver enters an infinite loop on Windows due to the incorrect assumption that the root directory is always '/', whereas it can be any letter drive like 'c:/' or 'd:/'."
afd68e5674e99a64fe5acc40e08cc8386dc6a454,1623087897,"feat(compiler): emit diagnostic for shadow dom components with an invalid selector (#42245)

This is based on a discussion we had a few weeks ago. Currently if a component uses `ViewEncapsulation.ShadowDom` and its selector doesn't meet the requirements for a custom element tag name, a vague error will be thrown at runtime saying something like ""Element does not support attachShadowRoot"".

These changes add a new diagnostic to the compiler that validates the component selector and gives a better error message during compilation.

PR Close #42245
","['goldens/public-api/compiler-cli/error_code.d.ts', 'packages/compiler-cli/src/ngtsc/annotations/src/component.ts', 'packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts', 'packages/compiler-cli/test/ngtsc/ngtsc_spec.ts']",Components using `ViewEncapsulation.ShadowDom` with invalid selectors cause vague runtime errors due to mismatch with requirements for a custom element tag name.

commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
cbefb9bec88760739a093ac5410575bf1f6dc30f,1466649811,"Consistently refer to Julia over julia

The manual would sometimes refer to the language as either ""Julia"" or
""julia"". This commit changes references to the Julia language as ""Julia""
and any reference to the command line program as `julia`.
",['ui/repl.c'],"The manual is inconsistently referring to the Julia language as either ""Julia"" or ""julia"", causing potential confusion."
49118535b31c832af18f01ef4d331525b24d24c0,1562015422,"Support non-BB LLVM build for Emscripten

When targeting Emscripten/wasm, we were in the odd position that
we had BinaryBuilder support, but not in-tree support for building
LLVM. Unfortunately, the BinaryBuilder version has recently stopped
working due to ABI changes in Emscripten. Use that as an opportunity
to backfill the requisite definitions to make an in-tree build of
LLVM work on Emscripten.
",['deps/llvm.mk'],"ABI changes in Emscripten have caused the BinaryBuilder version to stop functioning, leading to a deficiency in in-tree support for building LLVM when targeting Emscripten/wasm."
ab520c738216fb8e22fce7bf2bc5f03edf0cceaf,1593181862,"Add hook in inference recursion resolution for external AbstractInterpreter (#36401)

This extends hookability to the same-frame comparison in inference's
recursion cycle detection. The case I ran into that made this necessary
is a recursive, nested AD transform. In this case, inference must detect
if two frames have different orders of derivatives (e.g. the primitive
for `-`, again calls `-`; the external interpreter makes sure that
inference results for these end up in different caches).","['base/compiler/inferencestate.jl', 'base/compiler/typeinfer.jl']",Inference's recursion cycle detection cannot distinguish between frames with different orders of derivatives leading to incorrect caching in nested AD transforms.
01310a985c4659fa7d73c05126afede75994de9b,1665668111,"`map` of unequal length bitarray (#47013)

* fix `bit_map!` with unequal length.
* relax three-arg `bit_map!`.
* add bit array test for unequal length.

Co-authored-by: N5N3 <2642243996@qq.com>
Co-authored-by: Cameron Bieganek <8310743+CameronBieganek@users.noreply.github.com>","['base/bitarray.jl', 'test/bitarray.jl']",`bit_map!` function fails when trying to map bit arrays of unequal lengths.
899fde098d44f4c6ce6bf193e9809cdcdf1854d9,1515749552,"add link to release notes on first page of manual (#25476)

* add link to release notes on first page of manual

* Update make.jl

* change wording
",['doc/make.jl'],The first page of the manual lacks a direct link to the release notes.
da7676d27a6af011924e7929cf4debc9ded90e0f,1647318589,"make `Base.return_types` interface similar to `code_typed` (#44533)

Especially, it should be more consistent with the other reflection
utilities defined in reflection.jl if the optional
`interp::AbstractInterpreter` argument is passed as keyword one.
","['base/reflection.jl', 'test/compiler/AbstractInterpreter.jl']","`Base.return_types` doesn't employ similar interface to `code_typed`, causing an inconsistency when optional `interp::AbstractInterpreter` argument is passed as keyword."
098ef24c7acb989cae2516ac18bff498e9a69554,1587596990,"fix latest LLVM 11 compatibility issues (#35329)

* fix latest LLVM 11 compatibility issues

Changes in LLVM:
- `CompositeType` and `SequentialType` classes have been removed
- `FileLineInfoSpecifier::Default` has been renamed to `RawValue`
- `CreateMemCpy` now takes `MaybeAlign`s instead of `unsigned`s
- deprecated overloads of `IRBuilder::CreateCall` and `CallInst::Create` have
  been removed
- `CallSite` class has been removed

Co-authored-by: Valentin Churavy <v.churavy@gmail.com>","['src/ccall.cpp', 'src/cgutils.cpp', 'src/codegen.cpp', 'src/disasm.cpp', 'src/intrinsics.cpp', 'src/jitlayers.cpp', 'src/llvm-alloc-opt.cpp', 'src/llvm-late-gc-lowering.cpp']","Recent changes in LLVM 11, such as removal of certain classes and renaming or removing of several methods, have caused compatibility issues with our software."
3fa9b9c81f321dee95f0a9a150bcb086cf6dba56,1507608266,"init task system first (#24066)

This has no dependencies on the rest of julia_init,
but later functionality (like __init__) may want to be able to use Tasks",['src/task.c'],Initialization order in julia_init problematic; other functionality such as __init__ may require the task system which isn't yet initialized.
34f7a4a50458594e6d72793b4f371227e8e842e3,1546900587,"Defensively fix patterns similar to #29983

I don't have concrete tests for these, but it looks like
they all need the `is_old` predicate for what they're doing,
so switch those over also while we're at it.
",['base/compiler/ssair/passes.jl'],"Several patterns similar to issue #29983 may potentially lack the 'is_old' predicate, possibly leading to unexpected behavior."
b238945ccd35d3ddc6c6aa5c7a0ab09210d5424e,1558376711,"Print macro definitions Exprs as readable julia code (#32083)

Rather than printing in bare ""Expr(:macro, ...)"" form, this prints them
as blocks, following the way that printing of function expressions
works.","['base/show.jl', 'test/show.jl']","Macro definitions are not printed in a human-readable format, but in bare ""Expr(:macro, ...)"" form, lacking consistency with the presentation of function expressions."
9d4e8ae013f05269750035e9483d17fb02a34791,1564565829,"Move `functionloc` to methodshow.jl and make it Revise-aware (#32708)

A user question revealed that `@edit foo(arg)` is not Revise-aware
for most editors. This PR changes that. The move to a new file is
motivated by bootstrap issues. `functionloc` is not really reflection
in the sense of the compiler, so this doesn't seem too inappropriate.","['base/methodshow.jl', 'base/reflection.jl']",'@edit foo(arg)' functionality is not Revise-aware for most editors leading to problematic behaviour in code revision.
5dc61556791290783778b169efb11b0f57bd748b,1648247942,"Use correct variable for threads auto (#44747)

--threads=auto uses jl_effective_threads to determine the number of threads to use,
so make sure the tests do too, otherwise this test will fail on our new cpu-restricted
runners.","['src/jl_exported_funcs.inc', 'src/julia.h', 'src/sys.c', 'test/cmdlineargs.jl']",The '--threads=auto' test fails on CPU-restricted runners due to incorrect determination of the number of threads to use.
fd1cec2de1a34d49782f3a1b8628bfa6f45a0500,1686978217,"Improve effects for Base.fieldindex (#50199)

Split out the error path into a function with separate effects assumptions,
so that constant propagation on `err` can conclude that the `err=false` case
does not throw. Fixes #50198.","['base/reflection.jl', 'test/compiler/effects.jl']","The `Base.fieldindex` function is not optimally handling error paths leading to issues with constant propagation when `err=false`, resulting in potential function throw exceptions."
777810b8ea5cb84eacda87ecce5304788f86ebd4,1534523057,"Fix reinterpret performance

This fixes #25014 by making it more obvious what's going on to LLVM.
Instead of a memcpy loop, we use a ccall to :memcpy and turn this into
llvm.memcpy at the IR level, which is enough for LLVM to fold everything
away. In the benchmark from #25014, we still see some regressions from
0.6, but that is because it needs to dereference through the pointers
in the reinterpret and reshape wrappers. In any real code, that
dereferencing should be loop-invariantly moved out of the inner loop.
","['base/reinterpretarray.jl', 'base/reshapedarray.jl', 'src/ccall.cpp']","Performance issues noticed with reinterpret functionality, specifically a regression from version 0.6, due to pointer dereferencing within the reinterpret and reshape wrappers."
53f328df7ae31a57c2f317e001e33615989c925e,1615480942,"inference: allows conditional object to propagate constraint multiple times (#39936)

Currently we always `widenconditional` conditional var state, which
makes us unable to propagate constraints from conditional object
multiple times:
```julia
@test Base.return_types((Union{Nothing,Int},)) do a
    b = a === nothing
    c = b ? 0 : a # c::Int
    d = !b ? a : 0 # d::Int ideally, but Union{Int,Nothing}
    c, d
 end == Any[Tuple{Int,Int}] # fail
```

This PR keeps conditional var state when the update is came from a
conditional branching, and allows a conditional object to propagate
constraint multiple times as far as the subject of condition doesn't
change. AFAIU this is safe because the update from conditional
branching doesn't change the condition itself.","['base/compiler/abstractinterpretation.jl', 'base/compiler/typelattice.jl', 'test/compiler/inference.jl']","Inference fails to propagate constraints from conditional objects multiple times due to always widening conditional var state, resulting in incorrect type assignments."
805f096c42cf55178a16cbd7b33d5379c6c7306d,1488775572,"Fixes and stronger tests for Bidiagonal setindex! and friends. (#20891)

Makes Bidiagonal setindex! support assigning zero off the main diagonal and sub/super diagonal as appropriate (like Diagonal).
Strengthens tests for Bidiagonal size, setindex!, and getindex.","['base/linalg/bidiag.jl', 'test/linalg/bidiag.jl']","'Bidiagonal setindex! doesn't support assigning zero off the main diagonal and sub/super diagonal, requiring stronger tests for size, setindex! and getindex operations.'"
7b089879e494f0ad7cdc64cb42cd84ed918535e7,1527632641,"Align value space of NewSSAValue in slot2ssa with other uses

Elsewhere in the codebase, we number NewSSAValues as indices into
the new node array. Do so also in slot2ssa.jl to avoid having two
conflicting conventions.
","['base/compiler/ssair/ir.jl', 'base/compiler/ssair/slot2ssa.jl']",Conflicting conventions in numbering NewSSAValues in the codebase and slot2ssa.jl causing potential inconsistencies.
dbbd7e510d54810071d81acfd849e657bbb36dbd,1483038967,"Remove quadgk and friends from Base (#19741)

* Remove quadgk and friends from Base

* Remove trailing whitespace in NEWS.md

[ci skip]
","['base/deprecated.jl', 'base/exports.jl', 'base/quadgk.jl', 'base/sysimg.jl', 'test/math.jl']","The quadgk and related functions are currently a part of Base, potentially increasing the operational overhead of using the software."
b211a8ad3d84d5abae20bb0cdabea323d2e3d903,1511695825,"Omit module prefix when printing types which are reachable without it

Only add the module prefix when it is actually required to access the
type from the module passed to IOContext. By default, take Main as a
reference.
","['base/show.jl', 'test/repl.jl', 'test/show.jl']","Module prefixes are being added unnecessarily when printing types, even when types are reachable without them."
dba523a1425895546fd022c686ab2419b4ed3b8d,1466487325,"fix #17016, method sort order of `map(f, ::Tuple, ::Tuple)`

fix a `_setindex!` method signature that was getting luckily hidden
by incorrect method sorting
","['base/abstractarray.jl', 'src/jltypes.c', 'test/core.jl']","The `_setindex!` method signature is incorrectly hidden due to improper method sorting when applying `map(f, ::Tuple, ::Tuple)`."
bbe8e4022b7ce69430c425111f7eb7318168c8f1,1487699165,"distinguish between ""must"" and ""may"" when remarking julia type information

expr-type and slot-type may improve type information (but try not to destroy it)
while slot-assignment and return must convert the type information (even if it loses information / forces boxing)
","['src/ccall.cpp', 'src/codegen.cpp']","The system fails to differentiate between ""must"" and ""may"" scenarios while processing Julia type information, resulting in potential loss of information or forced boxing."
fc69c9aef38a1b53324abe9a715514f9716d270b,1618019996,"Allow any f for sum/minimum/maximum(f, v::AbstractSparseVector) (#29884)

* sum/minimum/maximum(f, v::AbstractSparseVector)

generalize sum/minimum/maximum(abs/abs2, v::AbstractSparseVector) to
arbitrary f

* add broken sum(f, [])==0 tests for reference","['stdlib/SparseArrays/src/sparsevector.jl', 'stdlib/SparseArrays/test/sparsevector.jl']","The functions sum/minimum/maximum cannot handle arbitrary function 'f' when used with AbstractSparseVector, leading to constrained functionality."
ccfbc909a3f1d11c82b70b3be33f7c206d0641a0,1608363931,"Don't detach rr workers in SharedArrays tests

By default, I'm having the test suite set up to put any workers spawned
with addprocs into their own rr sessions. This doesn't work with SharedArrays,
because those workers share memory with the main process. Add a new JULIA_RR
environment variable that specifies which rr to use for the test suite and
a flag to the testsuite's addprocs command to determine whether or not to
detach the workers from the current rr session.
","['stdlib/SharedArrays/test/runtests.jl', 'test/testenv.jl']","SharedArrays tests fail due to rr sessions detaching spawned workers, who share memory with the main process, causing memory access issues."
3b993a958900d7f3b1aa064f2bf9e917edae0f79,1682553657,"AbstractInterpreter: account for overlay possibility in unanalyzed call (#49518)

When we skip inference of a call on `throw` block, previously we only
checked if the call is overlayed or not. But the call may call an
overlayed method internally, thus we need to conservatively taint the
`:nonoverlayed` bit when `interp` uses overlay method table.

Nevertheless this will not introduce any regressions on GPUCompiler
stack (like #48097), since it defines `InferenceParams(::GPUInterpreter)`
overload to turn off `unoptimize_throw_blocks`
<https://github.com/JuliaGPU/GPUCompiler.jl/blob/d5086fb3d93bbc4795a96f6f1457898af46a24cb/src/interface.jl#L272>","['base/compiler/abstractinterpretation.jl', 'test/compiler/AbstractInterpreter.jl']","In the current setup, while inference skipping on a `throw` block, if a call internally invokes an overlaid method, it is not accounted for, which possibly results in incorrect taint of `:nonoverlayed` bit when `interp` uses overlay method table."
8ff75ad08e76aeb10696b0c1a2bd4aa9b9959750,1538698529,"Better dominators

This commit replaces the naive algorithm for replacing dominator
trees by a faster implementation based on the Semi-NCA algorithm
(reference in the code comments). LLVM recently switched to this
algorithm and found it to be faster in practice than SLT (which
it used before). It is also slightly easier to implement. More
importantly though, it should easily extend to dynamic dominators.

This fixes the preformance problems in dominator construction noted
in #25927 and should provide a basis for a dynamic dominator
implementation to fix #29107.
",['base/compiler/ssair/domtree.jl'],"Performance issues in dominator construction due to the inefficiency of the current algorithm, with limited ability to extend to dynamic dominators."
e4b667756124465a083e9eac1c222dd4f734cf54,1519477971,"mul!(α, A, x, β, y) -> mul!(y, A, x, a, b) in SparseArrays.jl (#23919) (#26117)

* mul!(α, A, x, β, y) -> mul!(y, A, x, a, b) (#23919)

* missing )
","['stdlib/SparseArrays/src/deprecated.jl', 'stdlib/SparseArrays/src/linalg.jl', 'stdlib/SparseArrays/src/sparsevector.jl', 'stdlib/SparseArrays/test/sparsevector.jl']",Input parameter order in mul! function in SparseArrays.jl causing unexpected behavior.
0771d024e43bb890b28cfc11ac3f0bd5835dc1dd,1452583728,"Improve REPL help when searching for macro docs

Distingush between bare macro names and the 0-arg macrocall to the
macro, i.e. `@macroname` and `@macroname()`. Also moves the bits of
helpmode handling that were in REPL.jl to the Docs module so it's
easier to find.
","['base/REPL.jl', 'base/docs/utils.jl', 'test/docs.jl']","REPL help is unable to correctly distinguish between bare macro names and the 0-arg macrocall to the macro in search, leading to imprecise search results."
57101cfddb67dc5285610ffb038d0683a44f1d1f,1674205499,"compact: Don't try to kill the same edge twice (#48343)

In IR like:

```
goto if not true
goto if not true
```

our implementation of `kill_edge!` goes through recursively
to kill all newly unreachable blocks. However, it was still
attempting to schedule the newly unreachable block. Then,
when it got to the next GotoIfNot, it wsa again attempting
to kill the same edge, which would fail, because the edge
had already been removed from the CFG. Fix that by
telling IncrementalCompact not to attempt scheduling
any blocks that were newly discovered to be dead.",['base/compiler/ssair/ir.jl'],"The `kill_edge!` implementation in IR scheduling repeatedly attempts to kill an already removed edge from the CFG when encountering multiple `GotoIfNot` conditions, causing a failure."
4c4e078846554a6b9a25262e4b9267585a2158c2,1608119812,"Add precompiles to reduce time to first Revise.revise()

Perhaps the most annoying thing about Revise now is that the first
revision is quite slow, about 3.1s on my machine. This PR drops the time
to about 2.4s. Basically the idea is to precompile statements that
Revise will need.

Discovered via the new snoopi_deep/Core.Compiler.Timings framework.
",['contrib/generate_precompile.jl'],"The first revision is slow in Revise, taking significantly longer times (about 3.1s) to complete and negatively impacting user experience."
6f15fffe383cfa8b934a596729f13ce8b2a7376e,1529418081,"bump LLVM BB version

Adds patches for:
- #27055
- #27080
- #27032

furthermore this adds the ability to use assertion builds on CI.
Which is used on OSX and Windows.
","['Make.inc', 'contrib/windows/appveyor_build.sh', 'deps/llvm.mk']","LLVM BB version is out-of-date and lacking patches for various issues (#27055, #27080, #27032). Also, assertion builds are not supported on OSX and Windows in CI."
627173bcc986e4cd17a2e8d7ded7d977fbe68694,1526652209,"Enable PCRE UTF-8 validity string checks (#26731)

Strings are no guaranteed to contain valid UTF-8, and PCRE documentation says
that the behavior is undefined in that case.","['base/regex.jl', 'test/regex.jl']",Strings can contain invalid UTF-8 which leads to undefined behavior as per PCRE documentation.
4931faa34a8a1c98b39fb52ed4eb277729120128,1627014584,"allows `Core.Compiler` to use `@invoke` and `@invokelatest` (#41635)

A simple code organization refactor to allow `Core.Compiler` to use
`@invoke` and `@invokelatest`, which might be necessary for incoming
compiler plugin prototyping.","['base/essentials.jl', 'base/reflection.jl', 'base/util.jl']","The current code organization doesn't allow `Core.Compiler` to make use of `@invoke` and `@invokelatest`, potentially impacting future compiler plugin prototyping."
36d6d7a255c3dafea5bfff0caca81197404c56d1,1558200862,"Two fixes to win32 cross compilation

- The default mingw32 gfortran on ubuntu prints the version as `GNU Fortran (GCC) 7.3-win32 20180312`,
  rather than `7.3.0` most other gfortrans do, so be robust to that in normalize_triplet
- When shelling out to python use the host path rather than the windows-equivalent path, since python
  is a host tool.
","['contrib/normalize_triplet.py', 'deps/tools/bb-install.mk']","Win32 cross compilation issues: Mingw32 gfortran version prints incorrectly on ubuntu & windows-equivalent path used while shelling out to Python, which is a host tool."
c75944fa3ed3d1c6f6d96574e5831b919dd126d4,1497627708,"Revert ""Fix a few naming conflicts in LinAlg/BLAS. Fixes #14268."" (#22374)

* Revert ""Fix a few naming conflicts in LinAlg/BLAS. Fixes #14268.""

This reverts commit befbcecbdd20b7dbd3544571d394bd7c3125c0ee.

* Add test to make sure that dot(Matrix,Matrix) throws for all types
","['base/linalg/blas.jl', 'base/linalg/linalg.jl', 'test/linalg/matmul.jl']","Naming conflicts in LinAlg/BLAS causing errors, but previous fix interferes with expected 'dot(Matrix,Matrix)' behavior for all types."
82dc40264d94581c6977dab01ec545c3cd4bb4ec,1617319545,"Update CSL (#40287)

* deps: upgrade CSL

This adds the `.so` files, particularly for libatomic that we need on FreeBSD

* build: define uninstall targets even for deps that are not always installed

Most commonly csl, llvm-tools, and clang, but there were other ones in
the wrong lists also.","['contrib/refresh_checksums.mk', 'deps/llvm.mk', 'deps/tools/common.mk', 'deps/tools/uninstallers.mk']","The FreeBSD dependency on libatomic is not adequately catered for. Additionally, uninstall targets aren't always defined for some dependencies, mainly csl, llvm-tools, and clang."
e98bc2360b915ee68c87e8804bb5a5baee18430e,1524098418,"Change url scheme to https (#26835)

Similarly to #26757, update the url scheme for this download to use https instead of http (which has started to 301 redirect)",['deps/patchelf.mk'],"The application's url scheme uses http for downloads, which is causing 301 redirect errors due to recent server changes."
87d666991ed58b114ba7d983854814c846499ca2,1534884380,"remove unnecessary version handling when dealing with repos, this is handled in the resolver

(cherry picked from commit 6f3e865edc016eb0e2507d55d70aa755e68d9e7c)
(cherry picked from commit c31f924eb7df7126de59ce901a7310c0a56e8e93)
","['stdlib/Pkg/src/Operations.jl', 'stdlib/Pkg/src/Types.jl']","Unnecessary version handling disrupts the interaction with repositories, despite this being efficiently managed by the resolver."
7a6336d41a4064c0bf3649fb3b1a2ec3531a7dd8,1629275118,"Fix ~50 invalidations stemming from `modules_to_be_loaded` (#41878)

ChainRulesCore defines `==(a, b::AbstractThunk)` and its converse,
and these end up invaliding parts of the REPL (including `eval_user_input`)
via inference failures in `modules_to_be_loaded`.

Co-authored by: Jameson Nash <vtjnash@gmail.com>","['stdlib/REPL/src/REPL.jl', 'stdlib/REPL/test/repl.jl']","'ChainRulesCore' definition of '==' is causing inferencing failures in 'modules_to_be_loaded', resulting in invalidations in various parts of the REPL."
b7809051397dddc70408bb4670b8094bb126c157,1617644276,"Fix real matrix sqrt and log for edge cases (#40144)

* Add failing tests

* Improve 2x2 real sqrt for scalar diagonal

* Avoid sylvester if zero is a solution

* Avoid unnecessary sqrt

* Use correct variable names

* Avoid erroring due to NaNs

* Exactly adapt Higham's algorithm, with hypot

* Remove unreachable branch

* Add failing tests

* Handle overflow/underflow

* Invert instead of dividing

* Apply d=0 constraint from standardized real schur form

* Handle underflow

* Avoid underflow/overflow in log diagonal blocks

* Add tests for log underflow/overflow","['stdlib/LinearAlgebra/src/triangular.jl', 'stdlib/LinearAlgebra/test/dense.jl']",Edge cases with real matrix square root and logarithm operations are causing overflows/underflows and erroneous results due to NaNs. Issues also observed with 2x2 real sqrt for scalar diagonal and in error handling.
a3de583f4b9685aa2a14b10103686126b763f310,1504535097,"Fix #23567. In general, we need to be careful when we start branching on isbits(eltype(::Array)) because of Union isbits optimizations because isbits Unions don't return isbits == true.
","['base/array.jl', 'test/core.jl']","Union isbits optimizations fail when branching on isbits(eltype(::Array)), as isbits Unions do not return isbits == true causing unexpected behavior."
94993e910b25f0cdd02f1c2e2d0dbd5695f43b6f,1545743200,"faster circshift! for SparseMatrixCSC (#30317)

* implement circshift! for SparseMatrixCSC

* factor helper function shifter!, implement efficient circshift! for SparseVector

* add some @inbounds for improved performance

* remove allocations completely, giving a large improvement for small matrices

* some renaming to avoid polluting the module namespace

* remove useless reallocation and fix bug with different in/out types, better tests

* avoid action if iszero(r) and/or iszero(c), move sparse vector shifting helpers to sparsevector.jl

* Make shift amounts deterministic in tests, move sparse vector tests into sparsevector.jl

* comment fix

* for some reason, copy!(a::SparseVector, b::SparseVector) does not work
","['stdlib/SparseArrays/src/SparseArrays.jl', 'stdlib/SparseArrays/src/sparsematrix.jl', 'stdlib/SparseArrays/src/sparsevector.jl', 'stdlib/SparseArrays/test/sparse.jl', 'stdlib/SparseArrays/test/sparsevector.jl']","`circshift!` feature demonstrates slow performance with `SparseMatrixCSC` and `SparseVector`, incurring unnecessary allocations, especially for small matrices, and different input/output types result in bugs."
15731252b882000635b06c0017c216e448fc532d,1518800191,"update tests (#136)

* update tests

* add more tests

* small fixes

* fix deprecations

* fix code loading in test child; improve robustness of same in build
","['src/API.jl', 'src/Operations.jl', 'src/Pkg3.jl', 'test/operations.jl']","Tests need updating and are presenting deprecation issues; also, code loading in test child is faulty impacting the build's robustness."
fdf374875bf6e0a63c182c33d1824ff36605901a,1473898011,"More documentation movement and cleanup for linalg (#18498)

* More documentation movement and cleanup for linalg

Removed square brackets from signatures, added
more links, clarified some wording.

* Fix docstring for bkfact
","['base/docs/helpdb/Base.jl', 'base/linalg/bunchkaufman.jl', 'base/linalg/ldlt.jl', 'base/linalg/qr.jl', 'base/sparse/cholmod.jl', 'base/sparse/spqr.jl']",Inconsistencies in the naming and formatting of 'linalg' documentation; missing links and ambiguity in wording disrupting understanding.
35d873622a4a0402fbc89f6d33c31ef54231bf30,1467925971,"fix a number of minor nits with inline line numbers

* the inlining pass would discard the first LineNumberNode, without
  checking that it matched the line number of the function declaration

* the CurrentDebugLocation shouldn't be set while emitting the prologue

* implement inlining info for pre-MCJIT llvm

* improve printing of relative symbols in disassembly (e.g. 'callq ""_setindex!""')
  and hide the first line number if it is zero

* print inlining info during jl_gdblookup

also fix llvm 3.3 build

fix #17317
","['base/inference.jl', 'src/ccall.cpp', 'src/codegen.cpp', 'src/debuginfo.cpp', 'src/disasm.cpp', 'src/intrinsics.cpp', 'src/stackwalk.c']","Inlining pass discards the first LineNumberNode without checking if it matches the function declaration line number, current debug location is wrongly set during prologue emission, and line number printing and inlining info have issues in pre-MCJIT LLVM and jl_gdblookup functions."
545fb0b4d5223db4fabbae0bef9ba0d033c732fb,1497292973,"duplicate some type-dissimilar code in the `inv` function

detecting this code optimization (jump-threading) in the compiler is desirable,
but generally very difficult
",['base/linalg/dense.jl'],"The `inv` function is experiencing code duplication with type-dissimilar code, resulting in suboptimal compiler performance due to difficulty in detecting this for jump-threading optimization."
c2b30f811d22631b948635c260f432c2cb334dea,1607680426,"Add note about (un)shift to (push/pop)first docs (#38823)

This would be helpful for new users when searching for these functions
via e.g. apropos().",['base/array.jl'],Lack of information in the documentation about the relation between (un)shift and (push/pop)first functions may confound new users while searching for these functions.
1db6bbdb284fc8bb64cab1397b6f14ada672a1e4,1695735998,"add convenience entry for `typeinf_[code|ircode|frame]` (#51457)

This change allows them to take `match::MethodMatch` and
`mi::MethodInstance`, making debugging easier and reflection code a bit
cleaner.","['base/compiler/typeinfer.jl', 'base/reflection.jl']",Debugging and reflection code complexity due to the absence of a convenience entry for `typeinf_[code|ircode|frame]` that can take `match::MethodMatch` and `mi::MethodInstance`.
8e21b21ad0ca09e8758039ba0d66a5c1931c29ea,1695041413,"Remove boxing in pinv (#51351)

As discussed in
https://discourse.julialang.org/t/pinv-not-type-stable/103885/14, the
`tol` variable is captured which leads to it being boxed, as suggested
can be fixed by having two separate variables.",['stdlib/LinearAlgebra/src/dense.jl'],"The `tol` variable in `pinv` function is captured, leading to unnecessary boxing and impacting type-stability."
4d688468ba19dbf9462fec92a3f50234150f81a2,1562240998,"Fix tab completion in Logging for functions from CoreLogging (#32473)

CoreLogging is an implementation detail, but the fact that Logging
imports things from there breaks tab completion for the parts of the
public API which aren't re-exported. Fix this by explicitly creating
bindings for each imported symbol.","['stdlib/Logging/src/Logging.jl', 'stdlib/Logging/test/runtests.jl']","Tab completion for functions from CoreLogging is broken in Logging due to import issues, affecting parts of the public API which aren't re-exported."
181328c9b7b7ca34982494adc90c3e49e2af1018,1671704144,"reland refinement on instantiation of partially-known empty `NamedTuple` (#47961)

This is a re-land of #47481.
This commit improves inference accuracy of instantiation of partially-known,
empty NamedTuple. Note that we can't do the same for inference of
`apply_type` call as pointed at #47481.

```julia
@test Base.return_types((Any,)) do Tpl
    T = NamedTuple{(),Tpl}
    nt = T(())
    values(nt)
end === Tuple{}
```","['base/compiler/abstractinterpretation.jl', 'test/compiler/inference.jl']","Inference accuracy is lacking when instantiating a partially-known, empty NamedTuple, potentially affecting performance and correctness."
924a13aafffb65eb5c98e3ff9aa642a3759cc995,1636516197,"Fix data races in n_avail(::Channel) to fix isready/isempty (#41833)

This removes the data race from isready() and isempty(), which are now
implemented in terms of n_avail(). A new atomic `n_avail` field is added
to track the ""current number of available items"" (buffered + waiting
tasks). This is separate from the buffer and wait queue because these
consist of `Vector`s which cannot easily have their length fields read
and written atomically.

For buffered channels, the n_avail now includes a count of any waiting
tasks in addition to the number of buffered items. This makes it
consistent with the computation for unbuffered channels.

Co-authored-by: Takafumi Arakaki <aka.tkf@gmail.com>","['base/channels.jl', 'test/channels.jl']","Data race in isready() and isempty() functions due to non-atomic read/write of available items count in Channels, inconsistency in computation for buffered and unbuffered channels."
5ab5f9858d811bc65723ab3f440d7c58cb014d0d,1647454032,"[build] Silence non-fatal `gfortran: command not found` errors (#44554)

We build without `gfortran` pretty regularly these days, let's make it
slightly less annoying to build without a `gfortran` available on the
path.","['Make.inc', 'deps/csl.mk']","`gfortran` not found errors are regularly showing up and impacting the developer experience, even when builds are completed without `gfortran`."
ef6974d2a67513f03d635b4a2fc2086852967d0f,1668835167,"Add an option to not run compiler in IR2OC (#47633)

I have a case where I'm generating an opaque closure that is only run
once, but LLVM takes 200s to compile it. This adds an option to not
run LLVM in the IR2OC path, which is useful for two things:
1. Getting a handle on the OC without waiting for LLVM to finish,
   so we can have it dump out the unoptimized LLVM IR for profiling
   purposes.
2. Just actually not running LLVM, since it's probably not worth it.","['base/opaque_closure.jl', 'src/interpreter.c', 'src/julia_internal.h', 'src/opaque_closure.c']","Generating an opaque closure that is run only once causes LLVM to take excessive time in compilation, hindering profiling and potentially leading to efficiency issues."
7032e461689ad577154928b7886417f9f2672def,1515414150,"titlecase: chars not starting a word are converted to lowercase

A keyword argument `strict` is added to `titlecase` to control
whether to convert those chars to lowercase. The default value
is `true`, which makes this change breaking.
This is how some languages (e.g. Python) implement this function,
and is compatible with http://www.unicode.org/L2/L1999/99190.htm.
","['base/strings/unicode.jl', 'stdlib/Unicode/test/runtests.jl']","`titlecase` function improperly converts characters not starting a word to lowercase, potentially breaking compatibility with Unicode and other languages."
c2cbef268f65729d81e1bd97bde07650a5a1474c,1504428110,"REPL: implement a kill ring (fix part of #8447)

After a yank (""^Y""), it's possible to ""yank-pop"" with
the ""M-y"" binding, which replaces the just-yanked text
with an older entry from the ""kill-ring"".
",['base/repl/LineEdit.jl'],"When using the yank function (""^Y""), invoking ""yank-pop"" with ""M-y"" binding isn't replacing the just-yanked text with an older entry from the ""kill-ring""."
a5a4e9901d6c4462f685ac2903c2a39d32c50b05,1531484268,"Fix mapreduce over dimensions with heterogeneous eltype (#28089)

The existing check does not make sense in now. It originates in a generalization
of a method which worked only for + (54e034a). Add a test for this based on missing,
and improve existing tests.","['base/reducedim.jl', 'test/reducedim.jl']",Mapreduce function is not working accurately over dimensions with varying element types.
861100c15b050885297430e7afc24c7a638de982,1467046035,"Fix conversion Irrational => Rational (#16527)

Fixes #16513. Changes generated macro to pure macro, so as to avoid breaking in future compiler changes.","['base/irrationals.jl', 'test/numbers.jl']","Conversion from Irrational to Rational types is malfunctioning, possibly due to future compiler changes impacting the generated macros."
bc66f023f2c3e710da31e702006eaa6924020110,1503410806,"det(I) (#23364)

* det(I)

The determinant for the UniformScaling operator was missing.

* Update uniformscaling.jl

* Update uniformscaling.jl

* Update uniformscaling.jl

* Update uniformscaling.jl

* Update uniformscaling.jl

* Update uniformscaling.jl

* Update uniformscaling.jl

* Add UniformScaling det tests

* Update uniformscaling.jl

* Use a long form definition to keep line length down

* update tests
","['base/linalg/uniformscaling.jl', 'test/linalg/uniformscaling.jl']","The UniformScaling operator is missing a determinant, leading to incorrect calculations in programs using this feature."
0a65af86ad2b14d28c85d3afce161cdf24a93f66,1668062930,"`AbstractInterpreter`: set up `ForwardableArgtypes` interface (#47505)

This interface is necessary for us to implement IPO-able customized
external lattice implementation.
Additionally `InferenceResult(::MethodInstance, ::SimpleArgtypes)`
constructor may be useful for debugging const-prop' inference or
implement something like #29261.","['base/compiler/abstractinterpretation.jl', 'base/compiler/inferenceresult.jl', 'base/compiler/inferencestate.jl', 'base/compiler/ssair/legacy.jl', 'base/compiler/types.jl']","Lack of `ForwardableArgtypes` interface is preventing the implementation of IPO-able customized external lattice. Additionally, there's no `InferenceResult(::MethodInstance, ::SimpleArgtypes)` constructor for debugging const-prop' inference or implementing related features."
f8892dc1cb9de1cb930983283e3f156ff8636e9b,1483183472,"Loosen and fix up the min, max specialization on SparseVectors

was previously defined for AbstractSparseVector, and
there was a typo that was giving a method redefinition warning
because Sparse should have been Strided

fix ambiguity
",['base/sparse/sparsevector.jl'],"Min, max specialization on SparseVectors giving a method redefinition warning due to a typo causing ambiguity."
5ca47e08d30b06d6f0db69d3421f02d3f9fd84ff,1560220093,"Use `inv` to define inverse of trigonometric functions (#32252)

* Use `inv` to define inverse of trigonometric functions

* Add tests for secd and cscd
","['base/special/trig.jl', 'test/complex.jl', 'test/math.jl']","Inverse of trigonometric functions are not defined properly, leading to incorrect results."
837653598a4cac6ccad733573a82d0c2ad5d9247,1552680495,"Properly propagate taint in SROA

When SROA crosses the compaction line to look at uncompacted IR,
it needs to be sure to propagate that taint to all values it pulls
out of the uncompacted IR. We had this logic for phi nodes, but
we accidentally lacked it for raw SSAValues. This didn't cause
problems in practice, because our pipeline compacts out raw
SSAValues before running SROA, but it is otherwise legal.
Fix that and add a test.
","['base/compiler/ssair/passes.jl', 'test/compiler/irpasses.jl']","SROA doesn't propagate taint to all values when looking at uncompacted IR, leading to potential mishandling of raw SSAValues."
c8313c62b30ee3b04e2e2248bb0fab2c23cdde85,1571198478,"Enable multiple function composition in prefix form (#33568)

Document the prefix form and extend the prefix form to support composition of 3 or more functions.

Co-Authored-By: Stefan Karpinski <stefan@karpinski.org>","['base/operators.jl', 'test/operators.jl']","The prefix form of function composition currently does not support the composition of three or more functions, limiting its functionality."
4dfed64d4a8825a9ac6bf42374f7aeef39f608ec,1485780734,"Print correct worker pid in runtests after worker restart. Closes #20318 (#20322)

Print correct worker pid in runtests after worker restart. Closes https://github.com/JuliaLang/julia/issues/20318",['test/runtests.jl'],'runtests' prints incorrect worker PID following a worker restart.
3c569ac6c502e79076b3e2c99c792a5cfb694bd1,1534884685,"Fix a bug where the path was stored as relative
because devdir() happened to be in the project.
The path should only be relative if the user
used --local.

(cherry picked from commit 1d3c5aabb2b45ed89bac53fc739d0ae7c6379b32)
(cherry picked from commit 7f46aca7b470aa3d0c694862b784e994e5806f4f)
","['stdlib/Pkg/src/API.jl', 'stdlib/Pkg/src/Operations.jl', 'stdlib/Pkg/src/Types.jl', 'stdlib/Pkg/test/repl.jl']","Path is incorrectly stored as relative due to the devdir() being in the project, regardless of whether the user uses --local option."
7630606f16a3c35c54ed151d6cc31fcdb4e6def2,1674365824,"Further tweaks to LimitedAccuracy lattice operations (#48126)

As discussed in #48045:
1. Switch the order of `causes` inclusion to make wider
   elements have fewer causes.
2. Fix two typos
3. Restore property that equal ulimited types will be
   preserved (though with potentially updated `causes` lists).","['base/compiler/typelattice.jl', 'base/compiler/typelimits.jl']","Lattice operations have typographical errors, cause ordering disruption causing wider elements to have fewer causes, and altered properties of unlimited types leading to potential updates in 'causes' lists."
5a424741f5bdfe8993989bd9e05b384820228f72,1496511998,"Backport LLVM patches to fix AVX on i686

This fixes a bug in the patch that fixes #19976 causing encoding error on 32bit x86
and segfault when AVX/AVX2 is enabled.

Ref LLVM bug report https://bugs.llvm.org//show_bug.cgi?id=29010
LLVM commit https://github.com/llvm-mirror/llvm/commit/83260f239481dfb40d325cf35005c20eeb767b6c
Also ref where I saw this issue in https://github.com/JuliaLang/julia/pull/21849#issuecomment-305950641
",['deps/llvm.mk'],There's an encoding error and segmentation fault occurring on 32-bit x86 when AVX/AVX2 is enabled.
87b6b00c04420928973261ac0ba4d8576c8e9989,1551293196,"Add `ldiv!` and `rdiv!` for arrays with numbers and UniformScaling (#31179)

* Add `ldiv!` and `rdiv!` for arrays and numbers

* Add `ldiv!`, `rdiv!` for matrices and UniformScaling
","['stdlib/LinearAlgebra/src/generic.jl', 'stdlib/LinearAlgebra/src/uniformscaling.jl', 'stdlib/LinearAlgebra/test/generic.jl', 'stdlib/LinearAlgebra/test/uniformscaling.jl']",Current implementation lacks `ldiv!` and `rdiv!` functions for arrays with numbers and UniformScaling causing limitations in matrix operations.
7f4e129cf5a0fa853a8347edb2b52b40622182be,1682296959,"also optimize {Type{T},T} lookup

Since T cannot be Union{} here, the prior optimization would not get
detected post facto, but a priori this cannot be inhabited for
T=Union{}, so we can exclude it immediately. This does not happen during
inference, but shows up during edge validation somewhat often.
",['src/typemap.c'],"Optimization issue with {Type{T},T} lookup not getting detected due to incorrect exclusion of T=Union{} during edge validation."
82f76e8a63275e74e5e1aa028884da80d6056a42,1683042047,"ml-matches: skip intersection by world-bounds (#49590)

Should help speed up package loading some, by avoid complicated
self-intersections, which would then be filtered out anyways from the
returned results. It is not a frequent pattern, but it was observed in
occasional cases, and is such an easy, obvious improvement.","['src/gf.c', 'src/julia_internal.h', 'src/typemap.c']","Package loading is slowed down due to self-intersections during world-bound intersections, affecting efficiency in occasional cases."
11d83b85c335866de933c5438cab5dbc6b1e958a,1673356722,"""Widen"" `T>:Any` to `Any` in `simple_join`.

I gave up fixing the deep stack overflow.
Making the `env` soundness seems much easier.

close #47874.

At present, we only catch cases with pattern like
A1 = Union{T,Int} where {T}
A2 = Union{T2,Int} where {T,T2<:Union{T,Int}}
A3 = Union{Int,A2}
","['src/subtype.c', 'test/subtype.jl']",Current implementation is causing stack overflow issues regarding `simple_join` operation and the soundness of `env` cannot be correctly maintained for certain union patterns.
55859199bef120e3bc590d34e4028809c85d65ad,1467464570,"Don't store source expressions in docstrings

Currently each docstring stores the `Expr` that it documents. With
Documenter.jl I've not found any use for looking at the source
expression since we can get the useful information through reflection
easier than traversing raw expressions.

Instead we store the `Binding` and type signature in place of the
source, which is much more useful when auto-generating docs.

This was undocumented and I've not found anything relying on it within
`METADATA` so should be fine to just remove.

As a bonus removing the source expressions saves 800KB in each of the
`sys.*` files.
","['base/docs/Docs.jl', 'test/docs.jl']",Storing source expressions in docstrings increases file size unnecessarily and does not provide useful information for auto-generating docs with Documenter.jl.
0c5329cb40c163a09eb4449d7e3607c861f1592a,1602420292,"allow passing multiple arguments to append! & prepend! (#36227)

E.g. append!([1], [2], [3]) == [1, 2, 3].
The equivalent operation for sets (`union!`) and dictionaries (`merge!`)
already supports multiple arguments, as well as `push!`.

For `prepend!`, order is maintained in the same way as in `pushfirst!`:
`prepend!([3], [1], [2]) == [1, 2, 3] == pushfirst!([3], 1, 2)`.","['base/array.jl', 'test/arrayops.jl']","`append!` and `prepend!` methods do not support multiple arguments, not aligning with the behavior of `union!`, `merge!`, and `push!` methods. The order should be maintained in `prepend!` as in `pushfirst!`."
94ec8e27b1be36aa9190092c068e6e6dfcef4b55,1465583159,"move files stuff out of base/unicode into base/strings.

The artist formerly known as UTF8String is now just String and
the entire base/unicode directory will go away. This moves some
of the functionality that we need to retain into base/strings.
","['base/string.jl', 'base/strings/string.jl', 'base/strings/utf8proc.jl', 'base/unicode.jl']","The base/unicode directory is planned for removal, however, essential functionality from UTF8String (now renamed to String) needs to be retained."
bdcd5e2c6d0fdea879a961f1a72d774b743cc846,1677632955,"gf: cache cache_with_orig decision (#48833)

Memoizing this can save a lot of repeated effort for queries such as
`@which eltype(String)`. Otherwise we repeatedly try to check if
`eltype(::Type)` is a good way to cache that result, even though it
never gets better the more we check it.","['src/gf.c', 'src/jltypes.c', 'src/julia.h', 'src/method.c']",Repeated queries like `@which eltype(String)` are inefficient due to repetitive checks of `eltype(::Type)` for cache validity.
faa81ea055f8fafc0488fc54b79c8ef63b7b1e95,1599586149,"Fix escaped '%' check when building Printf.Format

Addresses
https://github.com/JuliaLang/julia/pull/32859#issuecomment-688826726.
The issue here was advancing the parsing position too far when an
escaped `'%'` was encountered after the first format specifier. If an
escaped `'%'` was then followed by another specifier, it was ignored due
to being classified as an ""escaped"" character.
","['stdlib/Printf/src/Printf.jl', 'stdlib/Printf/test/runtests.jl']","Parsing position advances too far when an escaped '%' is encountered after the first format specifier, causing any subsequent specifiers to be incorrectly classified as ""escaped"" and ignored."
04a6c84c13ce2ef739f9e31e836f8f0ea5d9026b,1468264585,"Fix rendering of two code blocks

Indented code blocks appearing directly after a markdown list cannot
be handled correctly since the indentation of the list contents
takes precedence over the code block's indentation. To resolve this
we use a fenced code block instead.
","['base/docs/helpdb/Base.jl', 'base/show.jl']","Markdown lists with indented code blocks immediately following them are rendered incorrectly, as list content indentation overrides code block's indentation."
670c09ff17b33a8a879e0911cf19bbdcf2bfed22,1493307900,"Add a test for branch ref name merge (#21573)

* Add a test for branch ref name merge

* add a note about branch string formatting
","['base/libgit2/libgit2.jl', 'test/libgit2.jl']","No existing test for merging branch with reference name, potentially leading to invalid string formatting."
13c18301b5d79ac463023c5f4eae0f862f774693,1496866921,"Refactor `LibGit2.set_remote_url` (#22062)

* Fix issue #21773

When using `LibGit2.set_remote_url` to specify a GitHub HTTP URL only
the fetch URL would be modified to use HTTP and the push URL would
always be set to SSH.

* Allow setting the remote push/fetch URL separately

Changes include:
- Creating `set_remote_fetch_url`, `set_remote_push_url`,
  `remote_delete`, and `lookup_remote`
- Updating `set_remote_url` to use LibGit2 calls
- Deprecate `set_remote_url` which uses keyword and reorder arguments to
  match order of `GitRemote` constructor.
- Update all existing calls to `set_remote_url`

* Add NEWS entry
","['base/deprecated.jl', 'base/libgit2/libgit2.jl', 'base/libgit2/remote.jl', 'base/pkg/cache.jl', 'base/pkg/dir.jl', 'base/pkg/entry.jl', 'base/pkg/write.jl', 'test/libgit2.jl']","The `LibGit2.set_remote_url` function modifies only the fetch URL to use HTTP, leaving the push URL set to SSH, when specifying a GitHub HTTP URL."
f864197d681b12ead21b809e4ffa5171d04eecb5,1599829296,"Use a fixed DateTime in rounding tests instead of now()

Using now led to inconsistent answers depending on when `now()` is; make
tests more reliable by using a fixed `DateTime`.
",['stdlib/Dates/test/rounding.jl'],Rounding tests that use `now()` function result in inconsistent outcomes because result changes based on the system's current time.
fd1c21b4bd845a5f25264fa1eb40a2c726b0392f,1656030973,"[Distributed] `kill(::LocalManager, ...)` should actually call `kill()`

When dealing with a local process, if we want to remove a process, we
can try a little harder than simply calling `remote_do(exit, id)`.  We
can actually `kill()` the process by sending `SIGTERM`, then `SIGKILL`.
Because we use `Distributed` to run our Base test workers, this can
provide a more certain method of closing our workers at the end of test
sets, as well as a better way of killing processes such that they dump
core in the event that they do get stuck.
","['stdlib/Distributed/src/managers.jl', 'stdlib/Distributed/test/distributed_exec.jl']","`kill(::LocalManager, ...)` isn't terminating local processes properly. This leads to stuck processes and potential issues with the closure of test workers."
3eddd1783f29eaf60ab817301bc8c3d084e417a4,1690991109,"follow up ""[NFC] minor refactorings on gf.c & codegen.cpp (#50645)"" (#50748)

This follows up commit
https://github.com/JuliaLang/julia/commit/19f6926d2109df35ae51a45f587f4d61e81a1d50.
As discussed in PR, the changes in gf.c were not NFC and may lead to
performance problems, so should be reverted.
Also added more detailed comments on the codegen.cpp change.","['src/codegen.cpp', 'src/gf.c']","Refactoring changes in gf.c have introduced potential performance issues, marking them as not functionally constant (NFC)."
67efdcf8f81de09ffa42acf9d7ed6d256b7dff23,1470021383,"avoid leaving process zombies

while investigating #14434, I noticed that the test code there is creating zombies
to fix that, we need to avoid calling uv_close in the finalizer
until after the process has exited (or during atexit)
","['base/process.jl', 'base/socket.jl', 'src/init.c', 'src/jl_uv.c']",Test code is causing zombie processes due to premature uv_close calls before process termination.
14afdd242d196786dff01a1a8184a09ddf722584,1680896453,"Silence `gfortran: command not found` in build logs (#49243)

Looks like these snuck in after the last round we silenced these
warnings.",['Make.inc'],Build logs are showing unwanted warnings about 'gfortran: command not found'.
0aa1d969fdee0c7ea62c2585d0631b8cc8bfc663,1583951946,"use datatype->hash for object_id for concrete types

these may get uniqued during construction, so it is not necessary to check their content
",['src/builtins.c'],"Utilization of `datatype->hash` for `object_id` for concrete types may yield inaccurate results due to potential object uniquing during construction, negating the need to verify their content."
e0e392199246aa11b2ac213257681d3cfac3fcf9,1605199063,"Fix `make test-Test` (#38406)

This testset would fail unless `--depwarn=yes` was set
(as it is in process 1). Just run it in its own process
that has the commandline flag set appropriately.","['stdlib/Test/test/nothrow_testset.jl', 'stdlib/Test/test/runtests.jl']","The test suite `make test-Test` fails unless it's run with the `--depwarn=yes` flag, specifically in process 1."
abc7f755ce3b962bf4ea614106680cebcfcac8b0,1591886663,"More thoroughly document apropos (#35903)

I've frequently found myself wishing for a regex-based apropos but didn't realize it already existed since it's not mentioned in the docstring.

* Document apropos help-mode in manual
* Update apropos docstring for clarity and terseness",['stdlib/REPL/src/docview.jl'],"The existing regex-based functionality of the 'apropos' command isn't documented in the docstring, leading to confusion and underutilization by users."
99d1be7da7d4b39118bc5bb8d746c1656dc6e1bc,1485288345,"fix the fd exhaustion test

the test_broken was on the wrong branch
it would swallow the error + stacktrace if the error wasn't the expected one
and it failed to close all the file descriptors if the test accidentally succeeded
",['test/spawn.jl'],The fd exhaustion test incorrectly handles unexpected errors (suppressing error and stacktrace) and fails to close all file descriptors when the test inadvertently passes.
72d3b28aed97d069a03c2621e5b959341f524245,1532805558,"Silence an unused result warning when building with Clang (#28315)

LLVM's `removeModule` is documented to return a `bool` but its value isn't used
in our `removeModule` function which returns `void`, so Clang emits a warning. This just
does a cast to `void` on the call to LLVM's function.",['src/jitlayers.cpp'],Unused result from LLVM's `removeModule` is causing Clang to emit a warning during the build process.
7648ad6f1fe014274e7612bac2eb19e70d3f8aad,1483565999,"splitdrive under windows (#19695)

* splitdrive under windows

* splitdrive under windows tests

* more test

* move tests outside loop over S

* changed test cases to S(""..."")
","['base/path.jl', 'test/path.jl']",The splitdrive method is not functioning as expected on Windows. Test cases failing to validate accurate output.
225c5435fc52281dcb3ec3e30acce57392976d06,1634576268,"sparse: Optimize swaprows!, swapcols! (#42678)

We have a swpacols! helper in Base that is used in the permuation
code as well as in the bareiss factorization code. I was working
on extending the latter, among others to sparse arrays and
alternative pivot choices. To that end, this PR, adds swaprows!
in analogy with swapcols! and adds optimized implementations for
SparseMatrixCSC. Note that neither of these functions are currently
exported (though since they are useful, we may want a generic
swapslices! of some sort, but that's for a future PR).

While we're at it, also replace the open-coded in-place circshift!
by one on SubArray, such that they can automatically beneift
if that method is optimized in the future (#42676).","['base/abstractarray.jl', 'base/combinatorics.jl', 'stdlib/SparseArrays/src/sparsematrix.jl', 'stdlib/SparseArrays/src/sparsevector.jl', 'stdlib/SparseArrays/test/sparse.jl']","The current implementation of swaprows! and swapcols! for SparseMatrixCSC in Base may not be optimal, causing efficiency issues in permutation and factorization operations."
54658a84038f43366bab82960441d7735f1f3535,1465770693,"Changes to broadcast to support .<, .==, etc for indices

Broadcast looks like it needs rewriting for jbfunctions. This starts on the process for these specific operations, but leaves the rest of the problem untouched.

One issue here is that I'm implicitly assuming that `parent(P)` returns the ""inner"" type requested by `allocate_for`. I haven't had to make that assumption yet.
","['base/abstractarray.jl', 'base/broadcast.jl', 'test/offsetarray.jl']","Broadcast's current implementation fails to support operations such as .<, .==, etc. for indices, and also incorrectly assumes 'parent(P)' returns the 'inner' type requested by 'allocate_for'."
9a218e91d77f935c82972384d225d87c0d2a9db8,1462125943,"Rename runtests to runsubarraytests in test/subarray.jl

otherwise make testall1 fails since it calls the wrong runtests function
at the end when running the compile test
",['test/subarray.jl'],"'Testall1' fails due to incorrect function call, 'runtests' instead of 'runsubarraytests', when executing compile test in 'test/subarray.jl'."
31ede2ef5fd06b68b168d2b161a1ce9c9b0d6188,1455102054,"Complex trig function cleanup

This cleans up complex-argument `sin`, `cos`, `sinpi` and `cospi`, as well as fixing a few incorrect boundary cases (mentioned in #14854).
","['base/complex.jl', 'base/special/trig.jl', 'test/complex.jl']","Complex-argument functions `sin`, `cos`, `sinpi`, and `cospi` have incorrect results for certain boundary cases."
486ee7abc973b1392cc6498544c782872a22e1c1,1495299865,"Improve docstrings for unique()

Fix the signature of the AbstractArray method, add a mention of isequal()
and of ordering, and use imperative form.
","['base/multidimensional.jl', 'base/set.jl']","Current docstrings for unique() method in AbstractArray lack a mention of isequal() and ordering, and have an incorrect signature."
88f74b77c1832f60e2548d1b73152bc19f08d634,1537216105,"fix reinterpret(Char, ::UInt32) for ""unnatural"" values (fix #29181) (#29192)

This code was assuming that character values only have bit-patterns
that decoding a string can produce, but of course `reinterpret` can
produce any bit pattern in a `Char` whatsoever. The fix doesn't use
that assumption and only uses the cache for actual ASCII characters.","['src/datatype.c', 'test/char.jl']","The reinterpret function is not working correctly for ""unnatural"" UInt32 values, it assumes that only specific bit-patterns can be produced."
9c5064311d26dd3122fe537e00335923bde8d795,1617466115,"Add hint in case of missing operator (#40304)

* Add hint for missing operators

* Move hint to it's own error type

* Clear the hint handler after displaying hint

* Don't clear the already empty array in tests

* Don't pop the hint handler

* Rename handler","['base/errorshow.jl', 'test/errorshow.jl']","Errors due to missing operators are not handled efficiently, lacking adequate user guidance for correction."
94acb6f47dceeb2d44a4f0952cc9146723f9ec98,1493756485,"change open(cmd) to return a Process object (without a separate IO value)

This reverts commit 8ffdfc274cbe20b9ed5994eaa00f0937e5b4272e,
and fixes it a bit too :)

fix #9659
","['base/distributed/cluster.jl', 'base/distributed/managers.jl', 'base/loading.jl', 'base/process.jl', 'examples/clustermanager/simple/UnixDomainCM.jl', 'test/distributed_exec.jl', 'test/spawn.jl', 'test/topology.jl']","Using `open(cmd)` doesn't return a Process object, making it difficult to interact with the spawned process."
4c805d2310111d65dbff9ac96d475dd6b9ea47cc,1600092440,"Stop setting force_noinline for function of union arguments (#27057)

The original motivation for setting force_noinline for functions
with union arguments seems to have been bugs in type intersection.
However, the type system has improved quite a bit and at least in
the test suites we don't seem to run into any issues. Thus, we can
stop setting force_noinline. Nevertheless, it still make since
to penalize functions with union arguments. Doing so encourages
union splits to happen at the call site, rather than having multiple
redundant union splits inside the function. However, for simple functions
of intrinsics and builtins it can make a lot of sense to inline
the union split signature.","['base/compiler/optimize.jl', 'base/reflection.jl']","Functions with union arguments are being forcefully set as noinline, possibly leading to redundancy and penalizations for simple functions of intrinsics and builtins."
dfbb9c49dda33b8e40dead35af97ccaf96fda4b0,1661540011,"Add some examples for Task related functions and Examples cleanup (#46002)

* Add some examples for Task related functions and Examples cleanup

Co-authored-by: Fredrik Ekre <ekrefredrik@gmail.com>
Co-authored-by: Viral B. Shah <ViralBShah@users.noreply.github.com>","['base/expr.jl', 'base/task.jl']","Task-related functions are lacking illustrative examples, hindering effective usage and understanding."
3f59c0db585802ae10282987a5d497d2a4a906aa,1461880496,"fix some cases where we incorrectly removed global var accesses

- if a global var might be undefined, consider it not `effect_free`
  since accessing it can throw an error.

- typeasserts that don't fire are removed by inlining, so don't
  consider typeassert `effect_free` since any remaining calls might
  throw.
","['base/inference.jl', 'test/core.jl']","Global variable access is being wrongly removed in certain cases, causing potential errors when the variable might be undefined and erroneous behavior when remaining typeassert calls can throw."
6c274ed43d9e77606017d7ea4866ba914b4c4f5b,1635747850,"optimizer: remove unnecessary checks (#42884)

Now we never form `ConstCallInfo(::InvokeCallInfo, results)` and so the
`sig.f === Core.invoke` check is no longer needed.
This commit also abstracts the common `Core.invoke` rewrite pattern
into `invoke_rewrite(::Vector{Any})` utility.","['base/compiler/abstractinterpretation.jl', 'base/compiler/ssair/inlining.jl']","Unwanted formation of `ConstCallInfo(::InvokeCallInfo, results)` occurs due to redundant `sig.f === Core.invoke` check."
3d20fb551373b23e524c8e84eea5a6e00d8cf4b3,1484534556,"use Const(T) instead of Type{T} in inference

since Type{T} is not a singleton object (Type{T}.parameters[1] !== T)
we need to avoid assuming it can be used as a representation of a constant type

this change also allows deferring allocation of as many Type{T} objects
in the type cache, which is expected to be overall beneficial
(independent of fixing the aforementioned bug)

this necessitated a change to `associative_with_eltype` to allow
inference to prove that the object passed to DT is always the same
constant, and not just type-equal to it
","['base/dict.jl', 'base/inference.jl', 'base/weakkeydict.jl', 'test/inference.jl']","Using Type{T} in inference leads to inappropriate representation of a constant type, erroneous assumptions and unnecessary allocations in type cache. This may lead to issues in proving type equality in functions like `associative_with_eltype`."
68db4b79cd1c3b86026e324b127f093ab17c7f7d,1628039402,"[Sockets] Embed note warning about broken DNS configuration (#41734)

Default Ubuntu installations contain a faulty DNS configuration that
returns `EAI_AGAIN` instead of `EAI_NONAME`.  To fix this, it appears
that installing `libnss-resolve` works to fix the tests, so suggest that
if we're on Linux and this test is noticed to be failing.

Co-authored-by: Elliot Saba <staticfloat@gmail.com>",['stdlib/Sockets/test/runtests.jl'],"Default Ubuntu installations have erroneous DNS configuration that causes `EAI_AGAIN` errors instead of `EAI_NONAME`, causing test failures."
99ada10102e3c17462c8841ee3638f38ff6c3b29,1499715164,"Define and use unsafe_convert instead of manual unwrapping of pointers. (#22699)

Remove get function and add check for null pointer to unsafe_convert","['base/sparse/cholmod.jl', 'base/sparse/higherorderfns.jl', 'test/sparse/cholmod.jl']",Manual unwrapping of pointers potentially leading to null pointer exceptions due to lack of error checking.
469031eedb205add9b7a7e28acdf56a45143a0fb,1475463732,"fix a slottypes bug exposed by making singleton objects more inferable

the widenconst for slottypes happens before optimization,
so need to be careful not to introduce `Const` in that array during optimization
","['base/inference.jl', 'base/show.jl', 'test/inference.jl']","Singleton objects becoming more inferable has revealed a bug in SlotTypes, causing `Const` to be incorrectly introduced in array during optimization."
7acacfc8924c945f8b4a17b046b6f48f9dd2833c,1543336180,"inference: add missing limit-cycle poisoning (#30098)

Seems to have been missing since the original implementation of IPO constant-prop.
It's impressive how long we got away with just poisoning the cache with `Any`
if there was a self-recursive call, but it requires a fairly convoluted
setup to trigger this case.

Fix #29923","['base/compiler/abstractinterpretation.jl', 'base/compiler/inferencestate.jl', 'base/compiler/typeinfer.jl', 'test/compiler/compiler.jl']","In the IPO constant-prop implementation, there's missing limit-cycle poisoning leading to potential self-recursions causing convoluted trigger cases."
a074d06e2d8d645fca6c6751325f6f31bda99a2f,1671708628,"inference: mark flag for effect-free `:call`s during abstractinterpret (#47689)

So that they can be deleted during the first `compact!`-ion.
This allows us to delete an inlineable and effect-free, but unused call.

This is essentially an alternative of #47305, but doesn't introduce a
problem like #47374.","['base/compiler/abstractinterpretation.jl', 'base/compiler/inferencestate.jl', 'test/compiler/inline.jl']","Unused, inlineable, and effect-free `:call`s are not being removed during the initial `compact!`-ion in inference, leading to potential performance issues."
a5758aad30717ae2a71d83718e67579f30e805f6,1617156015,"make it possible to serialize SnoopCompile results (#39695)

- use `nothing` instead of NULL as a sentinel in specializations
- remove some Serializer restrictions around saving Methods","['src/dump.c', 'src/gf.c', 'src/precompile.c', 'stdlib/Serialization/src/Serialization.jl', 'test/worlds.jl']",Serializer restrictions and the use of NULL as a sentinel in specializations make it impossible to serialize SnoopCompile results.
2349f0a61d6a6844b669065b0f70a18b5374b18e,1646439719,"optimizer: improve inlining algorithm robustness (#44445)

Explicitly check the conditions assumed by `ir_inline_item!`/`ir_inline_unionsplit!`
within the call analysis phase.
This commit also includes a small refactor to use same code for
handling both concrete and abstract callsite, and it should slightly
improve the handling of abstract, constant-prop'ed callsite.",['base/compiler/ssair/inlining.jl'],Issues with the optimizer inlining algorithm's robustness: conditions assumed by `ir_inline_item!`/`ir_inline_unionsplit!` need explicit checking in the call analysis phase.
0b0cd8c823b12b60b783e216e8a5235bc6cc8eb5,1505923022,"Fix type instability in matrix `log` and add missing `exp(::Matrix{Complex{<:Integer}})` (#23707)

* Matrices: exp and log minor changes

Add `exp` for matrices of complex integers and fix type instability in `log`
by wrapping sym/herm in `full`.

* Add tests

* Avoid multiple testset loops
","['base/linalg/dense.jl', 'test/linalg/dense.jl']","Matrix operations `log` and `exp` display type instability and lack comprehensive support for matrices of complex integers, disrupting consistent matrix computations."
bbd581e90e57ccf4765fc24aab31227d3dc5d8b8,1502449120,"fix indentation for varying-width function prompt (#23190)

Since #22809 a function can be used as the prompt, but the indentation
of non-prompt lines was still determined by the first value of the prompt
(usually ""julia> ""). Now, the indentation is determined by the currently
printed prompt, which can vary from one keypress to the next.
","['base/repl/LineEdit.jl', 'test/lineedit.jl']",Non-prompt lines' indentation is incorrectly determined by the initial value of a function used as a prompt even when the prompt length varies between different keypresses.
6c3190e9e4ce016311a5da8f93c561a24917efe5,1456165815,"fix #15163, serialize of types with parameters

broken because serializing type data can now populate the object
table, so the id for the instance we're trying to send needs to be
established after.
","['base/serialize.jl', 'test/serialize.jl']",Serialization of types with parameters is broken as object table is populated before establishing the ID for the instance being sent.
5f808c6ad7dbc06644647cde8ccff50fb5d907a9,1558636813,"Automatically disable `USE_BINARYBUILDER_xxx` when `USE_SYSTEM_xxx` is set (#31725)

Also renames `USE_BINARYBUILDER_UNWIND` to `USE_BINARYBUILDER_LIBUNWIND`
for consistency, as well as providing a little bit of dependency logic
to auto-disable `USE_BINARYBUILDER_SUITESPARSE` if `USE_SYSTEM_BLAS` is
set, for example.
","['Make.inc', 'deps/unwind.mk']","The settings `USE_BINARYBUILDER_xxx` don't automatically disable when the corresponding `USE_SYSTEM_xxx` is enabled, causing potential conflicts and inconsistencies."
894b6502c22f929c52331f6f0c311b591761ee2d,1508097873,"hint to `mapslices` from `map` (#24127)

""can I apply function to columns of a matrix or rows ? something like map...""
I see this question asked a lot lately - so i think the best way is to hint at `mapslices` from the documentation of `map`.

See [#23788]",['base/abstractarray.jl'],Unclear documentation on how to apply functions to matrix columns or rows leading to frequently asked user questions.
35aaf68470e44d1835df54500bb3e380a8cc2910,1652435694,"inference: properly propagate `undef`-field for `Conditional` object (#45303)

It usually doesn't matter as `type_annotate!` will mark the object as
used-undef anyway on a usage of `isa(x, T)` expression, but this should
be more conceptually correct.",['base/compiler/abstractinterpretation.jl'],"The `undef`-field for `Conditional` objects is not getting propagated correctly, causing issues with `type_annotate!` usage."
318affa294e8d493b1b3edcc3e06df26c97eb4bb,1569222318,"bug fixes in matrix log (#32327)

* bug fixes in matrix log

* patches to matrix log (#33245)

* patches to matrix log

Avoid integer overflow if `s > 63`.
Correct logic for `s == 0`.
Only use fancy divided difference formulae if eigenvalues are close - avoids dangerous roundoff error if they are in opposite sectors.

* add tests
","['stdlib/LinearAlgebra/src/triangular.jl', 'stdlib/LinearAlgebra/test/dense.jl']","Matrix logarithm facing integer overflow when `s > 63`, incorrect logic when `s == 0`, and roundoff errors when eigenvalues are in opposite sectors causing unstable output."
bea7b6f805b37023e9c31533b1c3ab7a4271a39f,1661487954,"follow up the inlining unmatched type param PR (#46484)

This commit follows up #45062:
- eliminate closure capturing, and improve type stability a bit
- refactor the test structure so that they are more aligned with
  the other parts of tests","['base/compiler/ssair/passes.jl', 'test/compiler/inline.jl']","Closure capturing in unmatched type parameters results in unstable types, and test structures are not aligned with other parts of tests."
8cc2f12c3cf125e55fead48f790b3000999526e8,1556645497,"Stop exporting dot from LinearAlgebra.BLAS (#31878)

LinearAlgebra exports the familiar `dot` function. The BLAS submodule
has its own `dot` function, which it also exports, leading to problems
if a user tries to access `dot` after `using` both LinearAlgebra and
BLAS.

Because this conflict currently exists, this change should be
non-breaking, as it's difficult to resolve `dot` unqualified from BLAS
before it's resolved from LinearAlgebra, so pretty much any consumer
must already calling `BLAS.dot` as such.

Fixes #31838.",['stdlib/LinearAlgebra/src/blas.jl'],"Conflict occurs when accessing `dot` function after `using` both LinearAlgebra and BLAS, as both modules export their own `dot` function."
dc146bdeac8a9e1476be258ada7db6d0e18451af,1482471362,"Review Changes

* Removed dropzeros test from for loop

* Created own testset for test erroneously in Issue 7650

* Removed type tests from issparse testset
",['test/sparse/sparse.jl'],"Tests for 'dropzeros' found within a for-loop are causing issues. Separately, a test related to Issue 7650 is mistakenly placed, and type tests within the 'issparse' testset need addressing."
ed7dfe4f0d511eebec175df7efbdd586f6126180,1481145879,"Permit using string macro with ""qualified"" name (#18690)

* Permit using string macro with ""qualified"" name

Close #6970.
Close #14208.

* Add NEWS, doc for string and command macros","['src/julia-parser.scm', 'test/parse.jl']","Current string macro usage does not support ""qualified"" names."
a3484961656f0756ebb470e708739b6106f57bc4,1527029549,"Add `Sys.which(program_name::AbstractString)`

This acts as a julia-native version of the `which` command found on most
*nix systems; it searches the path for an executable of the given name,
returning the absolute path if it exists, and throwing an
`ArgumentError()` if it does not.
","['base/sysinfo.jl', 'test/spawn.jl']",Julia lacks a native function to search the path for a given executable name and return its absolute path or throw an error if it doesn't exist.
45efa5d1c81b96f460ac746461d8b848399b67db,1452026829,"fix a regression in parametric dispatch with unions

This is a bit of an undisciplined hack, but it should also be quite
harmless. No reason not to get Union{T,Void} working ASAP.
","['src/jltypes.c', 'test/core.jl']","There's a regression in parametric dispatch handling when dealing with unions, leading to inefficient operation."
2d397673bb4fd7c96e103ca338bbe2cdf5d15e9c,1517934825,"Make map() and broadcast() faster for Union{T, Missing/Nothing} eltypes (#25828)

Storing typeof(el)/eltype(B) in a variable in the hot part of the loop kills
performance because despite being inferred as equal to Union{Type{T}, Type{Missing/Nothing}},
it is marked as ::Any. Only using typeof()/eltype() when isa() fails works around the problem
and makes map/broadcast(x->x, ::Vector{Union{Int, Missing}}) about 10 times faster.","['base/array.jl', 'base/broadcast.jl']","Performance drops rapidly when utilizing map() and broadcast() function on arrays having types Union{T, Missing/Nothing} due to typeof(el)/eltype(B) being inferred as ::Any in hot part of the loop."
72af8841e7a903a61449dbcc2a0cbae3c8d1551b,1461193805,"Prevent conflict between core and bitarray tests

If the bitarray test runs before core, it defines a variable m1 that causes trouble for core
",['test/bitarray.jl'],"The bitarray test, when run before the core test, initializes a variable m1 causing undesired side-effects in the core test."
dfbcc45f254b1604395b4e28a3bf12696e90ccea,1684203013,"ensure all `isequal` methods to be inferred to return `Bool` (#49800)

This would help inference on `Core.Compiler.return_type(isequal, tt)`
when `tt` is not well inferred (e.g. `tt` is inferred to `Tuple{Any,Any}`).
(although JuliaLang/julia#46810 may disable this `Core.Compiler.return_type`
improvement for good reasons).

Anyway, it is explicitly stated in the documentation that the `isequal`
method should always return a value of `Bool`. So, not only does this
annotation assist inference, it also serves to ensure the correctness of
our code base, and therefore should be beneficial. We may need to take
similar measures for `isless` and `isgreater` (in separate PRs).","['base/complex.jl', 'base/operators.jl', 'base/pair.jl', 'test/missing.jl', 'test/testhelpers/Furlongs.jl']","`isequal` methods not always inferred to return `Bool`, causing issues with `Core.Compiler.return_type(isequal, tt)` when `tt` is not well inferred."
1ef9f3784f2a8c983946f1575af29167a9cff9e7,1684558160,"[NFC] cosmetic refactor of `abstract_call_method_with_const_args` (#49889)

This commit is a collection of minor NFC (No Functional Change)
modifications. Essentially, it is a cosmetic refactor, so there should
be no changes in terms of compiler functionality.

The specific changes include:
- Making `concrete_eval_eligible` always return a value of `Symbol`,
  either of `:concrete_eval`, `:semi_concrete_eval` and `:none`,
  clarifying its return value's meaning
- Splitting `abstract_call_method_with_const_args` into more granular
  subroutines
- Rearranged the subroutines in `abstract_call_method_with_const_args`
  to ensure that the processing flow of the code can be followed when
  read from top to bottom",['base/compiler/abstractinterpretation.jl'],"In the `abstract_call_method_with_const_args` function, code readability is hampered by complex subroutine structure and unclear return values."
d7bbdfe0e0222aea2a7af1c8c76dfd868f23694d,1507510701,"Misc threading related compilation fixes

* Without threading enabled
* On archs without known way to emit ELF thread pointers (ARMv6, power)

  Fix #24051
","['src/julia_threads.h', 'src/llvm-ptls.cpp', 'src/tls.h']","Compiling issues arise when threading is disabled or when the architecture doesn't support ELF thread pointers, such as on ARMv6 and Power."
8937f7e522c9b3f96920d2f196f452c9f8a9e248,1610165859,"gf: avoid adding cache entries wider than the original method (#39140)

Sometimes we want to widen the compilation signature, but then end up
with something which does not fit the original pattern. This then can
cause problems later, when we try to use the Method (from the cache),
but discover it does not actually match the call.

Fixes #38999",['src/gf.c'],"Widening the compilation signature sometimes results in a mismatch with the original pattern, leading to subsequent call issues when cache methods are found to be non-matching."
ae76ee479e35f4166c53be635ee303434f0b7060,1529632852,"Don't assume parallel memory accesses in simd macro

If your code can gurantee that parallel memory accesses are legal you can
use `@simd ivdep` to give the compiler extra leeway. For generic code this
is an unsafe assumption.

Co-authored-by: Matt Bauman <mbauman@gmail.com>
","['base/compiler/validation.jl', 'base/simdloop.jl', 'src/codegen.cpp', 'src/llvm-simdloop.cpp', 'test/bitarray.jl', 'test/llvmpasses/simdloop.ll', 'test/simdloop.jl']","The simd macro assumes parallel memory accesses are legal, causing potential issues in generic code where this may not be a safe assumption."
45d2fe0fc5acb6e933d5c2dbf69dddc04e4a06f0,1483707923,"Throw error on aborted rebase (#19651)

* Throw error on aborted rebase

`LibGit2.rebase!` will no longer silently abort if an error occurs.

This changes the behaviour of one of the tests: for some reason LibGit2 is unable to automatically rebase this branch.

* Correctly handle merge from unborn branch. Fixes earlier issue with rebase.

* remove unnecessary comment

* change equality

* add some docs, and rename unborn -> orphan (consistent with CLI git)

* correct branch name, close GitReference

* close GitCommit
","['base/libgit2/libgit2.jl', 'base/libgit2/reference.jl', 'test/libgit2.jl']","`LibGit2.rebase!` function is silently aborting when an error occurs, and it struggles to automatically rebase certain branches. An issue also exists with handling merges from unborn (orphan) branches."
4bd43537c6bcabc0f288abdc250d86eee1ade722,1458016097,"Expose the ability get the debug object for a function

Also set the DWARF version to 4 when JITing. DWARFv4 is better
behaved and easiler to process in the JIT case, but some linkers
still have trouble processing it, so we don't use it universally.
","['src/codegen.cpp', 'src/debuginfo.cpp']",Issues processing the debug object for a function due to the current DWARF version used during JITing. Linkers have trouble processing certain DWARF versions.
556cee7f0971407eaf547e291d66041e16293b6b,1609062340,"win: Set correct folder permissions after folder creation (#38942)

libuv's mkdir does not implement the mode argument on Windows, as a
result the folder mode is never passed on the Windows platform.

Forcibly change the folder permissions to agree with the mode passed
into `mkdir`.",['base/file.jl'],`mkdir` function on Windows doesn't implement the mode argument resulting in incorrect folder permissions after creation.
e2c0be3369829fb0477e7df8b934513e1ceca4d2,1679533109,"clean up test/opaque_closure (#49099)

- removed unnecessary `Core.` accessor
- use the default `nargs`/`isva` values of `OpaqueClosure` constructor
  where possible
- wrap the world age test in a separate module so that
  `include(""test/opaque_closure"")` works multiple times in the
  same session",['test/opaque_closure.jl'],Including opaque_closure tests multiple times in the same session fails due to world age related issues and unnecessary usage of Core accessor and non-default nargs/isva values in OpaqueClosure constructor.
c3b10fda1f26407a84f7d72270f49148ff046ca6,1611573657,"minor speedup and accuracy improvement for atanh (#39267)

When `x` is not small, the numeric stability given by `log1p` and the rest of the complicated stuff actually just increases error and reduces speed. Also the small x and infinity case are just extra branches that already fall out of the remaining branches. The `<.5` branch is still both slower and has a higher max error (1.4 ULP vs .8 for the other branch), so if anyone can think of anything to improve it, I'm all ears. This PR is only a 20% speed improvement, but it's also a simplification so I think it's worthwhile.",['base/special/hyperbolic.jl'],"The current implementation of `atanh` function is not numerically stable for large input values, reducing the accuracy and speed of calculations. Additionally, existing unnecessary branches in the small x and infinity cases potentially cause performance overhead."
064a0e9b85efb3b70ac765e060c9215d83513023,1469737425,"Don't zero `usesshagent`

`usesshagent` is just a flag to determine whether or not to use the agent, so
zeroing it isn't necessary. Even worse, since it only gets a reference to one
of the flag strings (stored in the AST), zeroing them globally changes those
strings, disabling ssh-agent authentication entirely.

Fixes the problem noted in #16041
",['base/libgit2/types.jl'],"Zeroing the `usesshagent` flag globally changes the string references in the AST, fully disabling ssh-agent authentication."
f41115b448ab580deb7574c8445f778cee92fa67,1596140877,"avoid invalidations when it doesn't resolve an MethodError (#36733)

In these cases, the new method would not be called because the
call would still be an ambiguity error instead.

We also might observe that the method doesn't resolve an old MethodError
because it was previously covered by a different method.","['src/gc.c', 'src/gf.c', 'test/worlds.jl']","New methods are causing unnecessary invalidations due to ambiguity errors, even when these errors were previously covered by a different method."
3d1886f58d2aa5acd18708ced46581f882383038,1514995459,"Fix hash(::AbstractArray) failure in when some types support - and others do not (#25250)

The existing code only checked that subtraction was supported for the first two elements,
but not for subsequent elements, which is necessary for heterogeneous arrays.

Also fix a StackOverflow error due to the widen() fallback calling itself recursively
by throwing a MethodError manually.","['base/abstractarray.jl', 'base/operators.jl', 'test/hashing.jl', 'test/numbers.jl']","Hash failure occurs on AbstractArray with heterogeneous types that do not all support subtraction operation, leading to a recursive StackOverflow error caused by the widen() fallback."
8eec73717465240a2d01b7cb23366b73264a0609,1463502688,"Fix incorrect type annotation in codegen

For MaybeFunc(T) = Union{T, Void}, the return type is inferred as
Type{Union{T, Void}}, but the callsite could be annotated as e.g.
Type{Union{Int64, Void}}, whose intersection is Union{}, since
the type system does not know where the qualifier over T is.
","['src/codegen.cpp', 'test/core.jl']","The return type for MaybeFunc(T) is incorrectly inferred due to qualifiers over T not being recognized by the type system, leading to potential intersections as Union{}."
ba166634bf4b37bbbd58156d536445dafdfe8837,1693939515,"Revert ""Standardize the entry-point for Julia execution (#50974)"" (#51196)

This reverts commit 8e14322b5aa344639dd86bf9eabb84afe831fcba.

As proposed by @Seelengrab in
https://github.com/JuliaLang/julia/pull/50974#issuecomment-1706641240.

This is not meant to be a permanent revert of #50974, but a possibility
to have working PkgEval and nightly testing for packages
(https://github.com/julia-actions/julia-buildpkg `@latest` doesn't work
with it) until a solution to the discussion there has been decided on.","['base/client.jl', 'src/jlapi.c', 'stdlib/REPL/src/REPL.jl', 'test/cmdlineargs.jl']","The changes made in commit #50974 have caused the PkgEval and nightly testing for packages to break, impacting working functionality."
555467682c93837960acdde206fefe5664505034,1653255891,"Fix codegen error path for imported non-owned bindings (#45351)

The code assumed that a null return from `global_binding_pointer`
was impossible. However, it happens in the error path, causing
a bad memory reference later when the lhs is treated as a slot.

Fixes #45350","['src/codegen.cpp', 'test/core.jl']","Null return from `global_binding_pointer` in error path is incorrectly regarded as impossible, causing a bad memory reference when treated as a slot later."
f8defa41fdf352a13cdee1feb950f17c71cfbb4c,1637639472,"Fix `-Wnon-c-typedef-for-linkage` from `jl_codegen_params_t` (#43187)

Currently `jl_codegen_params_t` is defined as `typedef struct {...}`
without a tag name. If we give it an underscore-prefixed tag name (as is
the convention used in our other type declarations), Clang will stop
complaining about having to assume what the name should be for linkage.",['src/jitlayers.h'],"The struct `jl_codegen_params_t` is defined without a tag name, causing Clang to generate warnings about assuming names for linkage."
8ab635d3766bea618385d17f4257c79657cb001f,1695984779,"Random: allow negative seeds (#51416)

Alternative to #46190, see that PR for background. There isn't a strong
use-case for accepting negative seeds, but probably many people tried
something like `seed = rand(Int); seed!(rng, seed)` and saw it failing.
As it's easy to support, let's do it.

This might ""break"" some random streams, those for which the upper bit of
`make_seed(seed)[end]` was set, so it's rare.","['stdlib/Random/src/RNGs.jl', 'stdlib/Random/src/Random.jl', 'stdlib/Random/src/Xoshiro.jl', 'stdlib/Random/test/runtests.jl']","`rand(Int); seed!(rng, seed)` fails when a negative seed value is used, breaking some random streams especially when the upper bit of `make_seed(seed)[end]` is set."
e3f91bd4945392678d3d41cdc78f79f4ebc189f7,1588352764,"Optimize Float.([32 64]) exponentiation by.(-1:3) (#34863)

We perform these optimizations in the literal pow case, so I'd contend that they're just as
worthwhile to do in the non-literal case. Calling LLVM's pow intrinsic takes ~16ns on my
computer; adding these quick exits get compiled down to a simple switch statement that seems
to add ~0.5ns in the cases where we don't hit the quick exits. In exchange, we get
consistent numbers everywhere, they're better numbers at that (they're closer to the real
answer), and these small common powers become essentially free.","['base/math.jl', 'test/floatfuncs.jl']","Non-literal power calculations in Float.([32 64]) exponentiation by.(-1:3) are inconsistent and inefficient, leading to inaccuracies and slower performance compared to literal power calculations."
de2c37a507657f0344377f80d8c6239cc86c60bd,1689788898,"gf: make method overwrite/delete an error during precompile (#50578)

Previously, this was only a WARNING message, which was often missed
during CI runs.

Closes https://github.com/JuliaLang/julia/issues/50451",['src/gf.c'],"During precompile, the method overwrite/delete operation is only logged as a WARNING message and not an error, which gets overlooked during CI runs."
0ab6e2f51ce3ddabda44eb17f358d039a3eb1f6b,1675743309,"[compiler] Fix effects of supertype abstract interpretation (#48566)

This `abstract_call_known` recursion inserted `EFFECTS_TOTAL` which is
incorrect because `<:` and `>:` can throw if the arguments are not
types.",['base/compiler/abstractinterpretation.jl'],"The abstract_call_known recursion incorrectly inserts EFFECTS_TOTAL, leading to potential errors when arguments are not types in case of <: and >: operations."
267b124f1f1f1558a7619a527e11a786a99f01d4,1642017472,"macOS: extend the workaround to cover the dyld/exc_server deadlock issue, since 12.1

Later, we should probably switch to using mach_exc_server generated from
`mig mach_exc.defs`.
",['src/signals-mach.c'],"macOS 12.1 experiences dyld/exc_server deadlock issue, necessitating a workaround extension."
bcc0ea176e6a4816b0f31db6c0afce2ecc6fa15f,1614393294,"[LinearAlgebra] Add `libblas` and `liblapack` bindings in again (#39845)

Some packages use these; rather than create unnecesary package churn,
let's just define them again and add a note that serious applications
should use the much richer detail available from `BLAS.get_config()`.",['stdlib/LinearAlgebra/src/blas.jl'],"Packages using `libblas` and `liblapack` bindings are facing undefined references, hindering serious applications from utilising richer detail obtained from `BLAS.get_config()`."
844f2275055997e26a0005b80a5098c32a94298b,1469329566,"A few finalizer thread safety fixes.

* Fix wrong address to `memset` ...

* Clearing the memory in `finalize_object` should be unconditional
  and before the `cmpxchg`.

  Since even when the `cmpxchg` succeeds, the owning thread might have read
  the old length and set it to a different value based on the old length,
  leaving an uncleared hole.

* List length needs to be read again after acquiring the finalizer lock.

  Someone might have changed it and the resizing might not have the expected effect.
",['src/gc.c'],"Memory clearing in `finalize_object` can lead to uncleared holes due to thread's length-based value set, and list resizing may not have an accurate impact because list length can change post finalizer lock acquisition."
9c563ad6a4b5568e07d88776c42dd5c47fabc45b,1667012234,"Fix rewrap-where for anonymous function parse (#47315)

Was throwing away the tail of the list, dropping the result of where clauses.

Fixes #45506","['src/julia-parser.scm', 'test/syntax.jl']","Anonymous function parsing in rewrap-where throws away list tail, causing where clause results to be dropped."
bd5105e0ee8a0267d3d3999aed632f7b2cdacd09,1614723986,"optimizer: be careful to always handle temporarily invalid ops

These ops are not actually legal (they're semantically invalid), but we
temporarily use them to carry information between passes which needs to
then remove them correctly.

Fixes #39508
","['base/compiler/ssair/passes.jl', 'base/compiler/ssair/slot2ssa.jl', 'test/compiler/irpasses.jl']","Temporarily invalid operations used for carrying information between passes are not being handled or removed correctly, causing operational legality issues."
91cd5213280ee6a699aaff74eb84d234e868f9d5,1685066135,"Extend comparison lifting to `Core.ifelse` (#49882)

This change extends our existing transformation for:
   φ(a,b) === Const(c)   =>   φ(a === c, b === c)

to perform the analogous transformation for `Core.ifelse`:
   Core.ifelse(cond, a, b) === Const(c)
  =>
   Core.ifelse(cond, a === c, b === c)","['base/compiler/ssair/passes.jl', 'test/compiler/irpasses.jl']","The current transformation mechanism fails to lift comparisons for `Core.ifelse`, not allowing optimization analogous to comparisons with constants."
1dcb42f29caffc98ad0722577844ce5c54c5ba0c,1587709158,"Add a fast path for returning """" from repeat(str, 0) (#35579)

Currently the case where `r == 0` falls through the same logic as every
other non-negative value of `r` (aside from 1). This works for signed
integers. However, this does not work for unsigned integers: in the loop
where we unsafely fill in the output string, we're looping from 0 to `r
- 1`, which for unsigned integers wraps around and causes us to request
the address of the output string at a location that is well beyond what
was allocated.

Fixes #35578.","['base/strings/substring.jl', 'test/strings/basic.jl']","For `repeat(str, 0)`, the case `r == 0` uses same logic as other positive scenarios and doesn't align with unsigned integer scenario, causing potential memory allocation error due to address request beyond allocated limit."
e101000094794b8a14502c294ab75248cbba0be8,1485922279,"Ambiguity test that ignores matches due to Union{} tparams

Because of the way methods are specified, there is often spurious
ambiguities due to a type parameter being able to take the value
Union{}, (e.g. Type{T} becomes Type{Union{}}). Since detect_ambiguities
reports these, it can drown out more serious ambiguities among
non-Union{} types. Add a keyword argument to detect_ambiguities,
that ignores all ambiguities that only occur if one of the type
parameters has to be Union{}.
","['base/reflection.jl', 'base/test.jl']","The ambiguity detection reports trivial ambiguities due to Union{} type parameters, obscuring more serious ambiguities among non-Union{} types."
df5b081681b9ab393b97e768f03673fb7bf4c198,1665201452,"Special purpose inliner for Core.ifelse (#47096)

This function isn't used as much anymore now that Base.ifelse is
an actual generic function, but it's still used in a few places
across the ecosystem, and there currently isn't anything that
would fold it for constant conditions, so add a special case
inliner for it. This probably doesn't have a huge impact, but
I happened to run into a case where it was causing annoying
suboptimialities and it's a quick fix.","['base/compiler/ssair/inlining.jl', 'test/compiler/inline.jl']","The Core.ifelse function, despite its limited use, lacks an inliner for constant conditions leading to sub-optimal performance in specific cases."
ea6cdf3650964ee89e633807fbba4572152d9db6,1603914598,"Fix bug in snoopi_deep: missing copy() on slottypes array

The slottypes array is reused and modified, so we need to make a copy of
it for each inference frame. This was a bug accidentally introduced in #38143
",['base/compiler/typeinfer.jl'],"Array 'slottypes' is being reused and modified in each inference frame, leading to unexpected changes due to a missing copy operation."
7f94572e459c60120df82124a6cf586687734d2a,1486082477,"Fix minor hygiene issue in `@eval` macro (closes #20397)

This is Jameson's suggstion of calling `Core.eval` with
`current_module`; there aren't a lot of situations where this
has an effect on code since all modules by default have an
`eval` function that evaluates code inside of them. However,
you can overwrite this binding with a different value, which
would previously cause `@eval` to fail. The test for this also
serves as a test that `@eval` works in general, with and
without the module argument.
","['base/expr.jl', 'test/meta.jl']",Overwriting the `eval` function inside a module causes `@eval` macro to fail due to reliance on `eval` bindings of modules.
14c07c761507e9a45c4909af92e93453ecd78fb8,1455257376,"Fix LLVM cross compilation with cmake

Many thanks to Justin Bogner, ref
http://lists.llvm.org/pipermail/llvm-dev/2016-February/095366.html

llvm-config-host is not created (under that name, or installed) in a cmake build
","['Make.inc', 'deps/NATIVE.cmake']",Cross-compilation with cmake fails as llvm-config-host is not created or installed as expected.
8a3b4ab77c95cd8b387f6819cecc2e768e1edaa1,1650752137,"[doc] Add a Cover page to PDF doc (#45034)

* Add cover page
* use tikz logo
* Add ""Release Notes"" to devdocs

Co-authored-by: Viral B. Shah <ViralBShah@users.noreply.github.com>",['doc/make.jl'],"The PDF documentation lacks a cover page and a tikz logo, and ""Release Notes"" section is missing from devdocs."
f759bc34cb43e3cd7b941616ae819d26cab54265,1549384457,"make length(::String, ::Int, ::Int, ::Int) private again (#30965)

This was unintentionally made public by the great `_length` rename:

e99191a667e2a14c34186f54faed4e474943796c

Arrays and strings were using the `_length` name for private stuff
in different ways and the refactor made this part of the `length`
API when it should have remained private. Fortunately, it's not
documented and it seems unlikely that anyone is using it.

Also rename `next_continued` to `iterate_continued` to match the
name of the method that it's continuing.",['base/strings/string.jl'],"A recent refactor unintentionally made `length(::String, ::Int, ::Int, ::Int)` public and renamed `next_continued` to `iterate_continued`, deviating from naming conventions and potentially exposing private elements."
4d3de1a9419b4e0ce2d4d6d961c43e2c38afb9c9,1693243569,"Always rewrite GotoIfNot with unreachable branches

This resolves a regression introduced in https://github.com/JuliaLang/julia/pull/50943#issuecomment-1694198019

The problem was that we now expect the explicit CFG of the IR to
correspond 1-1 in terms of reachability to the information we get from
inference. That means that we have to unconditionally re-write control
flow to match the branches that inference ended up actually exploring.

This change also modifies Inference to update the ssaflags on GotoIfNot
and GotoNode statements, so that we can be sure these `@assert`s will
trip if Inference is ever made smart enough to fold
Union{Const(true), Float64}-style conditions.
","['base/compiler/abstractinterpretation.jl', 'base/compiler/optimize.jl', 'base/compiler/typeinfer.jl', 'test/compiler/ssair.jl']","A regression results in the IR's explicit Control Flow Graph (CFG) misaligning with information from inference, leading to inconsistent exploration of branches. The issue arises due to lack of updates on ssaflags in GotoIfNot and GotoNode statements."
bdb3ded0a264c320c928c16e218590d467156e8c,1683490314,"add reference to online tracy profile viewer (#49626)

* Add docs for TRACY_CALLSTACKS and Tracy Web Viewer

* add reference to online tracy profile viewer

* Add `WITH_TRACY_CALLSTACKS` build option

This change enables rudimentary call-stack support in Tracy. By default,
call stack sampling is turned on for all zones along with random
periodic sampling by the system.

In the future, we'll probably want to take a more fine-grained approach
to judiciously collect stack traces only where there are important, but
for now gives users a flag to play with to uncover more information.

---------

Co-authored-by: Cody Tapscott <topolarity@tapscott.me>","['Make.inc', 'deps/libtracyclient.mk']","Lack of documentation and reference for Tracy call stack support and online profile viewer, causing difficulty for users to access and interpret profiling data."
7ab15d8a7b3d424d929fc9edd2c9c129b95c9d81,1450978122,"Switch generic triangular solves (naivesub!) to column-major access. Also decorate these methods with @inbounds and directly index the object underlying the triangular object. Closes #14471.
",['base/linalg/triangular.jl'],Issues with inefficient memory access in generic triangular solves (naivesub!) due to row-major access in method. Related problem with missing @inbounds decorator leading to potential bounds-checking overhead.
d18d8a40497f65118681c3b2bef0a6ae3725d1dc,1628183537,"compiler: speed up bootstrapping time by 25% (#41794)

The optimizer code is full of loop constructions and I found they're
really better to not run in interpreter.

With this PR, we create the caches of the optimizer code first and
it speeds up the succeeding bootstrapping to create the caches for
the overall inference code.

On my machine, the bootstrapping took about 80 seconds previously,
but on this PR the time is reduced to about 60 seconds.",['base/compiler/bootstrap.jl'],Optimization code full of loops significantly slows down bootstrap time due to interpreter usage and cache creation efficiency.
201737a4381af64ea962a27549019fbedfd018f3,1487695545,"Add imports and module qualifiers for Distributed (#20710)

* Add imports and module qualifiers for Distributed

helps more of `JULIA_TESTFULL=1 make testall` pass

* some more imports from Base into Distributed for use

* fix rmprocs test to wait for removal of added workers
","['base/distributed/Distributed.jl', 'test/distributed_exec.jl', 'test/topology.jl']",Missing imports and module qualifiers in Distributed result in failed tests when using `JULIA_TESTFULL=1 make testall`.
36569d62671e641613e02950974783aa413425c8,1487523916,"make write/unsafe_write on iobuffer return signed like other io (#20609)

* make write/unsafe_write on iobuffer return signed like other io

* correct doctest

* add NEWS 
","['base/base64.jl', 'base/iobuffer.jl', 'test/iobuffer.jl']",Discrepancy in the sign of return type between the write/unsafe_write functions on iobuffer and other I/O operations.
97bfe8bab8d5bcc8c04a649592151a27561b530e,1461080196,"eliminate stage0 inference

all it did was ensure that everything in specializations was inferred
and require a lot of complex infrastructure to make it acceptable to
replace a module during compilation

but instead we can just infer everything in specializations directly
","['base/inference.jl', 'src/dump.c', 'src/gf.c', 'src/init.c', 'src/julia_internal.h', 'src/toplevel.c']",The stage0 inference mechanism requires a complex infrastructure and makes it necessary to replace a module during compilation while only ensuring that everything in specializations was inferred.
450c8c4edaa1e996aab46f9c954f10de75b4399b,1512353372,"Ensure consistency in Pkg solver decimation process

Fixes the rare condition where two packages were
being decimated at once in mutually inconsistent
versions.
",['base/pkg/resolve/maxsum.jl'],Simultaneous decimation of two packages can lead to inconsistencies in their versions.
d64d336613503a6073d46fc705e6f0000d5fd08a,1691004978,"AbstractIntepreter: revert `invokecall` to a positional argument (#50763)

In #50739, `invokecall` argument of `concrete_eval_call` was changed to
a keyword argument. However, this was an unintentional change that
imposes unnecessary changes to be required on packages using external
`AbstractInterpreter`. This commit simply restores it to positional
argument as before.",['base/compiler/abstractinterpretation.jl'],Unintentional change of `invokecall` argument in `concrete_eval_call` from positional to keyword imposes unwanted changes to packages using external `AbstractInterpreter`.
4046cd9dd33dde9a7cb7ac686099ad6af11da3ab,1474109927,"Add isless(::Nullable, ::Nullable)::Bool

This method follows the semantics of the already implemented
isequal(::Nullable, ::Nullable). It is needed to sort arrays of Nullable.
","['base/nullable.jl', 'test/nullable.jl']","Sorting arrays of Nullable lacks corresponding method, leading to incorrect or failed sorting operations."
305e2fb875a41bfff9d35031d6ffba44060932de,1662483095,"Test suite: after running a test set, throw an error if `Base.DEPOT_PATH`, `Base.LOAD_PATH`, or `ENV` have been modified and not restored to their original values (#46602)

",['test/testdefs.jl'],"Test suite modifies `Base.DEPOT_PATH`, `Base.LOAD_PATH`, or `ENV` but does not restore them to their original values, causing subsequent tests to fail."
b26f3b279c0c79e92666ee0077b06f6685d77c8b,1689037300,"Update SparseArrays.jl stdlib for SuiteSparse 7 (#48977)

* Use SparseArrays.jl updated to work with SuiteSparse 7, and with Int32 indices
* SuiteSparse_jll Update to v7.2.0 (Using @Wimmerer's SuiteSparse fork for 32-bit QR)

---------

Co-authored-by: Francois-Xavier Coudert <fxcoudert@gmail.com>
Co-authored-by: Will Kimmerer <kimmerer@mit.edu>","['deps/libsuitesparse.mk', 'stdlib/SuiteSparse_jll/src/SuiteSparse_jll.jl', 'stdlib/SuiteSparse_jll/test/runtests.jl']","The SparseArrays.jl stdlib is incompatible with SuiteSparse version 7, and does not support Int32 indices."
08812888d519c24a68ca0aaf8a73595399012c2a,1593479703,"Remove outdated restriction on Type{} calls in abstract interpretation

`@vtjnash` said in #35845 that he didn't know what this code was for
and didn't think it was necessary. Since he's the one that added it
and the comment says it's about backedges, I'm inclined to believe
him :). In any case, removing it passes base tests, so let's try it.
",['base/compiler/abstractinterpretation.jl'],"Abstract interpretation involves unnecessary code related to backedges in Type{}, restrictions seem outdated and may not be necessary."
48bc266642e83c7865c12839e62372769b64b05f,1539301415,"enable no-copy stack switching implementation (#29578)

Falls back to stack copying if there are too many stack mappings.

Also adds some code to free unused pooled stacks.","['src/gc-stacks.c', 'src/options.h', 'src/task.c']",Issue with too many stack mappings causing fallback to stack copying; unused stacks remain in the pool and are not freed.
b078d77b74ce1189e62af407b2113f6086bee9c5,1637548124,"Fix UndefVarError due to unintentional signature change (#43173)

* Fix UndefVarError due to unintentional signature change

* Add wait for REPL task to exit

* Add test

* test fix

* no invoke","['base/client.jl', 'stdlib/REPL/test/repl.jl', 'test/client.jl']","Unintentional changes to function signatures causing 'UndefVarError' to be thrown, possibly due to missing or misnamed variables."
66948948a26682893c16a9c35e412f43e1b371d9,1519770791,"Describe three-valued logic in docstrings

Add information regarding 3VL in the presence of missing values to relevant docstrings,
in addition to what already exists in the manual. Also improve docstrings for comparison
operators and make them more consistent with one another. Introduce a new # Implementation
section intended at developers of custom types, and document it in the guidelines.
","['base/bool.jl', 'base/int.jl', 'base/operators.jl', 'base/reduce.jl']","Current docstrings lack information on three-valued logic (3VL) in the context of missing values, resulting in inconsistency across comparison operators and possible confusion for developers of custom types."
990488e9ff6abcde6715182ea914add9e2ccb3a6,1468265023,"need to visit the TypeMap->any list always

same as with the TypeMap->linear list, because offs doesn't always start at zero
need to always visit the list to catch cases where the list is a Vararg
","['src/typemap.c', 'test/reflection.jl']","Failure to visit the TypeMap->any list in all cases, specifically when the list is a Vararg or when offs doesn't start at zero, causes missed catches."
1543cdd5ffc734cae640e45b9bb6ada73dd81c02,1677226122,"Faster iteration over non-offset `AbstractVector` (#48720)

This change simplifies the boundscheck in loop as LLVM would lift the const subtraction.
Simd block would be generated in more cases.

Co-authored-by: N5N3 <2642243996@qq.com>",['base/abstractarray.jl'],Bound check in loop for non-offset AbstractVector iteration leads to complex code execution; SIMD block generation is limited in many scenarios.
a1c4d855bc133758ef65102f32bdeff22fb6d0af,1675094324,"Sorting documentation fixups for 1.9 (#48440)

- Fix typos
- Clarify that ! means mutation, not ""in-place-ness"". This should be backported because sort! is even less in place in 1.9 than it already was in 1.8.
- Rewrite the section on default policy to reflect the new default policy
- Move examples and extended description of previously default sorting algorithms out of sort.md and into their respective docstrings (still rendered in sort.md)

Co-authored-by: Jeremie Knuesel <knuesel@gmail.com>",['base/sort.jl'],"Documentation for sorting methods contains typos and incorrect explanations of certain features, and does not reflect recent changes in default policies. Sorting algorithms' details need better placement.
"
d762e8c23538d745389a9ca959a90a769c864ce7,1593202651,"gf: improve ordering of operations based on performance estimates (#36436)

In the last commit, I didn't expect NamedTuple to hammer our
performance, but was starting to notice performance problems with trying
to call constructors. It's somewhat violating our best-practices in two
common cases (both the constructor and structdiff functions are
dispatching on non-leaf types instead of values). That was putting a lot
of strain on the cache, and so it forms a good test case. Keeping those
cases out of the cache, and searching the cache in a more suitable order
(significant mainly for constructors because there are always so many of
them), offsets that--and seems to possibly make us slightly faster
overall as a bonus because of that effect!","['src/gf.c', 'src/jltypes.c', 'src/julia_internal.h']","Performance degradation observed due to NamedTuple hammering performance, especially when calling constructors. Constructors and structdiff functions are dispatching on non-leaf types, straining the cache."
9454cd4df0cf4aae7e7385f00582c225a9270e2e,1504043248,"Remove global const  in init in cholmod (#23449)

* Remove global const  in init in cholmod

* Make refs and commonStruct a const

* Remove common function

* add back removed space [ci skip]
","['base/sparse/cholmod.jl', 'base/sparse/spqr.jl', 'test/sparse/cholmod.jl']","The cholmod initialization process uses a global constant causing issues during multiple initializations. Also, references and `commonStruct` are non-constants leading to potential mutability problems."
b3741c01f2e2d4956be3ba41858c4065c6fbc7e8,1694123747,"Check again if the tty is open inside the IO lock (#51222)

This can cause segfaults when exiting julia.

Co-authored-by: Valentin Churavy <vchuravy@users.noreply.github.com>",['base/stream.jl'],Exiting Julia causes segfaults if the tty is open due to it not being checked within the IO lock.
b987396a14345ff0e6232ab9090661e60154b20f,1681410754,"Fix doc. about linear from/to Cartesian indices (#49343)

Since Julia (ordinary) arrays have 1-based indices and are in column-major order, the linear index `k` and the Cartesian index `(i,j)` of an element in a `m×n` Julia array are related by: `k = i + m*(j - 1)`. The examples of conversion between linear and Cartesian indices in the doc. use incorrect formulae although the results were correct in the specific element at `(1,3)`. This can be easily checked for other indices than `(1,3)` with a simple `2×3` array (as in the examples) built by `A = reshape(collect(1:6),2,3)`.",['base/indices.jl'],"The linear to Cartesian index conversion formulae provided in the documentation are incorrect, even though the results for specific examples have been accurate.
"
1adeae01da38a2304219aa3368dc91757a5f1aa8,1531380336,"Pkg: make sure LibGit2 repo closes if we fail in install_git (#28030)

* make sure LibGit2 repo closes if we fail in install_git (#486)

* is this test bad?*

* Update pkg.jl
","['stdlib/Pkg/src/Operations.jl', 'stdlib/Pkg/test/pkg.jl']","Failure in install_git function doesn't properly close the LibGit2 repository, leading to potential memory leaks."
131807cc574bc8452b463247d4903d2eb6cfec6b,1502700313,"Remove vestigial srand (#19980)

This should only be merged after:

- https://github.com/JuliaLang/Rmath-julia/pull/14
- https://github.com/JuliaStats/Rmath.jl/pull/21

have been merged and releases of those packages tagged.",['base/random.jl'],"The srand function is no longer required and is redundant, causing unnecessary code complexity."
54d8d5b511193b060a3cd070f532b5d4ac025145,1602953230,"quite faster rand(::MersenneTwister, ::Type{Float64}) etc... (#37916)

Generation of `Int64` just became faster than of `Float64` (#37914).
Given that dSFMT produces natively `Float64`, and that generating a random
`Float64` needs only 52 random bits, surely performance can be improved there.

Just ask the `gen_rand` routine, which randomizes the cache for floats,
to not inline, as it's unlikely to be called (once in a thousand).

The speedups are about 1.8x for `rand(rng, Float64)`, 13% for
`randn(rng, Float64)`, more than 1.9x for `rand(rng, Int32)`
and smaller integers (including `Bool`).",['stdlib/Random/src/RNGs.jl'],"Generation of Float64 random numbers is slower than Int64. The `gen_rand` routine, which randomizes the cache for floats, is not called frequently and its performance can be improved."
c7026a14b760a34c9dd91b890c4516ee21d876a5,1467470668,"Restrict tryparse_internal on Bool to Union{String,SubString}

Add a test of the error throwing branch of tryparse_internal
which has had a typo in it since a68f950d14806d4de7c214727fb7980ebd67192f
","['base/parse.jl', 'test/parse.jl']",The function `tryparse_internal` on Bool type has a typo in the error throwing branch which is untested.
467676fdd31d59ff659b3a0507174c4ec3f36a63,1599149903,"Improve alias analysis on julia.typeof and memcmp (#37284)

* `julia.typeof` is a pure function of the pointer itself within the lifetime of the object
  so it can be treated as readnone until we expose write to the type tag (during allocation)
  to LLVM.
* The TBAA metadata can be applied to all functions that access only argument memory or
  inaccessible memory. Mark it on `memcmp` as well.","['src/cgutils.cpp', 'src/codegen.cpp']",`julia.typeof` and `memcmp` functions could misbehave due to inefficient alias analysis. This can affect object lifetime and memory accessibility.
f17156f0b8028b8a100e26146c53be1702007869,1463016817,"Add support in genstdlib for `type` directive (#16298)

* Add support in manual for `type` directive

* Update JuliaDoc rev to include type directive fix
","['base/dates/periods.jl', 'doc/genstdlib.jl']",The `type` directive is not currently supported in genstdlib which hinders documentation generation.
71224c66ded0dc58b0b14f9675a6ba1e9140774c,1464895033,"Segregate binaries created by deps out of usr/bin

since people are apparently adding this location to their path,
we should remove build-time-only clutter from it

Also set shlibdir in MAKE_COMMON so openlibm and openspecfun don't
install dlls into usr/tools (build_depsbindir) on windows

Add a patch to customize bindir in cmake-build llvm
using CMAKE_INSTALL_BINDIR variable
set CMAKE_INSTALL_BINDIR in cross compile NATIVE.cmake toolchain file

also copy gcc dlls to usr/tools on windows
split std_dll into 2 rules for build_bindir and build_depsbindir
","['Make.inc', 'deps/NATIVE.cmake', 'deps/llvm.mk', 'deps/objconv.mk', 'deps/patchelf.mk']","Build-time-only binaries in usr/bin are cluttering the directory, user paths affected. Additionally, openlibm and openspecfun install DLLs into usr/tools on Windows instead of the intended directory."
209aad1ddfad16d689de677597181005c927cdda,1649044650,"restore MSVC support to julia.h file (#44842)

Put back a few lines that were removed by PR $42703 because they are required to successfully embed Julia with MSVC.","['src/support/dtypes.h', 'src/support/platform.h']",Julia embeddings with MSVC are failing due to missing lines from PR $42703 in the julia.h file.
a57ba8e4948913ce76a6f5119222673084ac1767,1519190510,"loading: top-level load w/ `path`, w/o `deps` or dep project file

This allows a checked out package without a project file to load
its dependencies as top-level packages in the load path.
",['base/loading.jl'],Package checked out without a project file is unable to load its dependencies as top-level packages in the load path.
64bceb5b662e21a3e59cc7c21b02beb4d0fcff45,1525439378,"Fix documentation warnings (#26974)

* fix various doc-linking problems

* spaces > tabs

the tabs in NEWS.md tripped up the markdown parser and interpreted
those lines as an inline code snippet
","['stdlib/LinearAlgebra/src/adjtrans.jl', 'stdlib/LinearAlgebra/src/transpose.jl']","The markdown parser is misinterpreting certain lines in NEWS.md as inline code snippets due to indentation with tabs, causing problems with document linking."
b3622d673c039cdc967cad37281df6f3e29c3f31,1509233351,"Remove idling worker as soon as there's no more tests to run

Might help test memory usage a little.
More importantly, this makes it much easier for external scheduler to track when the test process
is finished and a new process can be scheduled.
",['test/runtests.jl'],Non-removal of idling workers even when no tests are left to run is causing higher memory usage and complicating tracking for external schedulers.
928bcde3b78951f4fd145423e547b2377d03cb21,1467994141,"use inferred type for empty comprehensions if it is a leaf type

this implements the ""Steve Johnson compromise"":
- non-empty comprehensions don't depend on inference at all
- in the empty case, we use either Union{} or the inferred type
- therefore there is no regression in type precision in cases where
  we can infer a leaf type

add Core.Inference.return_type

This computes a return type (at compile time if possible) in a way that handles
recursive dependencies in inference.
","['base/array.jl', 'base/inference.jl']","In cases of empty comprehensions, the current method fails to utilize type inference optimally, leading to potential regressions in type precision. Additionally, the computation of return types lacks a method to handle recursive dependencies in the inference."
631f25769f5403ba83203f2c6921ec963e49c772,1613410931,"Add doc to explain how to test an absence of logger messages for test_logs macro. (#39670)

* Add doc to explain how to test an absence of logger messages for
test_logs macro.

* remove tailed white spaces",['stdlib/Test/src/logging.jl'],Documentation missing on how to use test_logs macro to test for an absence of logger messages.
813500df7786081f313127289585c94acbdef4cf,1598549121,"Simplify static_eval, remove allocation restriction (#37209)

* Simplify static_eval.

Remove the sparam and allow_alloc parameters, which are enabled in all
uses of static_eval (which there are way fewer than there used to be).

* Remove static_alloc codegen param.","['base/reflection.jl', 'src/ccall.cpp', 'src/cgutils.cpp', 'src/codegen.cpp', 'src/julia.h']",The parameters `sparam` and `allow_alloc` in `static_eval` are enabled in all uses causing complications. There is also a redundant `static_alloc` codegen param.
6c92f26c95886c844e81f39b86daee5844850ae1,1493085257,"don't use isdefined in stale_cachefile

`isdefined` will immediatly resolve the binding. Since we are only
trying to skip the path lookup the weaker version `isbindingresolved`
is enough. `isbindingresolved` is also used for this purpose in
`read_verify_mod_list` in `src/dump.c`.
",['base/loading.jl'],"`isdefined` is causing immediate binding resolutions while we only want to skip path lookups, leading to potential performance issues."
fe9de990d130cb9ac58cb66332fe95cc72853c05,1563167649,"Stop detaching process for precompiling modules. (#32384)

This means that interrupting the precompilation (ctrl-c) or killing
Julia will kill the process that is doing the precompilation.

This is useful because currently, interrupting julia while it is
precompiling a module will leave that precompilation running in the
background. For large packages that take a long time to precompile, this
can be frustrating, especially because the user most likely interrupted
the precompilation because they _didn't_ want it to happen (e.g. maybe
they realized they forgot to change something in the code).",['base/loading.jl'],"Interrupting Julia during module precompilation leaves the precompilation process running in the background, leading to unwanted resource consumption."
97044743ab41f887f8bb4b01c30cbd7f63236e1a,1540927429," Outline over/underflow functionality in ComplexF64 division for performance (#29699)

* outline over/underflow functionality in ComplexF64 division

* Swap over-long ternary for conventional if-else syntax

* force inline of hot subfunctions
",['base/complex.jl'],Overflows and underflows in the division functionality of ComplexF64 are affecting performance adversely.
4bd7f65f8c86d7152d1ec41e01504b3e1e49e2af,1451510530,"Merge `FuncDoc` and `TypeDoc`

Combines the two composite docstring containers used in `Base.Docs`.
They have rather similar fields and in all uses have been treated in
a in a similar manner.

Since neither `FuncDoc` nor `TypeDoc` were exported and weren't exposed
to users of `at-doc` (this always returns a `Markdown.MD` object), this
shouldn't be a breaking change.
","['base/docs/Docs.jl', 'base/docs/utils.jl', 'doc/genstdlib.jl', 'test/docs.jl']","`FuncDoc` and `TypeDoc` in `Base.Docs` have notably similar fields and are treated similarly, creating redundant and potentially confusing code structure."
da9ef90b236b5d1dbe0cd06285c716c560558057,1454966446,"Fix REPL parsing

* Fix wrong offset to `parse(::AbstractString, ::Int)`
* Fix error checking in `ios_seek`
* Add bounds check in `jl_parse_string` to avoid surprising results or segfault

Closes #14977
","['base/REPL.jl', 'base/parse.jl', 'src/ast.c', 'src/support/ios.c', 'test/parse.jl']","Parsing in REPL is leading to errors due to incorrect offset and absent boundary checks in 'jl_parse_string', potentially causing unexpected results or system crashes."
3db0cc20eba14978c45cd91f05a9b89b1dc0e38a,1676036450,"subtyping: Relax conditions for separable tuple fast-path (#48578)

This check is unnecessary, since the LHS type is a subtype iff all
union-decision-paths are subtypes of the RHS type.

The RHS check needs to stay, since multiple union-decision-paths on the
RHS may have to be considered together, even when none of the individual
paths are sufficient on their own to conclude `a <: b`.",['src/subtype.c'],Unnecessary checks in subtyping with tuple fast-path possibly leading to ineffective handling of multiple union-decision-paths when considering subtype validity.
46f78d60a935d05946c29f01ac2c20d24dd8ffc0,1599174794,"clangsa: Check that a value is rooted on return (#37366)

* clangsa: Check that a value is rooted on return

Fixes #37364
Also reverts part of 4ed484fe7ac591da67bfe384c369430ed658606d that
broke the clangsa self tests.

* rm outdated comment","['src/clangsa/GCChecker.cpp', 'src/disasm.cpp', 'src/gf.c', 'test/clangsa/MissingRoots.c']","Value is not properly rooted on return, breaking the clangsa self-tests. An associated outdated comment is causing further confusion."
b37cc3d7c03d0496c65431d621f5d6b7939f8089,1586927328,"Add additional synchronization in spawn test (#35481)

Hopefully fixes an intermittent CI failure (unfortunately, looks like
somebody restarted that build so the logs are gone).",['test/spawn.jl'],"Intermittent CI failures in spawn test, possibly due to lack of sufficient synchronization."
22d570bb096254e3f6164e3642f91c173da9d8d9,1523256906,"Grammar tweaks and other small fixes

Remove default implementations for shouldlog and min_enabled_level as
these seem more likely to cause confusion than be useful.
",['base/logging.jl'],Default implementations for 'shouldlog' and 'min_enabled_level' methods are leading to user confusion.
6b65a3910fe9ee9095ce83cae47ddb6ae5213603,1455833908,"Adding SubArray tests to generic.jl, includes fix for linreg bug found

Adding tests to the generic.jl test file for subarrays. Tests discovered
bug in the method Linreg in generic.jl, commit includes fix for that bug
","['base/linalg/generic.jl', 'test/linalg/generic.jl']","SubArray tests in generic.jl uncover a bug within the Linreg method, affecting its functionality."
03957db184a70a255c54f3b1bb54ac5639892700,1610033775,"Remove try from at-time and close compile timer during throw (#39133)

* remove try from at-time and close compile timer during throw

* add scope tests for at-time and aat-timev

","['base/timing.jl', 'src/task.c', 'test/core.jl']",`at-time` and `aat-timev` functions fail to close the compile timer in case of throw causing potential scope leakage.
b2304c528a2b055bfe6e88a62b773765889259e9,1561566204,"codegen,gc-lowering: post fixup tbaa information (#32321)

Certain metadata (invariant.load, tbaa_const) allows reordering of
memory operations over unknown calls (including safepoint). Before GC
lowering this is legal, because the optimizer sinking a load over a
safepoint will automatically extend the live range of the heap object
(by definition the live range of the heap object before GC lowering
matches the live ranges of any reference to it). However, after GC
lowering, we have fixed the live ranges of the heap objects, and thus it
is no longer legal to sink such memory operations over safepoints (as
the update to the object's live range won't be tracked).

fix #32215","['src/llvm-late-gc-lowering.cpp', 'test/llvmpasses/late-lower-gc.ll']","After GC-lowering, illegal reordering of memory operations over safepoints occurs due to certain metadata, causing inconsistency in updating the heap objects' live ranges."
e2f2a64591413421b471e1a6793ff5ed702213e0,1518036830,"loading: PkgId should be based on the root module ancestor's name

Also a bug fix: non-UUID projects could accidentally get last UUID.

Fixing this fixes one `compile` test but breaks another – the `Test`
module needs to be identified by itself, not just its name.

Fix Pkg/pkg test error: accessing `LibGit2` requires a UUID.
","['base/loading.jl', 'base/methodshow.jl', 'base/reflection.jl', 'test/compile.jl']","The PkgId generated is not based on the root module ancestor's name, causing non-UUID projects to unintentionally acquire the last UUID and accessing `LibGit2` results in an error due to missing UUID."
460a9d19a4f10edb1dbb184857134177fbadfbb7,1485210933,"fix jl_static_show syntax for `lb<:T<:ub`

if we print `lb`, then we must print `ub`, even if it does not contain essential information,
otherwise type signatures might not be able to round-trip correctly through parsing
",['src/builtins.c'],Printing only `lb` without `ub` in `jl_static_show` syntax could prevent type signatures from correctly round-tripping through parsing.
84024a1f44127c4993cc25f8629588f8807706c3,1540321549,"Support repeat at any dimension (#29626)

* Support repeat at any dimension

* Use a more friendly way to do getindex

* rollback to original commit

* use `1` instead of `OneTo(1)`

* Change 1 to OneTo(1)

* Change `length` to `ndims`, add test

* Fix a test error

* trigger rebuild
","['base/abstractarraymath.jl', 'test/arrayops.jl']","The current implementation of 'repeat' is restrictive and doesn't support repetition at any dimension, causing complications when handling indexes and dimensional lengths."
3e8f257ea26f09563684c8bbbbaea1a80f00d899,1576529811,"small fix to simplify interpreter-stacktraces PR (#34089)

If we hit an uninitialized frame (probably meaning an async signal),
previously this would have fallen into an infinite loop, instead of
continuing past it. Refactor to fix that.",['src/stackwalk.c'],"Uninitialized frame in interpreter stack traces could lead to an infinite loop, probably due to an asynchronous signal."
9c067b64ed1f71c015f7703d12365d2e7baea530,1486132341,"type-stable inner loop for sqrtm (#20214)

* type-stable inner loop for sqrtm

As suggested by Ralph_Smith on [discourse](https://discourse.julialang.org/t/review-schur-pade-matrix-powers-speedup/1650/6)

On my machine: speedup x15

* dispatch sqrtm on real-or-not bool

As suggested by @stevengj

* sylvester for numbers","['base/linalg/dense.jl', 'base/linalg/triangular.jl']","Inner loop for sqrtm function is not type-stable, causing significant performance issues."
12e679cabbe827d3be1869b9eaac24263415ee95,1671709475,"Apply `InitialOptimizations` more consistently in sorting & fix dispatch bug (#47946)

* Apply InitialOptimizations by default in several cases when it was previously present

* fixup for MissingOptimization

* fix stability in the sortperm union with missing case",['base/sort.jl'],"The InitialOptimization is not being applied consistently across all sort cases, leading to missing optimizations and instability in the sortperm union with missing cases."
ec574fb17559a262e64fb6177419bdaba878bd2e,1538794879,"mul!, rmul! and lmul! methods for UniformScaling (#29506)

* mul!, rmul! and lmul! methods for UniformScaling

As per https://discourse.julialang.org/t/in-place-multiplication-methods-for-uniformscaling-type/15837

* Add tests and another mul! method
","['stdlib/LinearAlgebra/src/uniformscaling.jl', 'stdlib/LinearAlgebra/test/uniformscaling.jl']","Lack of in-place multiplication methods (mul!, rmul!, lmul!) for UniformScaling Type causing operation inefficiencies."
8759262293b914364a688503cd2aaf54180c939c,1485801721,"remove `subtypes` search for concrete types (#19964)

* remove `subtypes` search for concrete types

This prevents an unnecessary/expensive call to `_subtypes` when `subtypes` is called on a concrete type.

* in place sort

* add tes
","['base/reflection.jl', 'test/reflection.jl']",Unnecessary and expensive calls to `_subtypes` when `subtypes` is invoked on a concrete type.
73e20a36c421788113ed6a31fb4e28e78137927c,1488786935,"Fixes and stronger tests for Tridiagonal setindex! (#20892)

Makes Tridiagonal setindex! support assigning zero off the main, sub, and super diagonals.
Strengthens tests for Tridiagonal setindex!.","['base/linalg/tridiag.jl', 'test/linalg/tridiag.jl']","Tridiagonal setindex! does not support assigning zero off the main, sub, and super diagonals, and its tests are insufficient."
7c090843c192e79fe9f7adabc88c13b0071ef577,1486668694,"Two REPL fixes

1. Use `eval` in REPL.respond, to fix external REPL modes (world age problem)
2. Another instance of 0-indexed terminal columns that should be
   1 indexed.
","['base/REPL.jl', 'base/Terminals.jl']","1. External REPL modes are malfunctioning due to a world age problem.
2. Terminal columns are incorrectly being 0-indexed instead of 1-indexed."
ade5a90763651a79d6e6ac6eced4fb9e71f09596,1461810339,"skip non-.text sections when searching for the function pointer

is seems that llvm is unable to compute getAddress for the .debug sections
and instead returns 0
since we know the symbols we care about are in the .text section
just search that section instead

fix #15971
",['src/codegen.cpp'],"LLVM is unable to compute getAddress for .debug sections, returning 0 instead which omits necessary symbols from the .text section."
0ab032a15abe7e6ca74f948eb0c3c2b66cd6cbb2,1696598643,"optimize: revise inlining costs (#51599)

Add a bonus for Intrinsics called with mostly constant arguments. We
know that simple expressions like `x*1 + 0` will get optimized later by
LLVM, and also likely fold into other expressions, so try to reflect
that in the cost estimated earlier. Additionally rebalance some of the
other costs to more accurately reflect what they take in assembly.","['base/compiler/optimize.jl', 'base/compiler/tfuncs.jl']","The existing cost estimation for Intrinsics with mostly constant arguments is inaccurate, resulting in less optimal inlining decisions and inefficient assembly code generation."
310de1c684f81a4d01fedb1bf7bb64cddadf7195,1636292373,"optimizer: enhance SROA, handle partially-initialized allocations (#42834)

During adding more test cases for our SROA pass, I found our SROA doesn't
handle allocation sites with uninitialized fields at all.
This commit is based on #42833 and tries to handle such ""unsafe"" allocations,
if there are safe `setfield!` definitions.

For example, this commit allows the allocation `r = Ref{Int}()` to be
eliminated in the following example (adapted from <https://hackmd.io/bZz8k6SHQQuNUW-Vs7rqfw?view>):
```julia
julia> code_typed() do
           r = Ref{Int}()
           r[] = 42
           b = sin(r[])
           return b
       end |> only
```

This commit comes with a plenty of basic test cases for our SROA pass also.","['base/compiler/optimize.jl', 'base/compiler/ssair/passes.jl', 'test/compiler/irpasses.jl']","The Scalar Replacement of Aggregates (SROA) optimization pass currently doesn't handle allocations with uninitialized fields, impacting the optimization of code using such allocations."
32185da99563d702e42cdae3748952d5c9691c99,1468560169,"Move `build_sysimg` docstring

This moves the docs for `build_sysimg` inline in `contrib/build_sysimg.jl`.
Adds an additional condition to the `build_sysimg.jl` file so that we
can safely include the file in `genstdlib.jl` without a system image being
built unintentionally.
","['contrib/build_sysimg.jl', 'doc/genstdlib.jl']",Including `contrib/build_sysimg.jl` in `genstdlib.jl` risks unintentional system image build due to lack of necessary conditions in `build_sysimg.jl` code.
5009671cd4584767f8871cfa05baa5cf6bb4307f,1461661187,"Fixed up docs for changed dump function.

For #15707. In addition:

* Some commented out code referring to `xdump` was removed from `base/show.jl`.
* `doc/stdlib/arrays.rst` was updated from building docs.
",['base/show.jl'],"Documentation for the dump function doesn't reflect recent changes, causing confusion and inconsistency in `base/show.jl` and `doc/stdlib/arrays.rst`."
0bd60e652b1a55d78197adbd563ab7f52a444a78,1568891363,"Fix #33185 by rounding to 6 significant digits while printing float digits instead of using round function. Note the significant digits do not include leading/trailing zeros
","['base/ryu/Ryu.jl', 'base/ryu/exp.jl', 'base/ryu/fixed.jl', 'base/ryu/shortest.jl', 'test/ryu.jl']","The print function for float digits does not correctly take into account leading/trailing zeros, resulting in inaccurate rounding."
8d0a9d1adab5bc82075c3bc586e67b4be1fb5207,1458844088,"Two more tweaks for the debugger

- Put back jl_get_llvmf_fptr, which got lost in a recent commit
- Have jl_get_section start, return the fbase if asked for an ip
  in a shared library. The name might be slightly inaccurate now,
  but good enough. We can rename this function later, once we know
  what exactly we want the semantics to be.
","['src/codegen.cpp', 'src/debuginfo.cpp']","The recent commit resulted in the loss of 'jl_get_llvmf_fptr' function, and 'jl_get_section_start' function returning 'fbase' when asked for an IP in a shared library is leading to slightly inaccurate names."
c3d3c6ab943a8d03115099835092b434ba8f6a10,1608593802,"Carry MBedTLS patch that works around CMake 3.18.2 bug. (#38933)

MBedTLS fails to build with CMake 3.18.2, due to a bug in
CMake 3.18.2 causing failure to find python3. For more information,
please see https://github.com/ARMmbed/mbedtls/issues/3690 and
https://gitlab.kitware.com/cmake/cmake/-/issues/21204.

This pull request applies the MBedTLS patch that works around this
issue from https://github.com/ARMmbed/mbedtls/pull/3691, which
has been merged into MBedTLS's development branch but not
yet into a tagged release. The latest minor release as of that
merge was 2.25.0, so it's probably safe to conjecture that this
patch will be live as of minor release 2.26.0; it's also
possible that this patch will land on patch releases for
2.24.0 and 2.25.0, but this author doesn't know.",['deps/mbedtls.mk'],"MBedTLS fails to build with CMake 3.18.2 due to a CMake's bug in locating python3, blocking the build process."
4a6bbb8181682bb04c12d6ff03eb85ce1edcb8ca,1483700190,"Fix reflection test failure on 32bit (#19885)

The bug here is that one of the pointers gets zero extended (isymb->first),
while the other (Fptr) gets sign extended, so comparing the two breaks down.
The simplest way to fix, is just to use the appropriate integer size for the
platform we're on.",['src/disasm.cpp'],Pointers comparison test failing on 32bit due to zero extension of 'isymb->first' and sign extension of 'Fptr'.
5acd7bdfbb1b9deed9a9438f21eb8170fedeee57,1599190666,"Fix use of CreateAlignedStore (#37388)

This is a compile error on 10+ and is probably triggering implicity conversion on LLVM 8 and 9.",['src/codegen.cpp'],Compile error on using CreateAlignedStore in LLVM version 10+ and probable implicit conversion issue on LLVM 8 and 9.
45620452d018fa40145100a420d5a399b976aff8,1550092936,"Don't use recursion in IncrementalCompact (#30885)

* Switch to `@goto` instead of recursion in `iterate(::IncrementalCompact, ...)`

This dodges a stack overflow seen with extremely large blocks of code

* Apply suggestions from code review

Co-Authored-By: Keno <keno@alumni.harvard.edu>
",['base/compiler/ssair/ir.jl'],Recursion used in IncrementalCompact is leading to a stack overflow when dealing with extremely large blocks of code.
67018fb370b7cd73b09c1f770105e787d717dfca,1525187999,"[NewOptimizer] Fix PhiC type lifiting for nested try/catch

Fixes two closely related bugs:
- PhiC nodes were not participating in type refinement during SSA construction,
  leading to PhiC nodes that were part of a phi cycle to have too narrow a type.
- PhiC nodes part of a Phi cycle did not get an appropriate upsilon node inserted
  during type lifting.
","['base/compiler/ssair/passes.jl', 'base/compiler/ssair/slot2ssa.jl']","PhiC nodes do not undergo type refinement during SSA construction, resulting in narrower types than expected. Furthermore, appropriate upsilon nodes are not being inserted during type lifting for PhiC nodes part of a Phi cycle."
70771b22396f55e36a6356f5a69b9eff6a9c41ee,1623106919,"implement replace on String for multiple patterns  (#40484)

This has been attempted before, sometimes fairly similar to this, but
the attempts seemed to be either too simple or too complicated. This
aims to be simple, and even beats one of the ""handwritten"" benchmark
cases.

Past issues (e.g. #25396) have proposed that using Regex may be faster,
but in my tests, this handily bests even simplified regexes. There can
be slow Regexes patterns that can cause this to exhibit O(n^2) behavior,
but only if the one of the earlier patterns is a partial match for a
later pattern Regex and that Regex always matches O(n) of the input
stream. This is a case that is hopefully usually avoidable in practice.

fixes #35327
fixes #39061
fixes #35414
fixes #29849
fixes #30457
fixes #25396
","['base/regex.jl', 'base/set.jl', 'base/strings/util.jl', 'test/strings/util.jl']","String's replace function doesn't support multiple patterns, causing inefficiency and potential O(n^2) behavior for overlapping patterns."
552d5e046aacf57f162f1d334ec2149740b7b57d,1485858559,"Improve inferability of `slicedim` (#20154)

* Add `setindex` for tuples

* Improve inferability of `slicedim`

* Remove `slicedim` specialization for `BitArray`

* Add `slicedim(::BitVector, ::Integer, ::Integer)` to restore previous behavior
","['base/abstractarraymath.jl', 'base/bitarray.jl', 'base/tuple.jl', 'test/arrayops.jl']","Issues with inferability of 'slicedim' function, specifically when used with `BitArray` and tuple data types."
80e69b9b0c49ef575c47fd284d029974a55926f2,1598620527,"Fix TBAA for `DataType` (#37184)

Due to lazy field type initialization, the `types` field is actually mutable in `DataType`.
This means that we cannot use immutable or constant TBAA for all `DataType` fields.

However, since any objects stored in the field are still rooted
over the lifetime of the `DataType` we can still let the GC root placement pass refine
any field to the parent `DataType`.
Also make use of the field offset to still mark known load from all other fields as constant.
This is currently done via a special case but it could also be useful for many other types too.","['src/cgutils.cpp', 'src/codegen.cpp', 'src/llvm-late-gc-lowering.cpp', 'test/core.jl']","Field 'types' in 'DataType' is mutable due to lazy initialization leading to incorrect TBAA application, affecting GC root placement and object marking.
"
68175802698e1a7aeb57099027b04fb24d170952,1518859199,"Document that V also changes shape in thin SVDs (#26036)

* document that V also changes shape in thin SVDs

* correct sizes...
",['stdlib/LinearAlgebra/src/svd.jl'],"There's a lack of documentation clarifying that in thin SVDs, the shape of V also undergoes change."
8bb656162fc89044a868f3798a9a1fb4bff93ce0,1654835454,"threading: move sleep/wake state into ptls (#45557)

This is easier to manage as part of the existing block (we previously
did not include it only because we did not have the libuv definitions
for it and did not need to).","['src/julia.h', 'src/julia_threads.h', 'src/partr.c', 'src/threading.c']",Managing sleep/wake state separately due to missing libuv definitions may be problematic in the context of the current block in the threading process.
5e8d7edfffbac8a69fad0f901089bbaa97d10434,1632363132,"compiler: unify `singleton_type` and `argtype_to_function` (#42342)

They are supposed to do the same thing.
Previously `singleton_type` didn't handle the case where
`isconstType(ft) -> ft.parameters[1]`, but it can just include that.","['base/compiler/abstractinterpretation.jl', 'base/compiler/ssair/inlining.jl', 'base/compiler/utilities.jl']","The `singleton_type` function doesn't handle cases where `isconstType(ft) -> ft.parameters[1]`, despite it and `argtype_to_function` expected to perform the same function."
e87e30c0e33080ec746f72f8f2aeeb880c36c565,1628507758,"?(x, y)TAB completes methods accepting x, y (#38791)

* ?(x, y)TAB completes methods accepting x, y

Closes #30052
xref #38704
xref #37993

Co-authored-by: Jameson Nash <vtjnash@gmail.com>
","['stdlib/REPL/src/LineEdit.jl', 'stdlib/REPL/src/REPL.jl', 'stdlib/REPL/src/REPLCompletions.jl', 'stdlib/REPL/test/replcompletions.jl']","Tab completion for methods accepting x, y fails when the syntax ?(x, y) is used."
4fd26ba1352e5f4ffe20b1724926228a0a6fdd41,1669695565,"reflection: support additional call syntaxes for `@invoke[latest]` (#47705)

Like `@invoke (xs::Xs)[i::I] = v::V` and `@invokelatest x.f = v`.

Co-Authored-By: Jameson Nash <vtjnash@gmail.com>","['base/reflection.jl', 'test/misc.jl']",`@invoke[latest]` does not support additional call syntaxes like `@invoke (xs::Xs)[i::I] = v::V` and `@invokelatest x.f = v`.
d57de75f290fde84de4cd3de102cf465d8722ae0,1601584729,"InteractiveUtils: define default editors during package load (#37839)

Previously if you defined a new editor before calling `edit` it
prevented the default editors from being defined ever. This defines
the default editors no matter what.",['stdlib/InteractiveUtils/src/editless.jl'],Defining a new editor before calling `edit` prevents the default editors from being defined.
343b7f56fcc84b20cd1a9566fd548130bb883505,1506260560,"Consolidate SVD tests a bit. (#23669)

* Consolidate SVD tests a bit.

The number tests fail without that `isapprox` and they need quite
a few more for Complex types. This could probably be made to work
more nicely in the future. We don't have a `NaN` for `Int`, I think.

* Fix spacing
",['test/linalg/svd.jl'],Some SVD tests are failing due to inadequate handling of complex types and insufficient comparisons. There's also an absence of `NaN` handling for `Int` type.
0acca3c35524cff5c3dd65c25d1b104e62db22cb,1697397693,"Optimize away try/catch blocks that are known not to trigger (#51674)

This leverages the support from #51590 to delete any try catch block
that is known not to be triggered (either because the try-body is empty
to because we have proven `:nothrow` for all contained statements).","['base/compiler/abstractinterpretation.jl', 'base/compiler/optimize.jl', 'base/compiler/ssair/ir.jl', 'base/compiler/ssair/slot2ssa.jl', 'base/compiler/typelattice.jl', 'src/codegen.cpp', 'test/compiler/inference.jl']","The compiler is not optimally handling try/catch blocks that have been proven not to trigger, leading to unnecessary computation."
2655a3ad5d7168125f33e44fa255cf0937c66eb4,1603050574,"Drop use of `something` in reflection.jl (#38067)

* Drop use of `something` in reflection.jl

reflection.jl is included in Core.Compiler, but the `something` function is not, so we cannot use it here.
Throw an explicit error instead. I considered having it not throw the error when `err==false`, but it
seems to me like passing such a UnionAll is just a user error, rather than an acceptable query, so
I left it as is and simply did the bug fix.

* Update base/reflection.jl",['base/reflection.jl'],"The `something` function in reflection.jl cannot be used due to its non-inclusion in Core.Compiler, causing error throws that disrupt user queries."
0ca6948724a23e91742c8d9a9b01dccd8be03a9d,1637195486,"Use `open` to open Julia REPL in macOS default terminal (#43111)

Most macOS developers use third-party terminal apps (e.g. iTerm2) to replace macOS's default terminal. Current implementation will always open built-in terminal to execute Julia REPL, which is not good enough.",['contrib/mac/app/startup.applescript'],"Julia REPL opens in macOS's default terminal even when a third-party terminal app is set as default, impacting user experience for macOS developers."
5cf571721369a83a072fbef8e3de8e20d7644aa8,1599149210,"codegen: phic/upsilon nodes can be set to undefined (#37319)

Unlike other nodes, Upsilon nodes can be potentially undefined and need
special handling to ensure they aren't literally undef, as we might try
to union-copy or gc-root the data later.

Fix #37262","['src/codegen.cpp', 'test/compiler/codegen.jl']",Upsilon nodes can be set to undefined causing issues when attempting to union-copy or gc-root data at later points.
b78bd0aead74b8e95491ac8d02885c5a6977a350,1612124459,"Fix OpaqueClosure show method

This file moved into Base.Experimental late in the PR cycle, which
doesn't have Base.show imported. Just move the show methods to
show.jl, since OpaqueClosure is defined in Core anyway - might as
well.
","['base/opaque_closure.jl', 'base/show.jl', 'test/opaque_closure.jl']","OpaqueClosure's show method is broken due to it being moved into Base.Experimental, which doesn't have Base.show imported."
6218ce3e1e4f961458bd2491d64a53627eac0bca,1627696320,"make `@fastmath exp` not overflow to small negatives

This should be basically the same speed (since the integer and floating point happen in parallel), but much more usable since now `@fastmath exp(1000f0) actually turns to `Inf32` correctly).",['base/special/exp.jl'],Using '@fastmath exp' with large float inputs results in overflow to small negative numbers instead of returning Inf32.
c9362a54c9b0cd96549d82fde0bff81a80b55290,1667377879,"Improve error message for non-distinct static param names (#47368)

For code generated by macros, it may be otherwise
difficult to tell which parameters are not distinct.

Fixes #46622","['src/julia-syntax.scm', 'test/syntax.jl']","Error message is unclear when dealing with non-distinct static parameter names, particularly for code generated by macros."
69f0653317392812a2018f86e1d9f478913eeef9,1488286748,"partially revert #20806 (#20838)

there are other ways to fix this that don't require changing
compiler flags in the default build configuration",['deps/blas.mk'],Changes in default build configuration due to compiler flags adjustment in PR #20806 resulting in build complications.
a9a1d80076f98b1e31197c22924acf24bf5da760,1633196878,"late-gc-lowering: Prevent infinite recursion (#42445)

Phi nodes are allowed to recursively depend on themselves, so
we need to keep track of which ones we have seen to avoid an
infinite recursion here. Apparently this doesn't usually come
up, but I did see if with tsan enabled.","['src/llvm-final-gc-lowering.cpp', 'src/llvm-late-gc-lowering.cpp']","Phi nodes with recursive dependencies cause infinite recursion during late-gc-lowering, an anomaly that only appears with tsan enabled."
27eee413cdea851655ebf4dec146b4efb2cef879,1611759294,"Revert ""Let tmerge form a Union more often (#27843)"" (#39406)

This reverts commit 6c1824d99769fa79f69eb866ce76df674fd37878.

Fixes #39349. The extra inference precision is nice, but seems to carry too much risk of blowup.","['base/compiler/typelimits.jl', 'test/compiler/inference.jl']","The ""tmerge"" function being too generous in forming Unions is leading to excessive resource use resulting in system instability."
822d589debbee7e3301b66f43bdecc14444f6387,1481691838,"Remove virtualenv from build system (#19552)

* Remove virtualenv from build system

not needed any more now that docs use markdown and Documenter

* Remove checksums too
",['deps/virtualenv.mk'],"The virtualenv in the build system is unnecessary due to usage of markdown and Documenter for docs, causing possible redundancy or conflicts."
00b7ff82382025f2408729440611f97e7c026805,1518577506,"Simplify the definition of StridedArray; remove third type param (#26012)

Previously, the `StridedArray` type-alias had three type parameters -- the usual `T` and `N`, but also an `A` parameter that kinda-sorta restricted the ""parent"" array of some of the view types.  It did not really work, though:

```julia
julia> reshape(codeunits(""foo""),1,3) isa StridedArray{<:Any,<:Any,<:Array}
true
```

This commit removes that third type parameter from the binding. This should otherwise be functionally equivalent.",['base/sysimg.jl'],"The third type parameter 'A' in 'StridedArray' type-alias, intended to restrict the parent array for several view types, does not function as expected."
c3d75daad4e5ab4aa962bd8e66cdf3abbcdb4dea,1507933847,"Add AArch32 and AArch64 CPU name and feature detection code

Also implement internal runtime API.

The detection code avoid using `/proc/cpuinfo` whenever possible and should be much more
reliable than the one in LLVM. It also contains a much larger CPUID table to decode CPU names.

Compare to X86, the feature encoding/decoding is more complex due to the way LLVM takes
attributes. Certain information (arch version) also needs to be moved between name
and feature list.
","['src/features_aarch32.h', 'src/features_aarch64.h', 'src/processor.cpp', 'src/processor.h', 'src/processor_arm.cpp']","Current CPU name and feature detection code for AArch32 and AArch64 is unreliable, overly dependent on `/proc/cpuinfo` and doesn't support a wide range of CPUID tables. Decoding features is complicated due to LLVM's handling of attributes."
3453c27db9494afd8cc6f89b0ca19222fa64ca35,1539499690,"Exception stack runtime cleanup

* Use functions rather than macros for exception stack access
* Use standard type check macro
* More clearly document gc rooting of `jl_current_exception()`
","['src/jlapi.c', 'src/julia.h', 'src/julia_internal.h', 'src/stackwalk.c']","The current implementation for exception stack access relies on macros rather than functions, and lacks clear documentation on garbage collector rooting of `jl_current_exception()`. The standard type check macro is also not being used."
8b287adc1b11081e4ada1afedb3c46a741f21069,1492380912,"fix #21397, `Nullable(Tuple)` method error

This was caused by widening a signature in `jl_is_cacheable_sig`
such that we ended up calling a specialization containing an unknown
static parameter value.

This failed when the specialization was created by inference, since
it correctly stored a typevar as the value of the static parameter.
However when the specialization was created by the method caching
logic it accidentally worked, since the static parameter value
was derived before widening.
","['src/gf.c', 'test/core.jl', 'test/nullable.jl']",Issue with `jl_is_cacheable_sig` signature widening causing `Nullable(Tuple)` method error due to static parameter value being unknown after specialization by inference.
2e49e39070fe6d9add47af7f1da946829a3f6854,1517261970,"Use promote_typejoin() to choose type parameters in Dict constructor

This is consistent with Array, NamedTuple and Tuple (via its eltype method),
and in particular the Dict(::AbstractArray{<:Pair}) constructor.
","['base/dict.jl', 'test/dict.jl']","The type parameters chosen by the Dict constructor are inconsistent with those chosen by Array, NamedTuple, and Tuple, particularly in the case of Dict(::AbstractArray{<:Pair})."
1b70bc8e296f94ad28e77a8c4edff4e8f349f4f1,1499130134,"Symmetric/Hermitian solver with misc RHS (#22561)

* add tests for Symmetric/Hermitian solver with misc right hand sides

* use lufact for Symmetric/Hermitian solver with AbstractMatrix RHS
","['base/linalg/symmetric.jl', 'test/linalg/rowvector.jl', 'test/linalg/symmetric.jl']",Symmetric/Hermitian solver issues when working with various right hand sides (RHS); specific problems occur with AbstractMatrix RHS.
c6708ed374780d78e3aea0bf09bff022b25ec6d7,1519324131,"use `Char` replacement function for `Char`pattern (#25815)

* use `Char` replacement function for `Char`pattern

* incorporated review results

* added hint for replace in NEWS

* Improved NEWS text for replace
","['base/strings/util.jl', 'test/strings/util.jl']",The use of Char pattern for replacement functions is leading to undesired output.
17bfa0f265daf6e83325516ce3ed733e46178f5d,1568325548,"llvm: revert D44485

We should look into why this made gcc generate corrupt binaries,
but for now, we can just revert it.
",['deps/llvm.mk'],The commit D44485 leads to the generation of corrupt binaries when compiled with gcc.
651a727a201e08aa1e2aa8d9007a7088cbbdc997,1533581065,"Work around invalid register errors with 64-bit Windows (#28449)

Adding `-fno-asynchronous-unwind-tables` to the C compiler flags passed
to OpenBLAS works around errors claiming an invalid register for
`.seh_savexmm`. We've been running into this on the 64-bit Windows
buildbots.

See discussion in https://github.com/xianyi/OpenBLAS/issues/1708.",['deps/blas.mk'],64-bit Windows buildbots encounter errors regarding an invalid register for `.seh_savexmm` in OpenBLAS.
b794a5a794362a48aa44866beefa61f8e936366e,1665109214,"SSAIR: remove `effect_free_computed::Bool` option from `NewInstruction`

Now the `flag` flag is typed as `::Union{Nothing,UInt8}` and `flag::Nothing`
indicates it needs to be recomputed on insertion.
","['base/compiler/ssair/inlining.jl', 'base/compiler/ssair/ir.jl']","The `effect_free_computed::Bool` option in `NewInstruction` requires unnecessary recomputation upon insertion due to its `flag` flag having type `::Union{Nothing,UInt8}`."
a204bfdb4c2968ad5184c6e75451b0060851bf3f,1494850793,"Disable two libgit2 tests with libgit2 < 0.26.0 (#21872)

Without our patches libgit2-remote-push-NULL and libgit2-gitconfig-symlink,
which are not yet included in an upstream release, these tests fail.
Disable them so that builds using the system libgit2 can pass the tests.",['test/libgit2.jl'],System libgit2 builds fail tests due to absence of patches libgit2-remote-push-NULL and libgit2-gitconfig-symlink in an upstream release.
b510714dbe4f789b7200066b02601e91fa1bbf9d,1503781158,"inference: use TypedSlot to mark intermediate load types

previously, we widened the load type too soon, discarding potentially valuable information earlier than necessary
","['base/inference.jl', 'test/inference.jl']",Early widening of load type discards potentially valuable information prematurely during inference.
f3f0da9a33aad867c6df075396dafb9d71cb766d,1449709299,"Make sure commands suggested in REPL shell mode are unique

Often binaries are in the env path more than once, but
we obviously only want to suggest them once to the user.
","['base/REPLCompletions.jl', 'test/replcompletions.jl']",The REPL shell mode suggests duplicated commands when binaries exist multiple times in the env path.
5a6ce6a992381f993b53bfa50d15cb5392043d9e,1681326296,"Further relax another piece of the AbstractQ tests

Judging by the other `Matrix(Q)` tests, this should be an approximate
equals.  Testing with Apple Accelerate shows that all errors are on the
order of `1e-16`.
",['stdlib/LinearAlgebra/test/abstractq.jl'],"The AbstractQ tests are too rigid, leading to failures with Apple Accelerate due to errors on the order of `1e-16`."
0d0b853961940cf2fea83a722a36ec5a40fb0f50,1553193545,"Fix llvm-assertion: don't load ghost types

As I understand it, LLVM doesn't support 0-sized structs (ghost types),
which julia makes significant use of. This fixes an incorrect behavior
in the julia compiler accidentally attempting to instantiate such
0-sized structs.

When using a debug build of LLVM, this fails with an assertion error,
but failed silently on standard LLVM.
",['src/intrinsics.cpp'],"The Julia compiler is attempting to instantiate 0-sized structs (ghost types) which LLVM doesn't support, causing an assertion error in debug build of LLVM."
74bd9c86f578ffc2f1ea84c4f0eda1488cb72466,1527023810,"Allow $(HOSTCC) to be set through environment variables (#27208)

In general, we should set hardcoded Makefile variables with `?=` so that the environment can override them without having to do silly things like `make HOSTCC=$HOSTCC`",['Make.inc'],Hardcoded Makefile variables impedes the ability to override them with environment variables leading to workarounds like `make HOSTCC=$HOSTCC`.
7d2491d6ff8f9c07f6b1874cd7735d22744b7e6e,1680017746,"simplify default inner constructor for struct without types (#49137)

Removes the `convert` calls in new for default constructor of structs
defined without any types declared.",['src/julia-syntax.scm'],Default inner constructor for struct without types uses unnecessary 'convert' calls.
5e584fbe871f0c101ca291ea4a04b1a0013de3e3,1565897082,"`alg` keyword for svd and svd! (#31057)

* alg keyword for LinearAlgebra.svd

* SVDAlgorithms -> Algorithms

* default_svd_alg

* refined docstring

Co-Authored-By: Andreas Noack <andreas@noack.dk>

* rename to QRIteration; _svd! dispatch

* compat annotation
","['stdlib/LinearAlgebra/src/LinearAlgebra.jl', 'stdlib/LinearAlgebra/src/bidiag.jl', 'stdlib/LinearAlgebra/src/svd.jl', 'stdlib/LinearAlgebra/src/triangular.jl', 'stdlib/LinearAlgebra/test/svd.jl']","There is no algorithm selection option for singular value decomposition (SVD) in LinearAlgebra library, leading to lack of flexibility in computation."
8985403c0090b0f41bb0c4165ba1666e3611151e,1673412734,"Make LLVM Profiling robust for multithreaded programs (#47778)

* Use stringsteam to atomically write LLVM opt timings

* Add boolean to ensure we don't _only_ write the after block

* Use ios_printf

Co-authored-by: Nathan Daly <NHDaly@gmail.com>",['src/jitlayers.cpp'],"Multithreaded programs exhibit non-atomic writing of LLVM opt timings, causing inconsistencies in profiling data."
495a004bda33e284b0acc612f5ced9ba1eb9a777,1670425307,"Add support for ""package extensions"" to code loading (#47695)

* Add support for ""glue packages"" to code loading

This allows packages to define ""glue packages"" which
are modules that are automatically loaded when
a set of other packages are loaded into the Julia
session.
","['base/loading.jl', 'test/loading.jl', 'test/project/Extensions/ExtDep.jl/src/ExtDep.jl', 'test/project/Extensions/ExtDep2/src/ExtDep2.jl', 'test/project/Extensions/HasDepWithExtensions.jl/src/HasDepWithExtensions.jl', 'test/project/Extensions/HasExtensions.jl/ext/Extension.jl', 'test/project/Extensions/HasExtensions.jl/ext/ExtensionFolder/ExtensionFolder.jl', 'test/project/Extensions/HasExtensions.jl/src/HasExtensions.jl']","Packages unable to define automatic loading of specific ""glue packages"" modules when certain other packages are loaded into the Julia session."
fbd5a72b0a13223c0f67b9d2baa4428e7db199a5,1664985656,"precompile: serialize the full edges graph (#46920)

Previously, we would flatten the edges graph during serialization, to
simplify the deserialization codes, but that now was adding complexity
and confusion and uncertainty to the code paths. Clean that all up, so
that we do not do that. Validation is performed while they are represented
as forward edges, so avoids needing to interact with backedges at all.

This uses the same algorithm now as #46749 for cycle convergence.","['src/dump.c', 'src/gf.c', 'src/julia.h', 'src/julia_internal.h', 'src/opaque_closure.c', 'test/precompile.jl']","Flattening of edges graph during serialization creating complexity, confusion and uncertainty in code paths."
0f52021a66c35fb73e37373970299426426c1c0f,1449979583,"Correct auto-detected CPU type for Raspberry Pi

The Raspberry Pi CPU is misdetected by LLVM, which means that hardware floating point instructions are not disassembled properly. `codegen.cpp` already has a work-around for this problem, explicitly enabling hardware floating point instructions on ARM systems. This patch is the counterpart for disassembling code.
",['src/disasm.cpp'],"LLVM misidentifies Raspberry Pi CPU, causing hardware floating point instructions to not disassemble correctly."
5eece3fc2be2e377c656c1fbdc710ea51a03e02a,1556737635,"apply: unify append_any implementations

Rather than optimize two copies of the same function,
we can just have one version of the function that handles everything.
","['base/compiler/abstractinterpretation.jl', 'base/essentials.jl', 'src/builtins.c', 'src/module.c', 'test/core.jl']","Duplicate function 'append_any' in the codebase, leading to unnecessary code repetition and increased optimization effort."
d474c98667db0bf4832e4eeb7beb0e8cfc8b7481,1603557179,"Inference timing: add a backtrace to head node (#38123)

This allows one to identify the caller of runtime-dispatched methods.
This can help detect inference problems and know where to fix them.

Only ""head"" nodes (entries into type inference) have backtraces.
We avoid doing any processing of the backtrace here, as instruction-pointer
lookup is extremely expensive and we don't even know if the information
will be used.
","['base/compiler/typeinfer.jl', 'test/compiler/inference.jl']","Runtime-dispatched methods lack backtrace to identify the caller, leading to complications in detecting and locating inference problems."
1e69b0afd7772b3c0e6b8754ba3bcfe97cec6d4a,1602669662,"Port the Float16 runtime functions to C.

The Julia runtime wasn't safe wrt. GC operations.
I left the commit in for archival purposes, in case
we want to revisit this again later.
","['base/Base.jl', 'base/runtime/runtime.jl', 'src/intrinsics.cpp', 'test/choosetests.jl', 'test/runtime.jl']","The Julia runtime is not GC-safe when it comes to handling Float16 operations, leading to potential memory leaks or data corruption."
0e19311fe51524efaba570b37abf964bd2a8b295,1497543537,"incremental deserialize: fix backedge insertion

the previous attempt to preserve the backedge map was being too cute
it is more reliable to simply flatten the whole map into the new caller
also corrects the validation that the backedge is not already invalid

make sure internal backedges are only internal:
this preserves the expected invariant for jl_insert_backedges/jl_method_instance_delete
that any backedges encountered there are purely internal / new

enable GC slightly sooner when loading precompiled modules (part of #20671)
reverts 11a984bb301e14d6fbd572cb63eea494cf6ab733 - but who needed that anyways
","['src/array.c', 'src/dump.c', 'src/gf.c', 'src/julia.h', 'src/julia_internal.h', 'test/compile.jl']",Backedge map preservation mechanism is flawed causing unreliable and incorrect representations. The backedge validation becomes compromised and there is delayed GC activation when loading precompiled modules.
05cfe245ce27ffa27669a3cac419e4b0991f8cb1,1665784477,"Fix various bugs in maybe-undef handling (#47167)

We weren't accounting for the possiblity that a slot could be undef
in our effect handling and the recently introduced shortcut in the
type lifting pass wasn't quite correct. Ironically, the test case
I have here compiles correctly on master, because the compiler
miscompiles itself (due to this issue) to always make the `@isdefined(last_val)`
check `false` in this test case. We can still look at the IR though,
which this does.

Fixes #47127","['base/compiler/abstractinterpretation.jl', 'base/compiler/ssair/passes.jl', 'test/compiler/irpasses.jl']","The compiler is not considering the possibility of a slot being undefined in effect handling, resulting in incorrect type lifting pass and self-miscompilation."
14119e0e2c1b6513b0e7e363a0d7e8dd49b63462,1695060043,"factor out common code for `Xoshiro` and `TaskLocalRNG` (#51347)

This makes more use of `setstate!`, and adds `getstate(rng)` which
returns the 5-tuple `(s0, s1, s2, s3, s4)`.

This is essentially ""NFC"", but it enables the useless
`copy!(TaskLocalRNG(), TaskLocalRNG())`.","['stdlib/Random/src/Xoshiro.jl', 'stdlib/Random/src/XoshiroSimd.jl']","'Redundant code existing within both `Xoshiro` and `TaskLocalRNG` functions, requiring optimization for efficiency and clarity.'"
bc7e002d13e65d8a5d6dd972adb89437d1836507,1465061365,"create an extra slot for arguments that get assigned

It simplifies later analysis to assume that arguments are not overwritten.
This could simplify codegen a bit more in the future, but for now we are
generating stack slots for arguments anyway, for debug info.
","['base/inference.jl', 'src/codegen.cpp', 'src/julia-syntax.scm', 'src/julia.h']",Arguments being overwritten complicates further analysis and may hinder future codegen simplification.
f9e1c6cb5963a26ccbd8fdf4603fdb817aebd263,1676402116,"define tfuncs for applicable and hasmethod

Since these tfuncs are pretty simple for inference, but hard for anyone
else, we define these tfuncs here rather than letting package authors
re-implement it poorly to create duplicates like static_hasmethod.

Fix #39613 while we are here
","['base/Base.jl', 'base/boot.jl', 'base/compiler/abstractinterpretation.jl', 'base/compiler/tfuncs.jl', 'base/methodshow.jl', 'base/reflection.jl', 'test/compiler/inference.jl']",The issue is inferring `applicable` and `hasmethod` is difficult and can result in duplication and poor implementation when redefined by package authors.
7cbea7348fba27541b8df7f1bb13e7ec807d6c0f,1663131464,"Test: fixup issues detected by JET (#46730)

- removes stale definition of `test_approx_eq` (this seems to have been
  reserved for the 0.7 compat, but is currently broken as `full` is
  really not defined anymore)
- fixes invalid construction of `Fail` object
- makes `LogTestFailure` more type stable struct
- improves type stabilities slightly","['stdlib/Test/src/Test.jl', 'stdlib/Test/src/logging.jl']","`test_approx_eq` contains a stale definition, `Fail` object construction is invalid, and `LogTestFailure` has instabilities in its struct. Some functions also exhibit slight type instability."
d4119a2ac4216760379953e92c41c4983641afbf,1610728509,"Fix jl_new_task to avoid allocating stack twice

If the user requested dedicated stack of a certain size, then `jl_new_task`
immediately allocates the stack by invoking `jl_alloc_fiber`.

However, it also later nulls `t->stkbuf`. As a result, `ctx_switch` invokes
`jl_alloc_fiber` *again* to allocate another stack.
",['src/task.c'],"The `jl_new_task` function is allocating a stack twice when a user requests for a dedicated stack of a specific size, leading to inflated memory usage."
d4acead9130f97f0135bee604d94e1f67dabc70f,1651986140,"Avoid race condition in cleaning up cache files (#45214)

If multiple processes attempt to clean up cache files at the same time, a race condition can result, e.g.
https://buildkite.com/clima/climaatmos-ci/builds/812#6a961e99-e2a1-488b-a116-2a45dee26d38/102-104",['base/loading.jl'],"Multiple processes simultaneously attempting to clean up cache files can lead to a race condition, causing cleanup to fail."
c136b7e787aee1dffefcea6afce51d0bdd6d5dd1,1677364293,"enable re-using external code in pkgimages (#48723)

* enable using external code in pkgimages

This was unintentionally disabled (and incomplete) in the original PR
for pkgimages.

Co-authored-by: Valentin Churavy <v.churavy@gmail.com>","['base/linking.jl', 'src/aotcompile.cpp', 'src/codegen.cpp', 'src/jitlayers.h', 'src/julia.h', 'src/staticdata.c']","External code was unintentionally disabled and could not be reused in pkgimages, creating limitations for expansion and adaptation."
a17b1384469c7e197298c261b5f68ebde6ff16d5,1487869118,"Expand docs for mod (#20633)

* Expand docs for mod

Address #14826.

* simplify doc text

* Another rewrite

* more changes

* typo

* some more

* missing the
",['base/int.jl'],"The documentation for the mod module is insufficient, lacking detail and needs correction for typos and missing information."
d9bb51a45448ea033b9da0f532161af37b78d639,1509122860,"inference: improve edges

previously bestguess might be Conditional, which was very bad
also, I think there was a missing call to update_valid_age!
",['base/inference.jl'],"Missing call to update_valid_age is causing inference issues. Additionally, bestguess returning Conditional is leading to inaccurate results."
6bb57015dd8e74dc400bc786444a5649a61c9609,1528738606,"fix Pair method definition specialization

With `where {T}`, we will infer and cache this for `Type{T}`,
even though it's run for a `KindType`. Using `typeof` instead of an sparam
ensures that we don't need to fill the cache with those unused specializations.
",['base/pair.jl'],`Pair` method definition specialization is not accurately inferring types. Unnecessary caching occurs for `Type{T}` when run for a `KindType`.
c6c6842604d9f91983f16c7f31b51b563f108bba,1456925886,"Merge pull request #15290 from JuliaLang/sb/isapprox

Set `isapprox` default relative error to be the larger of the default relative errors of each type.","['base/floatfuncs.jl', 'test/math.jl', 'test/numbers.jl']","The `isapprox` function defaults to the smaller relative error between two types, leading to potentially inaccurate comparisons."
b0822b848952960ba9cfddef02bce35757c9674f,1667708696,"Profile: save a heap snapshot after a profile peek via SIGUSR1/SIGINFO (via opt-in) (#47134)

optionally save a heap snapshot after a profile peek via SIGUSR1/SIGINFO",['stdlib/Profile/src/Profile.jl'],No functionality currently exists to save a heap snapshot after a profile peek triggered by SIGUSR1/SIGINFO signals.
2ed3ec445ccd17bfb456bced59243fb3f8886b81,1641951513,"Add missing colour `:light_white` (#43744)

Julia currently defines 15 of the 16 ""basic"" ANSI colours, omitting ""bright white"" (see https://en.wikipedia.org/wiki/ANSI_escape_code). This adds ""bright white"", which Julia would call ""light white"".",['base/util.jl'],"Julia is missing the definition for the ""bright white"" ANSI color, termed as ""light white"" in the language's context."
696cb1ba7bf03b7c275a870e5f4229c986e1383f,1626230666,"update expression size rules (#41560)

- allow any-length blocks
- other expressions seem to need a slightly lower limit due to stack overflow in calls","['src/ast.c', 'test/syntax.jl']",Expression size rules currently limit block lengths and may lead to stack overflow in calls due to unspecified upper limit.
2ba3fbbd4ffb03eda89c942ce9bc422e265e3c86,1528667251,"BLAS: avoid calling dlclose (#27509)

We do not want libblas to get unloaded again here,
but we call this early enough, this is potentially
the only reference to it. That may lead to race
conditions where we try to teardown the library
while it is trying to spawn threads
(spawning threads is not generally permitted on Windows,
but is down anyways by libopenblas.dll).

So instead, we just cache our single reference to it,
and thereby avoid the need to call `dlclose`
to maintain the proper refcount.",['stdlib/LinearAlgebra/src/blas.jl'],"Calling dlclose on libblas may lead to race conditions during thread spawning, as this could potentially be its only reference and could be prematurely terminated."
c26cfa770b416eb0c12cc6933578e2e558e799f9,1457754314,"Create documentation for Dates.format

- Added documentation for Dates.format
- Added documentation for date accessors
- Eliminated cross-referencing similar to: ""see above""
- Sync date accessor docstrings with manual
- Fixed signatures of certain Period constructors. Hour, Minute, Second
  and Millisecond would always fail when a Date was given as an argument
","['base/dates/accessors.jl', 'base/dates/io.jl', 'base/dates/periods.jl', 'base/docs/helpdb/Dates.jl']","'Dates.format lacks documentation and date accessors are not in sync with manual. Additionally, Period constructors fail when Date is given as an argument.'"
13bcdf124f7b8baa7fca517ec015ec4b6eb34faa,1629917055,"simplify and improve type intersection algorithm a bit

This removes some code and makes a class of results more conservative,
fixing some potential cases of unsoundness.
","['src/subtype.c', 'test/subtype.jl']",The current type intersection algorithm is potentially unsound and its complexity may be leading to incorrect results.
01a4a30a680a21d41151dd7066f0dd6b8b890045,1661992219,"Avoid setting `offset` when we intersect `Vararg`'s eltype.

`var->offset` is used to recode the length difference of 2 `Vararg`s.
But `Vararg`'s length might also be used in the type field, e.g. `Tuple{Vararg{Val{N}, N}} where {N}`, where
we should ignore `offset` when we intersect `Val{N}`.

This commit move the offset setting/erasing into `intersect_varargs`.
",['src/subtype.c'],"When intersecting `Vararg`'s eltype, `offset` setting causes incorrect length difference recoding due to `Vararg`'s length being used in the type field."
734cafabbfb1040aac7a92682ae78e8a6db699cf,1688132339,"Remove `new BitCastInst` unless it's in a typed pointer context (#50338)

* Add debug_level module flag
* Make ptls use IRBuilder
* Only use 'new BitCastInst' when we know we are not in opaque pointer mode","['src/codegen.cpp', 'src/llvm-alloc-opt.cpp', 'src/llvm-final-gc-lowering.cpp', 'src/llvm-late-gc-lowering.cpp', 'src/llvm-propagate-addrspaces.cpp', 'src/llvm-ptls.cpp']","Usage of 'new BitCastInst' when in opaque pointer mode leads to malfunction, it should only be used in a typed pointer context."
0d229f8eac8b62b803f494d8b4f8950489d3ce57,1607968486,"improve various minor inferrabilities (#38832)

they will help inference avoid entering into frames with `Nothing` args,
and may improve codegen even a bit

use `AbstractString` for rubustness against future changes of `RegexMatch`","['base/path.jl', 'base/set.jl', 'base/strings/io.jl', 'base/strings/util.jl']","Inference inadvertently enters frames with `Nothing` arguments, potentially reducing codegen robustness. Future `RegexMatch` changes risk compromising system robustness due to lack of `AbstractString`."
43638959a45fca0cb86f9c334a508f14ffe712ce,1694240880,"Unify flags_for_effects handling (#51238)

There was two places where we were turning Effects into flags, one in
the optimizer, one in inference. Unify these two both use the same
function, but we need to refactor a bit to make sure all the effects get
passed to the correct place.

---------

Co-authored-by: Shuhei Kadowaki <aviatesk@gmail.com>","['base/compiler/abstractinterpretation.jl', 'base/compiler/effects.jl', 'base/compiler/inferencestate.jl', 'base/compiler/optimize.jl', 'base/compiler/ssair/passes.jl', 'base/compiler/ssair/verify.jl', 'test/compiler/effects.jl']","Two separate sections of the code, optimizer and inference, have redundant conversions of Effects into flags, leading to potential inconsistencies and inefficient code execution."
4441e3a48b0ae53cb5e059864b409c8a2334fe33,1597436148,"yield: reduce DEFAULT_THREAD_SLEEP_THRESHOLD timeout (#37016)

This defines how much time we waste before letting another process run.
Until we have performance measurements, this should probably be small.

Closes #36952",['src/options.h'],"Current DEFAULT_THREAD_SLEEP_THRESHOLD timeout may be leading to inefficient thread scheduling, potentially wasting time before allowing other processes to run."
5d2fcdb551b530d018e31e63606e0bb1fa33d292,1609077783,"keys(::Generator) pass through (#34678)

* keys(::Generator) pass-through

Let keys pass through to allow lightweigth/lazy find* and arg* functions

* Update test/functional.jl

Co-authored-by: Matt Bauman <mbauman@gmail.com>

Co-authored-by: Matt Bauman <mbauman@gmail.com>
Co-authored-by: Simeon Schaub <simeondavidschaub99@gmail.com>","['base/generator.jl', 'test/functional.jl']","The keys function does not pass through when used with a Generator, making lightweight or lazy find and arg functions impossible."
4a0798478c6dc9bbe3ba14f996060448efd8bcb1,1481278316,"Fix cmp for AbstractStrings where indexing is not the same
The original code (from 2010) incorrectly used the index for string a (i) when calling done for string b.
This means that when two different types of abstract strings are compared, if their indexing
is not compatible (for example, where one is indexing by character, and the other by code unit),
then you can get incorrect results, ranging from simply returning that two strings are the equal
when they are not, or getting a BoundsError exception.
This can happen even with common strings with just words with accents.
","['base/strings/basic.jl', 'test/strings/basic.jl']","Comparing two different types of abstract strings with incompatible indexing can lead to incorrect results, or even a BoundsError exception. This issue specifically affects words with accents."
1182003f957157045de0f7f681d366885839c6ff,1692631812,"recursive types: fix implementation of references_name (#50963)

To do the old version correctly, we would need to carefully track
whether we end up using that parameter as a parameter of any apply_type
call in the fieldtype computation of any of the fields, recursively.
Since any of those might cause recursion in the constructor graph,
resulting in trying to layout some concrete type before we have finished
computing the rest of the fieldtypes. That seems unnecessarily difficult
to do well, so instead we go back to just doing the trivial cases.","['src/builtins.c', 'test/core.jl']","The implementation of references_name is causing recursion in the constructor graph when used as a parameter in any apply_type call, leading to premature layout of concrete types before completion of fieldtype computations."
d2cac973136bf024bb9041e216e7126a4d635bfb,1551228164,"Print timings to stderr in stead of stdout, when using ENABLE_TIMINGS. (#31180)

This makes it possible to use a version of julia compiled with ENABLE_TIMINGS
in projects that use e.g. CxxWrap, which depend on some output that is printed
to stdout. Also, it is better not to use stdout with debug/info messages.",['src/timing.c'],"ENABLE_TIMINGS feature prints timings to stdout, causing issues in projects like CxxWrap that depend on some output directed to stdout."
91d8e38cda0ce9c27dfe0bb135666854d5fd0d5d,1663759617,"inference: remove allocation hot-spot exposed by Profile.Allocs examination (#46843)

This Union{Pair,Nothing} accounted for several % of total inference
allocations, and might stack-overflow on very large numbers of basic
blocks with very unusual structures.","['base/compiler/ssair/ir.jl', 'stdlib/Profile/src/Profile.jl']","Inferring large numbers of basic blocks with unusual structures may cause stack-overflow and results in a non-trivial percentage of total inference allocations due to Union{Pair,Nothing}."
c22b1c1393dccf3d2ded4d3ca30899955bb15264,1689509145,"typeintersect: also record chained `innervars` (#50551)

On master, we only record direct `innervars` (`T` -> `S<:Val{T}`).
And chained `innervars` might be ignored (`T` -> `S<:Val{V<:T}`.

Before https://github.com/JuliaLang/julia/pull/48228, those chained
`innervars` would have been wrapped into an `UnionAll`, thus we just
need to check outer vars' lb/ub.

Test added.
~Note: this only fix
https://github.com/JuliaLang/julia/issues/50456#issuecomment-1632611284,
the other MWE still get stackoverflow.~
","['src/subtype.c', 'test/subtype.jl']","The type interception function only records direct `innervars`, failing to recognize chained `innervars`, causing ignored variables and possibly leading to stack overflow issues."
7bd700f0faf0f2199e29862caec7680bed36f6a6,1561574680,"lowering,new: improve implementation robustness (#32404)

- move implementation of splatnew into lowering instead of dispatch (given the current definition of splatnew)
- use field indexes with fieldtype instead of names
- use fieldtype in most cases, instead of copying expression tree
- explicit syntax error for too many type parameters on new (instead of deferring to the runtime apply_type error)","['base/essentials.jl', 'src/julia-syntax.scm', 'test/core.jl', 'test/syntax.jl']","""Splatnew implementation in dispatch causing robustness issues with field indexes and expression tree copying. Syntax error handling for 'new' with too many type parameters not explicit, deferred to runtime instead."""
87989367f49ba2a242414e6e12ba8ad8d35ee298,1508782704,"Fix matrix trig functions for matrices of integers (#24180)

* Convert integers to float in matrix trig functions

* Add tests

* Dots!
","['base/linalg/dense.jl', 'test/linalg/dense.jl']",The matrix trigonometric functions are failing when the matrices consist of integers.
1d782658eeaaed4b52e9139a1956557e40ce8f8c,1655673886,"Fix libblastrampoline full source build to install into the right location (#45746)

* Bump LBT to 5.1.1
* Use DESTDIR to install into
* Update LBT checksums","['deps/blastrampoline.mk', 'deps/libsuitesparse.mk']","The full source build of libblastrampoline is not being installed into the correct location, leading to potential path errors."
fa235cc83ad13c301e1242ed1654429beaa5cb53,1567614090,"Fix which behavior when passed an empty string (#33150)

* Fix behavior of Sys.which when passed an empty String argument

* Added test to check for fixed Sys.which behavior with empty string input

* Added test to check that Sys.which returns nothing when passed a blank
string

* Ensure that Sys.which returns a regular file and never a directory

* Moved new Sys.which tests into test/spawn.jl alongside the existing ones

* Remove new which tests from test/sysinfo.jl (they've moved to
test/spawn.jl)
","['base/sysinfo.jl', 'test/spawn.jl']",'Sys.which' function exhibits incorrect behavior and returns irregular output when passed an empty string as an argument.
43c4dcafede6e3ede95c7ef544d98da642e748e6,1469399950,"Print operator `Binding`s correctly

This prints `Binding`s for operators with a `:` char so that they
are always valid Julia syntax, i.e.

    string(Binding(Base, :+)) == ""Base.:+""

rather than

    string(Binding(Base, :+)) == ""Base.+""
","['base/docs/bindings.jl', 'test/docs.jl']",Printing `Binding`s for operators with a `:` character results in an invalid Julia syntax.
ebbf85367e727c6c5cff84a49ce79e62c5634507,1478902701,"fix potential race-y condition where we might wait for an event we already recieved

turns out we we also missing a writable notification due to this bug:
the corresponding test has been corrected.
","['base/poll.jl', 'test/pollfd.jl']","Race condition potential due to premature event waiting, causing noticeable omission of writable notifications in related test."
fff80dbdae8e27fc3e303ccc8f41b4c2b2d9bacf,1556114726,"Define a 'julia.gc_alloc_bytes' intrinsic

Delay GC allocation lowering into the final GC lowering pass

Fix a broken LLVM pass test

Define GC alloc lowering pass tests

Cast 'julia.gc_alloc_obj' argument

Add missing annotation to test


Relax final GC lowering pass test
","['src/llvm-final-gc-lowering.cpp', 'src/llvm-late-gc-lowering.cpp', 'src/llvm-pass-helpers.cpp', 'src/llvm-pass-helpers.h', 'test/llvmpasses/alloc-opt.jl', 'test/llvmpasses/final-lower-gc.ll', 'test/llvmpasses/late-lower-gc.ll']","Delay in GC allocation lowering leads to pass tests breaking, and missing annotations in 'julia.gc_alloc_obj' argument in the final GC lowering pass."
79b08ca5db3711a8e32a8e7cbdeb51502c064c20,1456952746,"prevent an item in the processing state from being recursively worked on

the interaction here is rather complex, but recursing on a frame already in typeinf_frame
causes the state upon return to that function to be a bit convoluted.
detecting frame.inferred at that point and aborting was also correct,
but requires a bit of code duplication at each abstract_interpret call
to check and return quickly.

making the processing state part of inworkq rather than stuck' should be a bit more robust
against future edits to this code
",['base/inference.jl'],"Recursive operation on a frame already in the typeinf_frame leads to complex and convoluted return states, causing redundant checks at each abstract_interpret call."
c8b59049919008cc9dcec298ce7722e5ed2ceca8,1632951627,"Implement `rem(float, float, RoundNearest)` in Julia (#42380)

One of the few remaining uses of openlibm is implementing `rem` with
`RoundNearest` for `Float32` and `Float64`. This commit translates the
msun libm implementations of `__ieee754_remainder` and
`___ieee754_remainderf` to Julia to avoid relying on openlibm.","['base/math.jl', 'test/numbers.jl']","`rem` function with `RoundNearest` for `Float32` and `Float64` is currently dependent on openlibm, raising concerns about reducing external dependencies."
0974dfa1bd2779cdd07283359236c5aa4b8536da,1629746941,"Validate CodeInstances with no external edges (#41961)

In #38983 and #41872, it was discovered that only CodeInstances with
external backedges get validated after deserialization.
This adds a ""second chance"" for each CodeInstance: it validates any that
have neither been validated nor invalidated by the end of deserialization.

Closes #41872
","['src/dump.c', 'test/precompile.jl']","CodeInstances without external backedges are not getting validated after deserialization, leading to potential undefined behavior in the code."
b4df8a26b431a1ffb9b8a62f3a538aa2d044eea3,1515690409," Build dependent packages and support varargs in API.build (#91)

* build dependent packages also

* support varags in build api

* build: use deps_graph instead of resolve_version!

* remove stray new line

* revert changes on resolve_versions!

* remove dependency on deps_graph
",['src/API.jl'],"Dependent packages aren't being built when required and the build API lacks varargs support, leading to build inconsistency and limitations in function arguments."
c9c1d3e56c958d8d6985261705731c733bed6bdd,1615536238,"make broadcasting into getproperty extensible (#39473)

* make broadcasting into getproperty extensible

Don't know if `dotgetproperty` is a good name for this, since as discussed in #36741, the way this works is a bit different from `dotview`. Right now, `dotproperty` returns a function which is used instead of `getproperty`, but not sure if that is a bit strange and we should just make it behave like `dotview` instead.

fixes #36741

* make dotgetproperty call getproperty directly

Co-authored-by: Jameson Nash <vtjnash@gmail.com>","['base/Base.jl', 'src/julia-syntax.scm', 'test/syntax.jl']","Current broadcasting into getproperty isn't extensible, causing functional limitations and potential misbehavior when compared with `dotview`."
f593456f886c93eefd132fbe6d97ebb5475a7e3c,1572464125,"Libdl: return correct error code

Previously, we were returning the error code from `stat` instead (success) in some cases.
Also make it unicode text, while we're here.

Fix #15117
",['src/dlload.c'],"`Libdl` returns success error code from `stat` inaccurately in some instances, and it's not compatible with unicode text."
ec4444acaa05544d632a64e43e57d9837173ea11,1489319291,"Fix handling of `allow_bottom_tparams` in `isambiguous`

The former version failed to detect that certain type parameters were Bottom (for example, in the case in the added docstring for `isambiguous`).
","['base/reflection.jl', 'base/test.jl', 'test/ambiguous.jl']",`isambiguous` function fails to correctly detect type parameters that should be classified as Bottom.
6d70d2afcde7f5ed33b0f2f4dac3458c5c94494d,1684532987,"Attempting to add debug logs for ENQUEUING an invalid object (#49741)

* Attempting to add debug logs for ENQUEUING an invalid object

Check for the object's validity _before enqueuing_
so that we can hopefully give a more useful error message (which
object's pointer was corrupted).

---------

Co-authored-by: Diogo Netto <diogonetto.dcn@gmail.com>",['src/gc.c'],"When enqueuing an object, no check for object validity is performed leading to possible enqueue of corrupted objects."
5e8e0a51908ae3050890e870c69aa1fdbb2e3761,1661758071,"Fix union!(s::BitSet, r::AbstractUnitRange{<:Integer}) when two ranges do not overlap. (#45578)

* Fix union!(s::BitSet, r::AbstractUnitRange{<:Integer}) when two ranges do not overlap.
Resizing of BitSet should be filled with 0 by default.","['base/bitset.jl', 'test/bitset.jl']",The union operation on a BitSet and an AbstractUnitRange of Integer fails when the two ranges do not overlap. Incorrect BitSet resizing behavior is suspected.
bb52621dfad3acba5168688ceccb74841fb41483,1624502877,"inference: Add some basic inference for PhiNode (#41115)

PhiNode isn't really supported in lowered IR, but it is convenient
to be able to emit it, particularly for code that is designed to
perform transformations both on typed and on lowered IR (such as
Diffractor). Moreover, we do actually supported phinodes in untyped
IR both in the interpreter and in the compiler. At the moment,
inference assumes that PhiNodes get treated as embedded constants,
which is just not what the actual implementation does. At the very
least, it should just leave PhiNodes alone in case they accidentally
end up in lowered IR (rather than causing crashes), but we might
as well give them some basic support.","['base/compiler/abstractinterpretation.jl', 'base/compiler/optimize.jl', 'base/compiler/typeinfer.jl', 'base/compiler/utilities.jl', 'src/codegen.cpp', 'test/compiler/inference.jl']","PhiNodes are not properly supported in lowered IR, sometimes causing crashes and they're not treated consistently with their implementation in untyped IR in the interpreter and compiler."
5d3cbf79ae14056b88b707dcb40266583de08b14,1500458258,"Fix type instability in _in_range

n would be an Int when step(r) == 0, but possibly of another type when
step(r) != 0.
",['base/range.jl'],"When `step(r) == 0`, the output `n` is an Int type, but for `step(r) != 0`, `n` can be a type other than Int, causing type instability in `_in_range`."
8e7034e5c96d5bb9ffb9d1780f15d25338802ca7,1524068487,"[NewOptimizer] Fix _apply elision (#26821)

The old optimizer had an extra loop outside the inlining pass that would
turn _apply's in to regular calls. When I wrote the new inliner we discussed
that this wasn't actually necessary because we could just keep track of
this information in the inliner (as we do for invoke). However, that of
course also means that if we can't turn something into an :invoke, we
should still at least turn it into a regular call. Do that.",['base/compiler/ssair/inlining2.jl'],"New inliner fails to convert _apply's into regular calls when it's unable to turn something into an :invoke, which deviates from the expected optimization behavior."
fa925a87dd7527c12a63311dabf414c9629379fc,1506003983,"Fix support of gc_preserve intrinsics in the allocation optimization pass

* Be more conservative about identifying LLVM intrinsics.
  Only handle ones that has an associated intrinsic ID.
* Handle gc_preserve intrinsic similar to operand bundle.
","['src/llvm-alloc-opt.cpp', 'src/llvm-late-gc-lowering.cpp', 'test/codegen.jl', 'test/llvmpasses/alloc-opt.jl']","Allocation optimization pass exhibits faulty behavior with `gc_preserve` intrinsics, caused by improper identification of LLVM intrinsics."
9a239ec893ff66c9161b8be0b9d18a46957f622a,1518619806,"Change indexin() to return first rather than last matching index (#25998)

That's more natural, and consistent with MATLAB's ismember() and R's match().","['base/array.jl', 'test/arrayops.jl']","The function indexin() currently returns the last matching index not the first, causing inconsistency with MATLAB's ismember() and R's match()."
ebc63b9a562f4b7440a3c1f7d64b9050e47d50dc,1602536572,"Report per-MethodInstance inference timings during a single inference call, via SnoopCompile (#37749)

This allows us to measure the _nested_ per-method-instance inference
timings, which allows us to produce both a profile view over the
inference data, as well as compute _exclusive_ timings
per-method-instance.
","['base/compiler/typeinfer.jl', 'test/compiler/inference.jl']","Lack of mechanism in place to measure the nested per-method-instance inference timings, preventing profile view over inference data and computation of exclusive timings per-method-instance."
b2b35e9601c8911eae1b32d825c6365568ff459c,1555432514,"fix #31663, long inference time printing large tree structure (#31680)

- avoid exponential search in `is_derived_type` when parameters are
  used as field types
- avoid inferring `show_default`
- improve a fast path in subtyping","['base/compiler/typelimits.jl', 'base/essentials.jl', 'base/show.jl', 'src/subtype.c', 'test/compiler/inference.jl']",Printing large tree structures results in long inference time due to exponential search in `is_derived_type` and inadequate handling of `show_default` inferencing.
0d67f0d0a845239d5837fdab1a5c7f3511399aa8,1613426627,"Improve countlines docstring (#39677)

The last result was 0, but that's just because the IO has already moved
the stream pointer to EOF, not because of anything to do with the `eol`
keyword argument.",['base/io.jl'],"The docstring for countlines is misleading, it suggests that 'eol' argument affects the result when the stream pointer reaches EOF."
3503a59666b4cca443e926c8c5974a1817f1180e,1469220342,"Reverse order of keydefpath checks (#17566)

If keydefpath is nothing, we can't call `isempty` on it, so we should check for that first.

Fixes #17553",['base/libgit2/callbacks.jl'],Calling `isempty` on `keydefpath` leads to an error when `keydefpath` is set to nothing.
0e8c0ea26a093c0887a6274036e364493a094a30,1683198909,"Base.Threads: copy `__source__` LineInfo into closure for @spawn/@async

This is useful for profilers such as Tracy which need to give a distinguishing
name to different tasks. Another useful thing would be to accept an optional
`name` parameter in these macros, but that's left for future work.
","['base/expr.jl', 'base/task.jl', 'base/threadingconstructs.jl', 'src/task.c']",Profiling tools like Tracy don't accurately distinguish between tasks because `__source__` LineInfo isn't copied into closures for @spawn/@async.
e1c05c511bebc15ee2aa68e1bf99b68f64848e90,1456694401,"fix codegen jlgensym type error after inlining getfield loses type information

also make a few method signatures in base a little more accurately descriptive
","['base/essentials.jl', 'base/replutil.jl', 'src/codegen.cpp']",Inlining `getfield` in codegen results in loss of type information causing `jlgensym` to throw a type error.
b76fdcc3de4183a4dab019aacd335a5f944542ea,1673045440,"ir: Respect GlobalRef lattice elements (#48151)

Currently IncrementalCompact recomputes the type of globals on every iteration.
There is not much reason to do this - the type of a global cannot change.
In addition, external abstract interpreters may want to inject custom, more
precise lattice elements for globals, which should be respected.
Overall, this should be both faster and better for external absint,
though of course GlobalRefs now need to be inserted into the IR with the
correct type. If there's any callsites that don't do that, those would
have to be updated.","['base/compiler/ssair/ir.jl', 'base/compiler/ssair/irinterp.jl']","The type of globals is unnecessarily recomputed in every iteration of IncrementalCompact, ignoring potentially more precise custom lattice elements for globals introduced by external abstract interpreters."
0d4de5a4b3ca84cf38732f4083fa75d68444971a,1456172173,"julia-mode: Improve paren indent perf

Replace julia-paren-indent with a version that uses the higher level
function backward-up-list to find any previous opening parentheses. This
function automatically skips balanced expressions like strings, as well
as comments.

On some test files the time to indent falls by more than 75% with this
change, even after increasing the threshold for paren lookback to 10k.
Note the threshold is removed in this version.
",['contrib/julia-mode.el'],"julia-mode's current paren-indent function is inefficient, causing a high indentation time due to its inability to skip balanced expressions and comments."
524bca41b7739d6c75afeb0d3fae7accf8f8fbc4,1639173684,"optimizer: remove dead `OptimizationState` handling in `inlining_policy` (#43378)

`NativeInterpreter` never hits this case, and external interpreters can
always define their own `inlining_policy` in order to use whichever
information they are caching.",['base/compiler/optimize.jl'],"The `inlining_policy` in the optimizer currently handles `OptimizationState`, even though `NativeInterpreter` never encounters this situation - an inefficiency in the system."
f1a39b629c068700c72035c5b17e2ed3154a19c1,1608399987,"Define `jl_n_threads` in only `libjulia`

Without this, it was defined in both `libjulia` and
`libjulia-internal`, causing `libjulia-internal`'s updates to not be
visible.
","['src/julia.h', 'src/threading.c']",The variable `jl_n_threads` is defined in both `libjulia` and `libjulia-internal` causing visibility issues for updates made by `libjulia-internal`.
78afb6a2b01302777e2b07b4437950c7477488e0,1490735879,"Correct notation used in the rem/mod docstring (#21198)

* Correct notation used in rem/mod docstring
* Fix build warning about overwritten docstring for rem",['base/int.jl'],"Misleading notation in the docstring for rem/mod function is causing confusion regarding its usage; additionally, build warnings are being generated due to an overwritten docstring for rem."
153e66949996e622e1010156ee7b88130ba301b2,1691505649,"Call all-underscore identifiers write-only (#50830)

Followup to #45964, #46506, and
https://discourse.julialang.org/t/class-of-variables/83892.

The error
```
julia> println(_)
ERROR: syntax: all-underscore identifier used as rvalue
```
is hard to interpret if you are not familiar with the term `rvalue`,
which is not used in any other context in Julia, and as discussed
previously the use here is not clearly matching the wikipedia page
referred to in the documentation either.

This PR does away with the term `rvalue` by changing the error to
```
ERROR: syntax: all-underscore identifiers are write-only and their values cannot be used in expressions
```
and updates the documentation accordingly.","['src/jlfrontend.scm', 'src/julia-syntax.scm', 'src/toplevel.c']","The error message relating to the usage of all-underscore identifiers as 'rvalue' in Julia, is unclear and confusing especially for those not familiar with the term 'rvalue'."
762801cb537657f169c993edbef61751e3a51f7f,1692374956,"fix missing methods in ml_matches results (#50962)

This was resulting in it being too aggressive at filtering out
""duplicate"" results, resulting in possible inference mistakes or missing
guardsig entries.

Fixes:
https://github.com/JuliaLang/julia/pull/50722#issuecomment-1658995284","['src/gf.c', 'test/ambiguous.jl']","Aggressive filtering of ""duplicate"" results in ml_matches is causing possible inference mistakes and missing guardsig entries."
f893c064b09a51dafa09763acbe2c0fbb8f0d4c8,1456357031,"Replace the LGPL-licensed SparseMatrixCSC fkeep! method and children tril!, triu!, droptol!, and dropzeros[!] with MIT-licensed versions. See #13001 and #14631. Also add a test for dropzeros!.
","['base/sparse/csparse.jl', 'base/sparse/sparsematrix.jl', 'test/sparsedir/sparse.jl']",SparseMatrixCSC fkeep! method and its derivatives are LGPL-licensed causing licensing issues. Lack of tests for dropzeros! operation.
1bc58da13fb3b59844a5c7dea5c7939e001e0d00,1599601909,"Fix unnecessary use of closure boxing in type inference (#37411)

This should fix all appearance of `Core.Box` in the `Core` module with the exception of
`simple_walk_constraint` where it is actually necessary.

Most of the cases are the normal readonly closures fixed by adding a `let` around it
or moving assignments.
There are also two cases of recursive closures fixed by moving the recursion
out of the closure.","['base/compiler/abstractinterpretation.jl', 'base/compiler/ssair/ir.jl', 'base/compiler/ssair/passes.jl', 'base/compiler/tfuncs.jl', 'base/compiler/validation.jl']",Unnecessary usage of closure boxing in type inference leads to multiple appearances of 'Core.Box' in 'Core' module causing issues in code optimization.
6341fa5d4f7963b5b6eefe768192821e0d32cbb2,1630128790,"inference: add missing `LimitedAccuracy` handlings (#42034)

I found we need to handle `LimitedAccuracy` (i.e. collect its
limitations into the current frame and unwrap its type) whenever
we do inter-procedural inference. Especially, we need to handle
it where we use `abstract_call_method` and `abstract_call_method_with_const_args`.
Otherwise we may encounter nested `LimitedAccuracy`, which is really not
expected. So this commit also adds the assertion that checks we never
form nested `LimitedAccuracy`.

I encountered errors due to this when analyzing JET itself by JET,
probably because its codebase makes heavy use of `invoke`.
I couldn't pack them up as simple test cases though.","['base/compiler/abstractinterpretation.jl', 'base/compiler/typelattice.jl']","Inter-procedural inference is not properly handling `LimitedAccuracy`, leading to unexpected nested `LimitedAccuracy`. This is causing errors particularly when analyzing codebases that heavily use `invoke`."
aacfcf0afcd325c2ad2e59fc16497405a07b4f85,1676904424,"[OpenBLAS_jll] Upgrade to new build optimised for PowerPC (#48689)

* [OpenBLAS_jll] Upgrade to new build optimised for PowerPC

This only difference compared to previous build is that this one enables use of
dynamic architecture detection also for the PowerPC architecture.


---------

Co-authored-by: Valentin Churavy <v.churavy@gmail.com>","['Make.inc', 'deps/openblas.mk']",The current OpenBLAS_jll build does not support dynamic architecture detection for the PowerPC architecture.
6905c8ebf1f1d20f281cb9a434f4d4996adf4236,1677455472,"[LibGit2_jll] Update to v1.6.1 (#48789)

* [LibGit2_jll] Update to v1.6.1

* Update checksums

* Update MozillaCACerts_jll to 2023.01.10

* Update cacert checksums","['deps/libgit2.mk', 'stdlib/LibGit2_jll/src/LibGit2_jll.jl', 'stdlib/LibGit2_jll/test/runtests.jl']",LibGit2_jll is outdated and causing compatibility issues with other components. Checksum discrepancies are also identified while updating.
d117975aa629bee97901a2c132f028adf23d16ae,1657917838,"Allow `BUILDKITE_BRANCH` to provide branch name (#46053)

* Allow `BUILDKITE_BRANCH` to provide branch name

Our CI system checks commits out as a detached head, which breaks our
`Base.GIT_VERSION_INFO.branch` information.

* Fix typo",['base/version_git.sh'],Our CI system's detached head checkout is causing breakages in `Base.GIT_VERSION_INFO.branch` information.
c604d0551e62b7bc56c000aa3ffdeb89506fe2bd,1482108844,"replace broadcast with map in sparse binary op definitions (#19527)

* Make some sparse elementwise binary operations short children of map rather than {broadcast + shape check}.

* Test shape checks for sparse elementwise binary operations equivalent to map.
","['base/sparse/sparsematrix.jl', 'test/sparse/sparse.jl']","Sparse elementwise binary operations currently use broadcast with shape checks instead of map, causing potential inconsistencies in sparse elementwise operations."
c29fc1ece97e5c7d1812dd115a0758396c7e2384,1488980615,"Add octal prefix (0o) to filemode in StatStruct (#20919)

* Add octal prefix (0o) to filemode in StatStruct

Makes it clear it is in octal

* add parsing test
","['base/stat.jl', 'test/file.jl']","Filemode in StatStruct lacks clarity in its numerical system representation, causing confusion on whether it is represented in octal or not."
f103bb4543a0c1fb606d96469324bc33f064889c,1619029972,"logging: redirect closed streams to stderr/stdout (#40423)

This has the additional benefit of making the initial logger respect
changes to redirect_stderr/stdout, until the user explicitly sets
another stream as the logging destination.

Fix #26798
Fix #38482
Replaces #26920, which provided the idea and most of the implementation

Co-authored-by: Joe Petviashvili <joe@gnom.us>","['base/logging.jl', 'stdlib/Logging/src/ConsoleLogger.jl', 'stdlib/Logging/src/Logging.jl', 'test/corelogging.jl']","Logger doesn't respect changes to redirect_stderr/stdout, and closed streams are not being correctly redirected to stderr/stdout."
434c6bbead0edc59f1d8c64c55a979b5898d994e,1582707676,"Loosen test of Cholesky factorization of diagonal matrices to approximate (#34859)

equality since BLAS and Julia might use square roots that round differently.
This has occasionally caused CI failures.",['stdlib/LinearAlgebra/test/cholesky.jl'],Inconsistent rounding in BLAS and Julia during Cholesky factorization of diagonal matrices occasionally causes unexpected CI failures.
5819775e5aa78d808132b24a7b15b02d11bbeefc,1640899577,"Seed Libc rng from system entropy (#43606)

We're seeing lots of CI failures that look like collisions in the
names of temporary variables. Currently we're seeding the libc
rng from a low entropy clock, which is somewhat likely to have
collisions particular if (as we are), you launch all your processes
at exactly the right time. Try to fix that by seeding the libc using
system entropy. Of course that still leaves the potential for birthday
problems, but hopfully this will tide us over until #43597 gets fixed.","['base/Base.jl', 'base/libc.jl', 'base/randomdevice.jl', 'stdlib/Random/src/RNGs.jl']","Temporary variable name collisions occur during CI processes due to seeding the libc rng from a low entropy clock, leading to potential process launch timing issues."
bd13437ea7c5095cf501c68a4305e9ddb90fcf84,1529994212,"Limit the `unioncomplexity` instead of the `unionlen` in `tmerge` (#27417)

The `unioncomplexity` is used as an estimate for the number of times
`tmerge` had to be called to form the type.","['base/compiler/typelimits.jl', 'base/compiler/typeutils.jl', 'test/compiler/compiler.jl']",The `tmerge` function might be called too many times due to an improper estimate from `unioncomplexity`.
3389940f945d0f942fe353e4dca6c1d4d18f26d1,1619672434,"Add tests to make sure that `Base.project_names`, `Base.manifest_names`, `Base.preferences_names`, and `Artifacts.artifact_names` always have the same length (#40618)

* Add tests to make sure that `Base.project_names`, `Base.manifest_names`, `Base.preferences_names`, and `Artifacts.artifact_names` always have the same length

* Add a comment explaining why we have these tests","['stdlib/Artifacts/test/runtests.jl', 'test/loading.jl']","The lengths of `Base.project_names`, `Base.manifest_names`, `Base.preferences_names`, and `Artifacts.artifact_names` do not maintain consistent lengths."
efb05d9da3077c86a650ca592efd191d33581fed,1499018017,"document that inv(x) is not just for matrices (#22610)

* document that inv(x) is not just for matrices

* rm blank line

* caveat about roundoff errors
",['base/number.jl'],"The `inv(x)` function documentation incorrectly implies it is only applicable to matrices, leading to misuse and misunderstanding."
0dca5940ee905b29a9138799910f46aa17eaff33,1487925044,"hashing of general objects was far too simple (fixes #20744) (#20767)

* hashing of general objects was far too simple (fixes #20744)

* hash_uint(3h - object_id(x)) is a somewhat better hash

If we'd used `3h - object_id(x)` previously, the original issue
would never have come up since `hash(a, hash(b, hash(c, h)))`
wouldn't have produced `3A - 3B + 3C - h` but would instead have given
the value `27h -9A - 3B - C`, which is asymmetrical in `a` and `c`.
Passing the result to `hash_uint` fixes that issue since that function
is non-linear, but defense in depth, right? We may as well do the
same operations in such a way that the passed-through value gets the
most operations done on it.
","['base/hashing.jl', 'test/hashing.jl']",The current hashing algorithm for general objects is too simplistic resulting in hash collisions and unpredicted behaviors.
b73804640c54ea1b1b1b5b9f976a633bb61c212a,1473801549,"Optimize reindexing by arrays of CartesianIndex{1}

... since they trivially behave like arrays of Int. Doing any other reindexing
optimizations here is surprisingly hard. Even the seemingly simple
`[CartesianIndex()]` is a challenge since it might insert dimensions in the
middle of a multidimensional array... that means that we cannot simply pick it
off from the head of the `subidx` list and be done.
",['base/subarray.jl'],Reindexing arrays of CartesianIndex{1} is inefficient and might insert dimensions in the middle of a multidimensional array.
b6d745710159c91d1a6f1642942f785e6983bb33,1484534556,"return_type_tfunc was too pessimistic

make Union{} a leaftype (and also Tuples of Unions)
and ensure return_type_tfunc will infer as much as possible
","['base/inference.jl', 'base/reflection.jl', 'src/jltypes.c']","`return_type_tfunc` is overly pessimistic, hindering the inference capabilities for `Union{}` types and Tuples of Unions."
c3d27d9386935c86e6547626303bcd604d01ffce,1526678574,"Fix `@isdefined` with new optimizer

The only values that are special for an `:isdefined` expression are SSAValues
(which are tracked through to phi nodes to see if they are defined), global
variables and static parameters (both of which have support in the interpreter
and codegen).

Fixes #27103.
","['base/compiler/ssair/passes.jl', 'base/reflection.jl', 'test/core.jl']","`:isdefined` expression doesn't handle certain special values correctly including SSAValues, global variables, and static parameters, potentially causing undefined behavior."
316fc8c8fa6aed4868aba6841030f243bddee1e6,1661539875,"Information for specific operating system (#46438)

* Information for specific operating system

To not cause ambiguities, when a message is going to a specific operating system, say windows, its best to be spelled out explicitly if possible, so the reader on the docs can know what's happening, other than assuming with the prefix of `win`, one would immediately figure out its talking about windows.

Co-authored-by: Kristoffer Carlsson <kcarlsson89@gmail.com>
Co-authored-by: Viral B. Shah <ViralBShah@users.noreply.github.com>",['base/util.jl'],Ambiguity in documentation when referring to specific operating systems by prefixes is causing confusion for users.
9d5f31e9231c1d77e24ee820908e32f559e23057,1624172998,"Transition the `coverage-linux64` pipeline to Buildkite (#41238)

* Transition the `coverage-linux64` pipeline to Buildkite

* Simplify, run inside of a sandbox

* Upload coverage reports to Codecov and Coveralls

* Add `COVERALLS_TOKEN`

Co-authored-by: Elliot Saba <staticfloat@gmail.com>","['.buildkite/coverage-linux64/run_tests_base.jl', '.buildkite/coverage-linux64/upload_coverage.jl']","The `coverage-linux64` pipeline is not yet transitioned to the Buildkite, leading to a complex pipeline and lack of sandbox execution. Furthermore, the coverage reports are not uploaded to Codecov and Coveralls due to missing `COVERALLS_TOKEN`."
ee80a0c3eb65d5ab07080b4007f2273e5dcc1259,1471464019,"Add missing tests for diagonal and uniformscaling (#17921)

* Add missing tests for diagonal and uniformscaling

* Change A_mul_B to *

* Moved things out of nested loop that don't need to be there
","['test/linalg/diagonal.jl', 'test/linalg/uniformscaling.jl']","Diagonal and uniformscaling functionalities are lacking proper tests, potentially leading to uncaught bugs and inaccurate calculations."
2690ca8cc67d1ce1e8fb3135400270d48fc2e0f6,1692474038,"Terminfo parser (#50797)

This was part of #49586, but it has been spun out so it an be discussed
separately and once merged simplify #49586 a bit.

This introduces a pure-Julia terminfo parser, which means that:
- We can no longer depend on calling `tput`
- We can start thinking about fancier terminal-adaptive functionality
(see #49586)

I am hoping this can be considered and (hopefully) merged in the near
future :slightly_smiling_face:.

Oh, and I think it's fun to note that it looks like this may well be the
most concise standards-compliant Terminfo parsers in existence.","['base/Base.jl', 'base/client.jl', 'base/terminfo.jl', 'base/terminfo_data.jl', 'base/ttyhascolor.jl', 'test/choosetests.jl', 'test/terminfo.jl']","The current implementation relies on `tput` for terminfo parsing, limiting our ability to introduce more advanced terminal-adaptive functions."
8b19f5fa276b738034cdc26c13cc9f38ba1ea362,1680281426,"Merge pull request #49185 from gbaraldi/image_bit

Add bit to the GC tag to turn GC in image search O(1) and also increase gc interval when encountering many pointers","['src/gc.c', 'src/julia.h', 'src/julia_internal.h', 'src/staticdata.c']",High computational complexity in the garbage collection during image search and increased intervals when encountering multiple pointers.
ecd58b3b9d0bf81cffb06a8a6fe3252d22d57f92,1583983184,"Distributed: fix cluster used by #34886 test

The test added in #34886 was using the wrong cluster, resulting in test
failures after the cluster was shutdown at the end of `runtests`. Move
it to the isolation cluster.
","['stdlib/Distributed/test/distributed_exec.jl', 'stdlib/Distributed/test/runtests.jl', 'stdlib/Distributed/test/splitrange.jl']","Test added in #34886 uses incorrect cluster, leading to test failures after the cluster is shut down post `runtests`."
3d1fa6f524046dd31a3ce509048f8b3bfe1851b8,1457326321,"Do not require the ""cx16"" host feature on i686 systems

According to Intel, cx16 isn't available in 32-bit mode, and requesting it makes LLVM crash in atomic operations.
",['src/codegen.cpp'],"Requesting the ""cx16"" host feature on i686 systems results in a crash during atomic operations as it's not available in 32-bit mode."
315cedc70e1c839687df944682878550b63b05c3,1489994953,"rename oid to oid_ptr in fetchhead_foreach_callback

add a few spaces after # comment openers

spell out acronyms in compiler devdocs

make spacing more conventional in test/replutil.jl
","['base/libgit2/callbacks.jl', 'base/libgit2/rebase.jl', 'base/linalg/triangular.jl', 'test/linalg/lq.jl', 'test/replutil.jl', 'test/sparse/sparsevector.jl']","There is inconsistent usage of variable names, comments, acronyms in docs, and space formatting in `test/replutil.jl`, leading to decreased code readability and understanding."
af9a7af3b27c0ff22179a7dcd30bf6753d3d575f,1696087630,"Make allocopt respect the GC verifier rules with non usual address spaces (#51520)

On AMDGPU, this was generating a `addrspace(10)` pointer to an `alloca`
which is illegal and lead to other issues.","['src/llvm-alloc-opt.cpp', 'test/llvmpasses/alloc-opt-gcframe-addrspaces.ll']","`alloca` in AMDGPU generating `addrspace(10)` pointer causes illegal operations, leading to potential software issues."
1c3c4d8cadee4a98e715a36aaed666e0f84a11e4,1631733446,"create new tasks in the parent world (#41449)

N.B. This means serialized tasks will discard this stateful information
and pick up new/different information.

Closes #35690
Closes #41332","['base/docs/basedocs.jl', 'src/task.c', 'stdlib/Distributed/src/process_messages.jl', 'stdlib/Distributed/src/remotecall.jl', 'test/worlds.jl']","Serialized tasks discard stateful information when assigned to parent world, causing them to adopt new/different information."
d2f967766ca1622e244fdb8136c2f5374d697fee,1583374738,"Rebase of #28526 on master (#34989)

* fix \ SparseVector

* split (\) for sparsevector;
test for Factor and Symmetric Sparse Matrix

Co-authored-by: Chi Po Choi <choi.chi.po@gmail.com>
","['stdlib/SuiteSparse/src/cholmod.jl', 'stdlib/SuiteSparse/test/cholmod.jl']",The application of split (\) function on SparseVector causes issues. Factor and Symmetric Sparse Matrix tests are failing.
a0a68a54d6fca33c5717a431882f99ccae3041ef,1600113969,"Tighter array eltype for `renumber_ssa` (#37499)

Unlike `renumber_ssa2` in `compiler/ir.jl` which actually takes an array with elements of
many different types, all callers of `renumber_ssa` (and `renumber_ssa!`) only ever assign
`SSAValue` to the array. Also no one ever checks `isassigned` on this array
so a `Vector{SSAValue}` should work just fine here.

Try to maintain a similar level of error checking by replacing `#undef` with `SSAValue(-1)`
(already used by `construct_ssa!`) and adding an assertion in `renumber_ssa`
to check for cases that throws `UndefVarError` previously.

Also removed an unused parameter.",['base/compiler/ssair/slot2ssa.jl'],"The `renumber_ssa` function utilizes an array with a broader eltype than necessary, leading to potential inefficiencies and unused parameters."
02574e3b032b9ca0aff09059fc49a73c8588926b,1664572312,"Introduce LLD_jll as stdlib (#46455)

* Introduce LLD_jll to stdlib

* Add symlinks to lld to libexecdir

* Allow to compile LLD from source (during LLVM compilation) + remove symlinks

* Fix directory of libraries for Windows","['Make.inc', 'deps/llvm.mk', 'stdlib/LLD_jll/src/LLD_jll.jl', 'stdlib/LLD_jll/test/runtests.jl']","The standard library lacks LLD_jll, preventing the compilation of LLD from source during LLVM compilation and causing incorrect library directory issues in Windows."
521eda8ae6f870d8b843d351c25ce0ec69ad986b,1581695545,"Added test for position, seekend, etc. (#34738)

* Added test for the seekend function
* Added test for hashing secret buffers
* Added test for checking the position",['test/secretbuffer.jl'],"Lack of tests covering functionalities such as position checking, `seekend` function, and hashing secret buffers."
3f3d8b338b25ea68eadc073e883850a8d252ecd8,1497096191,"Treat sub and div as induction in simd loop lowering

This makes sure induction like

```julia
s -= a[i]
```

in an at-simd loop can be vectorized without fastmath annotation.

LLVM currently support at least sub in the vectorizer.
I don't see why it can't handle div so let's first make sure we are ready for that.
","['src/llvm-simdloop.cpp', 'test/llvmpasses/simdloop.ll']","In simd loop lowering, operations such as subtraction and division are not treated as induction, hindering vectorization without fastmath annotation."
1fda4bb4bace782cff71ebdae7a1fad43771ddb7,1672296730,"Don't double-count inference time (#48033)

* Use the same timing reentrancy counter for both inference and codegen

* Add some timing tests

* Add macro-based timer test","['src/aotcompile.cpp', 'src/gf.c', 'src/jitlayers.cpp', 'src/julia.h', 'src/task.c', 'test/misc.jl']","Inference time is being double-counted, leading to inaccuracies in time measurements for both inference and codegen processes."
502c03974b0f0bbe2ccbc80ebfdca3a8d15da852,1614784538,"Added reference to @inbounds in the entry for --check-bounds (#39897)

Added explicit reference to `@inbounds` in the entry for `--check-bounds`, this is consistent with `--inline`, `--polly` and `--math-mode`.",['src/jloptions.c'],"The `--check-bounds` entry is lacking an explicit reference to `@inbounds`, leading to inconsistency with similar options like `--inline`, `--polly` and `--math-mode`."
249d629d11e29dff1a03cbb3ff0cfb266d15bd6a,1505766908,"Use direct load and store instead of memcpy in simple cases

* Create emit_memcpy wrapper.
* Simplify handling of `jl_cgval_t` on the caller side
* Do some optimizations to avoid emitting memcpy for simple types.

  These can cause LLVM (e.g. SROA) to emit unnecessary bitcast's that interfere with other
  optimizations.
","['src/ccall.cpp', 'src/cgutils.cpp', 'src/codegen.cpp', 'src/intrinsics.cpp']","The use of memcpy for simple data types is causing LLVM (like SROA) to emit unnecessary bitcast's, which interferes with other optimizations."
4165fddaeb4c85c6a16ccc2fc47b33376081ed31,1601196057,"[file]: Fix EBADF errors when removing files that don't exist (#37758)

On Windows, we need to add back write permissions to files that we want
to delete.  When attempting to do this, if the file itself doesn't
exist, `chmod()` can throw a couple of different errors that are not
caught by our `catch` statements here.  Rather than attempt to do these
useless operations, we'll instead only `chmod()` if the file itself
actually exists.","['base/file.jl', 'test/file.jl']","When trying to delete non-existent files on Windows, unnoticed errors thrown by `chmod()` due to unnecessary operations result in EBADF errors."
27bdbf64898c6bec020251db6dfc9b87857f1ea1,1673287664,"ambiguous: fix a rare case of comparison

This used to do the opposite test of what should have been required here
(it checked if it was ambiguous, rather than if it was sortable). This
now better aligns with the implementation in gf.c for the similar fast
path check during ml_matches.
",['base/reflection.jl'],"Ambiguous comparison leading to incorrect condition checks, deviates from similar check logic followed in gf.c during ml_matches."
5eddb816b33b229d85822bb3df49771b239e4446,1689620315,"Improve ""too many parameters"" error (#50539)

I'm still not satisfied with this but 
```julia
ERROR: too many parameters for type AbstractTriangular
Stacktrace:
 [1] top-level scope
   @ REPL[3]:1
```
is slightly better than 
```julia
ERROR: too many parameters for type 
Stacktrace:
 [1] top-level scope
   @ REPL[3]:1
```",['src/jltypes.c'],"Error message for exceeding parameter limit in AbstractTriangular type lacks clarity, making it challenging to understand the error."
ab567be6a3dba08e8a2e279aaa31d841b95329ea,1624449680,"[OpenBLAS_jll] Bump to `v0.3.13+6` (#41322)

* [OpenBLAS_jll] Bump to `v0.3.13+6`

This version backports a fix for a `SIGILL` error on some CPUs.

* [deps] Bundle backported OpenBLAS patches",['deps/openblas.mk'],'SIGILL' error is generated on some CPUs with the current version of OpenBLAS_jll.
d6bcb5a66292f7468fb40fadb8b1e846b758e06a,1548964417,"Fallback for copying views into sparse matrices (#30895)

* Fallback for copying views into sparse matrices

* SparseArray --> SparseVecOrMat

* move copy method to sparsevector

* use the union explicitly
",['stdlib/SparseArrays/src/sparsevector.jl'],"When copying views into sparse matrices, there's no fallback mechanism in place causing operations to fail on certain cases."
1857f075713ac14948ee28ae2bc79abbfba90003,1469401289,"Remove sizeclass 12 on ARM and PPC32.

We don't take alignment into account while doing allocation.
This makes sure that allocation of size 8 uses the 16 size class instead of
the 12 size class and is properly aligned on these architectures.
","['src/julia.h', 'src/julia_internal.h', 'src/julia_threads.h']",Sizeclass 12 allocations on ARM and PPC32 are improperly aligned causing issues.
fd36a48834295b0fb1f2b05f32fe0f4311a6bbcf,1529995376,"Improve `abstract_iteration`

Exploit the fact that the (minimum) number of elements obtained from
iteration can be derived from the types in certain cases and hence, a
more exact type can be inferred for splatting them.
","['base/compiler/abstractinterpretation.jl', 'test/compiler/compiler.jl']","Inference of more exact type for splatting is inconsistent, particularly when the minimum number of elements obtained from iteration can be derived from the types."
1ea49017af7aab419b8d6066eca718ca3b3ff093,1598643183,"Improve unaliascopy error message (#37103)

This effectively works around the lack of #35543; what we had been doing on 1.5 no longer prints appropriately on 1.6.",['base/abstractarray.jl'],"Unaliascopy error message not appropriate in version 1.6, it's different from how it was working in version 1.5."
ef69851a4f7831b346caafcac439bd83bcdc65a4,1605209868,"Allow `clamp(n, 1:10)` (#37548)

* clamp method for unitrange

* add tests & narrower type

* move to Base.Math

* triple equals

Co-authored-by: Michael Abbott <me@escbook>","['base/math.jl', 'test/ranges.jl']",The `clamp` function does not currently support a UnitRange as the second and third parameters.
e7a2da7b787963e5bc091f1e7ddf1b77cf20a7d9,1517201266,"refactor Base._start to be more modular (#25753)

try to make this more reusable and have better separation of concerns:
 - allow late loading of the REPL module
 - respect user options more carefully (such as --banner=yes)
 - process_options was also mostly about changing global state, so rename to exec_options instead of returning some values
 - don't fail in the REPL module is not available - just fall back to the basic stream-repl
 - be more clear about how `isa` is being used to affect behavior","['base/client.jl', 'base/precompile.jl', 'src/jloptions.c', 'src/julia.h', 'stdlib/REPL/test/repl.jl', 'test/cmdlineargs.jl', 'test/spawn.jl']","The current implementation of Base._start is inflexible and doesn't adequately separate concerns, leading to issues with REPL module loading, option respect, global state changes, REPL module unavailability handling, and unclear 'isa' usage."
250849f78fe2b741f7cfad0c17f171c76fd64b56,1470409153,"Operations between Float16 and Integer now return Float16

Previously we would promote to Float32 leading to subtle type
instabilities when Float16 was used for computations instead of
a pure data-storage format.

By defining `promote_type(Float16, Integer) = Float16` this
incurs an overhead by first converting the `Integer` argument
to `Float16` and then `Float32` for mathematical operations,
that are performed in Float32.
","['base/float.jl', 'base/float16.jl', 'base/statistics.jl', 'test/float16.jl']","Operations between Float16 and Integer result in type instability due to default promotion to Float32, causing unnecessary computation overhead."
cd19e977715bb8ebb18d0121605c0e010614f7f4,1634548191,"InteractiveUtils: make default argtype of `code_llvm` etc. work with functions with single method (#42496)

`code_llvm` and `code_native` expects a single matching method, but the
default value of `types=Tuple` argument doesn't match with any function 
signature and so we actually can't use that default value.

With this PR, the default argument type will be computed by `default_tt`,
which returns an appropriate signature if a function only has a single 
method, otherwise returns `Tuple` (which is the same default value as before).

Now `code_llvm` and `code_native` by default work with functions that 
have a single method, e.g.:
```julia
code_llvm() do # previously, we need to call `code_llvm(()) do ... end`
    sin(42)
end
```
","['base/reflection.jl', 'stdlib/InteractiveUtils/src/codeview.jl', 'stdlib/InteractiveUtils/test/runtests.jl', 'test/reflection.jl']",Default argument `types=Tuple` in `code_llvm` and `code_native` doesn't match with any function signature making it unusable with functions that have a single method.
cfbca08aa59ab134eea2f7c7f9544843538c4aa0,1488921256,"Fix shape corner cases in not-zero-preserving sparse broadcast!(f, C, A, B).

Specifically, fix not-zero-preserving sparse broadcast!(f, C, A, B) where C's shape does not match the broadcast shape of A and B.
Strengthen associated tests.
","['base/sparse/higherorderfns.jl', 'test/sparse/higherorderfns.jl']",Sparse broadcast function does not preserve zeroes and fails when the shape of C does not match the broadcast shape of A and B.
f48a7257160fe3143493118a6544fabea0d66177,1531366200,"Check bounds on sizeof(eltype)-changing ReinterpretArrays

Not sure whether we had this and lost it as a consequence of #27909,
or whether we never had it. At any rate, this adds tests so it should
be easy to keep henceforth.
","['base/reinterpretarray.jl', 'test/reinterpretarray.jl']","ReinterpretArrays with changing sizeof element type lacks boundary checks, potentially leading to erroneous results or crashes."
a0603442129ca41b992887274e127002b5c66dba,1562392445,"making Bi/Tri/Sym times Diag output a structured matrix (not sparse) (#31889)

* making Bi/Tri/Sym times Diag output a structured matrix (not sparse)

* fix test errors/typos

* adding diag*bi/tri/sym and removing unused union

* add mul!(C,::BiTriSym, ::*Diagonal)

* fixing ambiguious methods and adjoint/transpose

* space

* test error

changing `transpose`/`adjoint` to `Transpose`/`Adjoint`

This will fail until https://github.com/JuliaLang/julia/pull/31889 is merged.

* remove transpose
","['stdlib/LinearAlgebra/src/bidiag.jl', 'stdlib/LinearAlgebra/test/bidiag.jl']","Matrix multiplication involving Bi/Tri/Sym along with Diagonal structures currently outputs a sparse matrix instead of a structured matrix, leading to potential inaccuracies and type mismatches."
20e5703266753e5eb8035fb5d0d7fb903d575c56,1474225404,"Re-tighten logical indexing bounds checks

If #18401 doesn't make it into 0.5, there's no point in keeping the change in behavior for 0.6.  As I said there, this behavior isn't where we want to end up anyways. It's not a straight reversion because the simplification is still a good change.
","['base/abstractarray.jl', 'test/abstractarray.jl']","Changes in logical indexing bounds checks are causing unintended behavior, affecting the overall performance of the system."
2620370e004f934bdefa6d1917860cd7f12472f1,1524736878,"fix up on package with no manifest (#257)

* fix up on package with no manifest

* add debug stuff

* wut

* sigh

* fixups
","['stdlib/Pkg3/src/Operations.jl', 'stdlib/Pkg3/test/pkg.jl']",Packages without a manifest file cause errors when being processed.
10ab32f57cfc7b1a5139582bb0ea867dd73a5df9,1616611367,"Support shared named environments during startup (#40025)

* Support shared named envs during startup

* Improved handling of named envs during startup

Co-authored-by: Jameson Nash <vtjnash@gmail.com>

* Improve tests for --project and JULIA_PROJECT

* Add news item about shared env support at startup

Co-authored-by: Jameson Nash <vtjnash@gmail.com>","['base/initdefs.jl', 'test/cmdlineargs.jl']","During startup, shared named environments are not supported, leading to issues with project handling and testing."
fa37afb36dd32de12554cbd4df1822e8d39de784,1499654753,"Add `:()` when printing quoted symbols

The old code prints `:(:x)` and `:x` the same, which is very confusing.

This partially revert fe50621cd2bc6383e41a8d759258ac71d6dff82b
","['src/rtutils.c', 'test/show.jl']","Quoted symbols when printed are indistinguishable between the formats `:(:x)` and `:x`, leading to confusion."
28ff641fa9130d760173122bb231ced2fedf839f,1605263447,"no call to Base.rest if vararg is all-underscore (#38403)

* no call to Base.rest if vararg is all-underscore

* Apply suggestions from code review

Co-authored-by: Jeff Bezanson <jeff.bezanson@gmail.com>

* small cleanup

Co-authored-by: Jeff Bezanson <jeff.bezanson@gmail.com>","['src/julia-syntax.scm', 'test/syntax.jl']","The vararg underscore functionality triggers unnecessary calls to Base.rest, even when all varargs are underscore."
7bc7874a68efde8f9e978c549186d3a077e5b8f4,1582574552,"gf: optimize jl_matching_methods for dispatch tuples

When the input type is a dispatch tuple, we know that a subtype lookup
is sufficient, so we can do a slightly more direct lookup and avoid
considering `Union{}`-declared methods as possible results.

This also fixes an issue with the special `jl_matching_methods` query
being done by `jl_insert_backedges`: we would set the `done` flag when a
method ""fully covered"" the result, even if that method was deleted.
Rather than continue to abuse the meaning of `world == 0` (which also
has performance implications), we add a specific flag for this case.
","['src/codegen.cpp', 'src/dump.c', 'src/gf.c', 'src/julia_internal.h', 'src/typemap.c']","Dispatch tuples as input types in `jl_matching_methods` lead to unnecessary subtype lookups and the possibility of erroneously declaring `Union{}` methods, Concurrently, an issue affects `jl_insert_backedges` where a fully covered method marked as `done` could be deleted."
8e87263129f4edbcda169c30afe1f528c11d0ca5,1636054131,"CI (Buildkite): add Pkg, Artifacts, and LazyArtifacts to the list of ""network-related stdlibs"" that we test in a separate Buildkite job (#42885)

",['.buildkite/utilities/platforms/platforms.sh'],"The separate Buildkite job testing ""network-related stdlibs"" currently lacks tests for Pkg, Artifacts, and LazyArtifacts."
2a45839ef9c9bb393fff0824dd11c3bd542bb537,1528563878,"Added  elementwise version of => to prec-pair (#27447)

* Added  elementwise version of => to prec-pair

* Added test for broadcasting pair operator

* Update broadcast.jl

* Update broadcast.jl

* Delete whitespace

* Added NEWS entry on broadcasting pair operator

* Fixed spruious deletion in NEWS.md
","['src/julia-parser.scm', 'test/broadcast.jl']","`=>` operator lacks an elementwise version for broadcasting pair operation, causing issues in pair broadcasting functionality."
26a7dbb8e23e4b61a75b626cae5741ff6fd30ded,1671153950,"intersect: fix a minor soundness issue with supertypes (#47813)

When doing intersection, we might end up with a value in `env` (as the
only possible *value* for that parameter) without properly considering
that the parameter might be a TypeVar.","['src/subtype.c', 'test/docs.jl', 'test/subtype.jl']","Intersection operation fails to account for parameters potentially being TypeVars, potentially leading to incorrect values in 'env'."
8af013437982bb10c3941595028af62fe306e0fe,1457470946,"Array TBAA clean up

* More consistently use `const jl_cgval_t&`
* TBAA node for arrayflags
* use tbaa_const for array size/len/ptr of high dimensional arrays.
","['src/ccall.cpp', 'src/cgutils.cpp', 'src/codegen.cpp']",Issues with inconsistency in using `const jl_cgval_t&`. Lack of TBAA node specifically for arrayflags. Using tbaa_const for high dimensional array size/len/ptr leads to problems.
6b8c6e981187b575fa566c42bfcc582ce08e3513,1456839000,"Cleanup checked arithmetic tests

The block checking only return types was in part redundant with
tests checking both type and value below. Add a few missing
cases, and clean a few unnecessarily complex expressions.
",['test/checked.jl'],"Redundant block checks present only for return types in checked arithmetic tests. Also, a few test cases are missing and some unnecessarily complex expressions have been noticed."
bc8e1f2391f5bd5bc70d615602a184144bbc2f8e,1643218826,"In `Base.runtests`, after tests fail, load `InteractiveUtils` from `@stdlib` (#43804)

In `Base.runtests`, if the tests fail, before loading `InteractiveUtils`, set the `LOAD_PATH` to only include `@stdlib`.

In theory, it's possible that someone has a setup where their load path has a package named `InteractiveUtils`. So, to increase the probability that we are actually loading the correct `InteractiveUtils` stdlib, let's set `Base.LOAD_PATH` to only include `@stdlib`.

After we load `InteractiveUtils`, we restore the original contents of `Base.LOAD_PATH`.",['base/util.jl'],"Loading `InteractiveUtils` in `Base.runtests` after a test failure might be referencing a package not from `@stdlib` due to user setup, leading to potential incorrect loading."
242cdc5f6c06aaba99315bfcd41f8884ccc445a6,1667527214,"Add `@allocations` macro for getting number of allocations (#47367)

* Add `@allocs` macro for getting number of allocations

* Rename to `@allocations`

* Add to docs

* Add news for `@allocations`","['base/exports.jl', 'base/timing.jl', 'test/misc.jl']","There's no macro available to track the number of memory allocations, impeding performance analysis and optimization efforts."
4f0216a133aa2de4442f7ee6a974d82e316e4a93,1687346814,"Clear specsigflags correctly for copied code instance (#50238)

As provided by Jameson to fix an issue encountered in a downstream
project.

Co-authored-by: Jameson Nash <vtjnash@gmail.com>",['src/gf.c'],Incorrect clearing of specsigflags for copied code instance causing issues in downstream projects.
8eca27df422089a8c21301764c6485fb86d0fee8,1545629289,"Add link to `Symbol` in docstring of `:` (#30468)

* Add link to `Symbol` in docstring of `:`

I believe it would be helpful to add
a reference to `Symbol` to the docstring of `:`.

ATM searching for `?:` in the REPL does not mention the use of `:` in symbols.

* Update base/range.jl

Co-Authored-By: JonasIsensee <jonas.isensee@web.de>
",['base/range.jl'],"Docstring for `:` does not mention its use in symbols, causing confusion when searching for `?:` in the REPL."
1c9d1d9d3cdf650737aaedc26bbeeaad755b218d,1506533998,"Add mechansim for binding deprecation messages

Now, when encountering a deprecated binding `foo`, we will look up
`_dep_message_foo` in that binding's owner module and print the
value of that binding (if it exists).

Demo:
```
julia> e
WARNING: Base.e is deprecated, use ℯ (\euler) or Base.MathConstants.e.
  likely near no file:0
ℯ = 2.7182818284590...
```
","['base/deprecated.jl', 'src/module.c']","Deprecation warnings for bindings lack specific messages, resulting in unclear guidance for developers using deprecated elements."
056d6f6aa5e222bf4469207848c2715d2f7a04ad,1508469244,"Make similar(S<:[Sym]Tridiagonal, [T,] shape...) return a sparse rather than dense array.

Also fix a minor bug where lufact(A::Tridiagonal{T}) for !(T<:AbstractFloat) would dispatch to lufact!(B, ...) for non-tridiagonal rather than tridiagonal B downstream.
","['base/linalg/lu.jl', 'base/linalg/special.jl', 'base/linalg/triangular.jl', 'base/linalg/tridiag.jl', 'test/linalg/tridiag.jl']","The function `similar(S<:[Sym]Tridiagonal, [T,] shape...)` returns a dense array instead of a sparse one. Additionally, `lufact(A::Tridiagonal{T})` dispatches to `lufact!(B, ...)` for non-tridiagonal instead of tridiagonal B downstream when `!(T<:AbstractFloat)`."
896d599973b48173061756e40fa0684b7ff47bbf,1505991340,"add a ""resilient"" option to run all tests unconditionally (#23589)

* add a ""resilient"" option to run all tests unconditionally

Previously, this was the default: even if one test fails, all
remaining tests are run nonetheless.
Now this requires to pass the ""--resilient"" option to ""test/runtests.jl""
(or `resilient=true` to the `runtest` function); the new default
is to stop running tests as soon as possible when there is one failure.

* rephrase resilient meaning in `runtests` (kshyatt)

* enable --resilient on CI

* change the default, rename resilient -> exit-on-error

* Revert ""enable --resilient on CI""

This reverts commit b055f0b30cb8786214acea444b347d5293a9d652.

* add period at the end of sentence

* remove ""--eoe"" short alias (StefanKarpinski)
","['base/interactiveutil.jl', 'test/choosetests.jl', 'test/runtests.jl']",Tests fail to run completely when one test failure is encountered; needing an option to ensure all tests run regardless of individual failures.
e33b8d196085995faf94baf7eebb8f673d104c78,1548089010,"Fix tfunc tables for fptoui and fptosi

Only the 2-argument form is supported by intrinsics.cpp, so this deletes
the 1-argument forms from Core.Compiler's tfunc tables.
",['base/compiler/tfuncs.jl'],"Core.compiler's tfunc tables are providing 1 argument forms for fptoui and fptosi, which is not supported by intrinsics.cpp, leading to possible inaccuracies."
062216a5d590e7416427085dedf779da5f892820,1454007245,"simplify linfo->unspecialized and staged function instantiation

since the sparams env can now be passed directly into a function as an extra argument,
linfo->unspecialized can (usually) be shared among all instances of a function
(the only exception being the presence of intrinsics that are expecting to be able to call static_eval);
the implementation of jl_instantiate_staged can be greatly simplified;
and code_llvm can safely generate code for any function (via unspecialized), without corrupting the cached AST info
","['base/inference.jl', 'src/ccall.cpp', 'src/codegen.cpp', 'src/gf.c', 'src/julia_internal.h', 'src/toplevel.c']","The presence of intrinsics that call static_eval is causing unnecessary complexity in the instantiation of staged functions, and potential corruption of cached AST info when generating code through code_llvm."
170d6439445c86e640214620dad3423d2bb42337,1664434297,"codegen: fix compute_va_type issue with Type (#46953)

Issue noted in #42498. This should be the same as
Core.Compiler.tuple_tfunc. Otherwise we might accidentally constant-fold
something like:

     code_llvm((x...) -> x isa Tuple{Type{Tuple{Any}},Int}, (Type{Tuple{Any}}, Int))

to return true. This is rarely a compile-sig in practice, so it does not
usually affect code, but is observable there in the IR.",['src/codegen.cpp'],"Constant-folding irregularity with 'Type' results in incorrect function generation, observed within the IR but rarely affecting the code in practice."
34a8ee665746b02c5f3e63648222b342d9ee28fa,1601409685,"Don't interpolate stdout in printf macro to avoid precompilation issues

Fixes #37665. The subtle issue here was the at-printf macro using the
`stdout` variable at _macro-expansion-time_ and interpolating it into
the final `Printf.format` expanded call. If `stdout` was rebound between
expansion time and usage time, then we saw ugly libuv errors
(segfaults). This would happen mainly when a `Printf.@printf` call was
precompiled directly, so the macro expansion was precompiled and led to
the messed up `stdout` usage at runtime. The fix is to just not
interpolate `stdout` at macro-expansion time, but have the expanded call
use the global `stdout` at runtime.
",['stdlib/Printf/src/Printf.jl'],"Printf macro's usage of `stdout` at macro-expansion-time, in case of runtime rebindings, leads to libuv errors primarily when calls are precompiled directly."
96e3a29fb3a256410ca82c0a0a6daca63d405df4,1503495709,"Add missing three-parameter methods for A[tc]_mul_B!(::Triangular) (#12812)

These methods are needed for compatibility with ordinary dense matrices,
which have the three-parameter forms.","['base/linalg/triangular.jl', 'test/linalg/triangular.jl']",The three-parameter methods for A[tc]_mul_B!(::Triangular) are missing and causing incompatibility with ordinary dense matrices.
dcdc76851ef69c82c19d0cf2ca8dee8197f76a22,1522908938,"Dates: remove anti-pattern of using `Tuple{Union{Nothing, Something}, Int}`

While the new optimizer should handle this better,
the optimal efficient way to handle this is to make the missingness entirely disjoin:
`Union{Nothing, Tuple{Something, Int}}`

And make each `val` variable SSA, for better inference
","['stdlib/Dates/src/io.jl', 'stdlib/Dates/src/parse.jl', 'stdlib/Dates/test/io.jl']","The use of `Tuple{Union{Nothing, Something}, Int}` pattern with missingness not disjoint can lead to inefficiency in the new optimizer."
a0c920c1d977c177d13d9a328fde8f90f506778a,1637561475,"Relocate `llvm-version.h` in codegen to avoid a warning (#43181)

Our `llvm-version.h` defines `LLVM_ENABLE_STATS` if it's not already
defined. However, we're `#include`ing that file in `codegen.cpp` before
we `#include` the LLVM headers that define it. That means it gets
defined twice, triggering a `-Wmacro-redefined` warning. If we move the
inclusion of our file to below the inclusion of LLVM's headers, we just
use their definition and avoid a warning.",['src/codegen.cpp'],"Duplicate definition of `LLVM_ENABLE_STATS` macro occurs when `llvm-version.h` is included before the LLVM headers in `codegen.cpp`, generating a `-Wmacro-redefined` warning."
b67fd06f11cc55f0c7823ed606bced2e2e84d64c,1471301834,"add support for split debuginfo files

There seem to be a few variations on the tools and arguments
available for creating split debuginfo files.
I used the following:

objcopy --only-keep-debug libjulia.so libjulia.so.debug
strip -g libjulia.so
objcopy --add-gnu-debuglink=libjulia.so.debug libjulia.so
",['src/debuginfo.cpp'],No support for split debuginfo files; creating them requires manual manipulation of library files.
f26aee226f3479d5b0d4f47f7cb2259a57d03deb,1473380273,"Prevent repl tests from hanging if homedir() is a symlink

I am testing julia on a machine where my home directory is a
symlink.  Unfortunately, this means the repl tests hang, as they
wait for the homedir to be given at the shell prompt, but instead
the pwd() is printed.  `pwd()` calls `uv_cwd()` which calls
`getcwd()`, which [will always resolve symbolic links](http://stackoverflow.com/a/1545838/1558890),
thus printing something other than `homedir()` on my system.
This changes the repl tests to wait for `realpath(homedir())`
instead of `homedir()`.
",['test/repl.jl'],"When homedir() is a symlink, REPL tests hang as it waits for the prompt instead of printing pwd(). This happens due to discrepancy between homedir() and pwd() responses."
5e4669c7403c301985f35d2c8754b184cd73ab05,1679029625,"Ensure accurate invalidation logging data (#48982)

* Ensure accurate invalidation logging data

This modifies #48841 to restore the required logging data.
By collecting at least one additional match, we retain the possibility
of identifying at least one trigger of invalidation.

* Bump number of invalidation causes

* Update src/staticdata_utils.c

Co-authored-by: Jameson Nash <vtjnash@gmail.com>

---------

Co-authored-by: Jameson Nash <vtjnash@gmail.com>","['src/staticdata_utils.c', 'test/precompile.jl']","Inaccurate invalidation logging data might be missing potential triggers for invalidation, affecting debugging efforts."
7fa763aaf3fd60dc755a31f23a6b58307ee849c6,1526931258,"Fix Windows path regex

\w matches numbers as well (which are not valid drive letters) and will match unicode
characters once we turn on UCP.
",['base/path.jl'],"The current path regex on Windows is incorrectly matching numbers and potentially unicode characters, leading to invalid drive letter recognition."
13cdaeb0095d16db08b9a3e735ef876e345e1d09,1513673112,"BitSet push! & pop! : don't check for emptyness every time

When a BitSet is empty, its offset must be initialized.
But checking for emptyness in each invocation of _setint!
was costly, so we put the check in a branch which is called
less often.
",['base/bitset.jl'],Frequent checks for BitSet emptiness in _setint! invocation leads to unnecessary performance overhead.
c8349f0180f096cf5fe13131aa86b54cff214a35,1453325285,"avoid running the FPM on functions that might have references to other modules,

and turn back on the verifier pass now that the functions are valid
","['src/cgutils.cpp', 'src/codegen.cpp', 'src/jitlayers.cpp']","The FPM runs on functions potentially having references to other modules, causing invalid functions and necessitating the verifier pass to be turned off."
8fcf21a4a51a7b4e9eb26adc0ec339b8b72a0d1f,1610652934,"[Artifacts]: Support `using Pkg.Artifacts` with LazyArtifacts (#39210)

Just as we wanted to support users that used `using Pkg`, we should
support users that use `using Pkg.Artifacts` with their lazy artifacts.
This PR merely extends support to those users and adds regression tests.","['stdlib/Artifacts/src/Artifacts.jl', 'stdlib/Artifacts/test/runtests.jl']","`using Pkg.Artifacts` isn't correctly supported in projects using lazy artifacts, causing potential compatibility issues."
93022852b0792ade052b71624630d4ddab99dc96,1676056427,"Limit the `src` style in structured broadcast (#48467)

And make `StructuredMatrixStyle` less complex.
We can fuse the style checking code via `BroadcastStyle`","['stdlib/LinearAlgebra/src/structuredbroadcast.jl', 'stdlib/LinearAlgebra/test/structuredbroadcast.jl']","Current structure of `StructuredMatrixStyle` is overly complex and fusion of style checking code via `BroadcastStyle` is not optimally implemented, causing issues in the setting of `src` style in structured broadcasting."
3b1bbe30e53c487929c47d2a1facbc6173848e6c,1694701348,"remove wasted allocation space for JL_ARRAY_IMPL_NUL (#51275)

Handle this more correctly in Cstring conversion instead. Although
apparently this feature and test has not worked in Julia since String
became a first class object (and not wrapping Array).

Refs: cee4cb78da8f5cfa34808e3310e2366769bc3245","['base/c.jl', 'src/array.c', 'src/jl_exported_funcs.inc', 'src/julia_internal.h', 'test/core.jl']","The allocation space for JL_ARRAY_IMPL_NUL is being wasted, and the conversion of Cstring seems to be handling this incorrectly. The feature and test also doesn't work seamlessly with 'String' as a first-class object."
23c9e0f2abf52ceefa9d3dd06dd85f63a938b00b,1594692456,"Rm some dead code

This code is dead, but also has GC-rooting issues (it modifies
iparams with a newly allocated object, but iparams is not
guaranteed to be roots). Delete it and add an assert that
should fire if anybody ever changes the surrounding code
to make it necessary again (at which point they can find
this commit and fix it properly).
",['src/jltypes.c'],"The removed code is modifying iparams with a newly allocated object however, iparams is not guaranteed to have GC roots, risking garbage collection errors."
f1878c16d3e9d9d2a91aecf6b079032f5b294b7a,1496349088,"LAPACK wrappers: use resize!(a) instead of a = Vector{T}() (#21938)

* BLAS wrappers: resize!() instead of Vector{T}()

- replace a = Vector{T}(n) with resize!(a, n)
- add comments when BLAS API method is called twice

* lapack.sygvd!(): fix rwork type
",['base/linalg/lapack.jl'],Incorrect resizing method in LAPACK wrappers leads to inefficiencies - it rebuilds Vector{T} from scratch instead of resizing existing vector.
5ffdc5c52bc4eb5dfba83e5f389f14902db824d0,1654129514,"inference: improve `ssa_def_slot` tracking (#45524)

This change allows us to propagate conditional information through
this kind of pattern (see #45499):
```
%init = [...]
        [...]
        SlotNumber(x) = %init
        [...]
        goto if not isa(%init, T)
```

If `SlotNumber(x)` is only assigned by `%init` between the definition of
`%init` and the `goto` usage, we can impose a conditional constraint on
`SlotNumber(x)`.","['base/compiler/abstractinterpretation.jl', 'test/compiler/inference.jl']",Conditional information propagation falls short when `SlotNumber(x)` is solely assigned by `%init` between the definition of `%init` and the `goto` usage.
84770f8e99ecf2aa62ea91680e8a0f26a4c674f3,1565221315,"Use porcelain `git` commands to get branch name

By using `git branch`, we sometimes capture terminal color codes, which
is suboptimal.  Use porcelain commands instead, that's what they're
there for.
",['base/version_git.sh'],"The use of `git branch` occasionally captures terminal color codes, interfering with the expected outcomes."
330ddfcf2891e74398e83eb46867ea9c11f2f40c,1660839088,"LinearAlgebra/qr: Stop trying to factorize uninitialized memory (#46386)

It's fine for the test as is, but msan won't like this when enabled,
just use a random matrix rather than an uninitialized one.",['stdlib/LinearAlgebra/test/qr.jl'],"The qr method is attempting to factorize uninitialized memory, causing potential issues when memory sanitizer (msan) is enabled."
9808035911da6001e92ceaa235f85a8fe465e78e,1690901207,"Respect linkage type in jl_merge_module (#50678)

We shouldn't merge non-external definitions in `jl_merge_module`, so
that we can freely emit internal globals without relying on a global
counter.

Depends on #50650","['src/codegen.cpp', 'src/jitlayers.cpp']","`jl_merge_module` is merging non-external definitions, causing dependence on a global counter when emitting internal globals."
59afe2f764f81f1ce2267db74b7d3f696ee413a9,1516129623,"Hopefully fix performance problems

There's a couple of places in the optimization passes that benefit
from Const information. However, they don't really need to care
about the new Conditional lattice elements, which only matter to
inference. Simply widen these before we get to optimization to
hopefully recover any lost performance.
",['base/compiler/optimize.jl'],Performance issues noticed due to unnecessary consideration of new Conditional lattice elements during optimization passes that only require Constant information.
67b9d4db2f699afacf9265d7906f97d9e8b26689,1613735178,"Protect handle_message from Integer subtype invalidation (#39689)

Resolves https://github.com/SciML/ArrayInterface.jl/issues/121.
There is a cost, but hopefully there's no strong need to supply
`maxlog` using whacky subtypes of Integer.","['base/logging.jl', 'stdlib/Logging/src/ConsoleLogger.jl']","The function handle_message is not correctly validating subtypes of Integer for the `maxlog` parameter, leading to potential unintended behavior."
76253f64b8f1c6b48e35c6c307f4e0b6a3243592,1467082703,"Optimize TLS access on MAC

It doesn't have static TLS model and the TLS variables are emulated with
`pthread_key_t`. Use `pthread` directly since it is actually faster.
","['src/julia_threads.h', 'src/threading.c', 'ui/repl.c']",Current implementation of TLS variable access on MAC using `pthread_key_t` is slow and inefficient.
8eb0f9fefb7064be5c14dd4d6a9e01bba8ffeabc,1581770504,"Base.Ordering: do not ever discard `order` parameter (#34719)

Prior to this commit, the `order` parameter was discarded if
either `by` or `order` was passed. However, there is a sane
interpretation for most of these combinations, and we should
use that interpretation for least surprise.

The one case that doesn't have an obvious interpretation is when a
non-trivial `order` is passed together with an `lt` function; in that
case it is better to error out rather than let it pass silently.
","['base/compiler/ssair/ir.jl', 'base/ordering.jl', 'test/choosetests.jl', 'test/ordering.jl']","'Order' parameter in Base.Ordering is getting discarded when used in combination with 'by' or 'order', causing unexpected behaviors in its interpretation."
dfb569de9c44e4ce30c708fbdf3945e0539e2de4,1455199108,"Add text colors to print_with_color documentation.

Previously print_with_color had no substantial documentation for the
color parameter.  We have added an automatically-generated docstring
section that includes a list of possible color values.

In the course of doing so we have added a docstring to Base.text_colors
in base/client.jl.
","['base/client.jl', 'base/docs/helpdb/Base.jl']",The 'print_with_color' function lacks substantial documentation for its 'color' parameter leaving uncertainty about the possible color values.
7bda2c1970a362fcd10e10f846d5d9774a58a53a,1561629447,"Fix Distributed.head_and_tail (#32431)

The last return statement is currently referring to a non-existent s
variable. Also fix the related doctest, even though it does not get
tested at the moment.
","['stdlib/Distributed/src/pmap.jl', 'stdlib/Distributed/test/distributed_exec.jl']","The method Distributed.head_and_tail contains a return statement which refers to a non-existent variable, causing an error. The related doctest is also dysfunctional."
4776a8def48bb5e42b1fd2f4d12f92e774e37b0e,1571685964,"[GCLowering] Try to conceptually simplify numbering/lifting code.

Try to consolidate the code to share common sections between scalar and
vector inputs (in preparation for adding other aggregates).

Also fixes a lost root bug:
if a select or phi used a value from a select or phi, it would fail to root it.

Adds support for handling vectorized select condition in LiftSelect.
","['src/llvm-late-gc-lowering.cpp', 'test/llvmpasses/gcroots.ll']","Rooting fails when a select or phi uses a value from select or phi. Also, handling vectorized select condition in LiftSelect is unsupported."
e4fa75d2655e8b058d5f6cd03e196893de79524b,1525904158,"Simplify SparseMatrix setindex! (#27026)

* Simplify SparseMatrix setindex!

Fix #27013, and add a whole slew of tests. `methods(setindex!, Tuple{SparseMatrixCSC, Vararg{Any}})` goes from a hodgepodge of 26 methods that were tough to reason about to just 6 methods: scalar, logical linear indexing, linear indexing with a vector, linear indexing with a matrix, generic nonscalar indexing, and a disambiguation method. This is much easier to reason about, and fixes a handful of bugs.

* : -> j
","['stdlib/SparseArrays/src/deprecated.jl', 'stdlib/SparseArrays/src/sparsematrix.jl', 'stdlib/SparseArrays/test/sparse.jl']","SparseMatrix setindex! function contains 26 different methods, making it complex and hard to reason about, resulting in a number of unidentified bugs."
bbd5414d1e3d627126d15914eb3d78bee7162bfe,1544710172,"Constructor for SharedMatrix and SharedVector (#28133)

* Constructor by value for SharedVector and SharedMatrix type

* Constructor of SharedVector and SharedMatrix

* Update SharedArrays.jl

* Add tests for new aliased constructors

Add tests for SharedVector and SharedMatrix

* Update runtests.jl

* Update SharedArrays.jl

* Update runtests.jl

* Update runtests.jl

* Update runtests.jl
","['stdlib/SharedArrays/src/SharedArrays.jl', 'stdlib/SharedArrays/test/runtests.jl']",There are no current constructors for SharedVector and SharedMatrix types that accept values.
406c526c066cbd77b77f8f0df00824e1a0691f82,1650432167,"inference: relax backedge optimization condition (#45030)

Follows up #45017.
We can relax the condition in `add_call_backedges!` for backedge optimization
by ignoring the `nonoverlayed` property when the `AbstractInterpreter`
doesn't use overlayed method table at all, since the property will never
be tainted anyway even if we add a new method later.",['base/compiler/abstractinterpretation.jl'],"The backedge optimization condition in `add_call_backedges!` is too strict and doesn't consider scenarios where the `AbstractInterpreter` doesn't use the overlayed method table, leading to untainted `nonoverlayed` properties even when new methods are added."
534fe442d41fb55749a12444ae6f38970c2dfb59,1540471812,"Remove fast paths when scaling arrays (#29726)

* Revert ""Handle case when norm==Inf in normalize (#29691)""

This reverts commit 0ba31aa587794a7e8a23701814bf4f3e077295ab.

* Remove fast paths when scaling arrays. Also stop using BLAS since
the Julia implementations are as fast. Clean up.
","['stdlib/LinearAlgebra/src/dense.jl', 'stdlib/LinearAlgebra/src/generic.jl', 'stdlib/LinearAlgebra/test/generic.jl']","Scaling arrays with fast paths and BLAS utilization results in suboptimal performance, necessitating code clean up."
d0b15c2f9931975f6a43363fef7130d3ac7ed941,1665373568,"lattice: Thread through lattice argument for getfield_tfunc (#47097)

Like `tuple`, `getfield` needs some lattice awareness to give
the correct answer in the presence of extended lattices. Refactor
to split and thread through the lattice argument through
_getfield_tfunc so external lattices can provide `getfield` tfuncs
for their custom elements.","['base/compiler/abstractinterpretation.jl', 'base/compiler/tfuncs.jl', 'base/compiler/typelattice.jl', 'base/compiler/typelimits.jl']","'getfield' function lacks lattice awareness, causing inaccurate outputs when dealing with extended lattices."
c94e8d2a387a9e7899606ffe740fd44d6106b6fb,1593541911,"Fix link in docstring of `big()` (#36375)

There are two `BigFloat` docstrings: for the type and for the method (constructor).
This changes the link target from the former to the latter.",['base/gmp.jl'],"The docstring of `big()` contains an incorrect link, which instead of pointing to the constructor method, is pointing to the type."
2e39c06810b2ac9d0ed62ae502f296b27d8d8b83,1464183015,"Add test for #14346.

Before 464904e (specifically, 40f3859) the functionloc failed because
the line number node was put after the new var node, but only when a
:meta expr was present.
",['test/reflection.jl'],"When a :meta expr is present, the functionloc fails due to the line number node being placed after the new var node."
33aa319142b3bca8bc47032ea76df9e4618d232f,1491852756,"Fix build_sysimg.jl  on Windows when linking failure occurs (#21235)

In case linking fails, fall back to `syimg_file.old`. For windows we first attempt to link to a temporary sysimg_file; if this fails we simply, it fall backs to the current sysimg_file in use safely. This is done since Windows has difficulties overwriting a file in use.
",['contrib/build_sysimg.jl'],"Linking to a temporary sysimg_file on Windows fails without a fallback, complicating the overwrite of a currently used file."
e29ccae6a6284dc0a132e7bcfe301517c32cf8a6,1498502127,"Fix `@test isapprox(...)` when using keywords

The introduction of showing evaluated expressions for calls in #22296
only dealt with parsing function arguments without considering keyword
arguments. Mostly this oversight was due to the functionality being
added just for `isequal` call and `isapprox` was afterthought.
","['base/test.jl', 'test/test.jl']","The 'isapprox' function is not considering keyword arguments when parsing function arguments, making the evaluation of expressions incorrect."
2b891b743fa985c31c566d51b2fbf54aeef6c57b,1484994192,"fix some LibGit2 errors (#20155)

fix some LibGit2 errors (wrong name for DiffOptionsStruct, missing cached kwarg). Add some tests for the above.","['base/libgit2/diff.jl', 'base/libgit2/libgit2.jl', 'test/libgit2.jl']","DiffOptionsStruct in LibGit2 is wrongly named and the cached keyword argument is missing, these are causing errors."
71b63f33331ea1c4f49141735ac7b00fa8ce26a1,1565719448,"fewer `convert` methods for `Missing` and `Nothing` (#31602)

And use `typesubtract` instead of subtyping
to improve usability by handling undef sparams.

Co-Authored-By: Jameson Nash <vtjnash@gmail.com>","['base/essentials.jl', 'base/missing.jl', 'base/promotion.jl', 'base/some.jl', 'test/ambiguous.jl']","The current `convert` methods for `Missing` and `Nothing` are too numerous and subtyping handling for undefined sparams is subpar, affecting usability."
4bc155ab69d8ebcf0f766534b18458e357f86cb9,1543870554,"codegen,coverage: handle inlining info

Previously, we were just blindly ignoring inlined_at information.
This worked out usually OK with inlining disabled,
but missed a lot of potentially good information otherwise,
likely contributing to #28192.
",['src/codegen.cpp'],"Ignoring inlined_at information in codegen coverage possibly results in loss of valuable data when inlining, possibly related to issue #28192."
6839a6a4f8ef4513c4498d09ea6692255fe5b467,1467087424,"fix win64 linfo lookup during stackwalk

use the same trick as linux to look at unwind info when the symbol lookup fails
",['src/debuginfo.cpp'],"Windows 64-bit debug information lookup failure during stackwalking, similar issue to that experienced on Linux."
049996d3d424401bf2d63effb453efe6a40ed38f,1681404928,"Merge pull request #49077 from JuliaLang/jn/typemap-split-more

Split typemap more frequently / aggressively. This helps gain more
advantage from other optimizations (e.g. type map splitting) sooner.","['src/gf.c', 'src/typemap.c']","Typemap is not being split as frequently or aggressively as needed, limiting the benefit from other associated optimizations."
9a98dcb565046b0fa6c2418945d05cdc45d66f0a,1503519976,"parseable printing of all type names and TypeVars

also adjust generic function printing so that when `(::x)` is printed,
`x` is more likely to be the type of the function.
","['base/methodshow.jl', 'base/replutil.jl', 'base/show.jl', 'test/replutil.jl', 'test/show.jl']",Issues with parseable printing in all type names and TypeVars. Generic function printing incorrectly displays `(::x)` where `x` is not always the type of the function.
676727ec5dc9c75c612bd1154c7706ff474322d6,1509235739,"Allow specifying the terminal in `request`

While a good default sometimes I want to display a menu on a terminal
other than the main one (e.g. if I let somebody connect to my app via
ssh or for a multi-terminal application). Add an optional first argument
to allow specifying the terminal.
","['src/AbstractMenu.jl', 'src/util.jl']",Unable to specify a different terminal for menu display in multi-terminal applications or SSH connected sessions; always defaults to main one.
9f24a06ccd5f47df902354919fd7440ac161ea1d,1571171365,"Optimize partitioned views of CartesianIndices

And also recompute ranges instead of using views for partitions of ranges.

Since `Iterators.partition` is so handy for dividing up iteration spaces, it makes sense to optimize this as much as possible. While it is enherently a ""linear"" operation, it is a batched linear operation that allows us to skip doing all the effective ind2sub work on every single iteration.
","['base/multidimensional.jl', 'test/iterators.jl']",Issues with efficiency and speed when utilizing Iterators.partition to divide iteration spaces in CartesianIndices.
a38fa5fbab3f1ec2cc4a7a4b6e968767da41a153,1451848354,"Add necessary patches for LLVM 3.7(.1)

And make ORC JIT the default for those LLVM versions. This does
not activate the new LLVM versions by default yet, to give time
to update everything on CI, etc., but doing the actual activation
is a one line change after this.
",['src/llvm-version.h'],"The current LLVM versions aren't enabled by default, resulting in potential update issues on CI and other platforms. Additionally, ORC JIT doesn't default for LLVM 3.7(.1) versions."
1610024ada6c539b49c47bd3a301fec4afa521cd,1461017719,"add a lattice element type for constants in inference

this simplifies some of the code, and gives sharper type information.
fixes #5090, type inference of `&&` and `||` chains
also makes it easier to deal with #5560 and #14324
","['base/inference.jl', 'test/core.jl']","Type inference for `&&` and `||` chains is currently unoptimized and ineffecient, and handling issues #5560 and #14324 is difficult due to this."
84934e66db2ed0c3b888270380b4c34541d9ffc8,1626211709,"CI: add the sanitizers pipelines (e.g. ASAN) to Buildkite (#41530)

* Setup CI for ASAN

* Launch the `sanitizers.yml` unsigned pipeline

* Use a workspace directory in ./tmp

* Add some log group headers to make the logs easier to navigate

* Install `julia` binary inside sandbox

* Double timeout

* More descriptive message from sanitizer CI

* Fix the path to the binary

* Use addenv

* Apply suggestions from code review

Co-authored-by: Elliot Saba <staticfloat@gmail.com>

* Group ASAN related files under contrib/asan/

* Remove redundant JULIA_PRECOMPILE=1

Co-authored-by: Dilum Aluthge <dilum@aluthge.com>
Co-authored-by: Elliot Saba <staticfloat@gmail.com>","['contrib/asan/build.sh', 'contrib/asan/check.jl']","Lack of automated testing in the continuous integration pipeline for sanitizers, including ASAN, resulting in uncaught errors."
0f56da8988366dd60e170932eefca4adb890acff,1689757744,"inlining: NFC simplifications on the inlining algorithm (#50593)

- pack return value of `ir_prepare_inlining!` into a struct and pass it around
- improved handling of `linetable` argument","['base/compiler/ssair/inlining.jl', 'base/compiler/ssair/ir.jl', 'base/compiler/ssair/passes.jl']",Handling of `linetable` argument in the inlining algorithm exhibits issues and the return value of `ir_prepare_inlining!` needs better management.
4bc394d7c88c07d28ab3d8cc42887e2397da6270,1593562631,"Allow AbstractInterpreters to request preserving trees

As well as turning off optimizations. This is useful for Cthulhu to
be able to request all unoptimized, noncompressed CodeInfos and
correlate them with inference remarks (see next commit).
","['base/compiler/typeinfer.jl', 'base/compiler/types.jl']","AbstractInterpreters unable to request non-optimized, non-compressed CodeInfos, causing correlation issues with inference remarks."
b3e8bd020d8a2d593f920ba585c6dac641740e78,1691077014,"ssair: `compact!` constant `PiNode` (#50768)

Currently the `compact!`-ion pass fails to fold constant `PiNode` like
`PiNode(0.0, Const(0.0))`. This commit fixes it up.","['base/compiler/ssair/ir.jl', 'test/compiler/inline.jl', 'test/compiler/irutils.jl', 'test/compiler/ssair.jl']","The `compact!`-ion pass is unable to fold constant `PiNode` like `PiNode(0.0, Const(0.0))`, causing a failure."
7e11e9d94b4c63275e7daf7cc98bc2f195fa4d78,1484631598,"Move the deprecation of midpoints to 0.6 section, (#20058)

and actually deprecate it - this was moved to deprecated.jl
in #16450, but not actually deprecated","['base/deprecated.jl', 'base/docs/helpdb/Base.jl', 'base/exports.jl', 'test/statistics.jl']",The midpoint function was moved to deprecated.jl but it was not actually marked as deprecated as intended.
913f637364fc8230fa17dce7eb678f99654bd4b3,1483128231,"Test generic sparse map[!]/broadcast[!] for sparse vectors/matrices.

Condense and systematize existing tests for generic sparse map[!]/broadcast[!], and extend to sparse vectors and vector/matrix combinations. Relocate new test code to a separate file test/sparse/higherorderfns.jl corresponding to base/sparse/higherorderfns.jl. (Test/sparse/sparsevector.jl is hypothetically confined to SparseVectors, and test/sparse/sparse.jl mostly dedicated to SparseMatrixCSCs.) Move older tests of sparse broadcast[!] into that new file as well.
","['test/choosetests.jl', 'test/sparse/higherorderfns.jl', 'test/sparse/sparse.jl', 'test/sparse/sparsevector.jl']","Generic sparse map/broadcast function tests are inconsistent and inadequate, not covering all use cases such as sparse vectors and combinations of sparse vectors/matrices."
9104c20e5e7dbd452b43f8635e59588aa4872a80,1665554833,"fix #46918, unstable `jl_binding_type` behavior (#46994)

Now it will return `nothing` before the binding has been resolved,
and afterward fully look up the binding as declared by the owner.","['src/module.c', 'test/core.jl']",The `jl_binding_type` behavior is unstable; it doesn't return 'nothing' before the binding has been resolved.
516af1b182e38aefd4223b740e4c6fef7aea4797,1626037318,"CI: Add more Debian packages to the `llvm-passes` rootfs image (#41544)

* Add `less` to the `llvm-passes` rootfs image

Also, sort the entries of `packages` in alphabetical order.

* Update llvm-passes.jl",['.buildkite/rootfs_images/llvm-passes.jl'],The `llvm-passes` rootfs image in CI lacks the `less` package and the entries of `packages` are not in alphabetical order.
f82fc0f4fedc914de8eca0576d56f70a0ec4f876,1503687435,"Doc rebase stuff (#23432)

* Doc rebase stuff

* fix version stuff

picked ""newer than or equal to"" for consistency with existing docstrings
","['base/libgit2/consts.jl', 'base/libgit2/types.jl']","Inconsistency found in documentation regarding the description for ""newer than or equal to"", causing confusion between different docstrings."
eea2ca79ea00060080de64c1449454bb86bc10cf,1663587723,"elaborate on how to check `:compact` on `IOContext` (#46826)

* elaborate on how to check `:compact` on `IOContext`

Co-authored-by: Shuhei Kadowaki <40514306+aviatesk@users.noreply.github.com>",['base/show.jl'],"Uncertainty on validating `:compact` attribute on `IOContext`, needing specific guidelines."
797da4440b0e2adf63f002cedd3ab7f774346281,1529428007,"Fix gen_call_with_extracted_types for literals (#27622)

Prior to this patch, executing (say) `@less 1` in REPL prints a
cryptic message `ERROR: LoadError: type Int64 has no field head`
although there is a branch in `gen_call_with_extracted_types` which is
supposed to handle this case.
","['stdlib/InteractiveUtils/src/macros.jl', 'stdlib/InteractiveUtils/test/runtests.jl']",Running `@less 1` in REPL results in an erroneous message `ERROR: LoadError: type Int64 has no field head` due to mishandling of literals in `gen_call_with_extracted_types`.
792cd7b9256a2f9e17f364189b9543e87b66e1f8,1530323161,"Handle mutable undef fields in getfield elim

This was already handled if the undef field required a phi, but not
if there was a direct use of an undef value. Fix that.

Fixes #27770
","['base/compiler/ssair/passes.jl', 'test/core.jl']","Direct usage of undef values in getfield elim is not handled properly, causing issues with mutable undef fields."
3eeafa6e8668fe748b5921c2b0687a35b1c41c5d,1632422672,"optimizer: enable SROA with constant globals (#42355)

```julia
julia> const REF_FLD = :x;

julia> code_typed() do
           r = Ref{Int}(42) # should be eliminated
           x = getfield(r, REF_FLD) # should be eliminated
           return sin(x)
       end |> only
CodeInfo(
1 ─ %1 = Base.sitofp(Float64, 42)::Float64
│   %2 = invoke Base.Math.sin(%1::Float64)::Float64
└──      return %2
) => Float64
```","['base/compiler/ssair/passes.jl', 'test/compiler/irpasses.jl']",SROA optimization not working correctly with constant globals which prevents the elimination of certain redundant operations.
5d213f6018767553142ce9e1ecc5dca9c1520047,1602087164,"a few improvements to compilation timing (#37841)

- print extra time info consistently parenthesized
- include more inference time in compile time
- try to make CODEGEN timing more accurate
- remove useless METHOD_LOOKUP_COMPILE and LLVM_EMIT timings","['base/timing.jl', 'src/aotcompile.cpp', 'src/codegen.cpp', 'src/gf.c', 'src/jitlayers.cpp', 'src/julia_internal.h', 'src/timing.h']","Compilation timing reports are inconsistent, inaccurate and may exclude certain segments of the inference time. Some timing categories, like METHOD_LOOKUP_COMPILE and LLVM_EMIT, appear redundant."
617afff73dfcdb5d929bac8890482fc236316abb,1513790412,"fix #25137, return value of `dlclose` on windows (#25175)

- Invert boolean value returned by Windows FreeLibrary so it matches
  that of POSIX dlclose
- Add test of jl_dlclose/Libdl.dlclose to test/libdl.jl
","['src/dlload.c', 'test/libdl.jl']","The `dlclose` function is returning an inverted boolean value on Windows compared to POSIX, leading to inconsistent behavior across platforms."
e24dd3b968346f33938bec901a61898c8d878de4,1663383555,"inference: make `limit::Int` as a caching key of `CachedMethodTable` (#46799)

Sometimes `Core.Compiler.findall(::Type, ::CachedMethodTable; limit::Int)`
is called with different `limit` setting (in particularity
`return_type_tfunc` calls it with `limit=-1`). The query should return
different results given different `limit` settings, so its cache should
also have different keys per different `limit` settings.

fix #46722",['base/compiler/methodtable.jl'],"`Core.Compiler.findall(::Type, ::CachedMethodTable; limit::Int)` function's caching does not account for variations in `limit`, leading to incorrect cached results when called with different `limit` values."
9489e64ccfeb85f22896add64536138e9fe4d0f0,1608601493,"Adapt Windows `cglobal()` search for `libjulia-internal`

On Windows, we have a special list of libraries that we search for
default symbol resolution.  Now that we have symbols defined in
`libjulia` and then imported by `libjulia-internal`, we need to make
certain that we search `libjulia-internal` first (so that we find
non-trampoline functions first) and then `libjulia` (so that we do in
fact eventually find the symbols at all).
","['src/ccall.cpp', 'src/codegen.cpp', 'src/dlload.c', 'src/init.c', 'src/julia.h', 'src/julia_internal.h', 'src/runtime_ccall.cpp']","Symbol resolution on Windows fails to find non-trampoline functions due to the order of library search, with `libjulia-internal` not being prioritized."
e0ca7ce5d11f742f0ec223af7d22687624feedd9,1599618384,"Fix serialization of SSAValues (#37370)

* Restore serialization of certain IR nodes.

* Make sure we rebuild if the serialize heaader changes.",['src/ircode.c'],"The serialization process for certain Intermediate Representation (IR) nodes is failing, causing incorrect data to be stored."
cf1ea59225f42cfb9569a6a218d1ccdba23b0e39,1530393512,"small IR printing improvements

- The change for `print(nothing)` caused GotoNode to be printed :-quoted. Fix.
- Avoid double-quoting symbols as arguments (e.g. `:(:x)`).
",['base/compiler/ssair/show.jl'],The current IR printing process fails to properly quote GotoNode and unnecessarily double-quotes symbols as arguments.
9e20e03b58e7f63be7283ee181dffcce889e4e23,1573896056,"REPL: allow tweaking the implicit IOContext of the REPL (#29249)

This adds an `iocontext::Dict{Symbol,Any}` field to `LineEditREPL.options`,
which can be initialized with `atreplinit`, and updated
interactively, e.g. `Base.active_repl.options.iocontext[:compact] = true`.

Fixes #20509.",['stdlib/REPL/src/REPL.jl'],"When interacting with the REPL, there's no way to modify the implicit IOContext, limiting customization options for users."
0440507b4df7a24d3d5b66401b4f76ab81320412,1472836903,"Repeatedly divide read buffer size by 8 until success. Fixes #11481.

Dividing by 8 leads to success on the second try in the case of the failure of --lisp on Windows 7.
",['src/support/ios.c'],Failure occurs when executing --lisp on Windows 7 due to potential buffer size issues.
2b0f219bc1133e3af893e76661c5ce3e1779a92f,1515268914,"Replace ""labelled"" with ""labeled"" in documentation (#25426)

""labeled"" is the more common spelling, and less likely to be
interpreted as a misspelling at first glance.

https://books.google.com/ngrams/graph?content=labeled%2Flabelled&corpus=15","['base/pointer.jl', 'base/strings/string.jl']","Inconsistencies in the spelling of the word ""labeled"" in the documentation, could potentially confuse users and give the impression of a typo."
54ed72a45c9b8b6bc6fa001755fa4d15ccd61c5f,1600475461,"[BinaryPlatforms] Do not cache host platform

Caching the host platform can lead to some nasty bugs, like libgfortran version
not being detected because openblas -> libgfortran isn't loaded when the
variable is set.
","['base/binaryplatforms.jl', 'test/binaryplatforms.jl']","Caching of host platform results in inaccurate detection of libgfortran version, as the openblas->libgfortran path isn't initiated when the variable is determined."
e63634223253926914caad23f4c0d4da44387382,1663838905,"Add assume_fatal_throw optimizer option (#46856)

This option frees the optimizer from having to prove nothrow in order
to move certain side effects across call sites. It is currently enabled
in finalizer inlining, but there may be opportunities to use it elsewhere
in the future, as well as potentially plumbing it down to LLVM. The
intended use case is not in the main compilation pipeline, but rather
for alternative compilation modes where thrown errors are fatal and
the state of the heap can not be observed after a thrown error.","['base/compiler/ssair/passes.jl', 'base/compiler/types.jl']","Optimizer unable to move certain side effects across call sites without proof of nothrow, causing complications in finalizer inlining and restrictions in alternative compilation modes."
032eec0351decd64ca78d10f287167a8358ce687,1581961577,"Added usage example of `ncodeunits`. (#34605)

* Added usage example of `ncodeunits`. 
* Added some weird characters to show this is not the same as the length.",['base/strings/basic.jl'],"The `ncodeunits` function lacks usage examples, especially demonstrating its behavior with unusual characters."
c3cd3ebd0f652e59efb0b82d67a7109eb09a8efb,1686619636,"Fix refcount violation for pending_nodes

These nodes get passed through renaming, but with SSAValues already
renamed. Due to a long-standing bug, we were failing to refcount
those SSAValues on insertion. Fix that bug.
",['base/compiler/ssair/ir.jl'],"SSAValues, after renaming, are not correctly refcounted upon insertion in pending_nodes, resulting in refcount violation."
876df7929fd96de2975bf172f6034ba3e4e1b73e,1630737401,"fix #42078, improve the idempotency of callsite inlining (#42082)

After #41328, inference can observe statement flags and try to re-infer
a discarded source if it's going to be inlined.
The re-inferred source will only be cached into the inference-local
cache, and won't be cached globally.","['base/compiler/abstractinterpretation.jl', 'base/compiler/inferencestate.jl', 'base/compiler/optimize.jl', 'base/compiler/ssair/inlining.jl', 'base/compiler/typeinfer.jl', 'test/compiler/inline.jl']","Inference re-infers a discarded source for inlining, potentially leading to idempotency issues due to the source only being cached locally and not globally."
a648f4a8eccd7c2bd8bd89c6835c3ee00bfad76a,1474217308,"Changed the test for symmetry of a Number. (#18529)

* Changed the test for symmetry of a Number.

* added tests for issymmetric with NaN16, NaN32, and NaN as arguments
","['base/linalg/generic.jl', 'test/linalg/generic.jl']","The current issymmetric test for Numbers fails when NaN16, NaN32, and NaN are used as arguments."
d10d90c35a8e94f96934ffaa4bbcb6d05a50b890,1683664254,"Do not reallocate on sizehint to same size (#49703)

The sizehint! code currently do not reallocate when sizehinting to a smaller
size if 1/8th or fewer elements will be freed. However, the check rounds down,
so an array of size e.g. 3 resized to size 3 will ""free"" 1/8th of the elements,
namely zero elements, needlessly resizing.
This commit changes the check to only reallocate if MORE than 1/8th of elements
will be freed.",['src/array.c'],Unnecessary reallocation occurs when resizing an array to the same size due to the rounding down operation in the check within sizehint! code.
00e74c37bc1431a779e8de3c20f3a22b008cfe8d,1499691897,"separate type docs and constructor docs (#22690)

* Vector - docstring for constructor

* Matrix - docstring for constructor

* Array - split type and constructor docstring

* BitArray - type documentation
","['base/array.jl', 'base/bitarray.jl', 'base/docs/helpdb/Base.jl']","The constructor and type documentation for classes Vector, Matrix, Array, and BitArray are merged together, making it hard to distinguish between them."
5945f4d659cc02f887602eaa281b1f2dd0cee263,1613954376,"Change Windows CRT func to be considered as libjulia func (#39636)

This prefers crtdll over ntdll.
This supports the specialization of `memcpy` ccall on Windows.","['src/ccall.cpp', 'src/dlload.c', 'src/init.c', 'test/ccall.jl']",`memcpy` ccall on Windows is not being optimized due to CRT functions not being treated as libjulia functions.
1acec74b4e9876dd8635c3c1477681f1b91fb6ee,1684490695,"Make `apply_type_nothrow` robust against `TypeVar`s in upper bounds (#49863)

For types like `Foo{S, T<:S}`, `apply_type_nothrow` could in some
situations check whether the argument is a subtype of the upper bound of
`T`, i.e. `S`, but subtyping agaist a plain `TypeVar` would fail.
Instead return `false` in this case.

Fixes #49785.","['base/compiler/tfuncs.jl', 'test/compiler/inference.jl']","`apply_type_nothrow` function fails when checking if an argument is a subtype of the upper bound of `T` in situations where the type is like `Foo{S, T<:S}`, resulting in subtyping against a plain `TypeVar`."
dfd8fc1f9067a4ec78dfdab0b36089842a10bab9,1490421604,"fix a method cache matching issue with Type{T}

This is needed to avoid confusing `Type{A{B}}` and `Type{A{B} where B}`.
In the future, this can be improved by not using `Type{ }` to dispatch
types with free variables.
",['src/typemap.c'],Collision in method cache matching due to inability to effectively differentiate between `Type{A{B}}` and `Type{A{B} where B}`.
ee0621fabead899300a74d4d58cccef026c073b1,1592499871,"Fix: lastindex for Numbers (#36314)

* Fix: lastindex for Numbers

* Boundcheck for lastindex numbers

* tests for lastindex, firstindex for numbers

* include example test from #36311","['base/number.jl', 'test/numbers.jl']","'lastindex' function for numbers is not bound-checked, leading to potentially erroneous results. 'firstindex' function for the same data type also lacks respective tests."
55808a56e0fcd147b10e35d64721a1849c841196,1633663785,"Implement `modf` in Julia (#42392)

Currently `modf` calls into libm, and is one of the few remaining
holdouts that use libm. This commit reimplements it in Julia using a
simple, naive implementation that matches the IEEE behavior and has
performance on par with a port of the musl implementation and with the
existing implementation.

Co-Authored-By: Simon Byrne <simonbyrne@gmail.com>
Co-Authored-By: woclass <wo@wo-class.cn>","['base/math.jl', 'test/math.jl']","`modf` function still relies on libm, making it one of the few functions that has not yet been implemented in Julia."
901f1e283e75a17ae669d88500307bd7cc8c1758,1594409107,"gf: sort order is not transitive over subtyping (#36603)

We initially assume the sort over is transitive over subtyping, because
it usually is, and that lets us partition the sort space. But then we
need to do one extra comparison step at the end before checking for
ambiguities.","['src/gf.c', 'test/ambiguous.jl', 'test/errorshow.jl']",Assumption of transitivity in subtyping for sort order is causing extra comparison steps and potentially leading to ambiguity issues.
65757ba6d9ecacc95f7f37231af4bc428f52a579,1494609003,"deprecate srand(rng, filename::AbstractString)

`srand` should accept a seed as second argument; here `filename`
is only an indirect seed, preventing the use a string object as
a direct seed.
","['base/deprecated.jl', 'base/random.jl', 'test/random.jl']","The `srand` function incorrectly accepts a filename as a second argument, preventing the usage of a string object as a direct seed."
87c5f36257c54cb4c9f026339d07e5d6ed62a329,1544174325,"Create new sparse matrix for R factor in sparse least square solve (#30289)

instead of using a view to avoid slow fallback in back substitution.

Fixes #30288",['stdlib/SuiteSparse/src/spqr.jl'],Using a view for the R factor in sparse least square solve results in slow fallback during back substitution.
178ac974b5e9f649c0ffb3ed78752dc9241b7a5a,1583530383,"walkdir: avoid symlink loops when `follow_symlinks == false` (#35006)

* walkdir: avoid symlink loops when `follow_symlinks == false`

Because `isdir()` attempts to dereference symlinks, attempting to
`walkdir()` trees that contain symlink loops errors out. This change
modifies `walkdir()` to treat all symlinks as files when
`follow_symlinks == false`.

* rm: When checking `filemode()`, use `lstat()` to avoid following symlinks","['base/file.jl', 'test/file.jl']","Symlink loops in trees handled by `walkdir()` function cause errors, even when `follow_symlinks == false`."
fe2f271520aa36c2029cce3ba65194ff3fdf890b,1479757474,"Integrate test segfaults with the Testset scaffolding

Fixes #19376

Also add utility tests `segfault` and `throw_error_exception` that do
exactly what they sound like.
","['test/runtests.jl', 'test/util/segfault.jl', 'test/util/throw_error_exception.jl']","Integration test is causing segfaults within the Testset scaffolding, and utility tests `segfault` and `throw_error_exception` are nonfunctional."
94adc99c57485c8a1337ada0a2fa09604a026b16,1473820816,"Deprecate `@vectorize_1arg` for Dates functions within scope of Dates module (#18456)

* Deprecate vectorize_1arg for Dates within module

Otherwise there are issues with functions being independently defined
within multiple modules:

```julia
julia> using Base.Dates

julia> unix2datetime(0)
WARNING: both Dates and Base export ""unix2datetime""; uses of it in module Main must be qualified
ERROR: UndefVarError: unix2datetime not defined
```

* Slight adjustment for readability
",['base/deprecated.jl'],"The function `unix2datetime` conflicts with exports from both Base and Dates modules when called in Main, causing an UndefVarError."
eb704869796fdd33ce306f570928bf5d20d1bc5f,1662196448,"Fix infinite recursion bug with type mismatch in `unsafe_wrap()` (#46610)

If a user provides an incorrect pointer type in `unsafe_wrap()`, this
can cause an infinite recursion due to lax type constraints in the last
method of `unsafe_wrap()`.  Example:

```
julia> x = zeros(10)
       unsafe_wrap(Vector{UInt8}, pointer(x), (10*sizeof(eltype(x)),))
ERROR: StackOverflowError:
Stacktrace:
 [1] unsafe_wrap(Atype::Type, p::Ptr{Float64}, dims::Tuple{Int64};
own::Bool) (repeats 19993 times)
   @ Base ./pointer.jl:92
```","['base/pointer.jl', 'test/core.jl']","When incorrect pointer types are passed to `unsafe_wrap()`, it results in an infinite recursion which triggers a StackOverflowError."

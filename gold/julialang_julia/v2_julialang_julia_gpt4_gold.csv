commit_id,commit_date,commit_message,actual_files_modified,transformed_message_gpt4
011dc750436827b37c9512d892bada1d54ba4234,1485416786,"Add `broadcast!(identity, ::Array, ::Array)` specialization

Improves performance of `y .= x` for `Array`s `x` and `y` of the same
size by delegating to `copy!`.
",['base/broadcast.jl'],"Performance issue with the operation `y .= x` for same-sized `Array`s `x` and `y`, it's not executing as efficiently as it could."
0371bf44bf6bfd6ee9fbfc32d478c2ff4c97b08b,1673717908,"In string search, replace unsafe_wrap with codeunits (#48275)

Currently, `findfirst(::String, ::String)` will eventually end up calling
`unsafe_wrap` on both arguments, in order to use Julia's generic vector search
functions. This causes unnecessary allocations.

This PR replaces use of `unsafe_wrap` with `codeunits`, removing the allocation.

See also: #45393",['base/strings/search.jl'],"Unnecessary allocations when `findfirst(::String, ::String)` is called, due to `unsafe_wrap` being used for arguments in Julia's generic vector search functions."
0968929b58f9595bfaa7842f8870586367aaba82,1641948466,"Add some comments to `Make.inc` that explicitly define what we mean when we say ""assert build of Julia"" (#43732)

* Add some comments to `Make.inc` that explicitly define what we mean when we say ""assert build of Julia""
* Add a brief note to the devdocs with instructions on how to build an ""assert build"" of Julia
* Recommend putting the variables into the `Make.user` file",['Make.inc'],"Lack of clear definitions and instructions on how to build an ""assert build"" of Julia in `Make.inc` and devdocs."
0a8cb385a1491efd1c85305e52171c6a9d40b19c,1468258191,"use -O0 mode for compilation

it's rarely useful to run in -O2 mode when compiling code,
since that work is usually thrown away quickly,
but potentially greatly slowing down the precompilation process
","['base/loading.jl', 'base/pkg/entry.jl']",Using -O2 mode for compilation slows down the precompilation process and the work is usually discarded quickly.
0c223f8c4ac54cf82b8cc3dc0058784c57bfc56f,1463715873,"credentials callback overhaul
- handle https & ssh connections
- new credential types

added caching of credentials in `update`
added cross-platform `getpass` implementation [#8228]
added comments and documentation
show last saved value for pub/priv key path instead of default key path
move `getpass` to `Base`
introduced SSH credential type for cached credentials
changed PK variable to `SSH_KEY_PATH`, added PbK guessing from PK
","['base/libgit2/callbacks.jl', 'base/libgit2/consts.jl', 'base/libgit2/types.jl', 'base/libgit2/utils.jl', 'base/pkg/entry.jl', 'base/util.jl', 'test/libgit2-online.jl', 'test/libgit2.jl']","Issues with handling credentials in both https & ssh connections, including lack of caching, insufficient documentation, and absence of cross-platform password entry. Saved values for public/private key paths are not displayed correctly. SSH credential type needed for better handling of cached credentials."
0c388fc340cc6db7f531ec3ff5b172e55ff8ceb4,1588882331,"RFC: treat small negative λ as 0 for sqrt(::Hermitian) (#35057)

* treat small negative λ as 0 for sqrt(::Hermitian) and log(::Hermitian)

* typo

* added tests, docs; removed rtol argument for log

* don't ask for rtol so close to eps(Float64)","['stdlib/LinearAlgebra/src/dense.jl', 'stdlib/LinearAlgebra/src/symmetric.jl', 'stdlib/LinearAlgebra/test/symmetric.jl']",The sqrt() and log() functions are returning incorrect values when applied to Hermitian matrices with small negative eigenvalues.
131813f1bb91a219d297908132972420352770e9,1518452867,"missing @inbounds in copyto! (#25991)

It seemed like this line should have an `@inbounds` call since the previous code already called `checkbounds`.",['base/abstractarray.jl'],Missing `@inbounds` in `copyto!` function results in unnecessary bounds-check even after a prior `checkbounds` call.
14a4feda57839182244881da0cebebf80126a37a,1458123042,"Use ""sidebars"" for markdown tables.

Adds `|` columns on each side of markdown tables to avoid trailing
whitespace problems in rendered documents. This is still valid markdown.

This does not change the parsing of markdown tables, which can still
be written without the `|` columns on each side.
","['base/markdown/GitHub/table.jl', 'test/markdown.jl']","Markdown tables without ""|"" columns on either side cause trailing whitespace problems in the rendered documents."
14e9c4261ec04aa45b46868f428bcecf9a8e04bb,1523297160,"Also lift SelectInst addrspaces

This is a followup to #26668, and performs the same operation,
but for `select` instructions rather than for phi nodes.
Came up when looking at IR generated by the new optimizer for
kf/iterate.
","['src/llvm-propagate-addrspaces.cpp', 'test/llvmpasses/propagate-addrspace.ll']",Select instruction address spaces not being lifted can potentially cause issues when examining IR generated by the new optimizer for kf/iterate.
1799ae655eb50504b85ddd16708650d63ce0dfd5,1637391117,"optimizer: some cosmetic improvements on inlining code (#43115)

- remove an unnecessary field and allocation
- make the signature order consistent across the file:
  `ir::IRCode, idx::Int, stmt, rt, info, flag::UInt8, sig::Signature, state::InliningState, todo::Vector{Pair{Int, Any}}`
- pass the same `stmt::Expr` object and slightly improve its type-stability",['base/compiler/ssair/inlining.jl'],Inconsistencies in signature order and type-stability issues in the optimizer's inlining code. Unnecessary field and allocation present.
1859a91231aff6561976e1c2ed49c40ff008c5ba,1531463762,"Adjust initialization in maximum and minimum (#27845)

* Adjust initialization in maximum and minimum

Fixes #27836

* Reduce to first element in index range for OffsetArrays

* Adjust mapreduce to use first element in offset range as well.

Adjust tests

* Avoid defining global Areduc variable in reducedim tests

* Add comment in mapslices to explain the wrapping of scalars
","['base/abstractarray.jl', 'base/reducedim.jl', 'stdlib/SparseArrays/src/sparsematrix.jl', 'stdlib/SparseArrays/test/higherorderfns.jl', 'test/offsetarray.jl', 'test/reducedim.jl']","OffsetArrays and mapreduce functions are not initializing with the first element in offset range, causing unexpected values for maximum and minimum."
1a12495e3a6969a7a8276dde2f227fc6793b3e18,1619439507,"REPL: Fix incorrect docstring for .. (#40563) (#40607)

This PR fixes #40563 .
This is essentially a mirror of #39975 . Please refer to it for more information.","['stdlib/REPL/src/docview.jl', 'stdlib/REPL/test/repl.jl']","The docstring for "".."" in the REPL is incorrect, potentially misleading users about its functionality."
1b675b1ed5272574fb945f3923d9271660f7d8f1,1662174510,"inlining: Add an option to not generate compilesig :invoke statements (#46612)

In general, when we inline we may change which MethodInstance to invoke
to avoid over-specializing. This makes sense when generating IR to
be codegen-ed, but makes less sense when we are using inlining as
part of a code analysis pipeline, since the compilesig signature
will often have not been inferred yet. Add an optimizer option to
turn on/off generation of compilesig :invokes.","['base/compiler/ssair/inlining.jl', 'base/compiler/types.jl']","When employing inlining as part of a code analysis pipeline, changing the MethodInstance to invoke before the compilesig signature is inferred may cause over-specialization issues."
1b9f640c160f4f364063a6b2b2e798a93c123abd,1673994728,"namedtuple: Use correct return type in merge/diff (#48290)

In a lapse of memory, I had assumed that NamedTuple was covariant
like Tuple, but since this is not the case, we do actually need
to pass the types into the constructor. However, the main
constructor for NamedTuple has an extra `convert` call to the
declared tuple type. This call is problematic for effects, because
the type is unknown. For the merge/diff case, we are
guaranteed that the convert is a no-op, but the compiler's analysis
is not strong enough to prove this. Work around that by
introducing an `_NamedTuple` constructor that bypasses the
unnecessary convert to make sure that the compiler can prove
sufficiently strong effects.","['base/namedtuple.jl', 'test/namedtuple.jl']","The merge/diff function in NamedTuple is not using the correct return type due to assumptions about covariance, leading to problematic conversions especially in terms of compiler's analysis of effects."
1d6b7fd4e5b11c976792430644fe07dc2c320301,1505605097,"Add credential approval/rejection

Only save credentials to the cache when they are used successfully.
Credentials that trigger an EAUTH exception will be removed from the
cache.

Note: Modifications to the credential field in the CredentialPayload
should not modify cached credentials until they are approved.
","['base/libgit2/callbacks.jl', 'base/libgit2/libgit2.jl', 'base/libgit2/types.jl', 'base/libgit2/utils.jl', 'test/libgit2-helpers.jl']","Credentials triggering an EAUTH exception are not being removed from the cache, causing potential conflicts. Cached credentials are being modified before approval confirmation is received."
1dc380411545627d7e8af51b87d1bafaceade194,1609784464,"Small drive-by cleanup: Make constant explicit (#39056)

This code is a bit of a leftover from when we still had `nfields(::Type)`,
but at this point it was always just returning the number of fields
of `DataType`. I was a bit confused by this code, so I thought
just using `jl_datatype_t` here explicitly makes clear that it does
actually just return said constant.",['src/codegen.cpp'],"The code in question returns number of fields of `DataType` implicitly, causing confusion about its actual functionality."
21823899cc1724871a8e679287a94bb4acee72d7,1563972218,"mod(n, range) for integers (#32628)

`mod` now accepts a unit range as the second argument to easily perform offset modular arithmetic to ensure the result is inside the range","['base/range.jl', 'test/ranges.jl']",The `mod` function cannot currently accept unit range as its second parameter hindering the easy execution of offset modular arithmetic within the specified range.
25fadf11d81da674420574c86b5890fae592fe47,1588255630,"fix docstring of `parent` (#34027)

* fix docstring of `parent`

* Update abstractarray.jl

* Further clean up the explanation.

* Update abstractarray.jl

Co-authored-by: Viral B. Shah <ViralBShah@users.noreply.github.com>
Co-authored-by: Viral B. Shah <viral@mayin.org>",['base/abstractarray.jl'],"The docstring for the `parent` function is incorrect, leading to potential misinformation or misunderstanding."
2998c905072d6725213db819700459009269c073,1681228726,"split typemap more frequently / aggressively

Seems to have very little impact on size now (since we use tables much
more heavily now instead), so try bumping this parameter.
",['src/typemap.c'],Typemap not splitting frequently enough possibly having an impact on the overall size due to heavy usage of tables.
2dd34c150d5081222c2df1dc788202c111d01c17,1625784277,"[contrib/mac] Teach `renotarize_dmg.sh` to use `s3://` URLs better (#41521)

We can now automatically download a non-public `.dmg`, notarize it, then
upload it (and make it public!) all automatically",['contrib/mac/app/renotarize_dmg.sh'],"The `renotarize_dmg.sh` script fails to automatically download non-public `.dmg` files, notarize them, and then upload and make them public."
2ed494de7e148c665d48476c327309d5968c317a,1509815000,"Have ^C throw InterruptException

In general ^C throws InterruptException. The only reason this doesn't
happen in TerminalMenus is because we enable raw mode which makes ^C
just another key sequence. I think it is more coherent to make this
throw an InterruptException as it would in non-raw parts of code.
If the calling code wants to handle this, it can catch the exception.
",['src/AbstractMenu.jl'],"In TerminalMenus, enabling raw mode turns ^C into just another key sequence, diverging from the general behavior of ^C throwing an InterruptException."
2fd386c0ced40f671e77a1386a0c0c4e952ff8bb,1537558619,"Disable CFG transforms for now (#29265)

CFG transforms can currently cause issues like #29107,
but I'm still a few days away from fixing this properly. In the meantime,
disable the transform.","['base/compiler/ssair/ir.jl', 'test/inline.jl']","Current Control Flow Graph (CFG) transformations cause issues similar to #29107, requires disabling until a fix is available."
3051f47a40c37a2e898b9814856f7d4173b6d8c4,1685989763,"Use xchg to swap boxed values (#45147)

* Use xchg to swap boxed values

* Update src/cgutils.cpp

Co-authored-by: Valentin Churavy <vchuravy@users.noreply.github.com>

* Update src/cgutils.cpp

Co-authored-by: Valentin Churavy <vchuravy@users.noreply.github.com>

---------

Co-authored-by: Jameson Nash <vtjnash@gmail.com>
Co-authored-by: Valentin Churavy <vchuravy@users.noreply.github.com>",['src/cgutils.cpp'],The current method for swapping boxed values appears to be inefficient or faulty.
327b2e320678262d3cf40fdd1e6f835d8ddb1915,1597694996,"Fix type of allocated array when broadcasting type unstable function (#37028)

We need to call similar on the `Broadcasted` object rather than on dest array.
Otherwise the `BroadcastStyle` isn't taken into account when allocating new
array due to function returning elements of different types.","['base/broadcast.jl', 'test/broadcast.jl']","Broadcasted object does not take into account the BroadcastStyle when allocating new arrays, resulting in type mismatches returned by functions."
38d9d837ad2d4b0438c36c60c17c0c0f8265bf8a,1678984592,"reuse existing typemap search for method overwrite detection (#48968)

It does not really make sense to scan the tree twice, when we already
will extra this info near completely from the intersection search.
The cost was small, but non-negligible.",['src/gf.c'],"There are redundancies in scanning the typemap tree twice for method overwrite detection, resulting in unnecessary extra costs."
3d922e44ad868a9f39a10d47b55e3325e5422743,1609354817,"specialize on mapfoldl(::Type, ...) (#39019)

Before:
```julia
julia> using BenchmarkTools

julia> b = rand(Bool, 10000);

julia> @btime mapfoldl(Int, +, b; init=0)
  1.136 ms (9025 allocations: 141.02 KiB)
5057
```

After:
```julia
julia> @btime mapfoldl(Int, +, b; init=0)
  1.094 μs (1 allocation: 16 bytes)
5057
```","['base/reduce.jl', 'test/reduce.jl']","The performance of mapfoldl function is significantly reduced when used with ::Type, causing high memory allocation and slow processing times."
41ce35d125711a975ce7f3d0be356ac3726a6e7a,1628631043,"codegen: fix emission criteria for some special functions (#41813)

We depend on taking the address of these functions to support unwinding
properly, particularly on Win64.

Fixes #41750",['src/codegen.cpp'],"The address retrieval of some special functions critical for proper unwinding is malfunctioning, particularly on Win64 platform."
42abb037cec37e06e1d8c96282e2498605b7459b,1502870575,"REPL: ""Alt-<"" jumps first to first history entry of current session (#23213)

Instead of jumping to the beginning of all accumulated history
(which can contain 10s or 100s thousand entries), it seems more
useful to jump to the first entry of the current session.
Then it's enough to press ""Alt-<"" again if one wants to jump to
the absolute first entry.","['base/repl/REPL.jl', 'test/repl.jl']","""Alt-<"" shortcut in REPL jumps to the beginning of all accumulated history, making navigation to the first entry of the current session cumbersome and inefficient."
4412dd4d92fb4e86d67973b48703bc1fcc0656d9,1538528774,"Add an option to disable building libssh2 tests

These fail to build if mbedtls is not available in the global
linker search path. Add a simple flag to disable them, since
we don't use them.
",['deps/libssh2.mk'],Build failures occur when libssh2 tests are run and mbedtls is not available in the global linker search path.
44572640434337893ed0f9e973434a079008d2ba,1552553261,"Remove integer domain example that doesn't work (#31298)

* Update integer literal example to reflect smarter interpretation of exponents

* Drop mention of integer size

* Add an extra example of how to fix an exponent domain error

* Fix a sign error in documentation
",['base/intfuncs.jl'],"Integer domain example in documentation is incorrect, causing confusion due to improper interpretation of exponents and incorrect integer size reference."
4a19b753804ed0b06fab9681309941862eaa7227,1618302707,"Add vim bindings to TerminalMenus (#37940)

* `k` to move up
* `j` to move down
* `<space>` as an alternative to `<enter>`","['stdlib/REPL/src/TerminalMenus/AbstractMenu.jl', 'stdlib/REPL/test/TerminalMenus/runtests.jl']",TerminalMenus lacks vim keybindings which restricts navigation and selection options for users accustomed to these controls.
4c7b4f180c8b3e5d332cd4dba43ea2897f9d77ff,1492836941,"remove manual memory-management from Timer and AsyncConditional

fixes a potential resource leak with a repeating timer
and is just generally less finicky
","['base/event.jl', 'base/libuv.jl', 'test/pollfd.jl']","Potential resource leak found when utilizing a repeating timer, caused by manual memory management in Timer and AsyncConditional."
4dede6d727559638d2c5452923a03c1a8cb39aa8,1608043093,"LibGit2: improve error when CA root cert can't be set (#38827)

This also fixes an insecure behavior: even if `set_ssl_cert_locations`
failed, `REFCOUNT` was still incremented, which meant that subsequent
calls to `ensure_initialized` didn't call `initialize` and so there was
never a successful call to `set_ssl_cert_locations`. Without this
libgit2 defaults to not verifying host identities and that is insecure.
To prevent this, this patch locks on `ensure_initialized` and decrements
`REFCOUNT` if initialize throws an error, ensuring that `initialize`
succeeds at least once, including the call to `set_ssl_cert_locations`.","['stdlib/LibGit2/src/LibGit2.jl', 'stdlib/LibGit2/test/bad_ca_roots.jl', 'stdlib/LibGit2/test/online.jl']","LibGit2 fails to set the CA root cert due to an error in set_ssl_cert_locations; additionally, subsequent calls to ensure_initialized do not call initialize, resulting in insecure default host identity verification."
52ba665089057c78ad0c3efc278b88543efca5c5,1452474500,"Add generic At_ldiv_B! and Ac_ldiv_B! methods for triangular A. Add BLAS hook for matrix-matrix and matrix-vector At_ldiv_B! with triangular A. Add tests for left-division by transposed triangular matrices.
","['base/linalg/bidiag.jl', 'base/linalg/triangular.jl', 'test/linalg/triangular.jl']","There are no generic At_ldiv_B! and Ac_ldiv_B! methods for triangular A, causing issues with matrix-matrix and matrix-vector left-division by transposed triangular matrices."
53603f6b74b81807fb48e0bd5f7d65e4a708d49f,1618269882,"Fix wine bootstrap (#40425)

* Fix wine bootstrap

Fixes #39124
Closes #39022

* fix cross-build, and other build issues

* this should probably be part of spawn, if it is needed

* Revert ""this should probably be part of spawn, if it is needed""

This reverts commit eb88a9cf06308a1edb27b15cf1dbb0aff8ae980a.

Seems to be needed

* fixup! fix cross-build, and other build issues

Co-authored-by: Jameson Nash <vtjnash@gmail.com>","['Make.inc', 'base/env.jl', 'cli/list_strip_symbols.h', 'sysimage.mk']",Wine bootstrap malfunctioning leading to cross-build and other build issues. It is possibly affecting other aspects of spawn operation.
54bc917a23036354634ea12bc8edeba8017be567,1466764556,"PermutedDimsArray: move iperm into the type parameters

This leads to a 10% speedup on getindex-heavy benchmarks, and makes row-major sums over row-major matrices indistinguishable (performance-wise) from column-major sums over column-major matrices.
",['base/permuteddimsarray.jl'],Row-major sums over row-major matrices are significantly slower than column-major sums over column-major matrices in getindex-heavy benchmarks due to iperm positioning.
5563aa5a536a380688df22edba60325f6bbf3368,1549055046,"Report exception stacks in _start and the fallback REPL

* Use display_error with the exception stack to provide more complete
  root cause info.
* Provide a way to define the error stream in the fallback REPL so it
  can be tested.
* Use the logging system for ""out of band"" system errors in fallback
  REPL
* Add some actual tests
","['base/client.jl', 'test/client.jl']","Exceptions in _start and the fallback REPL are not reported with complete root cause information, making it hard to debug issues. Additionally, the error stream in the fallback REPL cannot be defined, limiting testability."
55cc730445504d65d7cfc3e69131ac4c5f7847e6,1453121909,"Increase the signal stack size on AArch64

The default size is too small for libunwind and causes a stack overflow.
Also add a guard page to the signal stack making it easier to detect such
problems in the future. (Segfault instead of weird corruption...)

[av skip]
",['src/signals-unix.c'],Default signal stack size on AArch64 is too small causing stack overflow in libunwind and potential data corruption.
55dab67dcd0c1034622e63227fa54961ff783905,1581769619,"Consistently assert type-equality in `reduced_indices`

This risks making these routines more fragile in cases where
`reduced_index` is broken. However, this can be viewed as a good
thing because it increases the odds that errors will be caught early.

Moreover, it ensures that the return type is inferrable in cases
where the reduction is over the first dimension but constant-propagation
fails to detect this.
",['base/reducedim.jl'],"`reduced_index` function type-equality inconsistencies may lead to early breaking of routines, furthermore constant-propagation failure during reduction over the first dimension leads to uninferrable return types."
57fa0cadf932b30a74335c8bd7a1dcd49c2c2428,1637077791,"Revert ""make `last` work on any reversible collection (#42991)""

This reverts commit 1f484c3ecabdd7519fa68569b1688a153e92fb16 since it
seems to cause excess breakage for the benefits it brings.
","['base/abstractarray.jl', 'base/iterators.jl', 'test/iterators.jl']",The `last` function on reversible collections is causing excessive system interruptions while offering limited functionality benefits.
5a9717bf11a049819f86c09f6f4e349acdd01d21,1457101650,"Support negative bit-shift counts for <<, >>, and >>>

- Introduce methods that take unsigned shift counts
- Handle signed shift counts by dispatching to the respective unsigned shift counts, shifting in the opposite direction for negative counts
- Update documentation
- Add tests

Closes #14516.
","['base/gmp.jl', 'base/int.jl', 'base/intfuncs.jl', 'base/operators.jl', 'test/bigint.jl', 'test/int.jl']","Bit-shift operations (<<, >>, >>>) do not support negative shift counts, leading to incorrect results and exceptions."
5cd1e3e1f2e6d79bdeeb2b1bfbdbe9081074bd23,1611785637,"implement with fewer afoldl methods (#39414)

With constant-propagation, inference (and Varargs runtime) is likely
better able to handle this version now (and it removes the n^2 behavior
definitions for semi-low argument counts).

Now we also need to force Vararg specialization up to 16 arguments
manually, so we do that explicitly (and slightly hack-y).

Fixes regression in #39175","['base/operators.jl', 'test/operators.jl']","Constant-propagation leading to n^2 behavior definitions and Varargs handling up to 16 arguments requires manual, potentially unstable, specialization."
5cf8d1f5308ea5bb9e3ccd2690a1bbbf8ff48420,1586887871,"Add support for BBEdit (#35473)

This is perhaps the oldest native macOS text editor, and still a
favorite among many developers working on macOS.",['stdlib/InteractiveUtils/src/editless.jl'],"The software lacks support for BBEdit, impacting developers working on macOS who rely on this native text editor."
5e3e58e2cd8acd4739e23e705085c403b7abb92c,1663251197,"Revert ""Add ability to add output prefixes to the REPL output and use that to implement an IPython mode (#46474)"" (#46780)

This reverts commit e1188455456035ff6a80ed20e424aa5c8ebf437d.","['stdlib/REPL/src/LineEdit.jl', 'stdlib/REPL/src/REPL.jl', 'stdlib/REPL/test/repl.jl']","Adding output prefixes to REPL output in IPython mode causes unexpected bugs/issues, necessitating a code revert."
5e8f8a9b987a71ea918591272d937c77b2c1b503,1695827820,"codegen: add src alignment arg to emit_memcpy (#51152)

This maybe allows for LLVM to optimize things a bit further since some
passes check if both sides have correct/equal alignment

Co-authored-by: Jameson Nash <vtjnash@gmail.com>","['src/ccall.cpp', 'src/cgutils.cpp', 'src/codegen.cpp', 'src/intrinsics.cpp']",LLVM optimization passes may be hindered due to lack of correct/equal alignment information on both sides during emit_memcpy in codegen.
5fa5b7f1e3e3afc6109335b5b210554033f93938,1473305237,"Simplify and relax logical indexing bounds checks

Fixes #18271. Allow multidimensional logical arrays as indices into a particular dimension so long as there is only one non-singleton dimension.
","['base/abstractarray.jl', 'test/abstractarray.jl']",Multidimensional logical arrays used as indices are causing errors as they are not permitted in situations when there is only one non-singleton dimension.
62a0a3f6cbd0335c89edfa5cfba6d26a1e54d717,1558468214,"Make append! and push! definitions more generic (#32065)

Some methods for append! and push! for Array actually work for any AbstractArray
since they only use resize!, setindex! and push!. Broaden the signatures
so that custom array types do not need to copy definitions from Base.

BitArray uses special methods, one of which was apparently not covered by tests.","['base/array.jl', 'test/bitarray.jl', 'test/offsetarray.jl', 'test/testhelpers/OffsetArrays.jl']","Methods append! and push! for Array which should work for any AbstractArray, are not generic and force custom array types to duplicate definitions from Base. BitArray also seems to use special methods that are not covered by tests."
64133f68a68a2bb52a8908bab25c32150a7e84fd,1545058213,"Fix #30006, getindex accessing fields that might not exist (#30405)

* Fix #30006, range getindex accessing fields that might not exist
* Add tests for #30006
","['base/range.jl', 'stdlib/SparseArrays/test/sparse.jl', 'test/ranges.jl']",'getindex functionality encounters issues when aiming to access non-existing fields within a range.'
649a05800dbc58d3adfbf683cdce5be405ba7790,1468937122,"Keep AddressSpace of global variables

For backends, where AddressSpace information is important (NVPTX) we
need to keep that information when moving global variables.
",['src/ccall.cpp'],Moving global variables leads to a loss of AddressSpace information for backends like NVPTX.
66f12303ee142fd9fe1817e3a2df8869df684969,1467994140,"make `size` of a product iterator concatenate the sizes of its components

this removes an extra layer of wrapping with `IteratorND`

add some inline declarations for `Generator` iteration

remove unused `IteratorND` type
","['base/generator.jl', 'base/iterator.jl', 'src/julia-syntax.scm', 'test/functional.jl']","The `size` of a product iterator does not accurately reflect the combined sizes of its components, leading to redundancy and unused types."
718bd3ef9db4474400c18160d42ce85be4a69988,1473279705,"fix an inverted return conditional from stale_cachefile (#18366)

also add plenty of helpful debugging information enabled by the environment variable:
JULIA_DEBUG_LOADING

this bug would cause compilation to become confused
and likely tardy at recompiling files when it should
that would up with longer dependency chains where one
of the files had been updated

this is a fix for #18150","['base/loading.jl', 'base/util.jl', 'test/compile.jl']","Compilation seems to lag behind when recompiling files after a file update, especially in cases involving long dependency chains, and debugging lacks sufficient information."
75bf562f40695088c9da1616a612edfc69ea7acf,1506875747,"small change in rational constructor (#23174)

* small change in rational constructor

* further change in rational constructor: only depend on sign
",['base/rational.jl'],The Rational constructor exhibits unexpected behavior due to dependencies on the sign.
78b7d76861cb336104e0b9aea64450aa79aaa565,1643330674,"[REPLCompletions] follow up #43865, keep input tuple type in `MethodCompletion` (#43946)

`MethodCompletion.tt` is being used by an external consumer like Juno or
VSCode's runtime completion features to get additional information like
return type, etc.",['stdlib/REPL/src/REPLCompletions.jl'],"External consumers like Juno or VSCode's runtime completion features are unable to get additional information like return type due to an issue with `MethodCompletion.tt`.
"
78e0ca37dbdb3399f44731731cc3ee7165bd8929,1693930212,"optimizer: fix the `all_rettypes_consistent` case of post-opt analysis (#51187)

The case does not seem to be functional, although it looks like we never
hit it currently.
We should have added test cases for this, so WIP until we come up with
some.","['base/compiler/inferencestate.jl', 'base/compiler/optimize.jl', 'test/compiler/datastructures.jl']","The `all_rettypes_consistent` case of post-optimization analysis in the optimizer isn't functional, but we are not currently hitting this case."
7aa128ed347cae2f44e69e4a2f43e8c43a4d5eed,1609026460,"Improve consistency of SONAME usage, fix debug installation

SONAME and RPATH inconsistency resulted in `julia`/`julia-debug`
occasionally being unable to find `libjulia.so`, due to
`libjulia-internal` not having the right RPATH set (it was set to
`$ORIGIN:$ORIGIN/julia`, when it now needs to be set to
`$ORIGIN:$ORIGIN/..`).  Use `patchelf` to address this during `make
install`.

We also want to use the SONAME of e.g. `libjulia` as much as possible,
so as to avoid searching the filesystem for libraries that are already
opened.

Also fix a few bugs in building `julia-debug`.
","['Make.inc', 'src/dlload.c', 'src/init.c']","Inconsistency in SONAME and RPATH causes `julia`/`julia-debug` to occasionally fail to find `libjulia.so`. Additionally, problems exist in the construction of `julia-debug`."
7be90097b2868b56280e16d3095561011db0d536,1488485041,"break some dependency backedges

This would be nicer if we had function types,
but this tries to at least hit a couple of the high points

fix #20780
","['base/deprecated.jl', 'base/operators.jl', 'base/promotion.jl']","The current codebase has missing function types, leading to potential breaking of dependency backedges and affecting system performance and stability."
7cd7a1b1b8d6af13047b3bd002f9d8e42c76d3dd,1686639261,"Enable JITLink in aarch64 linux. (#49745)

* Enable JITLink in aarch64 linux.

* Simplify logic to enable JITLink

* Do not enable JITLink on Aarch64 Linux with LLVM < 15

* Add NEWS entry and mention JITLink memory bug in ARM devdocs

---------

Co-authored-by: Sunho Kim <ksunhokim123@gmail.com>","['src/jitlayers.cpp', 'src/jitlayers.h']","JITLink is not enabled for aarch64 Linux, possibly leading to performance issues. The issue might be more evident when using LLVM versions lower than 15."
8079ee3fa12cec0a8864b3104f533a2f588f39e1,1497375961,"Add utilities for debugging LLVM during sysimg build

This adds an extra command line option to dump the unoptimized
rather than the optimized representation of the LLVM IR. This
is very useful when debugging new LLVM passes (which we're now
increasingly making use of) or when profiling LLVM, to split
out JIT and sysimg optimization.
","['base/options.jl', 'src/codegen.cpp', 'src/jitlayers.cpp', 'src/jloptions.c', 'src/julia.h', 'src/julia_internal.h', 'src/precompile.c']","LLVM IR debugging is difficult due to lack of option to dump unoptimized representation, increasing difficulty in debugging new LLVM passes and profiling LLVM."
81e20060867c5797b7509ed036497d704bf67a23,1598156467,"Make sure global constants are recognized more reliably as such during GC lowering. (#37113)

Some of the pointer chasing duplicates the logic in the rest of the pass but are never the less
necessary to handle operation in the untracked address space.",['src/llvm-late-gc-lowering.cpp'],"Global constants during GC lowering are not always recognized reliably, duplicating logic in the pass, which is necessary to handle operation in the untracked address space."
871bcac7fa1c7bda3ad6743c2ede2d141cced483,1575311735,"[build] read uninstall from manifest (#33906)

This helps us uninstall the right content more generally.
And this also lets us print a warning of the user's versions mismatch
those in the repository (may be intentional, so we just print a warning
so that the user is aware).","['deps/llvm.mk', 'deps/tools/bb-install.mk', 'deps/tools/common.mk', 'deps/tools/uninstallers.mk']","Uninstall process is not correctly reading from the manifest, leading to potential version mismatches between the user's system and the repository without the user's awareness."
872d8ea0358f7431ace85498a1761253773068dc,1568931103,"FileWatching,test: remove max timeout (#33316)

This has been pretty flaky on CI systems, and isn't really required of the tests.

fix #33311","['stdlib/FileWatching/src/FileWatching.jl', 'stdlib/FileWatching/test/runtests.jl']",Flaky CI systems due to file watching tests having a max timeout causing failures.
8c014445a7e6ba515286e38fe4585510cc93d300,1607973825,"inference: stop re-converging worlds after optimization (#38820)

The validity did not change, so we should not need to update it. This
also ensures we copy over all result information earlier, so we can
destroy the InferenceState slightly sooner, and slightly cleaner data flow.","['base/compiler/compiler.jl', 'base/compiler/optimize.jl', 'base/compiler/typeinfer.jl', 'base/compiler/types.jl']","Inference results are being updated unnecessarily post-optimization causing inefficiencies and later destruction of the InferenceState, resulting in less clean data flow."
9182326c105c3042cb95efe59fd088265512c885,1667862428,"Base: add new help function `isdebugbuild` (#47475)

* Base: add new help function `isdebugbuild`

* isdebugbuild: replace ccall with new fucntion

* isdebugbuild: fix typo in docstring","['base/util.jl', 'contrib/generate_precompile.jl', 'contrib/julia-config.jl', 'stdlib/InteractiveUtils/src/InteractiveUtils.jl', 'stdlib/Libdl/test/runtests.jl', 'test/cmdlineargs.jl', 'test/compiler/codegen.jl', 'test/misc.jl']",Lack of a base helper function `isdebugbuild` is causing inconsistencies and increased complexity in debugging builds.
94c3a153c84b4023e7c36556d3971bd165ebe81b,1663219451,"Improve nothrow analysis of :new with missing sparam (#46754)

Similar to #46693, but for :new, rather than getfield.
Unfortunately, this is somewhat limited as we don't really
have the ability to encode type equality constraints in the
lattice. In particular, it would be nice to analyze:

```
struct Foo{T}
    x::T
    Foo(x::T) where {T} = new{T}(x)
end
```

and be able to prove this nothrow. If it's really
important, we could probably pattern match it, but
for the moment, this is not easy to do. Nevertheless,
we can do something about the similar, but simpler pattern

```
struct Foo{T}
    x
    Foo(x::T) where {T} = new{T}(x)
end
```

which is what this PR does.","['base/compiler/optimize.jl', 'test/compiler/effects.jl']","Nothrow analysis of `:new` with missing static parameters is inadequate, limiting the ability to encode type equality constraints. Difficulties arise particularly when trying to prove array structures nothrow."
95239726572a5044eecadd4f9c23e6844ec1a1c8,1460445385,"Fix falses(A) and trues(A)

Make falses(A::BitArray) and trues(A::BitArray) not change their
arguments by implementing falses(A::AbstractArray) and
trues(A::AbstractArray) and replacing the completely generic case with
more specific ones for ::Dims and ::Interger... arguments. Update
documentation accordingly and move it inline while at it.
","['base/bitarray.jl', 'base/docs/helpdb/Base.jl', 'test/bitarray.jl']","The current implementation of falses(A::BitArray) and trues(A::BitArray) alters the original array, and lacks adequate specificity for ::Dims and ::Integer type arguments."
96be27c731803c5253d30dfc716f5b0064bb947a,1572626677,"Test: apply no-specialize to all of the code

This code (esp. the constructors), may see lots of different types (expressions and results),
but it is not performance-sensative code.
",['stdlib/Test/src/Test.jl'],Code constructors exhibiting high type-variance leading to performance concerns.
96ce5ba22122280b67991849acdb17b36603224f,1541891518,"Faster findall for bitarrays (#29888)

* Faster findall for bitarrays

* Add a few tests for findall for bitarrays

* Code review updates for bitarray findall (#29888)
","['base/bitarray.jl', 'test/bitarray.jl']","Findall function performs inefficiently when used with bitarrays, causing slower search times."
97719d7ea26568522e3d65456445f470b1947270,1552577414,"doc: Improve searchsorted{,first,last} examples in documentation (#31340)

Use the same inputs for all three functions, and cover various cases, to help
the reader grasp how these functions work and relate to each other.

Also remove the examples using the `rev` option, which did not really make
sense, as the input was not reversed, so these really were examples on ""what
happens if the input is not sorted"", which does not really help much (if at
all, an explanation in the text would be better).",['base/sort.jl'],"The current examples in the documentation for the functions searchsorted, searchsortedfirst, and searchsortedlast are confusing and inconsistent, making it difficult for users to understand how these functions work and relate to each other. Additionally, the use of 'rev' option in the examples is not illustrative and misleading."
98c7a06f1a90cd7ee17d280ccb0d871c497aa025,1503536360,"Fix LU factorization in-place operations (#22774)

* Add tests for in-place operations of A_ldiv_B!(y, LU, x) for LU factorizations

* Do Ax_ldiv_B! for LU factorizations in-place

* Remove incorrect condition in LU test. The transpose should be tested for complex numbers, and might be skipped for real numbers; not the other way around. For clarity just test both unconditionally.

* Get rid of allocations, apply the (inverse) permutation in-place
","['base/linalg/lu.jl', 'test/linalg/lu.jl']",In-place operations for LU factorizations are allocating unnecessary memory and the condition in LU test for transpose is incorrect.
98fdf7504a50ea67b816d7e9de41a1fd2874ba5b,1607566456,"Add test for WeakKeyDict soundness (#38802)

The underlying issues was addressed with the change in WeakRef
semantics in #38180. However, we still want the test.
Closes #38727",['test/dict.jl'],WeakKeyDict potentially has underlying instability and soundness issues that require testing to identify and debug.
9c4286c6f952bc159ac31dc99362b0f6195709ed,1579386261,"Upgrade BB triplet naming from `-gccX` tags to `-libgfortranX` tags.

This will require us to change our LLVM and OpenBLAS binaries, as they
are the only libgfortran-specific libraries that we ship with base Julia.
","['contrib/normalize_triplet.py', 'contrib/refresh_bb_tarballs.sh', 'deps/tools/bb-install.mk']","Julia's LLVM and OpenBLAS binaries are specific to libgfortran, but still use outdated `-gccX` tags instead of the more correct `-libgfortranX` tags."
9df58a2d6f8a6ecf23d251717fc763da01ff14de,1502293814,"fix possible missing gc-rootedness in REPL test (#23185)

Previously, we might see the gc finalize the REPL object,
and thus the STDOUT stream reader, too early.
This would leave the STDOUT stream writer with a broken pipe,
resulting in EPIPE errors during the test.

Issue was observed during a Travis CI run for a PR,
and has not been reproduced locally to confirm.

Also took this opportunity to update a few of the constructs
used in the REPL test to more modern Julia APIs.","['base/repl/REPL.jl', 'test/repl.jl']","The gc finalizes the REPL object prematurely during testing, breaking the STDOUT stream pipe and causing EPIPE errors. This issue mainly visible during Travis CI runs."
a252a507852fbf2f7456356ac07388475dd97b29,1465590505,"correct type of boxed closure variables to ""Box""

this caused a significant performance issue for the json kernel
since loads of `box.content` had to go through jl_f_getfield

ref #16128
",['src/julia-syntax.scm'],Incorrect type assignment to boxed closure variables is causing a significant performance issue in the json kernel due to high frequency access via jl_f_getfield.
a44c5c74e8872366731b845761ade4dac217df71,1528738606,"Profile: eagerly drop some cache memory

We only need these `builder` fields during construction
(as a performance cache). As soon as that's done, we can drop them to
recover the memory (and it makes dump output on this tree nicer).
",['stdlib/Profile/src/Profile.jl'],"`Builder` fields in profile construction utilize excessive cache memory beyond their usage period, impacting memory optimization."
a60b328bc9175da749383232ea9662ec68bb7242,1598299909,"build: drop explicit support for pre-Mavericks OS in the default binaries (#37121)

Hypothetically still supported in the build system back to 10.6 or so,
though I doubt it has been tested in a long time on such a system.

This lets us avoid needing to specify the libc++ explicitly, which makes
the build a bit simpler, and can help with building `clang` in our
`deps` folder (which may try to to build support libraries for foreign
targets, and get confused by these extra flags).","['Make.inc', 'deps/llvm.mk']","Pre-Mavericks OS explicit support in default builds complicates the build process, potentially causing issues when building `clang` due to extra flags."
a6f1e96feae1e37365543b9f5de378d79a24ddd2,1494183610,"Use A'A instead of [0 A;A' 0] in svds. The former can be much faster. The latter (#21701)

is only relevant when computing the small values and we don't support that.

This also fixes #16608.","['base/linalg/arnoldi.jl', 'base/linalg/arpack.jl', 'base/linalg/generic.jl', 'test/linalg/arnoldi.jl']",Using [0 A;A' 0] in svds is causing performance issues and doesn't correctly compute small values.
a723eef9ebf40895c190d5332f233810f6d8fc36,1465501572,"Use compact printing for Nullable

Print the wrapped value compactly, as inside other containers,
since the type information is redundant with the type parameter.
Also print the type with :multiline=>false.
","['base/nullable.jl', 'base/show.jl', 'test/nullable.jl']","The current printing mechanism for Nullable is redundant and verbose, displaying unnecessary type information and not aligning with the compact printing style used for other containers."
aaa77ae541c507634f2d8aca8aa490db354d7693,1515445761,"fix count argument of replace! (#25427)

`replace!` had one stack-overflow problem reported in #25384.
Its fix #25386 made a method-overwrite, tentatively fixed in #25422.
But `replace!` also didn't handle non-Int count arguments as
expected (because there is no dispatch on keyword arguments).
This fixes the root problem and adds tests for non-Int count.","['base/set.jl', 'test/sets.jl']","`replace!` function is not handling non-Integer count arguments as expected, likely due to absence of dispatch on keyword arguments."
b0e9e4b1abaf0a325bc277d35a8e3c74d2e83cae,1465766010,"Replace '\\' with '/' for Windows filenames in Base.url

Backslashes aren't valid urls, and this happens to also fix the outside-of-base
code below that uses libgit2 since `LibGit2.path` always uses forward slashes
(behavior inherited from the underlying `git_repository_path` function)

Temporary directories used by tests are inside a symlink on mac,
so use realpath in startswith check
",['base/methodshow.jl'],Backslashes in Windows filenames prevent correct URL formation and cause issues with temporary directories in tests on Mac due to symlink usage.
bb2f3fd5bf4aa53fa09d26ba5ebc09a86531df4d,1654804380,"signals,unix: fix race condition when profile fails to register (#45560)

Observed to cause a hang in the rare instance this case is reached.",['src/signals-unix.c'],A race condition leads to a hang in cases when Unix signal profiling fails to register.
c0d01c90756569661f717152055ec1c5fc555ada,1492179154,"Fix building of embedding example for out of tree build

dont set prefix in examples/Makefile

install libexecdir on windows too

run make install on appveyor

use installed julia exe to run tests on appveyor
","['Make.inc', 'contrib/windows/msys_build.sh']","Out-of-tree builds fail when building embedding example, with the issue affecting different platforms including Windows."
c974bc65f964cf838f1b6764dfc10e5f9545e1ed,1590699630,"no longer color the exception provided error message as red (#36024)

this doesnt compose well with exceptions trying to provide colors in
their error messages",['base/errorshow.jl'],Colored error messages provided by exceptions are not displaying properly due to overlapping color formatting.
ca526bccde86390143cf2715755d0cded94c1982,1611939305,"Char: optimize arithmetic and number conversions

This may not be obvious, but the actual improvement is entirely due to
defining `UInt32_cold` (and thus inlining of the hot path), and not at
all related to the other changes (which do however simplify the
generated code).

Fixes #28671
",['base/char.jl'],Inefficient arithmetic and number conversions in Char module causing performance issues.
d5ad19aa80717d3180618b87a26643158cf073c8,1481230789,"Add macro to simplify libgit2 type constructor definitions

This adds a macro that automatically defines a keyword argument only constructor for a type declaration.
",['base/libgit2/types.jl'],"Type constructor definitions in libgit2 are currently manual and repetitive, necessitating a solution for automatic keyword argument constructor creation."
d6316878b638093f46ad666178fedba8e9ff1063,1500144815,"Eliminating allocation of ccall root in simple cases

Also fix and test an invalid `unsafe_convert` definition in Base.
The result of `pointer_from_objref` on isbits types is never valid to use
across safepoint.
","['base/inference.jl', 'base/refpointer.jl', 'test/ccall.jl', 'test/codegen.jl']","Allocation of ccall root in simple cases leads to unnecessary memory waste. Improper `unsafe_convert` definition in Base, using result of `pointer_from_objref` on isbits types, causes invalid usages across safepoints."
d778a3d4baa17a6a9063aba06ec84510dcc3412a,1594692456,"Move `instance` initialization into jl_uninitialized_datatype

Otherwise it's illegal to hold onto this object without having
set ->instance, which is just asking for crashes. Fixes #36649.
","['src/datatype.c', 'src/dump.c', 'src/jltypes.c']",Holding onto an object without setting ->instance in jl_uninitialized_datatype is illegal and leads to crashes.
dc8d88559c8293dd6450ef6b1be0b68677750054,1583273058,"inference: restore precision lost due to previous bugfix

Since Tuple is widened slowly, we can end up at Any faster than we want
to. Before jumping to Any, first try a very simple Tuple as the Union
element and see if that reduces the overall complexity sufficiently.
This isn't a correctness change, but it should improve the transitive
stability of the tmerge algorithm.
","['base/compiler/typelimits.jl', 'test/compiler/inference.jl']","Tuple widening in inference algorithm is too rapid, leading to premature arrival at Any, which may cause loss of precision and affect the overall complexity and transitive stability of the tmerge algorithm."
e2377f18072da0ff83ba08ba0d6558dd7a4afb74,1629873387,"Various inferrability improvements (#41917)

- two functions affected by `Core.Box` (#15276) were ameliorated
- type info added to the `stack` field of `ExceptionStack`
- avoid unknown dispatch from de-specialized code

Co-authored-by: Jameson Nash <vtjnash@gmail.com>
","['base/arrayshow.jl', 'base/error.jl', 'base/range.jl', 'contrib/generate_precompile.jl', 'stdlib/Logging/src/ConsoleLogger.jl', 'stdlib/REPL/src/docview.jl', 'stdlib/Test/src/Test.jl']",Two functions exhibiting issues due to 'Core.Box'; lack of type info for 'stack' field of 'ExceptionStack' leading to undesired dispatching from de-specialized code.
e55ee1daaa4d2ae8c8d6092ea6917f1b0ffcb2d4,1610382712,"Fix a type-instability in sparse `findmin`/`findmax`

The helper function `_findr` would usually return a `Vector` as first
argument, but would use a `SparseMatrixCSC` in the empty case. Fix by
always using `Vector`.
","['stdlib/SparseArrays/src/sparsematrix.jl', 'stdlib/SparseArrays/test/sparse.jl']","The helper function `_findr` in sparse `findmin`/`findmax` shows type-instability, returning either a `Vector` or a `SparseMatrixCSC` depending on the case."
e6eb0a11d440c516b45d26409fb12db99365f4dc,1506859024,"Removed default descriptions from multidimensional.jl (#23542)

* Removed default descriptions from multidimensional.jl

Removed redundant descriptions along the lines of 

```markdown
cumsum!(B, A, dim::Integer=1)

  Cumulative sum of A along a dimension, storing the result in B. **The dimension defaults to 1.** See also cumsum.
```

* Line wrap

* whitespace
",['base/multidimensional.jl'],Redundant default descriptions in multidimensional.jl causing clutter and unnecessary information in documentation.
ea0c6e9e769df3722127c3a67a8e4894cf2a14ce,1553554206,"[doc] dlopen docstring (#31475)

Documentation for `dlopen_e`: looks like copy-paste error from https://github.com/JuliaLang/julia/commit/d9d2b9cf808aab8c3a90e95e03ffc32761ce5316#diff-4f669dd4cc416a82508956a377e6a7c9

Correct:
`dlopen_e` deprecated in favor of `dlopen(...throw_error=false)`;
`dlsym_e` deprecated in favor of `dlsym(...throw_error=false)`;

Current documentation lists `dlopen_e` deprecated in favor of `dlsym`.",['stdlib/Libdl/src/Libdl.jl'],"The existing documentation incorrectly lists `dlopen_e` as deprecated in favor of `dlsym`, instead of `dlopen(...throw_error=false)`."
ebf6c64a6ad566a42e4c8b5408f59e46b030e5f4,1457722224,"fix debug info in compiler

simplifies the handling of variables to always emit stack slots, and assume mem2reg will clean them up
","['src/cgutils.cpp', 'src/codegen.cpp', 'src/llvm-gcroot.cpp']","Compiler's debug info handling complex due to variables not always emitting stack slots, leading to inefficient cleanup with mem2reg."
edcd65d25393558cbba0830af539f8a001e7560f,1473252824,"Add @__DIR__ and document use in pkgs. Fix #12120

Add test.

Add docs.

Move docstrings for @__FILE__ and @__DIR__ inline.

Missing paren.

Rephrase example.
","['base/docs/helpdb/Base.jl', 'base/exports.jl', 'base/loading.jl', 'test/loading.jl']","The package is missing the `@__DIR__` macro and documentation, causing issues #12120."
ef9361e6e34ce3689f57a691af0f7958a7234d72,1553025675,"horner macro: add line number info [NFC]

Instead of nesting the user code inside the macro, structure it to look
very nearly just like inlining would, right down to modeling the inability
for lowering to handle the value in return position
(by adding a dummy variable `r`), and make `t` local.

Before:
│   @ REPL[2]:14 within `sin_kernel_f64'
│         t@_6 = y²
│   %5  = t@_6
│   %6  = Base.Math.muladd(t@_6, Main.DS4, Main.DS3)
│   %7  = Base.Math.muladd(%5, %6, Main.DS2)

After:
│   @ REPL[2]:14 within `sin_kernel_f64'
│         t@_3 = y²
│  ┌ @ math.jl:101 within `macro expansion'
│  │ %5  = t@_3
│  │ %6  = Base.Math.muladd(t@_3, Main.DS4, Main.DS3)
│  │       r@_4 = Base.Math.muladd(%5, %6, Main.DS2)
│  └
│   %8  = r@_4
",['base/math.jl'],"The horner macro lacks line number information, making user code nested inside it difficult to relate to with inline structures, thereby complicating the lowering process for returned values."
f0994c27f22d45153ae3ab685bb736aa8fdb5ab9,1517594591,"Rename IndexValue -> Pairs, print it better (#25764)

As discussed in #25711

Before:
```
julia> f(;kwargs...) = kwargs
f (generic function with 1 method)

julia> f(;a = 1, b = 2)
Base.Iterators.IndexValue{Symbol,Int64,Tuple{Symbol,Symbol},NamedTuple{(:a, :b),Tuple{Int64,Int64}}} with 2 entries:
  :a => 1
  :b => 2
```

After:
```
julia> f(;a = 1, b = 2)
pairs((a = 1, b = 2)) with 2 entries:
  :a => 1
  :b => 2
```","['base/abstractdict.jl', 'base/iterators.jl', 'base/multidimensional.jl', 'base/show.jl', 'test/iterators.jl']",The IndexValue printing output is not user-friendly and the name of the function doesn't accurately reflect its behavior.
f879cd159da8cb6110028702b787e6e7f816ca12,1613950872,"codegen: define return_roots in normalized form (#39745)

LLVM will switch to this form, so it is preferable to start that way.

Refs Matcha in #39641","['src/codegen.cpp', 'src/llvm-late-gc-lowering.cpp']","The current form of 'return_roots' in codegen is not normalized, which may lead to issues when LLVM makes a transition to normalized form.
"
f90eab3c4a00193b6c4fb1d0d8994afbdb540457,1470290976,"Deoptimize TLS access

* Apparently `ifunc` is not supported by gcc 5 on ARM
* Try even harder to workaround LLVM bug when dealing with returntwice function
","['src/llvm-ptls.cpp', 'src/threading.c']","TLS access becomes suboptimal on ARM when using gcc 5 due to lack of `ifunc` support, and there's an issue handling returntwice function in LLVM."
fb81c34af8cda41c1f4294182ce817135e064b33,1496350466,"Fix broadcast_indices (#22130)

This fixes a regression introduced in 4f1b479d. broadcast_indices() needs to
be overloaded by packages for custom types, so it cannot be hidden under
_broadcast_indices(). Also, ::Type is incorrect since the method only applies
to scalars.

Make the tests more complex to be closer to actual implementations in packages
so that regressions like this will be noticed in the future.","['base/broadcast.jl', 'base/sparse/higherorderfns.jl', 'test/broadcast.jl']","Regression in broadcast_indices() hides it under _broadcast_indices() and incorrectly applies only to scalars, hindering overloading by packages for custom types."
fdf1682056113169b70fca78cd53f18a670ab291,1525384572,"Fix Vector'Diagonal (ans Transpose as well) to avoid infinite recursion. (#26924)

Also add optimized methods for x'D*y to avoid allocating temporary vector","['stdlib/LinearAlgebra/src/diagonal.jl', 'stdlib/LinearAlgebra/src/matmul.jl', 'stdlib/LinearAlgebra/test/diagonal.jl']","Current implementation of Vector'Diagonal and Transpose triggers infinite recursion. Additionally, inefficient temporary vector allocation occurs in methods for x'D*y."
ff174120aad91e1a838b5cf99bd2b97c14aab2f5,1594146559,"fix broadcasted assignment for scalar cartesian indexing (#35926)

* fix broadcast for scalar cartesian indexing

When broadcasting left-hand side indexing is turned into a dotview.
For scalar indexing this should be equivalent to a `getindex`, but up
until this patch the `CartesianIndex` would not be treated as such.

This fixes e.g. broadcasting like `a[CartesianIndex(1)] .= 1` for a nested
array `a`.

* Also extend to `AbstractCartesianIndex`es

Co-authored-by: Matt Bauman <mbauman@gmail.com>","['base/views.jl', 'test/broadcast.jl']","Broadcasting with scalar Cartesian indexing in a nested array is not treated as `getindex`, causing anomalies in operations like `a[CartesianIndex(1)] .= 1`."
